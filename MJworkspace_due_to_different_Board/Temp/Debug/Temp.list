
Temp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000458c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  0800472c  0800472c  0001472c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004828  08004828  000200d4  2**0
                  CONTENTS
  4 .ARM          00000008  08004828  08004828  00014828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004830  08004830  000200d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004830  08004830  00014830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004834  08004834  00014834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d4  20000000  08004838  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000420c  200000d4  0800490c  000200d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200042e0  0800490c  000242e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
 13 .debug_info   000131dd  00000000  00000000  00020147  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002eb5  00000000  00000000  00033324  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001278  00000000  00000000  000361e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e50  00000000  00000000  00037458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018638  00000000  00000000  000382a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014c89  00000000  00000000  000508e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00097876  00000000  00000000  00065569  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004f78  00000000  00000000  000fcde0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  00101d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000d4 	.word	0x200000d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004714 	.word	0x08004714

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000d8 	.word	0x200000d8
 80001dc:	08004714 	.word	0x08004714

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004dc:	b480      	push	{r7}
 80004de:	b085      	sub	sp, #20
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	60f8      	str	r0, [r7, #12]
 80004e4:	60b9      	str	r1, [r7, #8]
 80004e6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	4a07      	ldr	r2, [pc, #28]	; (8000508 <vApplicationGetIdleTaskMemory+0x2c>)
 80004ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004ee:	68bb      	ldr	r3, [r7, #8]
 80004f0:	4a06      	ldr	r2, [pc, #24]	; (800050c <vApplicationGetIdleTaskMemory+0x30>)
 80004f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	2280      	movs	r2, #128	; 0x80
 80004f8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004fa:	bf00      	nop
 80004fc:	3714      	adds	r7, #20
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	200000f0 	.word	0x200000f0
 800050c:	20000190 	.word	0x20000190

08000510 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
 8000516:	4603      	mov	r3, r0
 8000518:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 800051a:	4a38      	ldr	r2, [pc, #224]	; (80005fc <HD44780_Init+0xec>)
 800051c:	79fb      	ldrb	r3, [r7, #7]
 800051e:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8000520:	4b37      	ldr	r3, [pc, #220]	; (8000600 <HD44780_Init+0xf0>)
 8000522:	2208      	movs	r2, #8
 8000524:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000526:	4b37      	ldr	r3, [pc, #220]	; (8000604 <HD44780_Init+0xf4>)
 8000528:	2200      	movs	r2, #0
 800052a:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 800052c:	4b33      	ldr	r3, [pc, #204]	; (80005fc <HD44780_Init+0xec>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	2b01      	cmp	r3, #1
 8000532:	d907      	bls.n	8000544 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000534:	4b33      	ldr	r3, [pc, #204]	; (8000604 <HD44780_Init+0xf4>)
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	f043 0308 	orr.w	r3, r3, #8
 800053c:	b2da      	uxtb	r2, r3
 800053e:	4b31      	ldr	r3, [pc, #196]	; (8000604 <HD44780_Init+0xf4>)
 8000540:	701a      	strb	r2, [r3, #0]
 8000542:	e006      	b.n	8000552 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000544:	4b2f      	ldr	r3, [pc, #188]	; (8000604 <HD44780_Init+0xf4>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	f043 0304 	orr.w	r3, r3, #4
 800054c:	b2da      	uxtb	r2, r3
 800054e:	4b2d      	ldr	r3, [pc, #180]	; (8000604 <HD44780_Init+0xf4>)
 8000550:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8000552:	f000 f985 	bl	8000860 <DelayInit>
  HAL_Delay(50);
 8000556:	2032      	movs	r0, #50	; 0x32
 8000558:	f000 fef2 	bl	8001340 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 800055c:	4b28      	ldr	r3, [pc, #160]	; (8000600 <HD44780_Init+0xf0>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	4618      	mov	r0, r3
 8000562:	f000 f943 	bl	80007ec <ExpanderWrite>
  HAL_Delay(1000);
 8000566:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800056a:	f000 fee9 	bl	8001340 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 800056e:	2030      	movs	r0, #48	; 0x30
 8000570:	f000 f92b 	bl	80007ca <Write4Bits>
  DelayUS(4500);
 8000574:	f241 1094 	movw	r0, #4500	; 0x1194
 8000578:	f000 f99c 	bl	80008b4 <DelayUS>

  Write4Bits(0x03 << 4);
 800057c:	2030      	movs	r0, #48	; 0x30
 800057e:	f000 f924 	bl	80007ca <Write4Bits>
  DelayUS(4500);
 8000582:	f241 1094 	movw	r0, #4500	; 0x1194
 8000586:	f000 f995 	bl	80008b4 <DelayUS>

  Write4Bits(0x03 << 4);
 800058a:	2030      	movs	r0, #48	; 0x30
 800058c:	f000 f91d 	bl	80007ca <Write4Bits>
  DelayUS(4500);
 8000590:	f241 1094 	movw	r0, #4500	; 0x1194
 8000594:	f000 f98e 	bl	80008b4 <DelayUS>

  Write4Bits(0x02 << 4);
 8000598:	2020      	movs	r0, #32
 800059a:	f000 f916 	bl	80007ca <Write4Bits>
  DelayUS(100);
 800059e:	2064      	movs	r0, #100	; 0x64
 80005a0:	f000 f988 	bl	80008b4 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 80005a4:	4b17      	ldr	r3, [pc, #92]	; (8000604 <HD44780_Init+0xf4>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	f043 0320 	orr.w	r3, r3, #32
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	4618      	mov	r0, r3
 80005b0:	f000 f8ce 	bl	8000750 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80005b4:	4b14      	ldr	r3, [pc, #80]	; (8000608 <HD44780_Init+0xf8>)
 80005b6:	2204      	movs	r2, #4
 80005b8:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 80005ba:	f000 f875 	bl	80006a8 <HD44780_Display>
  HD44780_Clear();
 80005be:	f000 f82b 	bl	8000618 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80005c2:	4b12      	ldr	r3, [pc, #72]	; (800060c <HD44780_Init+0xfc>)
 80005c4:	2202      	movs	r2, #2
 80005c6:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 80005c8:	4b10      	ldr	r3, [pc, #64]	; (800060c <HD44780_Init+0xfc>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	f043 0304 	orr.w	r3, r3, #4
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	4618      	mov	r0, r3
 80005d4:	f000 f8bc 	bl	8000750 <SendCommand>
  DelayUS(4500);
 80005d8:	f241 1094 	movw	r0, #4500	; 0x1194
 80005dc:	f000 f96a 	bl	80008b4 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 80005e0:	490b      	ldr	r1, [pc, #44]	; (8000610 <HD44780_Init+0x100>)
 80005e2:	2000      	movs	r0, #0
 80005e4:	f000 f876 	bl	80006d4 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 80005e8:	490a      	ldr	r1, [pc, #40]	; (8000614 <HD44780_Init+0x104>)
 80005ea:	2001      	movs	r0, #1
 80005ec:	f000 f872 	bl	80006d4 <HD44780_CreateSpecialChar>

  HD44780_Home();
 80005f0:	f000 f81d 	bl	800062e <HD44780_Home>
}
 80005f4:	bf00      	nop
 80005f6:	3708      	adds	r7, #8
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	20000393 	.word	0x20000393
 8000600:	20000394 	.word	0x20000394
 8000604:	20000390 	.word	0x20000390
 8000608:	20000391 	.word	0x20000391
 800060c:	20000392 	.word	0x20000392
 8000610:	20000000 	.word	0x20000000
 8000614:	20000008 	.word	0x20000008

08000618 <HD44780_Clear>:

void HD44780_Clear()
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 800061c:	2001      	movs	r0, #1
 800061e:	f000 f897 	bl	8000750 <SendCommand>
  DelayUS(2000);
 8000622:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000626:	f000 f945 	bl	80008b4 <DelayUS>
}
 800062a:	bf00      	nop
 800062c:	bd80      	pop	{r7, pc}

0800062e <HD44780_Home>:

void HD44780_Home()
{
 800062e:	b580      	push	{r7, lr}
 8000630:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8000632:	2002      	movs	r0, #2
 8000634:	f000 f88c 	bl	8000750 <SendCommand>
  DelayUS(2000);
 8000638:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800063c:	f000 f93a 	bl	80008b4 <DelayUS>
}
 8000640:	bf00      	nop
 8000642:	bd80      	pop	{r7, pc}

08000644 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8000644:	b590      	push	{r4, r7, lr}
 8000646:	b087      	sub	sp, #28
 8000648:	af00      	add	r7, sp, #0
 800064a:	4603      	mov	r3, r0
 800064c:	460a      	mov	r2, r1
 800064e:	71fb      	strb	r3, [r7, #7]
 8000650:	4613      	mov	r3, r2
 8000652:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000654:	4b12      	ldr	r3, [pc, #72]	; (80006a0 <HD44780_SetCursor+0x5c>)
 8000656:	f107 0408 	add.w	r4, r7, #8
 800065a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800065c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8000660:	4b10      	ldr	r3, [pc, #64]	; (80006a4 <HD44780_SetCursor+0x60>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	79ba      	ldrb	r2, [r7, #6]
 8000666:	429a      	cmp	r2, r3
 8000668:	d303      	bcc.n	8000672 <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 800066a:	4b0e      	ldr	r3, [pc, #56]	; (80006a4 <HD44780_SetCursor+0x60>)
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	3b01      	subs	r3, #1
 8000670:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8000672:	79bb      	ldrb	r3, [r7, #6]
 8000674:	009b      	lsls	r3, r3, #2
 8000676:	3318      	adds	r3, #24
 8000678:	443b      	add	r3, r7
 800067a:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800067e:	b2da      	uxtb	r2, r3
 8000680:	79fb      	ldrb	r3, [r7, #7]
 8000682:	4413      	add	r3, r2
 8000684:	b2db      	uxtb	r3, r3
 8000686:	b25b      	sxtb	r3, r3
 8000688:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800068c:	b25b      	sxtb	r3, r3
 800068e:	b2db      	uxtb	r3, r3
 8000690:	4618      	mov	r0, r3
 8000692:	f000 f85d 	bl	8000750 <SendCommand>
}
 8000696:	bf00      	nop
 8000698:	371c      	adds	r7, #28
 800069a:	46bd      	mov	sp, r7
 800069c:	bd90      	pop	{r4, r7, pc}
 800069e:	bf00      	nop
 80006a0:	0800472c 	.word	0x0800472c
 80006a4:	20000393 	.word	0x20000393

080006a8 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 80006ac:	4b08      	ldr	r3, [pc, #32]	; (80006d0 <HD44780_Display+0x28>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	f043 0304 	orr.w	r3, r3, #4
 80006b4:	b2da      	uxtb	r2, r3
 80006b6:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <HD44780_Display+0x28>)
 80006b8:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80006ba:	4b05      	ldr	r3, [pc, #20]	; (80006d0 <HD44780_Display+0x28>)
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	f043 0308 	orr.w	r3, r3, #8
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	4618      	mov	r0, r3
 80006c6:	f000 f843 	bl	8000750 <SendCommand>
}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	20000391 	.word	0x20000391

080006d4 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b084      	sub	sp, #16
 80006d8:	af00      	add	r7, sp, #0
 80006da:	4603      	mov	r3, r0
 80006dc:	6039      	str	r1, [r7, #0]
 80006de:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 80006e0:	79fb      	ldrb	r3, [r7, #7]
 80006e2:	f003 0307 	and.w	r3, r3, #7
 80006e6:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 80006e8:	79fb      	ldrb	r3, [r7, #7]
 80006ea:	00db      	lsls	r3, r3, #3
 80006ec:	b25b      	sxtb	r3, r3
 80006ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006f2:	b25b      	sxtb	r3, r3
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	4618      	mov	r0, r3
 80006f8:	f000 f82a 	bl	8000750 <SendCommand>
  for (int i=0; i<8; i++)
 80006fc:	2300      	movs	r3, #0
 80006fe:	60fb      	str	r3, [r7, #12]
 8000700:	e009      	b.n	8000716 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	683a      	ldr	r2, [r7, #0]
 8000706:	4413      	add	r3, r2
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	4618      	mov	r0, r3
 800070c:	f000 f82e 	bl	800076c <SendChar>
  for (int i=0; i<8; i++)
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	3301      	adds	r3, #1
 8000714:	60fb      	str	r3, [r7, #12]
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	2b07      	cmp	r3, #7
 800071a:	ddf2      	ble.n	8000702 <HD44780_CreateSpecialChar+0x2e>
  }
}
 800071c:	bf00      	nop
 800071e:	bf00      	nop
 8000720:	3710      	adds	r7, #16
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}

08000726 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8000726:	b580      	push	{r7, lr}
 8000728:	b082      	sub	sp, #8
 800072a:	af00      	add	r7, sp, #0
 800072c:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 800072e:	e006      	b.n	800073e <HD44780_PrintStr+0x18>
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	1c5a      	adds	r2, r3, #1
 8000734:	607a      	str	r2, [r7, #4]
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	4618      	mov	r0, r3
 800073a:	f000 f817 	bl	800076c <SendChar>
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d1f4      	bne.n	8000730 <HD44780_PrintStr+0xa>
}
 8000746:	bf00      	nop
 8000748:	bf00      	nop
 800074a:	3708      	adds	r7, #8
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}

08000750 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 800075a:	79fb      	ldrb	r3, [r7, #7]
 800075c:	2100      	movs	r1, #0
 800075e:	4618      	mov	r0, r3
 8000760:	f000 f812 	bl	8000788 <Send>
}
 8000764:	bf00      	nop
 8000766:	3708      	adds	r7, #8
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}

0800076c <SendChar>:

static void SendChar(uint8_t ch)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	4603      	mov	r3, r0
 8000774:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	2101      	movs	r1, #1
 800077a:	4618      	mov	r0, r3
 800077c:	f000 f804 	bl	8000788 <Send>
}
 8000780:	bf00      	nop
 8000782:	3708      	adds	r7, #8
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}

08000788 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
 800078e:	4603      	mov	r3, r0
 8000790:	460a      	mov	r2, r1
 8000792:	71fb      	strb	r3, [r7, #7]
 8000794:	4613      	mov	r3, r2
 8000796:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8000798:	79fb      	ldrb	r3, [r7, #7]
 800079a:	f023 030f 	bic.w	r3, r3, #15
 800079e:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 80007a0:	79fb      	ldrb	r3, [r7, #7]
 80007a2:	011b      	lsls	r3, r3, #4
 80007a4:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 80007a6:	7bfa      	ldrb	r2, [r7, #15]
 80007a8:	79bb      	ldrb	r3, [r7, #6]
 80007aa:	4313      	orrs	r3, r2
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	4618      	mov	r0, r3
 80007b0:	f000 f80b 	bl	80007ca <Write4Bits>
  Write4Bits((lownib)|mode);
 80007b4:	7bba      	ldrb	r2, [r7, #14]
 80007b6:	79bb      	ldrb	r3, [r7, #6]
 80007b8:	4313      	orrs	r3, r2
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	4618      	mov	r0, r3
 80007be:	f000 f804 	bl	80007ca <Write4Bits>
}
 80007c2:	bf00      	nop
 80007c4:	3710      	adds	r7, #16
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}

080007ca <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 80007ca:	b580      	push	{r7, lr}
 80007cc:	b082      	sub	sp, #8
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	4603      	mov	r3, r0
 80007d2:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 80007d4:	79fb      	ldrb	r3, [r7, #7]
 80007d6:	4618      	mov	r0, r3
 80007d8:	f000 f808 	bl	80007ec <ExpanderWrite>
  PulseEnable(value);
 80007dc:	79fb      	ldrb	r3, [r7, #7]
 80007de:	4618      	mov	r0, r3
 80007e0:	f000 f820 	bl	8000824 <PulseEnable>
}
 80007e4:	bf00      	nop
 80007e6:	3708      	adds	r7, #8
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}

080007ec <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b086      	sub	sp, #24
 80007f0:	af02      	add	r7, sp, #8
 80007f2:	4603      	mov	r3, r0
 80007f4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 80007f6:	4b09      	ldr	r3, [pc, #36]	; (800081c <ExpanderWrite+0x30>)
 80007f8:	781a      	ldrb	r2, [r3, #0]
 80007fa:	79fb      	ldrb	r3, [r7, #7]
 80007fc:	4313      	orrs	r3, r2
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8000802:	f107 020f 	add.w	r2, r7, #15
 8000806:	230a      	movs	r3, #10
 8000808:	9300      	str	r3, [sp, #0]
 800080a:	2301      	movs	r3, #1
 800080c:	214e      	movs	r1, #78	; 0x4e
 800080e:	4804      	ldr	r0, [pc, #16]	; (8000820 <ExpanderWrite+0x34>)
 8000810:	f001 f996 	bl	8001b40 <HAL_I2C_Master_Transmit>
}
 8000814:	bf00      	nop
 8000816:	3710      	adds	r7, #16
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	20000394 	.word	0x20000394
 8000820:	20000398 	.word	0x20000398

08000824 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 800082e:	79fb      	ldrb	r3, [r7, #7]
 8000830:	f043 0304 	orr.w	r3, r3, #4
 8000834:	b2db      	uxtb	r3, r3
 8000836:	4618      	mov	r0, r3
 8000838:	f7ff ffd8 	bl	80007ec <ExpanderWrite>
  DelayUS(20);
 800083c:	2014      	movs	r0, #20
 800083e:	f000 f839 	bl	80008b4 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 8000842:	79fb      	ldrb	r3, [r7, #7]
 8000844:	f023 0304 	bic.w	r3, r3, #4
 8000848:	b2db      	uxtb	r3, r3
 800084a:	4618      	mov	r0, r3
 800084c:	f7ff ffce 	bl	80007ec <ExpanderWrite>
  DelayUS(20);
 8000850:	2014      	movs	r0, #20
 8000852:	f000 f82f 	bl	80008b4 <DelayUS>
}
 8000856:	bf00      	nop
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
	...

08000860 <DelayInit>:

static void DelayInit(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8000864:	4b11      	ldr	r3, [pc, #68]	; (80008ac <DelayInit+0x4c>)
 8000866:	68db      	ldr	r3, [r3, #12]
 8000868:	4a10      	ldr	r2, [pc, #64]	; (80008ac <DelayInit+0x4c>)
 800086a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800086e:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8000870:	4b0e      	ldr	r3, [pc, #56]	; (80008ac <DelayInit+0x4c>)
 8000872:	68db      	ldr	r3, [r3, #12]
 8000874:	4a0d      	ldr	r2, [pc, #52]	; (80008ac <DelayInit+0x4c>)
 8000876:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800087a:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800087c:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <DelayInit+0x50>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a0b      	ldr	r2, [pc, #44]	; (80008b0 <DelayInit+0x50>)
 8000882:	f023 0301 	bic.w	r3, r3, #1
 8000886:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000888:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <DelayInit+0x50>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a08      	ldr	r2, [pc, #32]	; (80008b0 <DelayInit+0x50>)
 800088e:	f043 0301 	orr.w	r3, r3, #1
 8000892:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8000894:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <DelayInit+0x50>)
 8000896:	2200      	movs	r2, #0
 8000898:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 800089a:	bf00      	nop
  __ASM volatile ("NOP");
 800089c:	bf00      	nop
  __ASM volatile ("NOP");
 800089e:	bf00      	nop
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	e000edf0 	.word	0xe000edf0
 80008b0:	e0001000 	.word	0xe0001000

080008b4 <DelayUS>:

static void DelayUS(uint32_t us) {
 80008b4:	b480      	push	{r7}
 80008b6:	b087      	sub	sp, #28
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 80008bc:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <DelayUS+0x44>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a0e      	ldr	r2, [pc, #56]	; (80008fc <DelayUS+0x48>)
 80008c2:	fba2 2303 	umull	r2, r3, r2, r3
 80008c6:	0c9a      	lsrs	r2, r3, #18
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	fb02 f303 	mul.w	r3, r2, r3
 80008ce:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 80008d0:	4b0b      	ldr	r3, [pc, #44]	; (8000900 <DelayUS+0x4c>)
 80008d2:	685b      	ldr	r3, [r3, #4]
 80008d4:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 80008d6:	4b0a      	ldr	r3, [pc, #40]	; (8000900 <DelayUS+0x4c>)
 80008d8:	685a      	ldr	r2, [r3, #4]
 80008da:	693b      	ldr	r3, [r7, #16]
 80008dc:	1ad3      	subs	r3, r2, r3
 80008de:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	697a      	ldr	r2, [r7, #20]
 80008e4:	429a      	cmp	r2, r3
 80008e6:	d8f6      	bhi.n	80008d6 <DelayUS+0x22>
}
 80008e8:	bf00      	nop
 80008ea:	bf00      	nop
 80008ec:	371c      	adds	r7, #28
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	20000074 	.word	0x20000074
 80008fc:	431bde83 	.word	0x431bde83
 8000900:	e0001000 	.word	0xe0001000

08000904 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000904:	b5b0      	push	{r4, r5, r7, lr}
 8000906:	b09c      	sub	sp, #112	; 0x70
 8000908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  SUB1.last = &SUB3;
 800090a:	4b37      	ldr	r3, [pc, #220]	; (80009e8 <main+0xe4>)
 800090c:	4a37      	ldr	r2, [pc, #220]	; (80009ec <main+0xe8>)
 800090e:	611a      	str	r2, [r3, #16]
  SUB1.next = &SUB2;
 8000910:	4b35      	ldr	r3, [pc, #212]	; (80009e8 <main+0xe4>)
 8000912:	4a37      	ldr	r2, [pc, #220]	; (80009f0 <main+0xec>)
 8000914:	60da      	str	r2, [r3, #12]
  SUB2.last = &SUB1;
 8000916:	4b36      	ldr	r3, [pc, #216]	; (80009f0 <main+0xec>)
 8000918:	4a33      	ldr	r2, [pc, #204]	; (80009e8 <main+0xe4>)
 800091a:	611a      	str	r2, [r3, #16]
  SUB2.next = &SUB3;
 800091c:	4b34      	ldr	r3, [pc, #208]	; (80009f0 <main+0xec>)
 800091e:	4a33      	ldr	r2, [pc, #204]	; (80009ec <main+0xe8>)
 8000920:	60da      	str	r2, [r3, #12]
  SUB3.last = &SUB2;
 8000922:	4b32      	ldr	r3, [pc, #200]	; (80009ec <main+0xe8>)
 8000924:	4a32      	ldr	r2, [pc, #200]	; (80009f0 <main+0xec>)
 8000926:	611a      	str	r2, [r3, #16]
  SUB3.next = &SUB1;
 8000928:	4b30      	ldr	r3, [pc, #192]	; (80009ec <main+0xe8>)
 800092a:	4a2f      	ldr	r2, [pc, #188]	; (80009e8 <main+0xe4>)
 800092c:	60da      	str	r2, [r3, #12]
  menu.currentMenu = &SUB1;
 800092e:	4b31      	ldr	r3, [pc, #196]	; (80009f4 <main+0xf0>)
 8000930:	4a2d      	ldr	r2, [pc, #180]	; (80009e8 <main+0xe4>)
 8000932:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000934:	f000 fcc2 	bl	80012bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000938:	f000 f86e 	bl	8000a18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800093c:	f000 f904 	bl	8000b48 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000940:	f000 f8d4 	bl	8000aec <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HD44780_Init(2);
 8000944:	2002      	movs	r0, #2
 8000946:	f7ff fde3 	bl	8000510 <HD44780_Init>
  defaultMenu();
 800094a:	f000 fadd 	bl	8000f08 <defaultMenu>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800094e:	4b2a      	ldr	r3, [pc, #168]	; (80009f8 <main+0xf4>)
 8000950:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000954:	461d      	mov	r5, r3
 8000956:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000958:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800095a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800095e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000962:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000966:	2100      	movs	r1, #0
 8000968:	4618      	mov	r0, r3
 800096a:	f002 fba0 	bl	80030ae <osThreadCreate>
 800096e:	4603      	mov	r3, r0
 8000970:	4a22      	ldr	r2, [pc, #136]	; (80009fc <main+0xf8>)
 8000972:	6013      	str	r3, [r2, #0]

  /* definition and creation of diodeDetector */
  osThreadDef(diodeDetector, diodeDetector_Init, osPriorityIdle, 0, 128);
 8000974:	4b22      	ldr	r3, [pc, #136]	; (8000a00 <main+0xfc>)
 8000976:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800097a:	461d      	mov	r5, r3
 800097c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800097e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000980:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000984:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  diodeDetectorHandle = osThreadCreate(osThread(diodeDetector), NULL);
 8000988:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800098c:	2100      	movs	r1, #0
 800098e:	4618      	mov	r0, r3
 8000990:	f002 fb8d 	bl	80030ae <osThreadCreate>
 8000994:	4603      	mov	r3, r0
 8000996:	4a1b      	ldr	r2, [pc, #108]	; (8000a04 <main+0x100>)
 8000998:	6013      	str	r3, [r2, #0]

  /* definition and creation of holeState */
  osThreadDef(holeState, holeState_Init, osPriorityNormal, 0, 128);
 800099a:	4b1b      	ldr	r3, [pc, #108]	; (8000a08 <main+0x104>)
 800099c:	f107 041c 	add.w	r4, r7, #28
 80009a0:	461d      	mov	r5, r3
 80009a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  holeStateHandle = osThreadCreate(osThread(holeState), NULL);
 80009ae:	f107 031c 	add.w	r3, r7, #28
 80009b2:	2100      	movs	r1, #0
 80009b4:	4618      	mov	r0, r3
 80009b6:	f002 fb7a 	bl	80030ae <osThreadCreate>
 80009ba:	4603      	mov	r3, r0
 80009bc:	4a13      	ldr	r2, [pc, #76]	; (8000a0c <main+0x108>)
 80009be:	6013      	str	r3, [r2, #0]

  /* definition and creation of displayMenu */
  osThreadDef(displayMenu, displayMenu_Init, osPriorityIdle, 0, 128);
 80009c0:	4b13      	ldr	r3, [pc, #76]	; (8000a10 <main+0x10c>)
 80009c2:	463c      	mov	r4, r7
 80009c4:	461d      	mov	r5, r3
 80009c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009ca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  displayMenuHandle = osThreadCreate(osThread(displayMenu), NULL);
 80009d2:	463b      	mov	r3, r7
 80009d4:	2100      	movs	r1, #0
 80009d6:	4618      	mov	r0, r3
 80009d8:	f002 fb69 	bl	80030ae <osThreadCreate>
 80009dc:	4603      	mov	r3, r0
 80009de:	4a0d      	ldr	r2, [pc, #52]	; (8000a14 <main+0x110>)
 80009e0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80009e2:	f002 fb5d 	bl	80030a0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009e6:	e7fe      	b.n	80009e6 <main+0xe2>
 80009e8:	20000010 	.word	0x20000010
 80009ec:	20000038 	.word	0x20000038
 80009f0:	20000024 	.word	0x20000024
 80009f4:	2000004c 	.word	0x2000004c
 80009f8:	08004748 	.word	0x08004748
 80009fc:	200003ec 	.word	0x200003ec
 8000a00:	08004774 	.word	0x08004774
 8000a04:	200003f0 	.word	0x200003f0
 8000a08:	0800479c 	.word	0x0800479c
 8000a0c:	200003f4 	.word	0x200003f4
 8000a10:	080047c4 	.word	0x080047c4
 8000a14:	200003f8 	.word	0x200003f8

08000a18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b094      	sub	sp, #80	; 0x50
 8000a1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a1e:	f107 0320 	add.w	r3, r7, #32
 8000a22:	2230      	movs	r2, #48	; 0x30
 8000a24:	2100      	movs	r1, #0
 8000a26:	4618      	mov	r0, r3
 8000a28:	f003 fd98 	bl	800455c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a2c:	f107 030c 	add.w	r3, r7, #12
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
 8000a36:	609a      	str	r2, [r3, #8]
 8000a38:	60da      	str	r2, [r3, #12]
 8000a3a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	60bb      	str	r3, [r7, #8]
 8000a40:	4b28      	ldr	r3, [pc, #160]	; (8000ae4 <SystemClock_Config+0xcc>)
 8000a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a44:	4a27      	ldr	r2, [pc, #156]	; (8000ae4 <SystemClock_Config+0xcc>)
 8000a46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a4a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a4c:	4b25      	ldr	r3, [pc, #148]	; (8000ae4 <SystemClock_Config+0xcc>)
 8000a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a54:	60bb      	str	r3, [r7, #8]
 8000a56:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a58:	2300      	movs	r3, #0
 8000a5a:	607b      	str	r3, [r7, #4]
 8000a5c:	4b22      	ldr	r3, [pc, #136]	; (8000ae8 <SystemClock_Config+0xd0>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a21      	ldr	r2, [pc, #132]	; (8000ae8 <SystemClock_Config+0xd0>)
 8000a62:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a66:	6013      	str	r3, [r2, #0]
 8000a68:	4b1f      	ldr	r3, [pc, #124]	; (8000ae8 <SystemClock_Config+0xd0>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a70:	607b      	str	r3, [r7, #4]
 8000a72:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a74:	2302      	movs	r3, #2
 8000a76:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a7c:	2310      	movs	r3, #16
 8000a7e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a80:	2302      	movs	r3, #2
 8000a82:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a84:	2300      	movs	r3, #0
 8000a86:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a88:	2308      	movs	r3, #8
 8000a8a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000a8c:	23c0      	movs	r3, #192	; 0xc0
 8000a8e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a90:	2304      	movs	r3, #4
 8000a92:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000a94:	2308      	movs	r3, #8
 8000a96:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a98:	f107 0320 	add.w	r3, r7, #32
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f001 fba9 	bl	80021f4 <HAL_RCC_OscConfig>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000aa8:	f000 fa28 	bl	8000efc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aac:	230f      	movs	r3, #15
 8000aae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ab8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000abc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000abe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ac2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000ac4:	f107 030c 	add.w	r3, r7, #12
 8000ac8:	2103      	movs	r1, #3
 8000aca:	4618      	mov	r0, r3
 8000acc:	f001 fe0a 	bl	80026e4 <HAL_RCC_ClockConfig>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000ad6:	f000 fa11 	bl	8000efc <Error_Handler>
  }
}
 8000ada:	bf00      	nop
 8000adc:	3750      	adds	r7, #80	; 0x50
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40023800 	.word	0x40023800
 8000ae8:	40007000 	.word	0x40007000

08000aec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000af0:	4b12      	ldr	r3, [pc, #72]	; (8000b3c <MX_I2C1_Init+0x50>)
 8000af2:	4a13      	ldr	r2, [pc, #76]	; (8000b40 <MX_I2C1_Init+0x54>)
 8000af4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000af6:	4b11      	ldr	r3, [pc, #68]	; (8000b3c <MX_I2C1_Init+0x50>)
 8000af8:	4a12      	ldr	r2, [pc, #72]	; (8000b44 <MX_I2C1_Init+0x58>)
 8000afa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000afc:	4b0f      	ldr	r3, [pc, #60]	; (8000b3c <MX_I2C1_Init+0x50>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b02:	4b0e      	ldr	r3, [pc, #56]	; (8000b3c <MX_I2C1_Init+0x50>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b08:	4b0c      	ldr	r3, [pc, #48]	; (8000b3c <MX_I2C1_Init+0x50>)
 8000b0a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b0e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b10:	4b0a      	ldr	r3, [pc, #40]	; (8000b3c <MX_I2C1_Init+0x50>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b16:	4b09      	ldr	r3, [pc, #36]	; (8000b3c <MX_I2C1_Init+0x50>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b1c:	4b07      	ldr	r3, [pc, #28]	; (8000b3c <MX_I2C1_Init+0x50>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b22:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <MX_I2C1_Init+0x50>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b28:	4804      	ldr	r0, [pc, #16]	; (8000b3c <MX_I2C1_Init+0x50>)
 8000b2a:	f000 fec5 	bl	80018b8 <HAL_I2C_Init>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b34:	f000 f9e2 	bl	8000efc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b38:	bf00      	nop
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20000398 	.word	0x20000398
 8000b40:	40005400 	.word	0x40005400
 8000b44:	000186a0 	.word	0x000186a0

08000b48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08c      	sub	sp, #48	; 0x30
 8000b4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4e:	f107 031c 	add.w	r3, r7, #28
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	605a      	str	r2, [r3, #4]
 8000b58:	609a      	str	r2, [r3, #8]
 8000b5a:	60da      	str	r2, [r3, #12]
 8000b5c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61bb      	str	r3, [r7, #24]
 8000b62:	4ba2      	ldr	r3, [pc, #648]	; (8000dec <MX_GPIO_Init+0x2a4>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	4aa1      	ldr	r2, [pc, #644]	; (8000dec <MX_GPIO_Init+0x2a4>)
 8000b68:	f043 0310 	orr.w	r3, r3, #16
 8000b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6e:	4b9f      	ldr	r3, [pc, #636]	; (8000dec <MX_GPIO_Init+0x2a4>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	f003 0310 	and.w	r3, r3, #16
 8000b76:	61bb      	str	r3, [r7, #24]
 8000b78:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	617b      	str	r3, [r7, #20]
 8000b7e:	4b9b      	ldr	r3, [pc, #620]	; (8000dec <MX_GPIO_Init+0x2a4>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	4a9a      	ldr	r2, [pc, #616]	; (8000dec <MX_GPIO_Init+0x2a4>)
 8000b84:	f043 0304 	orr.w	r3, r3, #4
 8000b88:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8a:	4b98      	ldr	r3, [pc, #608]	; (8000dec <MX_GPIO_Init+0x2a4>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	f003 0304 	and.w	r3, r3, #4
 8000b92:	617b      	str	r3, [r7, #20]
 8000b94:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	613b      	str	r3, [r7, #16]
 8000b9a:	4b94      	ldr	r3, [pc, #592]	; (8000dec <MX_GPIO_Init+0x2a4>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	4a93      	ldr	r2, [pc, #588]	; (8000dec <MX_GPIO_Init+0x2a4>)
 8000ba0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba6:	4b91      	ldr	r3, [pc, #580]	; (8000dec <MX_GPIO_Init+0x2a4>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bae:	613b      	str	r3, [r7, #16]
 8000bb0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60fb      	str	r3, [r7, #12]
 8000bb6:	4b8d      	ldr	r3, [pc, #564]	; (8000dec <MX_GPIO_Init+0x2a4>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	4a8c      	ldr	r2, [pc, #560]	; (8000dec <MX_GPIO_Init+0x2a4>)
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc2:	4b8a      	ldr	r3, [pc, #552]	; (8000dec <MX_GPIO_Init+0x2a4>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60bb      	str	r3, [r7, #8]
 8000bd2:	4b86      	ldr	r3, [pc, #536]	; (8000dec <MX_GPIO_Init+0x2a4>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	4a85      	ldr	r2, [pc, #532]	; (8000dec <MX_GPIO_Init+0x2a4>)
 8000bd8:	f043 0302 	orr.w	r3, r3, #2
 8000bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bde:	4b83      	ldr	r3, [pc, #524]	; (8000dec <MX_GPIO_Init+0x2a4>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	f003 0302 	and.w	r3, r3, #2
 8000be6:	60bb      	str	r3, [r7, #8]
 8000be8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	607b      	str	r3, [r7, #4]
 8000bee:	4b7f      	ldr	r3, [pc, #508]	; (8000dec <MX_GPIO_Init+0x2a4>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	4a7e      	ldr	r2, [pc, #504]	; (8000dec <MX_GPIO_Init+0x2a4>)
 8000bf4:	f043 0308 	orr.w	r3, r3, #8
 8000bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfa:	4b7c      	ldr	r3, [pc, #496]	; (8000dec <MX_GPIO_Init+0x2a4>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	f003 0308 	and.w	r3, r3, #8
 8000c02:	607b      	str	r3, [r7, #4]
 8000c04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000c06:	2200      	movs	r2, #0
 8000c08:	2108      	movs	r1, #8
 8000c0a:	4879      	ldr	r0, [pc, #484]	; (8000df0 <MX_GPIO_Init+0x2a8>)
 8000c0c:	f000 fe3a 	bl	8001884 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000c10:	2201      	movs	r2, #1
 8000c12:	2101      	movs	r1, #1
 8000c14:	4877      	ldr	r0, [pc, #476]	; (8000df4 <MX_GPIO_Init+0x2ac>)
 8000c16:	f000 fe35 	bl	8001884 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(diode1_GPIO_Port, diode1_Pin, GPIO_PIN_RESET);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2104      	movs	r1, #4
 8000c1e:	4875      	ldr	r0, [pc, #468]	; (8000df4 <MX_GPIO_Init+0x2ac>)
 8000c20:	f000 fe30 	bl	8001884 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000c24:	2200      	movs	r2, #0
 8000c26:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000c2a:	4873      	ldr	r0, [pc, #460]	; (8000df8 <MX_GPIO_Init+0x2b0>)
 8000c2c:	f000 fe2a 	bl	8001884 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c30:	2304      	movs	r3, #4
 8000c32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c34:	2300      	movs	r3, #0
 8000c36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c3c:	f107 031c 	add.w	r3, r7, #28
 8000c40:	4619      	mov	r1, r3
 8000c42:	486b      	ldr	r0, [pc, #428]	; (8000df0 <MX_GPIO_Init+0x2a8>)
 8000c44:	f000 fc82 	bl	800154c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000c48:	2308      	movs	r3, #8
 8000c4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c54:	2300      	movs	r3, #0
 8000c56:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000c58:	f107 031c 	add.w	r3, r7, #28
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4864      	ldr	r0, [pc, #400]	; (8000df0 <MX_GPIO_Init+0x2a8>)
 8000c60:	f000 fc74 	bl	800154c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|MEMS_INT2_Pin;
 8000c64:	2332      	movs	r3, #50	; 0x32
 8000c66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c68:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000c6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c72:	f107 031c 	add.w	r3, r7, #28
 8000c76:	4619      	mov	r1, r3
 8000c78:	485d      	ldr	r0, [pc, #372]	; (8000df0 <MX_GPIO_Init+0x2a8>)
 8000c7a:	f000 fc67 	bl	800154c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin diode1_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|diode1_Pin;
 8000c7e:	2305      	movs	r3, #5
 8000c80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c82:	2301      	movs	r3, #1
 8000c84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c8e:	f107 031c 	add.w	r3, r7, #28
 8000c92:	4619      	mov	r1, r3
 8000c94:	4857      	ldr	r0, [pc, #348]	; (8000df4 <MX_GPIO_Init+0x2ac>)
 8000c96:	f000 fc59 	bl	800154c <HAL_GPIO_Init>

  /*Configure GPIO pin : holeStatePin1_Pin */
  GPIO_InitStruct.Pin = holeStatePin1_Pin;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(holeStatePin1_GPIO_Port, &GPIO_InitStruct);
 8000ca6:	f107 031c 	add.w	r3, r7, #28
 8000caa:	4619      	mov	r1, r3
 8000cac:	4851      	ldr	r0, [pc, #324]	; (8000df4 <MX_GPIO_Init+0x2ac>)
 8000cae:	f000 fc4d 	bl	800154c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000cb2:	2308      	movs	r3, #8
 8000cb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cc2:	2305      	movs	r3, #5
 8000cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000cc6:	f107 031c 	add.w	r3, r7, #28
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4849      	ldr	r0, [pc, #292]	; (8000df4 <MX_GPIO_Init+0x2ac>)
 8000cce:	f000 fc3d 	bl	800154c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000cd6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000cda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce0:	f107 031c 	add.w	r3, r7, #28
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4845      	ldr	r0, [pc, #276]	; (8000dfc <MX_GPIO_Init+0x2b4>)
 8000ce8:	f000 fc30 	bl	800154c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000cec:	2310      	movs	r3, #16
 8000cee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000cfc:	2306      	movs	r3, #6
 8000cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000d00:	f107 031c 	add.w	r3, r7, #28
 8000d04:	4619      	mov	r1, r3
 8000d06:	483d      	ldr	r0, [pc, #244]	; (8000dfc <MX_GPIO_Init+0x2b4>)
 8000d08:	f000 fc20 	bl	800154c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000d0c:	23e0      	movs	r3, #224	; 0xe0
 8000d0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d10:	2302      	movs	r3, #2
 8000d12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d18:	2303      	movs	r3, #3
 8000d1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d1c:	2305      	movs	r3, #5
 8000d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d20:	f107 031c 	add.w	r3, r7, #28
 8000d24:	4619      	mov	r1, r3
 8000d26:	4835      	ldr	r0, [pc, #212]	; (8000dfc <MX_GPIO_Init+0x2b4>)
 8000d28:	f000 fc10 	bl	800154c <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_IN_Pin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000d2c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d32:	2302      	movs	r3, #2
 8000d34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d3e:	2305      	movs	r3, #5
 8000d40:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d42:	f107 031c 	add.w	r3, r7, #28
 8000d46:	4619      	mov	r1, r3
 8000d48:	482d      	ldr	r0, [pc, #180]	; (8000e00 <MX_GPIO_Init+0x2b8>)
 8000d4a:	f000 fbff 	bl	800154c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000d4e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000d52:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d54:	2301      	movs	r3, #1
 8000d56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d60:	f107 031c 	add.w	r3, r7, #28
 8000d64:	4619      	mov	r1, r3
 8000d66:	4824      	ldr	r0, [pc, #144]	; (8000df8 <MX_GPIO_Init+0x2b0>)
 8000d68:	f000 fbf0 	bl	800154c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000d6c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000d70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d72:	2302      	movs	r3, #2
 8000d74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d7e:	2306      	movs	r3, #6
 8000d80:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d82:	f107 031c 	add.w	r3, r7, #28
 8000d86:	4619      	mov	r1, r3
 8000d88:	481a      	ldr	r0, [pc, #104]	; (8000df4 <MX_GPIO_Init+0x2ac>)
 8000d8a:	f000 fbdf 	bl	800154c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000d8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d94:	2300      	movs	r3, #0
 8000d96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000d9c:	f107 031c 	add.w	r3, r7, #28
 8000da0:	4619      	mov	r1, r3
 8000da2:	4816      	ldr	r0, [pc, #88]	; (8000dfc <MX_GPIO_Init+0x2b4>)
 8000da4:	f000 fbd2 	bl	800154c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000da8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000dac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dae:	2302      	movs	r3, #2
 8000db0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db2:	2300      	movs	r3, #0
 8000db4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db6:	2303      	movs	r3, #3
 8000db8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000dba:	230a      	movs	r3, #10
 8000dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dbe:	f107 031c 	add.w	r3, r7, #28
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	480d      	ldr	r0, [pc, #52]	; (8000dfc <MX_GPIO_Init+0x2b4>)
 8000dc6:	f000 fbc1 	bl	800154c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000dca:	2320      	movs	r3, #32
 8000dcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000dd6:	f107 031c 	add.w	r3, r7, #28
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4806      	ldr	r0, [pc, #24]	; (8000df8 <MX_GPIO_Init+0x2b0>)
 8000dde:	f000 fbb5 	bl	800154c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000de2:	bf00      	nop
 8000de4:	3730      	adds	r7, #48	; 0x30
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40023800 	.word	0x40023800
 8000df0:	40021000 	.word	0x40021000
 8000df4:	40020800 	.word	0x40020800
 8000df8:	40020c00 	.word	0x40020c00
 8000dfc:	40020000 	.word	0x40020000
 8000e00:	40020400 	.word	0x40020400

08000e04 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
	  osDelay(2000);
	  sub3Menu();
	  menu.currentMenu = &SUB3;
	  osDelay(10);
	  */
	  menuCursor = 0;
 8000e0c:	4b07      	ldr	r3, [pc, #28]	; (8000e2c <StartDefaultTask+0x28>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	701a      	strb	r2, [r3, #0]
	  osDelay(2000);
 8000e12:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000e16:	f002 f996 	bl	8003146 <osDelay>
	  menuCursor = 1;
 8000e1a:	4b04      	ldr	r3, [pc, #16]	; (8000e2c <StartDefaultTask+0x28>)
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	701a      	strb	r2, [r3, #0]
	  osDelay(2000);
 8000e20:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000e24:	f002 f98f 	bl	8003146 <osDelay>
	  menuCursor = 0;
 8000e28:	e7f0      	b.n	8000e0c <StartDefaultTask+0x8>
 8000e2a:	bf00      	nop
 8000e2c:	200003fd 	.word	0x200003fd

08000e30 <diodeDetector_Init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_diodeDetector_Init */
void diodeDetector_Init(void const * argument)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN diodeDetector_Init */
  /* Infinite loop */
  for(;;)
  {
	if (holeState1 == 1){
 8000e38:	4b09      	ldr	r3, [pc, #36]	; (8000e60 <diodeDetector_Init+0x30>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	d105      	bne.n	8000e4c <diodeDetector_Init+0x1c>
		HAL_GPIO_WritePin(diode1_GPIO_Port, diode1_Pin, 1);
 8000e40:	2201      	movs	r2, #1
 8000e42:	2104      	movs	r1, #4
 8000e44:	4807      	ldr	r0, [pc, #28]	; (8000e64 <diodeDetector_Init+0x34>)
 8000e46:	f000 fd1d 	bl	8001884 <HAL_GPIO_WritePin>
 8000e4a:	e004      	b.n	8000e56 <diodeDetector_Init+0x26>
	}
	else{
		HAL_GPIO_WritePin(diode1_GPIO_Port, diode1_Pin, 0);
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	2104      	movs	r1, #4
 8000e50:	4804      	ldr	r0, [pc, #16]	; (8000e64 <diodeDetector_Init+0x34>)
 8000e52:	f000 fd17 	bl	8001884 <HAL_GPIO_WritePin>
	}
	else{
		HAL_GPIO_WritePin(diode4_GPIO_Port, diode4_Pin, 0);
	}
	*/
    osDelay(1);
 8000e56:	2001      	movs	r0, #1
 8000e58:	f002 f975 	bl	8003146 <osDelay>
	if (holeState1 == 1){
 8000e5c:	e7ec      	b.n	8000e38 <diodeDetector_Init+0x8>
 8000e5e:	bf00      	nop
 8000e60:	200003fc 	.word	0x200003fc
 8000e64:	40020800 	.word	0x40020800

08000e68 <holeState_Init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_holeState_Init */
void holeState_Init(void const * argument)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN holeState_Init */
  /* Infinite loop */
  for(;;)
  {
	if (HAL_GPIO_ReadPin(holeStatePin1_GPIO_Port, holeStatePin1_Pin) == 1){
 8000e70:	2102      	movs	r1, #2
 8000e72:	4808      	ldr	r0, [pc, #32]	; (8000e94 <holeState_Init+0x2c>)
 8000e74:	f000 fcee 	bl	8001854 <HAL_GPIO_ReadPin>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d103      	bne.n	8000e86 <holeState_Init+0x1e>
		holeState1 = 1;
 8000e7e:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <holeState_Init+0x30>)
 8000e80:	2201      	movs	r2, #1
 8000e82:	701a      	strb	r2, [r3, #0]
 8000e84:	e002      	b.n	8000e8c <holeState_Init+0x24>
	}
	else{
		holeState1 = 0;
 8000e86:	4b04      	ldr	r3, [pc, #16]	; (8000e98 <holeState_Init+0x30>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	701a      	strb	r2, [r3, #0]
	}
	else{
		holeState4 = 0;
	}
	*/
    osDelay(1);
 8000e8c:	2001      	movs	r0, #1
 8000e8e:	f002 f95a 	bl	8003146 <osDelay>
	if (HAL_GPIO_ReadPin(holeStatePin1_GPIO_Port, holeStatePin1_Pin) == 1){
 8000e92:	e7ed      	b.n	8000e70 <holeState_Init+0x8>
 8000e94:	40020800 	.word	0x40020800
 8000e98:	200003fc 	.word	0x200003fc

08000e9c <displayMenu_Init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_displayMenu_Init */
void displayMenu_Init(void const * argument)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN displayMenu_Init */
  /* Infinite loop */
  for(;;)
  {
    if (menuCursor == 0)
 8000ea4:	4b0a      	ldr	r3, [pc, #40]	; (8000ed0 <displayMenu_Init+0x34>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d104      	bne.n	8000eb6 <displayMenu_Init+0x1a>
    {
        menu.handleLeft(&menu);
 8000eac:	4b09      	ldr	r3, [pc, #36]	; (8000ed4 <displayMenu_Init+0x38>)
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	4808      	ldr	r0, [pc, #32]	; (8000ed4 <displayMenu_Init+0x38>)
 8000eb2:	4798      	blx	r3
        continue;
 8000eb4:	e00b      	b.n	8000ece <displayMenu_Init+0x32>
    }
    if (menuCursor == 1)
 8000eb6:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <displayMenu_Init+0x34>)
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d104      	bne.n	8000ec8 <displayMenu_Init+0x2c>
    {
        menu.handleRight(&menu);
 8000ebe:	4b05      	ldr	r3, [pc, #20]	; (8000ed4 <displayMenu_Init+0x38>)
 8000ec0:	689b      	ldr	r3, [r3, #8]
 8000ec2:	4804      	ldr	r0, [pc, #16]	; (8000ed4 <displayMenu_Init+0x38>)
 8000ec4:	4798      	blx	r3
        continue;
 8000ec6:	e002      	b.n	8000ece <displayMenu_Init+0x32>
    }
    osDelay(1);
 8000ec8:	2001      	movs	r0, #1
 8000eca:	f002 f93c 	bl	8003146 <osDelay>
    if (menuCursor == 0)
 8000ece:	e7e9      	b.n	8000ea4 <displayMenu_Init+0x8>
 8000ed0:	200003fd 	.word	0x200003fd
 8000ed4:	2000004c 	.word	0x2000004c

08000ed8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a04      	ldr	r2, [pc, #16]	; (8000ef8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d101      	bne.n	8000eee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000eea:	f000 fa09 	bl	8001300 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40010000 	.word	0x40010000

08000efc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f00:	b672      	cpsid	i
}
 8000f02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f04:	e7fe      	b.n	8000f04 <Error_Handler+0x8>
	...

08000f08 <defaultMenu>:
char SecondOpt[] = "Drink Counter";
char FirstOptsub3[] = "Reset";
char SecondOptsub3[] = "Back";
uint8_t XD = 0;

void defaultMenu(){
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
	  HD44780_Clear();
 8000f0c:	f7ff fb84 	bl	8000618 <HD44780_Clear>
	  HD44780_SetCursor(0,0);
 8000f10:	2100      	movs	r1, #0
 8000f12:	2000      	movs	r0, #0
 8000f14:	f7ff fb96 	bl	8000644 <HD44780_SetCursor>
	  HD44780_PrintStr(FirstOpt);
 8000f18:	4805      	ldr	r0, [pc, #20]	; (8000f30 <defaultMenu+0x28>)
 8000f1a:	f7ff fc04 	bl	8000726 <HD44780_PrintStr>
	  HD44780_SetCursor(0,1);
 8000f1e:	2101      	movs	r1, #1
 8000f20:	2000      	movs	r0, #0
 8000f22:	f7ff fb8f 	bl	8000644 <HD44780_SetCursor>
	  HD44780_PrintStr(SecondOpt);
 8000f26:	4803      	ldr	r0, [pc, #12]	; (8000f34 <defaultMenu+0x2c>)
 8000f28:	f7ff fbfd 	bl	8000726 <HD44780_PrintStr>
}
 8000f2c:	bf00      	nop
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	20000058 	.word	0x20000058
 8000f34:	20000064 	.word	0x20000064

08000f38 <leftReact1>:
	  HD44780_PrintStr("Third:");
	  HD44780_SetCursor(10,1);
	  HD44780_PrintStr("Forth:");
}

void leftReact1(){
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
	HD44780_SetCursor(sizeof(SecondOpt),1);
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	200e      	movs	r0, #14
 8000f40:	f7ff fb80 	bl	8000644 <HD44780_SetCursor>
	HD44780_PrintStr("  ");
 8000f44:	4805      	ldr	r0, [pc, #20]	; (8000f5c <leftReact1+0x24>)
 8000f46:	f7ff fbee 	bl	8000726 <HD44780_PrintStr>
	HD44780_SetCursor(sizeof(FirstOpt),0);
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	2009      	movs	r0, #9
 8000f4e:	f7ff fb79 	bl	8000644 <HD44780_SetCursor>
	HD44780_PrintStr("<-");
 8000f52:	4803      	ldr	r0, [pc, #12]	; (8000f60 <leftReact1+0x28>)
 8000f54:	f7ff fbe7 	bl	8000726 <HD44780_PrintStr>
}
 8000f58:	bf00      	nop
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	08004800 	.word	0x08004800
 8000f60:	08004804 	.word	0x08004804

08000f64 <rightReact1>:

void rightReact1(){
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
	HD44780_SetCursor(sizeof(FirstOpt),0);
 8000f68:	2100      	movs	r1, #0
 8000f6a:	2009      	movs	r0, #9
 8000f6c:	f7ff fb6a 	bl	8000644 <HD44780_SetCursor>
	HD44780_PrintStr("  ");
 8000f70:	4805      	ldr	r0, [pc, #20]	; (8000f88 <rightReact1+0x24>)
 8000f72:	f7ff fbd8 	bl	8000726 <HD44780_PrintStr>
	HD44780_SetCursor(sizeof(SecondOpt),1);
 8000f76:	2101      	movs	r1, #1
 8000f78:	200e      	movs	r0, #14
 8000f7a:	f7ff fb63 	bl	8000644 <HD44780_SetCursor>
	HD44780_PrintStr("<-");
 8000f7e:	4803      	ldr	r0, [pc, #12]	; (8000f8c <rightReact1+0x28>)
 8000f80:	f7ff fbd1 	bl	8000726 <HD44780_PrintStr>
}
 8000f84:	bf00      	nop
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	08004800 	.word	0x08004800
 8000f8c:	08004804 	.word	0x08004804

08000f90 <leftReact2>:
void leftReact2(){
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
	XD = 3;
 8000f94:	4b03      	ldr	r3, [pc, #12]	; (8000fa4 <leftReact2+0x14>)
 8000f96:	2203      	movs	r2, #3
 8000f98:	701a      	strb	r2, [r3, #0]
}
 8000f9a:	bf00      	nop
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	200003fe 	.word	0x200003fe

08000fa8 <rightReact2>:

void rightReact2(){
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
	XD = 4;
 8000fac:	4b03      	ldr	r3, [pc, #12]	; (8000fbc <rightReact2+0x14>)
 8000fae:	2204      	movs	r2, #4
 8000fb0:	701a      	strb	r2, [r3, #0]
}
 8000fb2:	bf00      	nop
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	200003fe 	.word	0x200003fe

08000fc0 <leftReact3>:

void leftReact3(){
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
	HD44780_SetCursor(sizeof(SecondOptsub3) + 10,4);
	HD44780_PrintStr("  ");
	HD44780_SetCursor(sizeof(FirstOptsub3),4);
	HD44780_PrintStr("<-");
	*/
	XD = 2;
 8000fc4:	4b03      	ldr	r3, [pc, #12]	; (8000fd4 <leftReact3+0x14>)
 8000fc6:	2202      	movs	r2, #2
 8000fc8:	701a      	strb	r2, [r3, #0]
}
 8000fca:	bf00      	nop
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	200003fe 	.word	0x200003fe

08000fd8 <rightReact3>:

void rightReact3(){
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
	HD44780_SetCursor(sizeof(FirstOptsub3),0);
	HD44780_PrintStr("  ");
	HD44780_SetCursor(sizeof(SecondOptsub3) + 10,1);
	HD44780_PrintStr("<-");
	*/
	XD = 1;
 8000fdc:	4b03      	ldr	r3, [pc, #12]	; (8000fec <rightReact3+0x14>)
 8000fde:	2201      	movs	r2, #1
 8000fe0:	701a      	strb	r2, [r3, #0]
}
 8000fe2:	bf00      	nop
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	200003fe 	.word	0x200003fe

08000ff0 <handleLeft>:

void handleLeft(menu_t* self){
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
    self->currentMenu->leftReact();
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	4798      	blx	r3
    self->currentMenu = self->currentMenu->last;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	691a      	ldr	r2, [r3, #16]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	601a      	str	r2, [r3, #0]
}
 800100a:	bf00      	nop
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <handleRight>:

void handleRight(menu_t* self){
 8001012:	b580      	push	{r7, lr}
 8001014:	b082      	sub	sp, #8
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
    self->currentMenu->rightReact();
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	689b      	ldr	r3, [r3, #8]
 8001020:	4798      	blx	r3
    self->currentMenu = self->currentMenu->next;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	68da      	ldr	r2, [r3, #12]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	601a      	str	r2, [r3, #0]
}
 800102c:	bf00      	nop
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	607b      	str	r3, [r7, #4]
 800103e:	4b12      	ldr	r3, [pc, #72]	; (8001088 <HAL_MspInit+0x54>)
 8001040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001042:	4a11      	ldr	r2, [pc, #68]	; (8001088 <HAL_MspInit+0x54>)
 8001044:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001048:	6453      	str	r3, [r2, #68]	; 0x44
 800104a:	4b0f      	ldr	r3, [pc, #60]	; (8001088 <HAL_MspInit+0x54>)
 800104c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001052:	607b      	str	r3, [r7, #4]
 8001054:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	603b      	str	r3, [r7, #0]
 800105a:	4b0b      	ldr	r3, [pc, #44]	; (8001088 <HAL_MspInit+0x54>)
 800105c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105e:	4a0a      	ldr	r2, [pc, #40]	; (8001088 <HAL_MspInit+0x54>)
 8001060:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001064:	6413      	str	r3, [r2, #64]	; 0x40
 8001066:	4b08      	ldr	r3, [pc, #32]	; (8001088 <HAL_MspInit+0x54>)
 8001068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800106e:	603b      	str	r3, [r7, #0]
 8001070:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001072:	2200      	movs	r2, #0
 8001074:	210f      	movs	r1, #15
 8001076:	f06f 0001 	mvn.w	r0, #1
 800107a:	f000 fa3d 	bl	80014f8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800107e:	bf00      	nop
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40023800 	.word	0x40023800

0800108c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b08a      	sub	sp, #40	; 0x28
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001094:	f107 0314 	add.w	r3, r7, #20
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]
 80010a2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a19      	ldr	r2, [pc, #100]	; (8001110 <HAL_I2C_MspInit+0x84>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d12c      	bne.n	8001108 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	613b      	str	r3, [r7, #16]
 80010b2:	4b18      	ldr	r3, [pc, #96]	; (8001114 <HAL_I2C_MspInit+0x88>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	4a17      	ldr	r2, [pc, #92]	; (8001114 <HAL_I2C_MspInit+0x88>)
 80010b8:	f043 0302 	orr.w	r3, r3, #2
 80010bc:	6313      	str	r3, [r2, #48]	; 0x30
 80010be:	4b15      	ldr	r3, [pc, #84]	; (8001114 <HAL_I2C_MspInit+0x88>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	f003 0302 	and.w	r3, r3, #2
 80010c6:	613b      	str	r3, [r7, #16]
 80010c8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010ca:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010d0:	2312      	movs	r3, #18
 80010d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d8:	2303      	movs	r3, #3
 80010da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010dc:	2304      	movs	r3, #4
 80010de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e0:	f107 0314 	add.w	r3, r7, #20
 80010e4:	4619      	mov	r1, r3
 80010e6:	480c      	ldr	r0, [pc, #48]	; (8001118 <HAL_I2C_MspInit+0x8c>)
 80010e8:	f000 fa30 	bl	800154c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010ec:	2300      	movs	r3, #0
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	4b08      	ldr	r3, [pc, #32]	; (8001114 <HAL_I2C_MspInit+0x88>)
 80010f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f4:	4a07      	ldr	r2, [pc, #28]	; (8001114 <HAL_I2C_MspInit+0x88>)
 80010f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010fa:	6413      	str	r3, [r2, #64]	; 0x40
 80010fc:	4b05      	ldr	r3, [pc, #20]	; (8001114 <HAL_I2C_MspInit+0x88>)
 80010fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001100:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001104:	60fb      	str	r3, [r7, #12]
 8001106:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001108:	bf00      	nop
 800110a:	3728      	adds	r7, #40	; 0x28
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	40005400 	.word	0x40005400
 8001114:	40023800 	.word	0x40023800
 8001118:	40020400 	.word	0x40020400

0800111c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b08c      	sub	sp, #48	; 0x30
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001124:	2300      	movs	r3, #0
 8001126:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001128:	2300      	movs	r3, #0
 800112a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800112c:	2300      	movs	r3, #0
 800112e:	60bb      	str	r3, [r7, #8]
 8001130:	4b2f      	ldr	r3, [pc, #188]	; (80011f0 <HAL_InitTick+0xd4>)
 8001132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001134:	4a2e      	ldr	r2, [pc, #184]	; (80011f0 <HAL_InitTick+0xd4>)
 8001136:	f043 0301 	orr.w	r3, r3, #1
 800113a:	6453      	str	r3, [r2, #68]	; 0x44
 800113c:	4b2c      	ldr	r3, [pc, #176]	; (80011f0 <HAL_InitTick+0xd4>)
 800113e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001140:	f003 0301 	and.w	r3, r3, #1
 8001144:	60bb      	str	r3, [r7, #8]
 8001146:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001148:	f107 020c 	add.w	r2, r7, #12
 800114c:	f107 0310 	add.w	r3, r7, #16
 8001150:	4611      	mov	r1, r2
 8001152:	4618      	mov	r0, r3
 8001154:	f001 fce6 	bl	8002b24 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001158:	f001 fcd0 	bl	8002afc <HAL_RCC_GetPCLK2Freq>
 800115c:	4603      	mov	r3, r0
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001164:	4a23      	ldr	r2, [pc, #140]	; (80011f4 <HAL_InitTick+0xd8>)
 8001166:	fba2 2303 	umull	r2, r3, r2, r3
 800116a:	0c9b      	lsrs	r3, r3, #18
 800116c:	3b01      	subs	r3, #1
 800116e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001170:	4b21      	ldr	r3, [pc, #132]	; (80011f8 <HAL_InitTick+0xdc>)
 8001172:	4a22      	ldr	r2, [pc, #136]	; (80011fc <HAL_InitTick+0xe0>)
 8001174:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001176:	4b20      	ldr	r3, [pc, #128]	; (80011f8 <HAL_InitTick+0xdc>)
 8001178:	f240 32e7 	movw	r2, #999	; 0x3e7
 800117c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800117e:	4a1e      	ldr	r2, [pc, #120]	; (80011f8 <HAL_InitTick+0xdc>)
 8001180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001182:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001184:	4b1c      	ldr	r3, [pc, #112]	; (80011f8 <HAL_InitTick+0xdc>)
 8001186:	2200      	movs	r2, #0
 8001188:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800118a:	4b1b      	ldr	r3, [pc, #108]	; (80011f8 <HAL_InitTick+0xdc>)
 800118c:	2200      	movs	r2, #0
 800118e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001190:	4b19      	ldr	r3, [pc, #100]	; (80011f8 <HAL_InitTick+0xdc>)
 8001192:	2200      	movs	r2, #0
 8001194:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001196:	4818      	ldr	r0, [pc, #96]	; (80011f8 <HAL_InitTick+0xdc>)
 8001198:	f001 fcf6 	bl	8002b88 <HAL_TIM_Base_Init>
 800119c:	4603      	mov	r3, r0
 800119e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80011a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d11b      	bne.n	80011e2 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80011aa:	4813      	ldr	r0, [pc, #76]	; (80011f8 <HAL_InitTick+0xdc>)
 80011ac:	f001 fd46 	bl	8002c3c <HAL_TIM_Base_Start_IT>
 80011b0:	4603      	mov	r3, r0
 80011b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80011b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d111      	bne.n	80011e2 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80011be:	2019      	movs	r0, #25
 80011c0:	f000 f9b6 	bl	8001530 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2b0f      	cmp	r3, #15
 80011c8:	d808      	bhi.n	80011dc <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80011ca:	2200      	movs	r2, #0
 80011cc:	6879      	ldr	r1, [r7, #4]
 80011ce:	2019      	movs	r0, #25
 80011d0:	f000 f992 	bl	80014f8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011d4:	4a0a      	ldr	r2, [pc, #40]	; (8001200 <HAL_InitTick+0xe4>)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6013      	str	r3, [r2, #0]
 80011da:	e002      	b.n	80011e2 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 80011dc:	2301      	movs	r3, #1
 80011de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80011e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3730      	adds	r7, #48	; 0x30
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40023800 	.word	0x40023800
 80011f4:	431bde83 	.word	0x431bde83
 80011f8:	20000400 	.word	0x20000400
 80011fc:	40010000 	.word	0x40010000
 8001200:	20000078 	.word	0x20000078

08001204 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001208:	e7fe      	b.n	8001208 <NMI_Handler+0x4>

0800120a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800120a:	b480      	push	{r7}
 800120c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800120e:	e7fe      	b.n	800120e <HardFault_Handler+0x4>

08001210 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001214:	e7fe      	b.n	8001214 <MemManage_Handler+0x4>

08001216 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001216:	b480      	push	{r7}
 8001218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800121a:	e7fe      	b.n	800121a <BusFault_Handler+0x4>

0800121c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001220:	e7fe      	b.n	8001220 <UsageFault_Handler+0x4>

08001222 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001226:	bf00      	nop
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001234:	4802      	ldr	r0, [pc, #8]	; (8001240 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001236:	f001 fd63 	bl	8002d00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	20000400 	.word	0x20000400

08001244 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001248:	4b06      	ldr	r3, [pc, #24]	; (8001264 <SystemInit+0x20>)
 800124a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800124e:	4a05      	ldr	r2, [pc, #20]	; (8001264 <SystemInit+0x20>)
 8001250:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001254:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	e000ed00 	.word	0xe000ed00

08001268 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001268:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012a0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800126c:	f7ff ffea 	bl	8001244 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001270:	480c      	ldr	r0, [pc, #48]	; (80012a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001272:	490d      	ldr	r1, [pc, #52]	; (80012a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001274:	4a0d      	ldr	r2, [pc, #52]	; (80012ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001276:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001278:	e002      	b.n	8001280 <LoopCopyDataInit>

0800127a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800127a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800127c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800127e:	3304      	adds	r3, #4

08001280 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001280:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001282:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001284:	d3f9      	bcc.n	800127a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001286:	4a0a      	ldr	r2, [pc, #40]	; (80012b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001288:	4c0a      	ldr	r4, [pc, #40]	; (80012b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800128a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800128c:	e001      	b.n	8001292 <LoopFillZerobss>

0800128e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800128e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001290:	3204      	adds	r2, #4

08001292 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001292:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001294:	d3fb      	bcc.n	800128e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001296:	f003 f9bf 	bl	8004618 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800129a:	f7ff fb33 	bl	8000904 <main>
  bx  lr    
 800129e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80012a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012a8:	200000d4 	.word	0x200000d4
  ldr r2, =_sidata
 80012ac:	08004838 	.word	0x08004838
  ldr r2, =_sbss
 80012b0:	200000d4 	.word	0x200000d4
  ldr r4, =_ebss
 80012b4:	200042e0 	.word	0x200042e0

080012b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012b8:	e7fe      	b.n	80012b8 <ADC_IRQHandler>
	...

080012bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012c0:	4b0e      	ldr	r3, [pc, #56]	; (80012fc <HAL_Init+0x40>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a0d      	ldr	r2, [pc, #52]	; (80012fc <HAL_Init+0x40>)
 80012c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012cc:	4b0b      	ldr	r3, [pc, #44]	; (80012fc <HAL_Init+0x40>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a0a      	ldr	r2, [pc, #40]	; (80012fc <HAL_Init+0x40>)
 80012d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012d8:	4b08      	ldr	r3, [pc, #32]	; (80012fc <HAL_Init+0x40>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a07      	ldr	r2, [pc, #28]	; (80012fc <HAL_Init+0x40>)
 80012de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012e4:	2003      	movs	r0, #3
 80012e6:	f000 f8fc 	bl	80014e2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012ea:	200f      	movs	r0, #15
 80012ec:	f7ff ff16 	bl	800111c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012f0:	f7ff fea0 	bl	8001034 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012f4:	2300      	movs	r3, #0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40023c00 	.word	0x40023c00

08001300 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001304:	4b06      	ldr	r3, [pc, #24]	; (8001320 <HAL_IncTick+0x20>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	461a      	mov	r2, r3
 800130a:	4b06      	ldr	r3, [pc, #24]	; (8001324 <HAL_IncTick+0x24>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4413      	add	r3, r2
 8001310:	4a04      	ldr	r2, [pc, #16]	; (8001324 <HAL_IncTick+0x24>)
 8001312:	6013      	str	r3, [r2, #0]
}
 8001314:	bf00      	nop
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	2000007c 	.word	0x2000007c
 8001324:	20000448 	.word	0x20000448

08001328 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  return uwTick;
 800132c:	4b03      	ldr	r3, [pc, #12]	; (800133c <HAL_GetTick+0x14>)
 800132e:	681b      	ldr	r3, [r3, #0]
}
 8001330:	4618      	mov	r0, r3
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	20000448 	.word	0x20000448

08001340 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001348:	f7ff ffee 	bl	8001328 <HAL_GetTick>
 800134c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001358:	d005      	beq.n	8001366 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800135a:	4b0a      	ldr	r3, [pc, #40]	; (8001384 <HAL_Delay+0x44>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	461a      	mov	r2, r3
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	4413      	add	r3, r2
 8001364:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001366:	bf00      	nop
 8001368:	f7ff ffde 	bl	8001328 <HAL_GetTick>
 800136c:	4602      	mov	r2, r0
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	68fa      	ldr	r2, [r7, #12]
 8001374:	429a      	cmp	r2, r3
 8001376:	d8f7      	bhi.n	8001368 <HAL_Delay+0x28>
  {
  }
}
 8001378:	bf00      	nop
 800137a:	bf00      	nop
 800137c:	3710      	adds	r7, #16
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	2000007c 	.word	0x2000007c

08001388 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f003 0307 	and.w	r3, r3, #7
 8001396:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001398:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <__NVIC_SetPriorityGrouping+0x44>)
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800139e:	68ba      	ldr	r2, [r7, #8]
 80013a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013a4:	4013      	ands	r3, r2
 80013a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ba:	4a04      	ldr	r2, [pc, #16]	; (80013cc <__NVIC_SetPriorityGrouping+0x44>)
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	60d3      	str	r3, [r2, #12]
}
 80013c0:	bf00      	nop
 80013c2:	3714      	adds	r7, #20
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr
 80013cc:	e000ed00 	.word	0xe000ed00

080013d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013d4:	4b04      	ldr	r3, [pc, #16]	; (80013e8 <__NVIC_GetPriorityGrouping+0x18>)
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	0a1b      	lsrs	r3, r3, #8
 80013da:	f003 0307 	and.w	r3, r3, #7
}
 80013de:	4618      	mov	r0, r3
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr
 80013e8:	e000ed00 	.word	0xe000ed00

080013ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	db0b      	blt.n	8001416 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013fe:	79fb      	ldrb	r3, [r7, #7]
 8001400:	f003 021f 	and.w	r2, r3, #31
 8001404:	4907      	ldr	r1, [pc, #28]	; (8001424 <__NVIC_EnableIRQ+0x38>)
 8001406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140a:	095b      	lsrs	r3, r3, #5
 800140c:	2001      	movs	r0, #1
 800140e:	fa00 f202 	lsl.w	r2, r0, r2
 8001412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001416:	bf00      	nop
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	e000e100 	.word	0xe000e100

08001428 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	6039      	str	r1, [r7, #0]
 8001432:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001434:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001438:	2b00      	cmp	r3, #0
 800143a:	db0a      	blt.n	8001452 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	b2da      	uxtb	r2, r3
 8001440:	490c      	ldr	r1, [pc, #48]	; (8001474 <__NVIC_SetPriority+0x4c>)
 8001442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001446:	0112      	lsls	r2, r2, #4
 8001448:	b2d2      	uxtb	r2, r2
 800144a:	440b      	add	r3, r1
 800144c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001450:	e00a      	b.n	8001468 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	b2da      	uxtb	r2, r3
 8001456:	4908      	ldr	r1, [pc, #32]	; (8001478 <__NVIC_SetPriority+0x50>)
 8001458:	79fb      	ldrb	r3, [r7, #7]
 800145a:	f003 030f 	and.w	r3, r3, #15
 800145e:	3b04      	subs	r3, #4
 8001460:	0112      	lsls	r2, r2, #4
 8001462:	b2d2      	uxtb	r2, r2
 8001464:	440b      	add	r3, r1
 8001466:	761a      	strb	r2, [r3, #24]
}
 8001468:	bf00      	nop
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	e000e100 	.word	0xe000e100
 8001478:	e000ed00 	.word	0xe000ed00

0800147c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800147c:	b480      	push	{r7}
 800147e:	b089      	sub	sp, #36	; 0x24
 8001480:	af00      	add	r7, sp, #0
 8001482:	60f8      	str	r0, [r7, #12]
 8001484:	60b9      	str	r1, [r7, #8]
 8001486:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	f003 0307 	and.w	r3, r3, #7
 800148e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	f1c3 0307 	rsb	r3, r3, #7
 8001496:	2b04      	cmp	r3, #4
 8001498:	bf28      	it	cs
 800149a:	2304      	movcs	r3, #4
 800149c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	3304      	adds	r3, #4
 80014a2:	2b06      	cmp	r3, #6
 80014a4:	d902      	bls.n	80014ac <NVIC_EncodePriority+0x30>
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	3b03      	subs	r3, #3
 80014aa:	e000      	b.n	80014ae <NVIC_EncodePriority+0x32>
 80014ac:	2300      	movs	r3, #0
 80014ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b0:	f04f 32ff 	mov.w	r2, #4294967295
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	43da      	mvns	r2, r3
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	401a      	ands	r2, r3
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014c4:	f04f 31ff 	mov.w	r1, #4294967295
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	fa01 f303 	lsl.w	r3, r1, r3
 80014ce:	43d9      	mvns	r1, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d4:	4313      	orrs	r3, r2
         );
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3724      	adds	r7, #36	; 0x24
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr

080014e2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b082      	sub	sp, #8
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f7ff ff4c 	bl	8001388 <__NVIC_SetPriorityGrouping>
}
 80014f0:	bf00      	nop
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	607a      	str	r2, [r7, #4]
 8001504:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001506:	2300      	movs	r3, #0
 8001508:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800150a:	f7ff ff61 	bl	80013d0 <__NVIC_GetPriorityGrouping>
 800150e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	68b9      	ldr	r1, [r7, #8]
 8001514:	6978      	ldr	r0, [r7, #20]
 8001516:	f7ff ffb1 	bl	800147c <NVIC_EncodePriority>
 800151a:	4602      	mov	r2, r0
 800151c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001520:	4611      	mov	r1, r2
 8001522:	4618      	mov	r0, r3
 8001524:	f7ff ff80 	bl	8001428 <__NVIC_SetPriority>
}
 8001528:	bf00      	nop
 800152a:	3718      	adds	r7, #24
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800153a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff ff54 	bl	80013ec <__NVIC_EnableIRQ>
}
 8001544:	bf00      	nop
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}

0800154c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800154c:	b480      	push	{r7}
 800154e:	b089      	sub	sp, #36	; 0x24
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001556:	2300      	movs	r3, #0
 8001558:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800155a:	2300      	movs	r3, #0
 800155c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800155e:	2300      	movs	r3, #0
 8001560:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001562:	2300      	movs	r3, #0
 8001564:	61fb      	str	r3, [r7, #28]
 8001566:	e159      	b.n	800181c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001568:	2201      	movs	r2, #1
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	697a      	ldr	r2, [r7, #20]
 8001578:	4013      	ands	r3, r2
 800157a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800157c:	693a      	ldr	r2, [r7, #16]
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	429a      	cmp	r2, r3
 8001582:	f040 8148 	bne.w	8001816 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f003 0303 	and.w	r3, r3, #3
 800158e:	2b01      	cmp	r3, #1
 8001590:	d005      	beq.n	800159e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800159a:	2b02      	cmp	r3, #2
 800159c:	d130      	bne.n	8001600 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	2203      	movs	r2, #3
 80015aa:	fa02 f303 	lsl.w	r3, r2, r3
 80015ae:	43db      	mvns	r3, r3
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	4013      	ands	r3, r2
 80015b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	68da      	ldr	r2, [r3, #12]
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	fa02 f303 	lsl.w	r3, r2, r3
 80015c2:	69ba      	ldr	r2, [r7, #24]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	69ba      	ldr	r2, [r7, #24]
 80015cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015d4:	2201      	movs	r2, #1
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	43db      	mvns	r3, r3
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	4013      	ands	r3, r2
 80015e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	091b      	lsrs	r3, r3, #4
 80015ea:	f003 0201 	and.w	r2, r3, #1
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f003 0303 	and.w	r3, r3, #3
 8001608:	2b03      	cmp	r3, #3
 800160a:	d017      	beq.n	800163c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	2203      	movs	r2, #3
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	43db      	mvns	r3, r3
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	4013      	ands	r3, r2
 8001622:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	689a      	ldr	r2, [r3, #8]
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	fa02 f303 	lsl.w	r3, r2, r3
 8001630:	69ba      	ldr	r2, [r7, #24]
 8001632:	4313      	orrs	r3, r2
 8001634:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f003 0303 	and.w	r3, r3, #3
 8001644:	2b02      	cmp	r3, #2
 8001646:	d123      	bne.n	8001690 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	08da      	lsrs	r2, r3, #3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	3208      	adds	r2, #8
 8001650:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001654:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	f003 0307 	and.w	r3, r3, #7
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	220f      	movs	r2, #15
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	43db      	mvns	r3, r3
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	4013      	ands	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	691a      	ldr	r2, [r3, #16]
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	f003 0307 	and.w	r3, r3, #7
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	4313      	orrs	r3, r2
 8001680:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	08da      	lsrs	r2, r3, #3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	3208      	adds	r2, #8
 800168a:	69b9      	ldr	r1, [r7, #24]
 800168c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	2203      	movs	r2, #3
 800169c:	fa02 f303 	lsl.w	r3, r2, r3
 80016a0:	43db      	mvns	r3, r3
 80016a2:	69ba      	ldr	r2, [r7, #24]
 80016a4:	4013      	ands	r3, r2
 80016a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f003 0203 	and.w	r2, r3, #3
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	f000 80a2 	beq.w	8001816 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	4b57      	ldr	r3, [pc, #348]	; (8001834 <HAL_GPIO_Init+0x2e8>)
 80016d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016da:	4a56      	ldr	r2, [pc, #344]	; (8001834 <HAL_GPIO_Init+0x2e8>)
 80016dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016e0:	6453      	str	r3, [r2, #68]	; 0x44
 80016e2:	4b54      	ldr	r3, [pc, #336]	; (8001834 <HAL_GPIO_Init+0x2e8>)
 80016e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016ee:	4a52      	ldr	r2, [pc, #328]	; (8001838 <HAL_GPIO_Init+0x2ec>)
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	089b      	lsrs	r3, r3, #2
 80016f4:	3302      	adds	r3, #2
 80016f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	f003 0303 	and.w	r3, r3, #3
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	220f      	movs	r2, #15
 8001706:	fa02 f303 	lsl.w	r3, r2, r3
 800170a:	43db      	mvns	r3, r3
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	4013      	ands	r3, r2
 8001710:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4a49      	ldr	r2, [pc, #292]	; (800183c <HAL_GPIO_Init+0x2f0>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d019      	beq.n	800174e <HAL_GPIO_Init+0x202>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4a48      	ldr	r2, [pc, #288]	; (8001840 <HAL_GPIO_Init+0x2f4>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d013      	beq.n	800174a <HAL_GPIO_Init+0x1fe>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4a47      	ldr	r2, [pc, #284]	; (8001844 <HAL_GPIO_Init+0x2f8>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d00d      	beq.n	8001746 <HAL_GPIO_Init+0x1fa>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4a46      	ldr	r2, [pc, #280]	; (8001848 <HAL_GPIO_Init+0x2fc>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d007      	beq.n	8001742 <HAL_GPIO_Init+0x1f6>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4a45      	ldr	r2, [pc, #276]	; (800184c <HAL_GPIO_Init+0x300>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d101      	bne.n	800173e <HAL_GPIO_Init+0x1f2>
 800173a:	2304      	movs	r3, #4
 800173c:	e008      	b.n	8001750 <HAL_GPIO_Init+0x204>
 800173e:	2307      	movs	r3, #7
 8001740:	e006      	b.n	8001750 <HAL_GPIO_Init+0x204>
 8001742:	2303      	movs	r3, #3
 8001744:	e004      	b.n	8001750 <HAL_GPIO_Init+0x204>
 8001746:	2302      	movs	r3, #2
 8001748:	e002      	b.n	8001750 <HAL_GPIO_Init+0x204>
 800174a:	2301      	movs	r3, #1
 800174c:	e000      	b.n	8001750 <HAL_GPIO_Init+0x204>
 800174e:	2300      	movs	r3, #0
 8001750:	69fa      	ldr	r2, [r7, #28]
 8001752:	f002 0203 	and.w	r2, r2, #3
 8001756:	0092      	lsls	r2, r2, #2
 8001758:	4093      	lsls	r3, r2
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	4313      	orrs	r3, r2
 800175e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001760:	4935      	ldr	r1, [pc, #212]	; (8001838 <HAL_GPIO_Init+0x2ec>)
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	089b      	lsrs	r3, r3, #2
 8001766:	3302      	adds	r3, #2
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800176e:	4b38      	ldr	r3, [pc, #224]	; (8001850 <HAL_GPIO_Init+0x304>)
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	43db      	mvns	r3, r3
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	4013      	ands	r3, r2
 800177c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d003      	beq.n	8001792 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	4313      	orrs	r3, r2
 8001790:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001792:	4a2f      	ldr	r2, [pc, #188]	; (8001850 <HAL_GPIO_Init+0x304>)
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001798:	4b2d      	ldr	r3, [pc, #180]	; (8001850 <HAL_GPIO_Init+0x304>)
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	43db      	mvns	r3, r3
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	4013      	ands	r3, r2
 80017a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d003      	beq.n	80017bc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017bc:	4a24      	ldr	r2, [pc, #144]	; (8001850 <HAL_GPIO_Init+0x304>)
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017c2:	4b23      	ldr	r3, [pc, #140]	; (8001850 <HAL_GPIO_Init+0x304>)
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	43db      	mvns	r3, r3
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	4013      	ands	r3, r2
 80017d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d003      	beq.n	80017e6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80017de:	69ba      	ldr	r2, [r7, #24]
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017e6:	4a1a      	ldr	r2, [pc, #104]	; (8001850 <HAL_GPIO_Init+0x304>)
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017ec:	4b18      	ldr	r3, [pc, #96]	; (8001850 <HAL_GPIO_Init+0x304>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	43db      	mvns	r3, r3
 80017f6:	69ba      	ldr	r2, [r7, #24]
 80017f8:	4013      	ands	r3, r2
 80017fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001804:	2b00      	cmp	r3, #0
 8001806:	d003      	beq.n	8001810 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	4313      	orrs	r3, r2
 800180e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001810:	4a0f      	ldr	r2, [pc, #60]	; (8001850 <HAL_GPIO_Init+0x304>)
 8001812:	69bb      	ldr	r3, [r7, #24]
 8001814:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	3301      	adds	r3, #1
 800181a:	61fb      	str	r3, [r7, #28]
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	2b0f      	cmp	r3, #15
 8001820:	f67f aea2 	bls.w	8001568 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001824:	bf00      	nop
 8001826:	bf00      	nop
 8001828:	3724      	adds	r7, #36	; 0x24
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	40023800 	.word	0x40023800
 8001838:	40013800 	.word	0x40013800
 800183c:	40020000 	.word	0x40020000
 8001840:	40020400 	.word	0x40020400
 8001844:	40020800 	.word	0x40020800
 8001848:	40020c00 	.word	0x40020c00
 800184c:	40021000 	.word	0x40021000
 8001850:	40013c00 	.word	0x40013c00

08001854 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001854:	b480      	push	{r7}
 8001856:	b085      	sub	sp, #20
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	460b      	mov	r3, r1
 800185e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	691a      	ldr	r2, [r3, #16]
 8001864:	887b      	ldrh	r3, [r7, #2]
 8001866:	4013      	ands	r3, r2
 8001868:	2b00      	cmp	r3, #0
 800186a:	d002      	beq.n	8001872 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800186c:	2301      	movs	r3, #1
 800186e:	73fb      	strb	r3, [r7, #15]
 8001870:	e001      	b.n	8001876 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001872:	2300      	movs	r3, #0
 8001874:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001876:	7bfb      	ldrb	r3, [r7, #15]
}
 8001878:	4618      	mov	r0, r3
 800187a:	3714      	adds	r7, #20
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	460b      	mov	r3, r1
 800188e:	807b      	strh	r3, [r7, #2]
 8001890:	4613      	mov	r3, r2
 8001892:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001894:	787b      	ldrb	r3, [r7, #1]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d003      	beq.n	80018a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800189a:	887a      	ldrh	r2, [r7, #2]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018a0:	e003      	b.n	80018aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018a2:	887b      	ldrh	r3, [r7, #2]
 80018a4:	041a      	lsls	r2, r3, #16
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	619a      	str	r2, [r3, #24]
}
 80018aa:	bf00      	nop
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
	...

080018b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d101      	bne.n	80018ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e12b      	b.n	8001b22 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d106      	bne.n	80018e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2200      	movs	r2, #0
 80018da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f7ff fbd4 	bl	800108c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2224      	movs	r2, #36	; 0x24
 80018e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f022 0201 	bic.w	r2, r2, #1
 80018fa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800190a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800191a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800191c:	f001 f8da 	bl	8002ad4 <HAL_RCC_GetPCLK1Freq>
 8001920:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	4a81      	ldr	r2, [pc, #516]	; (8001b2c <HAL_I2C_Init+0x274>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d807      	bhi.n	800193c <HAL_I2C_Init+0x84>
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	4a80      	ldr	r2, [pc, #512]	; (8001b30 <HAL_I2C_Init+0x278>)
 8001930:	4293      	cmp	r3, r2
 8001932:	bf94      	ite	ls
 8001934:	2301      	movls	r3, #1
 8001936:	2300      	movhi	r3, #0
 8001938:	b2db      	uxtb	r3, r3
 800193a:	e006      	b.n	800194a <HAL_I2C_Init+0x92>
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	4a7d      	ldr	r2, [pc, #500]	; (8001b34 <HAL_I2C_Init+0x27c>)
 8001940:	4293      	cmp	r3, r2
 8001942:	bf94      	ite	ls
 8001944:	2301      	movls	r3, #1
 8001946:	2300      	movhi	r3, #0
 8001948:	b2db      	uxtb	r3, r3
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e0e7      	b.n	8001b22 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	4a78      	ldr	r2, [pc, #480]	; (8001b38 <HAL_I2C_Init+0x280>)
 8001956:	fba2 2303 	umull	r2, r3, r2, r3
 800195a:	0c9b      	lsrs	r3, r3, #18
 800195c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	68ba      	ldr	r2, [r7, #8]
 800196e:	430a      	orrs	r2, r1
 8001970:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	6a1b      	ldr	r3, [r3, #32]
 8001978:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	4a6a      	ldr	r2, [pc, #424]	; (8001b2c <HAL_I2C_Init+0x274>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d802      	bhi.n	800198c <HAL_I2C_Init+0xd4>
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	3301      	adds	r3, #1
 800198a:	e009      	b.n	80019a0 <HAL_I2C_Init+0xe8>
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001992:	fb02 f303 	mul.w	r3, r2, r3
 8001996:	4a69      	ldr	r2, [pc, #420]	; (8001b3c <HAL_I2C_Init+0x284>)
 8001998:	fba2 2303 	umull	r2, r3, r2, r3
 800199c:	099b      	lsrs	r3, r3, #6
 800199e:	3301      	adds	r3, #1
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	6812      	ldr	r2, [r2, #0]
 80019a4:	430b      	orrs	r3, r1
 80019a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	69db      	ldr	r3, [r3, #28]
 80019ae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80019b2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	495c      	ldr	r1, [pc, #368]	; (8001b2c <HAL_I2C_Init+0x274>)
 80019bc:	428b      	cmp	r3, r1
 80019be:	d819      	bhi.n	80019f4 <HAL_I2C_Init+0x13c>
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	1e59      	subs	r1, r3, #1
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80019ce:	1c59      	adds	r1, r3, #1
 80019d0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80019d4:	400b      	ands	r3, r1
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d00a      	beq.n	80019f0 <HAL_I2C_Init+0x138>
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	1e59      	subs	r1, r3, #1
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80019e8:	3301      	adds	r3, #1
 80019ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019ee:	e051      	b.n	8001a94 <HAL_I2C_Init+0x1dc>
 80019f0:	2304      	movs	r3, #4
 80019f2:	e04f      	b.n	8001a94 <HAL_I2C_Init+0x1dc>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d111      	bne.n	8001a20 <HAL_I2C_Init+0x168>
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	1e58      	subs	r0, r3, #1
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6859      	ldr	r1, [r3, #4]
 8001a04:	460b      	mov	r3, r1
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	440b      	add	r3, r1
 8001a0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a0e:	3301      	adds	r3, #1
 8001a10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	bf0c      	ite	eq
 8001a18:	2301      	moveq	r3, #1
 8001a1a:	2300      	movne	r3, #0
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	e012      	b.n	8001a46 <HAL_I2C_Init+0x18e>
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	1e58      	subs	r0, r3, #1
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6859      	ldr	r1, [r3, #4]
 8001a28:	460b      	mov	r3, r1
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	440b      	add	r3, r1
 8001a2e:	0099      	lsls	r1, r3, #2
 8001a30:	440b      	add	r3, r1
 8001a32:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a36:	3301      	adds	r3, #1
 8001a38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	bf0c      	ite	eq
 8001a40:	2301      	moveq	r3, #1
 8001a42:	2300      	movne	r3, #0
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <HAL_I2C_Init+0x196>
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e022      	b.n	8001a94 <HAL_I2C_Init+0x1dc>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d10e      	bne.n	8001a74 <HAL_I2C_Init+0x1bc>
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	1e58      	subs	r0, r3, #1
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6859      	ldr	r1, [r3, #4]
 8001a5e:	460b      	mov	r3, r1
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	440b      	add	r3, r1
 8001a64:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a68:	3301      	adds	r3, #1
 8001a6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a72:	e00f      	b.n	8001a94 <HAL_I2C_Init+0x1dc>
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	1e58      	subs	r0, r3, #1
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6859      	ldr	r1, [r3, #4]
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	440b      	add	r3, r1
 8001a82:	0099      	lsls	r1, r3, #2
 8001a84:	440b      	add	r3, r1
 8001a86:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a94:	6879      	ldr	r1, [r7, #4]
 8001a96:	6809      	ldr	r1, [r1, #0]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	69da      	ldr	r2, [r3, #28]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6a1b      	ldr	r3, [r3, #32]
 8001aae:	431a      	orrs	r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	430a      	orrs	r2, r1
 8001ab6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001ac2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	6911      	ldr	r1, [r2, #16]
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	68d2      	ldr	r2, [r2, #12]
 8001ace:	4311      	orrs	r1, r2
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	6812      	ldr	r2, [r2, #0]
 8001ad4:	430b      	orrs	r3, r1
 8001ad6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	695a      	ldr	r2, [r3, #20]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	699b      	ldr	r3, [r3, #24]
 8001aea:	431a      	orrs	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	430a      	orrs	r2, r1
 8001af2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f042 0201 	orr.w	r2, r2, #1
 8001b02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2220      	movs	r2, #32
 8001b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2200      	movs	r2, #0
 8001b16:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	000186a0 	.word	0x000186a0
 8001b30:	001e847f 	.word	0x001e847f
 8001b34:	003d08ff 	.word	0x003d08ff
 8001b38:	431bde83 	.word	0x431bde83
 8001b3c:	10624dd3 	.word	0x10624dd3

08001b40 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b088      	sub	sp, #32
 8001b44:	af02      	add	r7, sp, #8
 8001b46:	60f8      	str	r0, [r7, #12]
 8001b48:	607a      	str	r2, [r7, #4]
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	817b      	strh	r3, [r7, #10]
 8001b50:	4613      	mov	r3, r2
 8001b52:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b54:	f7ff fbe8 	bl	8001328 <HAL_GetTick>
 8001b58:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	2b20      	cmp	r3, #32
 8001b64:	f040 80e0 	bne.w	8001d28 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	9300      	str	r3, [sp, #0]
 8001b6c:	2319      	movs	r3, #25
 8001b6e:	2201      	movs	r2, #1
 8001b70:	4970      	ldr	r1, [pc, #448]	; (8001d34 <HAL_I2C_Master_Transmit+0x1f4>)
 8001b72:	68f8      	ldr	r0, [r7, #12]
 8001b74:	f000 f964 	bl	8001e40 <I2C_WaitOnFlagUntilTimeout>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001b7e:	2302      	movs	r3, #2
 8001b80:	e0d3      	b.n	8001d2a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d101      	bne.n	8001b90 <HAL_I2C_Master_Transmit+0x50>
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	e0cc      	b.n	8001d2a <HAL_I2C_Master_Transmit+0x1ea>
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2201      	movs	r2, #1
 8001b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d007      	beq.n	8001bb6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f042 0201 	orr.w	r2, r2, #1
 8001bb4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bc4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	2221      	movs	r2, #33	; 0x21
 8001bca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2210      	movs	r2, #16
 8001bd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	893a      	ldrh	r2, [r7, #8]
 8001be6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bec:	b29a      	uxth	r2, r3
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	4a50      	ldr	r2, [pc, #320]	; (8001d38 <HAL_I2C_Master_Transmit+0x1f8>)
 8001bf6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001bf8:	8979      	ldrh	r1, [r7, #10]
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	6a3a      	ldr	r2, [r7, #32]
 8001bfe:	68f8      	ldr	r0, [r7, #12]
 8001c00:	f000 f89c 	bl	8001d3c <I2C_MasterRequestWrite>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e08d      	b.n	8001d2a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c0e:	2300      	movs	r3, #0
 8001c10:	613b      	str	r3, [r7, #16]
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	695b      	ldr	r3, [r3, #20]
 8001c18:	613b      	str	r3, [r7, #16]
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	699b      	ldr	r3, [r3, #24]
 8001c20:	613b      	str	r3, [r7, #16]
 8001c22:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001c24:	e066      	b.n	8001cf4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c26:	697a      	ldr	r2, [r7, #20]
 8001c28:	6a39      	ldr	r1, [r7, #32]
 8001c2a:	68f8      	ldr	r0, [r7, #12]
 8001c2c:	f000 fa22 	bl	8002074 <I2C_WaitOnTXEFlagUntilTimeout>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d00d      	beq.n	8001c52 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3a:	2b04      	cmp	r3, #4
 8001c3c:	d107      	bne.n	8001c4e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c4c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e06b      	b.n	8001d2a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c56:	781a      	ldrb	r2, [r3, #0]
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c62:	1c5a      	adds	r2, r3, #1
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c6c:	b29b      	uxth	r3, r3
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	b29a      	uxth	r2, r3
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	b29a      	uxth	r2, r3
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	695b      	ldr	r3, [r3, #20]
 8001c88:	f003 0304 	and.w	r3, r3, #4
 8001c8c:	2b04      	cmp	r3, #4
 8001c8e:	d11b      	bne.n	8001cc8 <HAL_I2C_Master_Transmit+0x188>
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d017      	beq.n	8001cc8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9c:	781a      	ldrb	r2, [r3, #0]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca8:	1c5a      	adds	r2, r3, #1
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	3b01      	subs	r3, #1
 8001cb6:	b29a      	uxth	r2, r3
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cc0:	3b01      	subs	r3, #1
 8001cc2:	b29a      	uxth	r2, r3
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cc8:	697a      	ldr	r2, [r7, #20]
 8001cca:	6a39      	ldr	r1, [r7, #32]
 8001ccc:	68f8      	ldr	r0, [r7, #12]
 8001cce:	f000 fa19 	bl	8002104 <I2C_WaitOnBTFFlagUntilTimeout>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d00d      	beq.n	8001cf4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cdc:	2b04      	cmp	r3, #4
 8001cde:	d107      	bne.n	8001cf0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cee:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e01a      	b.n	8001d2a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d194      	bne.n	8001c26 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2220      	movs	r2, #32
 8001d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2200      	movs	r2, #0
 8001d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001d24:	2300      	movs	r3, #0
 8001d26:	e000      	b.n	8001d2a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001d28:	2302      	movs	r3, #2
  }
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3718      	adds	r7, #24
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	00100002 	.word	0x00100002
 8001d38:	ffff0000 	.word	0xffff0000

08001d3c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b088      	sub	sp, #32
 8001d40:	af02      	add	r7, sp, #8
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	607a      	str	r2, [r7, #4]
 8001d46:	603b      	str	r3, [r7, #0]
 8001d48:	460b      	mov	r3, r1
 8001d4a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d50:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	2b08      	cmp	r3, #8
 8001d56:	d006      	beq.n	8001d66 <I2C_MasterRequestWrite+0x2a>
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d003      	beq.n	8001d66 <I2C_MasterRequestWrite+0x2a>
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001d64:	d108      	bne.n	8001d78 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d74:	601a      	str	r2, [r3, #0]
 8001d76:	e00b      	b.n	8001d90 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7c:	2b12      	cmp	r3, #18
 8001d7e:	d107      	bne.n	8001d90 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d8e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	9300      	str	r3, [sp, #0]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2200      	movs	r2, #0
 8001d98:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001d9c:	68f8      	ldr	r0, [r7, #12]
 8001d9e:	f000 f84f 	bl	8001e40 <I2C_WaitOnFlagUntilTimeout>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d00d      	beq.n	8001dc4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001db6:	d103      	bne.n	8001dc0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dbe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	e035      	b.n	8001e30 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	691b      	ldr	r3, [r3, #16]
 8001dc8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001dcc:	d108      	bne.n	8001de0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001dce:	897b      	ldrh	r3, [r7, #10]
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001ddc:	611a      	str	r2, [r3, #16]
 8001dde:	e01b      	b.n	8001e18 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001de0:	897b      	ldrh	r3, [r7, #10]
 8001de2:	11db      	asrs	r3, r3, #7
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	f003 0306 	and.w	r3, r3, #6
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	f063 030f 	orn	r3, r3, #15
 8001df0:	b2da      	uxtb	r2, r3
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	490e      	ldr	r1, [pc, #56]	; (8001e38 <I2C_MasterRequestWrite+0xfc>)
 8001dfe:	68f8      	ldr	r0, [r7, #12]
 8001e00:	f000 f898 	bl	8001f34 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e010      	b.n	8001e30 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001e0e:	897b      	ldrh	r3, [r7, #10]
 8001e10:	b2da      	uxtb	r2, r3
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	4907      	ldr	r1, [pc, #28]	; (8001e3c <I2C_MasterRequestWrite+0x100>)
 8001e1e:	68f8      	ldr	r0, [r7, #12]
 8001e20:	f000 f888 	bl	8001f34 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e000      	b.n	8001e30 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001e2e:	2300      	movs	r3, #0
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3718      	adds	r7, #24
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	00010008 	.word	0x00010008
 8001e3c:	00010002 	.word	0x00010002

08001e40 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	60b9      	str	r1, [r7, #8]
 8001e4a:	603b      	str	r3, [r7, #0]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e50:	e048      	b.n	8001ee4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e58:	d044      	beq.n	8001ee4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e5a:	f7ff fa65 	bl	8001328 <HAL_GetTick>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	683a      	ldr	r2, [r7, #0]
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d302      	bcc.n	8001e70 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d139      	bne.n	8001ee4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	0c1b      	lsrs	r3, r3, #16
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d10d      	bne.n	8001e96 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	695b      	ldr	r3, [r3, #20]
 8001e80:	43da      	mvns	r2, r3
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	4013      	ands	r3, r2
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	bf0c      	ite	eq
 8001e8c:	2301      	moveq	r3, #1
 8001e8e:	2300      	movne	r3, #0
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	461a      	mov	r2, r3
 8001e94:	e00c      	b.n	8001eb0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	699b      	ldr	r3, [r3, #24]
 8001e9c:	43da      	mvns	r2, r3
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	bf0c      	ite	eq
 8001ea8:	2301      	moveq	r3, #1
 8001eaa:	2300      	movne	r3, #0
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	461a      	mov	r2, r3
 8001eb0:	79fb      	ldrb	r3, [r7, #7]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d116      	bne.n	8001ee4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2220      	movs	r2, #32
 8001ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed0:	f043 0220 	orr.w	r2, r3, #32
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2200      	movs	r2, #0
 8001edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e023      	b.n	8001f2c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	0c1b      	lsrs	r3, r3, #16
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d10d      	bne.n	8001f0a <I2C_WaitOnFlagUntilTimeout+0xca>
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	695b      	ldr	r3, [r3, #20]
 8001ef4:	43da      	mvns	r2, r3
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	4013      	ands	r3, r2
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	bf0c      	ite	eq
 8001f00:	2301      	moveq	r3, #1
 8001f02:	2300      	movne	r3, #0
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	461a      	mov	r2, r3
 8001f08:	e00c      	b.n	8001f24 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	43da      	mvns	r2, r3
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	4013      	ands	r3, r2
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	bf0c      	ite	eq
 8001f1c:	2301      	moveq	r3, #1
 8001f1e:	2300      	movne	r3, #0
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	461a      	mov	r2, r3
 8001f24:	79fb      	ldrb	r3, [r7, #7]
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d093      	beq.n	8001e52 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001f2a:	2300      	movs	r3, #0
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3710      	adds	r7, #16
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	60b9      	str	r1, [r7, #8]
 8001f3e:	607a      	str	r2, [r7, #4]
 8001f40:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f42:	e071      	b.n	8002028 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	695b      	ldr	r3, [r3, #20]
 8001f4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f52:	d123      	bne.n	8001f9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f62:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001f6c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2200      	movs	r2, #0
 8001f72:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2220      	movs	r2, #32
 8001f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f88:	f043 0204 	orr.w	r2, r3, #4
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e067      	b.n	800206c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fa2:	d041      	beq.n	8002028 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fa4:	f7ff f9c0 	bl	8001328 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d302      	bcc.n	8001fba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d136      	bne.n	8002028 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	0c1b      	lsrs	r3, r3, #16
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d10c      	bne.n	8001fde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	695b      	ldr	r3, [r3, #20]
 8001fca:	43da      	mvns	r2, r3
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	4013      	ands	r3, r2
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	bf14      	ite	ne
 8001fd6:	2301      	movne	r3, #1
 8001fd8:	2300      	moveq	r3, #0
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	e00b      	b.n	8001ff6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	43da      	mvns	r2, r3
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	bf14      	ite	ne
 8001ff0:	2301      	movne	r3, #1
 8001ff2:	2300      	moveq	r3, #0
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d016      	beq.n	8002028 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2220      	movs	r2, #32
 8002004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2200      	movs	r2, #0
 800200c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002014:	f043 0220 	orr.w	r2, r3, #32
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2200      	movs	r2, #0
 8002020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e021      	b.n	800206c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	0c1b      	lsrs	r3, r3, #16
 800202c:	b2db      	uxtb	r3, r3
 800202e:	2b01      	cmp	r3, #1
 8002030:	d10c      	bne.n	800204c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	695b      	ldr	r3, [r3, #20]
 8002038:	43da      	mvns	r2, r3
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	4013      	ands	r3, r2
 800203e:	b29b      	uxth	r3, r3
 8002040:	2b00      	cmp	r3, #0
 8002042:	bf14      	ite	ne
 8002044:	2301      	movne	r3, #1
 8002046:	2300      	moveq	r3, #0
 8002048:	b2db      	uxtb	r3, r3
 800204a:	e00b      	b.n	8002064 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	699b      	ldr	r3, [r3, #24]
 8002052:	43da      	mvns	r2, r3
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	4013      	ands	r3, r2
 8002058:	b29b      	uxth	r3, r3
 800205a:	2b00      	cmp	r3, #0
 800205c:	bf14      	ite	ne
 800205e:	2301      	movne	r3, #1
 8002060:	2300      	moveq	r3, #0
 8002062:	b2db      	uxtb	r3, r3
 8002064:	2b00      	cmp	r3, #0
 8002066:	f47f af6d 	bne.w	8001f44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800206a:	2300      	movs	r3, #0
}
 800206c:	4618      	mov	r0, r3
 800206e:	3710      	adds	r7, #16
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	60b9      	str	r1, [r7, #8]
 800207e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002080:	e034      	b.n	80020ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002082:	68f8      	ldr	r0, [r7, #12]
 8002084:	f000 f886 	bl	8002194 <I2C_IsAcknowledgeFailed>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e034      	b.n	80020fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002098:	d028      	beq.n	80020ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800209a:	f7ff f945 	bl	8001328 <HAL_GetTick>
 800209e:	4602      	mov	r2, r0
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	68ba      	ldr	r2, [r7, #8]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d302      	bcc.n	80020b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d11d      	bne.n	80020ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	695b      	ldr	r3, [r3, #20]
 80020b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ba:	2b80      	cmp	r3, #128	; 0x80
 80020bc:	d016      	beq.n	80020ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2200      	movs	r2, #0
 80020c2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2220      	movs	r2, #32
 80020c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2200      	movs	r2, #0
 80020d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d8:	f043 0220 	orr.w	r2, r3, #32
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e007      	b.n	80020fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	695b      	ldr	r3, [r3, #20]
 80020f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020f6:	2b80      	cmp	r3, #128	; 0x80
 80020f8:	d1c3      	bne.n	8002082 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80020fa:	2300      	movs	r3, #0
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3710      	adds	r7, #16
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}

08002104 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002110:	e034      	b.n	800217c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002112:	68f8      	ldr	r0, [r7, #12]
 8002114:	f000 f83e 	bl	8002194 <I2C_IsAcknowledgeFailed>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e034      	b.n	800218c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002128:	d028      	beq.n	800217c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800212a:	f7ff f8fd 	bl	8001328 <HAL_GetTick>
 800212e:	4602      	mov	r2, r0
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	68ba      	ldr	r2, [r7, #8]
 8002136:	429a      	cmp	r2, r3
 8002138:	d302      	bcc.n	8002140 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d11d      	bne.n	800217c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	695b      	ldr	r3, [r3, #20]
 8002146:	f003 0304 	and.w	r3, r3, #4
 800214a:	2b04      	cmp	r3, #4
 800214c:	d016      	beq.n	800217c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2200      	movs	r2, #0
 8002152:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2220      	movs	r2, #32
 8002158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2200      	movs	r2, #0
 8002160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002168:	f043 0220 	orr.w	r2, r3, #32
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2200      	movs	r2, #0
 8002174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e007      	b.n	800218c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	695b      	ldr	r3, [r3, #20]
 8002182:	f003 0304 	and.w	r3, r3, #4
 8002186:	2b04      	cmp	r3, #4
 8002188:	d1c3      	bne.n	8002112 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800218a:	2300      	movs	r3, #0
}
 800218c:	4618      	mov	r0, r3
 800218e:	3710      	adds	r7, #16
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}

08002194 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	695b      	ldr	r3, [r3, #20]
 80021a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021aa:	d11b      	bne.n	80021e4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80021b4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2220      	movs	r2, #32
 80021c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d0:	f043 0204 	orr.w	r2, r3, #4
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e000      	b.n	80021e6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	370c      	adds	r7, #12
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
	...

080021f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b086      	sub	sp, #24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d101      	bne.n	8002206 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e267      	b.n	80026d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	2b00      	cmp	r3, #0
 8002210:	d075      	beq.n	80022fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002212:	4b88      	ldr	r3, [pc, #544]	; (8002434 <HAL_RCC_OscConfig+0x240>)
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	f003 030c 	and.w	r3, r3, #12
 800221a:	2b04      	cmp	r3, #4
 800221c:	d00c      	beq.n	8002238 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800221e:	4b85      	ldr	r3, [pc, #532]	; (8002434 <HAL_RCC_OscConfig+0x240>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002226:	2b08      	cmp	r3, #8
 8002228:	d112      	bne.n	8002250 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800222a:	4b82      	ldr	r3, [pc, #520]	; (8002434 <HAL_RCC_OscConfig+0x240>)
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002232:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002236:	d10b      	bne.n	8002250 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002238:	4b7e      	ldr	r3, [pc, #504]	; (8002434 <HAL_RCC_OscConfig+0x240>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d05b      	beq.n	80022fc <HAL_RCC_OscConfig+0x108>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d157      	bne.n	80022fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e242      	b.n	80026d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002258:	d106      	bne.n	8002268 <HAL_RCC_OscConfig+0x74>
 800225a:	4b76      	ldr	r3, [pc, #472]	; (8002434 <HAL_RCC_OscConfig+0x240>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a75      	ldr	r2, [pc, #468]	; (8002434 <HAL_RCC_OscConfig+0x240>)
 8002260:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002264:	6013      	str	r3, [r2, #0]
 8002266:	e01d      	b.n	80022a4 <HAL_RCC_OscConfig+0xb0>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002270:	d10c      	bne.n	800228c <HAL_RCC_OscConfig+0x98>
 8002272:	4b70      	ldr	r3, [pc, #448]	; (8002434 <HAL_RCC_OscConfig+0x240>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a6f      	ldr	r2, [pc, #444]	; (8002434 <HAL_RCC_OscConfig+0x240>)
 8002278:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800227c:	6013      	str	r3, [r2, #0]
 800227e:	4b6d      	ldr	r3, [pc, #436]	; (8002434 <HAL_RCC_OscConfig+0x240>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a6c      	ldr	r2, [pc, #432]	; (8002434 <HAL_RCC_OscConfig+0x240>)
 8002284:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002288:	6013      	str	r3, [r2, #0]
 800228a:	e00b      	b.n	80022a4 <HAL_RCC_OscConfig+0xb0>
 800228c:	4b69      	ldr	r3, [pc, #420]	; (8002434 <HAL_RCC_OscConfig+0x240>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a68      	ldr	r2, [pc, #416]	; (8002434 <HAL_RCC_OscConfig+0x240>)
 8002292:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002296:	6013      	str	r3, [r2, #0]
 8002298:	4b66      	ldr	r3, [pc, #408]	; (8002434 <HAL_RCC_OscConfig+0x240>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a65      	ldr	r2, [pc, #404]	; (8002434 <HAL_RCC_OscConfig+0x240>)
 800229e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d013      	beq.n	80022d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ac:	f7ff f83c 	bl	8001328 <HAL_GetTick>
 80022b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022b2:	e008      	b.n	80022c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022b4:	f7ff f838 	bl	8001328 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b64      	cmp	r3, #100	; 0x64
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e207      	b.n	80026d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022c6:	4b5b      	ldr	r3, [pc, #364]	; (8002434 <HAL_RCC_OscConfig+0x240>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d0f0      	beq.n	80022b4 <HAL_RCC_OscConfig+0xc0>
 80022d2:	e014      	b.n	80022fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d4:	f7ff f828 	bl	8001328 <HAL_GetTick>
 80022d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022da:	e008      	b.n	80022ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022dc:	f7ff f824 	bl	8001328 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b64      	cmp	r3, #100	; 0x64
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e1f3      	b.n	80026d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ee:	4b51      	ldr	r3, [pc, #324]	; (8002434 <HAL_RCC_OscConfig+0x240>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d1f0      	bne.n	80022dc <HAL_RCC_OscConfig+0xe8>
 80022fa:	e000      	b.n	80022fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0302 	and.w	r3, r3, #2
 8002306:	2b00      	cmp	r3, #0
 8002308:	d063      	beq.n	80023d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800230a:	4b4a      	ldr	r3, [pc, #296]	; (8002434 <HAL_RCC_OscConfig+0x240>)
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f003 030c 	and.w	r3, r3, #12
 8002312:	2b00      	cmp	r3, #0
 8002314:	d00b      	beq.n	800232e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002316:	4b47      	ldr	r3, [pc, #284]	; (8002434 <HAL_RCC_OscConfig+0x240>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800231e:	2b08      	cmp	r3, #8
 8002320:	d11c      	bne.n	800235c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002322:	4b44      	ldr	r3, [pc, #272]	; (8002434 <HAL_RCC_OscConfig+0x240>)
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d116      	bne.n	800235c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800232e:	4b41      	ldr	r3, [pc, #260]	; (8002434 <HAL_RCC_OscConfig+0x240>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d005      	beq.n	8002346 <HAL_RCC_OscConfig+0x152>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	2b01      	cmp	r3, #1
 8002340:	d001      	beq.n	8002346 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e1c7      	b.n	80026d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002346:	4b3b      	ldr	r3, [pc, #236]	; (8002434 <HAL_RCC_OscConfig+0x240>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	00db      	lsls	r3, r3, #3
 8002354:	4937      	ldr	r1, [pc, #220]	; (8002434 <HAL_RCC_OscConfig+0x240>)
 8002356:	4313      	orrs	r3, r2
 8002358:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800235a:	e03a      	b.n	80023d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d020      	beq.n	80023a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002364:	4b34      	ldr	r3, [pc, #208]	; (8002438 <HAL_RCC_OscConfig+0x244>)
 8002366:	2201      	movs	r2, #1
 8002368:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800236a:	f7fe ffdd 	bl	8001328 <HAL_GetTick>
 800236e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002370:	e008      	b.n	8002384 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002372:	f7fe ffd9 	bl	8001328 <HAL_GetTick>
 8002376:	4602      	mov	r2, r0
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	2b02      	cmp	r3, #2
 800237e:	d901      	bls.n	8002384 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e1a8      	b.n	80026d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002384:	4b2b      	ldr	r3, [pc, #172]	; (8002434 <HAL_RCC_OscConfig+0x240>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0302 	and.w	r3, r3, #2
 800238c:	2b00      	cmp	r3, #0
 800238e:	d0f0      	beq.n	8002372 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002390:	4b28      	ldr	r3, [pc, #160]	; (8002434 <HAL_RCC_OscConfig+0x240>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	691b      	ldr	r3, [r3, #16]
 800239c:	00db      	lsls	r3, r3, #3
 800239e:	4925      	ldr	r1, [pc, #148]	; (8002434 <HAL_RCC_OscConfig+0x240>)
 80023a0:	4313      	orrs	r3, r2
 80023a2:	600b      	str	r3, [r1, #0]
 80023a4:	e015      	b.n	80023d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023a6:	4b24      	ldr	r3, [pc, #144]	; (8002438 <HAL_RCC_OscConfig+0x244>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ac:	f7fe ffbc 	bl	8001328 <HAL_GetTick>
 80023b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023b2:	e008      	b.n	80023c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023b4:	f7fe ffb8 	bl	8001328 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e187      	b.n	80026d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023c6:	4b1b      	ldr	r3, [pc, #108]	; (8002434 <HAL_RCC_OscConfig+0x240>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d1f0      	bne.n	80023b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0308 	and.w	r3, r3, #8
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d036      	beq.n	800244c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	695b      	ldr	r3, [r3, #20]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d016      	beq.n	8002414 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023e6:	4b15      	ldr	r3, [pc, #84]	; (800243c <HAL_RCC_OscConfig+0x248>)
 80023e8:	2201      	movs	r2, #1
 80023ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ec:	f7fe ff9c 	bl	8001328 <HAL_GetTick>
 80023f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023f2:	e008      	b.n	8002406 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023f4:	f7fe ff98 	bl	8001328 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d901      	bls.n	8002406 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e167      	b.n	80026d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002406:	4b0b      	ldr	r3, [pc, #44]	; (8002434 <HAL_RCC_OscConfig+0x240>)
 8002408:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800240a:	f003 0302 	and.w	r3, r3, #2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d0f0      	beq.n	80023f4 <HAL_RCC_OscConfig+0x200>
 8002412:	e01b      	b.n	800244c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002414:	4b09      	ldr	r3, [pc, #36]	; (800243c <HAL_RCC_OscConfig+0x248>)
 8002416:	2200      	movs	r2, #0
 8002418:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800241a:	f7fe ff85 	bl	8001328 <HAL_GetTick>
 800241e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002420:	e00e      	b.n	8002440 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002422:	f7fe ff81 	bl	8001328 <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	2b02      	cmp	r3, #2
 800242e:	d907      	bls.n	8002440 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e150      	b.n	80026d6 <HAL_RCC_OscConfig+0x4e2>
 8002434:	40023800 	.word	0x40023800
 8002438:	42470000 	.word	0x42470000
 800243c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002440:	4b88      	ldr	r3, [pc, #544]	; (8002664 <HAL_RCC_OscConfig+0x470>)
 8002442:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002444:	f003 0302 	and.w	r3, r3, #2
 8002448:	2b00      	cmp	r3, #0
 800244a:	d1ea      	bne.n	8002422 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0304 	and.w	r3, r3, #4
 8002454:	2b00      	cmp	r3, #0
 8002456:	f000 8097 	beq.w	8002588 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800245a:	2300      	movs	r3, #0
 800245c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800245e:	4b81      	ldr	r3, [pc, #516]	; (8002664 <HAL_RCC_OscConfig+0x470>)
 8002460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d10f      	bne.n	800248a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800246a:	2300      	movs	r3, #0
 800246c:	60bb      	str	r3, [r7, #8]
 800246e:	4b7d      	ldr	r3, [pc, #500]	; (8002664 <HAL_RCC_OscConfig+0x470>)
 8002470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002472:	4a7c      	ldr	r2, [pc, #496]	; (8002664 <HAL_RCC_OscConfig+0x470>)
 8002474:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002478:	6413      	str	r3, [r2, #64]	; 0x40
 800247a:	4b7a      	ldr	r3, [pc, #488]	; (8002664 <HAL_RCC_OscConfig+0x470>)
 800247c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002482:	60bb      	str	r3, [r7, #8]
 8002484:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002486:	2301      	movs	r3, #1
 8002488:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800248a:	4b77      	ldr	r3, [pc, #476]	; (8002668 <HAL_RCC_OscConfig+0x474>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002492:	2b00      	cmp	r3, #0
 8002494:	d118      	bne.n	80024c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002496:	4b74      	ldr	r3, [pc, #464]	; (8002668 <HAL_RCC_OscConfig+0x474>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a73      	ldr	r2, [pc, #460]	; (8002668 <HAL_RCC_OscConfig+0x474>)
 800249c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024a2:	f7fe ff41 	bl	8001328 <HAL_GetTick>
 80024a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024a8:	e008      	b.n	80024bc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024aa:	f7fe ff3d 	bl	8001328 <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d901      	bls.n	80024bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e10c      	b.n	80026d6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024bc:	4b6a      	ldr	r3, [pc, #424]	; (8002668 <HAL_RCC_OscConfig+0x474>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d0f0      	beq.n	80024aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d106      	bne.n	80024de <HAL_RCC_OscConfig+0x2ea>
 80024d0:	4b64      	ldr	r3, [pc, #400]	; (8002664 <HAL_RCC_OscConfig+0x470>)
 80024d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d4:	4a63      	ldr	r2, [pc, #396]	; (8002664 <HAL_RCC_OscConfig+0x470>)
 80024d6:	f043 0301 	orr.w	r3, r3, #1
 80024da:	6713      	str	r3, [r2, #112]	; 0x70
 80024dc:	e01c      	b.n	8002518 <HAL_RCC_OscConfig+0x324>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	2b05      	cmp	r3, #5
 80024e4:	d10c      	bne.n	8002500 <HAL_RCC_OscConfig+0x30c>
 80024e6:	4b5f      	ldr	r3, [pc, #380]	; (8002664 <HAL_RCC_OscConfig+0x470>)
 80024e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ea:	4a5e      	ldr	r2, [pc, #376]	; (8002664 <HAL_RCC_OscConfig+0x470>)
 80024ec:	f043 0304 	orr.w	r3, r3, #4
 80024f0:	6713      	str	r3, [r2, #112]	; 0x70
 80024f2:	4b5c      	ldr	r3, [pc, #368]	; (8002664 <HAL_RCC_OscConfig+0x470>)
 80024f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024f6:	4a5b      	ldr	r2, [pc, #364]	; (8002664 <HAL_RCC_OscConfig+0x470>)
 80024f8:	f043 0301 	orr.w	r3, r3, #1
 80024fc:	6713      	str	r3, [r2, #112]	; 0x70
 80024fe:	e00b      	b.n	8002518 <HAL_RCC_OscConfig+0x324>
 8002500:	4b58      	ldr	r3, [pc, #352]	; (8002664 <HAL_RCC_OscConfig+0x470>)
 8002502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002504:	4a57      	ldr	r2, [pc, #348]	; (8002664 <HAL_RCC_OscConfig+0x470>)
 8002506:	f023 0301 	bic.w	r3, r3, #1
 800250a:	6713      	str	r3, [r2, #112]	; 0x70
 800250c:	4b55      	ldr	r3, [pc, #340]	; (8002664 <HAL_RCC_OscConfig+0x470>)
 800250e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002510:	4a54      	ldr	r2, [pc, #336]	; (8002664 <HAL_RCC_OscConfig+0x470>)
 8002512:	f023 0304 	bic.w	r3, r3, #4
 8002516:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d015      	beq.n	800254c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002520:	f7fe ff02 	bl	8001328 <HAL_GetTick>
 8002524:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002526:	e00a      	b.n	800253e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002528:	f7fe fefe 	bl	8001328 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	f241 3288 	movw	r2, #5000	; 0x1388
 8002536:	4293      	cmp	r3, r2
 8002538:	d901      	bls.n	800253e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e0cb      	b.n	80026d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800253e:	4b49      	ldr	r3, [pc, #292]	; (8002664 <HAL_RCC_OscConfig+0x470>)
 8002540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	2b00      	cmp	r3, #0
 8002548:	d0ee      	beq.n	8002528 <HAL_RCC_OscConfig+0x334>
 800254a:	e014      	b.n	8002576 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800254c:	f7fe feec 	bl	8001328 <HAL_GetTick>
 8002550:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002552:	e00a      	b.n	800256a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002554:	f7fe fee8 	bl	8001328 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002562:	4293      	cmp	r3, r2
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e0b5      	b.n	80026d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800256a:	4b3e      	ldr	r3, [pc, #248]	; (8002664 <HAL_RCC_OscConfig+0x470>)
 800256c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800256e:	f003 0302 	and.w	r3, r3, #2
 8002572:	2b00      	cmp	r3, #0
 8002574:	d1ee      	bne.n	8002554 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002576:	7dfb      	ldrb	r3, [r7, #23]
 8002578:	2b01      	cmp	r3, #1
 800257a:	d105      	bne.n	8002588 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800257c:	4b39      	ldr	r3, [pc, #228]	; (8002664 <HAL_RCC_OscConfig+0x470>)
 800257e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002580:	4a38      	ldr	r2, [pc, #224]	; (8002664 <HAL_RCC_OscConfig+0x470>)
 8002582:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002586:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	699b      	ldr	r3, [r3, #24]
 800258c:	2b00      	cmp	r3, #0
 800258e:	f000 80a1 	beq.w	80026d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002592:	4b34      	ldr	r3, [pc, #208]	; (8002664 <HAL_RCC_OscConfig+0x470>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f003 030c 	and.w	r3, r3, #12
 800259a:	2b08      	cmp	r3, #8
 800259c:	d05c      	beq.n	8002658 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	699b      	ldr	r3, [r3, #24]
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d141      	bne.n	800262a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025a6:	4b31      	ldr	r3, [pc, #196]	; (800266c <HAL_RCC_OscConfig+0x478>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ac:	f7fe febc 	bl	8001328 <HAL_GetTick>
 80025b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025b2:	e008      	b.n	80025c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025b4:	f7fe feb8 	bl	8001328 <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e087      	b.n	80026d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025c6:	4b27      	ldr	r3, [pc, #156]	; (8002664 <HAL_RCC_OscConfig+0x470>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d1f0      	bne.n	80025b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	69da      	ldr	r2, [r3, #28]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a1b      	ldr	r3, [r3, #32]
 80025da:	431a      	orrs	r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e0:	019b      	lsls	r3, r3, #6
 80025e2:	431a      	orrs	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e8:	085b      	lsrs	r3, r3, #1
 80025ea:	3b01      	subs	r3, #1
 80025ec:	041b      	lsls	r3, r3, #16
 80025ee:	431a      	orrs	r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f4:	061b      	lsls	r3, r3, #24
 80025f6:	491b      	ldr	r1, [pc, #108]	; (8002664 <HAL_RCC_OscConfig+0x470>)
 80025f8:	4313      	orrs	r3, r2
 80025fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025fc:	4b1b      	ldr	r3, [pc, #108]	; (800266c <HAL_RCC_OscConfig+0x478>)
 80025fe:	2201      	movs	r2, #1
 8002600:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002602:	f7fe fe91 	bl	8001328 <HAL_GetTick>
 8002606:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002608:	e008      	b.n	800261c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800260a:	f7fe fe8d 	bl	8001328 <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	2b02      	cmp	r3, #2
 8002616:	d901      	bls.n	800261c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e05c      	b.n	80026d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800261c:	4b11      	ldr	r3, [pc, #68]	; (8002664 <HAL_RCC_OscConfig+0x470>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d0f0      	beq.n	800260a <HAL_RCC_OscConfig+0x416>
 8002628:	e054      	b.n	80026d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800262a:	4b10      	ldr	r3, [pc, #64]	; (800266c <HAL_RCC_OscConfig+0x478>)
 800262c:	2200      	movs	r2, #0
 800262e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002630:	f7fe fe7a 	bl	8001328 <HAL_GetTick>
 8002634:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002636:	e008      	b.n	800264a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002638:	f7fe fe76 	bl	8001328 <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	2b02      	cmp	r3, #2
 8002644:	d901      	bls.n	800264a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e045      	b.n	80026d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800264a:	4b06      	ldr	r3, [pc, #24]	; (8002664 <HAL_RCC_OscConfig+0x470>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d1f0      	bne.n	8002638 <HAL_RCC_OscConfig+0x444>
 8002656:	e03d      	b.n	80026d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	699b      	ldr	r3, [r3, #24]
 800265c:	2b01      	cmp	r3, #1
 800265e:	d107      	bne.n	8002670 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e038      	b.n	80026d6 <HAL_RCC_OscConfig+0x4e2>
 8002664:	40023800 	.word	0x40023800
 8002668:	40007000 	.word	0x40007000
 800266c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002670:	4b1b      	ldr	r3, [pc, #108]	; (80026e0 <HAL_RCC_OscConfig+0x4ec>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	699b      	ldr	r3, [r3, #24]
 800267a:	2b01      	cmp	r3, #1
 800267c:	d028      	beq.n	80026d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002688:	429a      	cmp	r2, r3
 800268a:	d121      	bne.n	80026d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002696:	429a      	cmp	r2, r3
 8002698:	d11a      	bne.n	80026d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800269a:	68fa      	ldr	r2, [r7, #12]
 800269c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80026a0:	4013      	ands	r3, r2
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80026a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d111      	bne.n	80026d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b6:	085b      	lsrs	r3, r3, #1
 80026b8:	3b01      	subs	r3, #1
 80026ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026bc:	429a      	cmp	r2, r3
 80026be:	d107      	bne.n	80026d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d001      	beq.n	80026d4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e000      	b.n	80026d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3718      	adds	r7, #24
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	40023800 	.word	0x40023800

080026e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d101      	bne.n	80026f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e0cc      	b.n	8002892 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026f8:	4b68      	ldr	r3, [pc, #416]	; (800289c <HAL_RCC_ClockConfig+0x1b8>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0307 	and.w	r3, r3, #7
 8002700:	683a      	ldr	r2, [r7, #0]
 8002702:	429a      	cmp	r2, r3
 8002704:	d90c      	bls.n	8002720 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002706:	4b65      	ldr	r3, [pc, #404]	; (800289c <HAL_RCC_ClockConfig+0x1b8>)
 8002708:	683a      	ldr	r2, [r7, #0]
 800270a:	b2d2      	uxtb	r2, r2
 800270c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800270e:	4b63      	ldr	r3, [pc, #396]	; (800289c <HAL_RCC_ClockConfig+0x1b8>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0307 	and.w	r3, r3, #7
 8002716:	683a      	ldr	r2, [r7, #0]
 8002718:	429a      	cmp	r2, r3
 800271a:	d001      	beq.n	8002720 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e0b8      	b.n	8002892 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d020      	beq.n	800276e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0304 	and.w	r3, r3, #4
 8002734:	2b00      	cmp	r3, #0
 8002736:	d005      	beq.n	8002744 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002738:	4b59      	ldr	r3, [pc, #356]	; (80028a0 <HAL_RCC_ClockConfig+0x1bc>)
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	4a58      	ldr	r2, [pc, #352]	; (80028a0 <HAL_RCC_ClockConfig+0x1bc>)
 800273e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002742:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0308 	and.w	r3, r3, #8
 800274c:	2b00      	cmp	r3, #0
 800274e:	d005      	beq.n	800275c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002750:	4b53      	ldr	r3, [pc, #332]	; (80028a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	4a52      	ldr	r2, [pc, #328]	; (80028a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002756:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800275a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800275c:	4b50      	ldr	r3, [pc, #320]	; (80028a0 <HAL_RCC_ClockConfig+0x1bc>)
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	494d      	ldr	r1, [pc, #308]	; (80028a0 <HAL_RCC_ClockConfig+0x1bc>)
 800276a:	4313      	orrs	r3, r2
 800276c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	2b00      	cmp	r3, #0
 8002778:	d044      	beq.n	8002804 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	2b01      	cmp	r3, #1
 8002780:	d107      	bne.n	8002792 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002782:	4b47      	ldr	r3, [pc, #284]	; (80028a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d119      	bne.n	80027c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e07f      	b.n	8002892 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	2b02      	cmp	r3, #2
 8002798:	d003      	beq.n	80027a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800279e:	2b03      	cmp	r3, #3
 80027a0:	d107      	bne.n	80027b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027a2:	4b3f      	ldr	r3, [pc, #252]	; (80028a0 <HAL_RCC_ClockConfig+0x1bc>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d109      	bne.n	80027c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e06f      	b.n	8002892 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027b2:	4b3b      	ldr	r3, [pc, #236]	; (80028a0 <HAL_RCC_ClockConfig+0x1bc>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0302 	and.w	r3, r3, #2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d101      	bne.n	80027c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e067      	b.n	8002892 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027c2:	4b37      	ldr	r3, [pc, #220]	; (80028a0 <HAL_RCC_ClockConfig+0x1bc>)
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f023 0203 	bic.w	r2, r3, #3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	4934      	ldr	r1, [pc, #208]	; (80028a0 <HAL_RCC_ClockConfig+0x1bc>)
 80027d0:	4313      	orrs	r3, r2
 80027d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027d4:	f7fe fda8 	bl	8001328 <HAL_GetTick>
 80027d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027da:	e00a      	b.n	80027f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027dc:	f7fe fda4 	bl	8001328 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e04f      	b.n	8002892 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027f2:	4b2b      	ldr	r3, [pc, #172]	; (80028a0 <HAL_RCC_ClockConfig+0x1bc>)
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f003 020c 	and.w	r2, r3, #12
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	429a      	cmp	r2, r3
 8002802:	d1eb      	bne.n	80027dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002804:	4b25      	ldr	r3, [pc, #148]	; (800289c <HAL_RCC_ClockConfig+0x1b8>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0307 	and.w	r3, r3, #7
 800280c:	683a      	ldr	r2, [r7, #0]
 800280e:	429a      	cmp	r2, r3
 8002810:	d20c      	bcs.n	800282c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002812:	4b22      	ldr	r3, [pc, #136]	; (800289c <HAL_RCC_ClockConfig+0x1b8>)
 8002814:	683a      	ldr	r2, [r7, #0]
 8002816:	b2d2      	uxtb	r2, r2
 8002818:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800281a:	4b20      	ldr	r3, [pc, #128]	; (800289c <HAL_RCC_ClockConfig+0x1b8>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0307 	and.w	r3, r3, #7
 8002822:	683a      	ldr	r2, [r7, #0]
 8002824:	429a      	cmp	r2, r3
 8002826:	d001      	beq.n	800282c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e032      	b.n	8002892 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0304 	and.w	r3, r3, #4
 8002834:	2b00      	cmp	r3, #0
 8002836:	d008      	beq.n	800284a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002838:	4b19      	ldr	r3, [pc, #100]	; (80028a0 <HAL_RCC_ClockConfig+0x1bc>)
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	4916      	ldr	r1, [pc, #88]	; (80028a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002846:	4313      	orrs	r3, r2
 8002848:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0308 	and.w	r3, r3, #8
 8002852:	2b00      	cmp	r3, #0
 8002854:	d009      	beq.n	800286a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002856:	4b12      	ldr	r3, [pc, #72]	; (80028a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	490e      	ldr	r1, [pc, #56]	; (80028a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002866:	4313      	orrs	r3, r2
 8002868:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800286a:	f000 f821 	bl	80028b0 <HAL_RCC_GetSysClockFreq>
 800286e:	4602      	mov	r2, r0
 8002870:	4b0b      	ldr	r3, [pc, #44]	; (80028a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	091b      	lsrs	r3, r3, #4
 8002876:	f003 030f 	and.w	r3, r3, #15
 800287a:	490a      	ldr	r1, [pc, #40]	; (80028a4 <HAL_RCC_ClockConfig+0x1c0>)
 800287c:	5ccb      	ldrb	r3, [r1, r3]
 800287e:	fa22 f303 	lsr.w	r3, r2, r3
 8002882:	4a09      	ldr	r2, [pc, #36]	; (80028a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002884:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002886:	4b09      	ldr	r3, [pc, #36]	; (80028ac <HAL_RCC_ClockConfig+0x1c8>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4618      	mov	r0, r3
 800288c:	f7fe fc46 	bl	800111c <HAL_InitTick>

  return HAL_OK;
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	3710      	adds	r7, #16
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	40023c00 	.word	0x40023c00
 80028a0:	40023800 	.word	0x40023800
 80028a4:	08004810 	.word	0x08004810
 80028a8:	20000074 	.word	0x20000074
 80028ac:	20000078 	.word	0x20000078

080028b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028b4:	b094      	sub	sp, #80	; 0x50
 80028b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80028b8:	2300      	movs	r3, #0
 80028ba:	647b      	str	r3, [r7, #68]	; 0x44
 80028bc:	2300      	movs	r3, #0
 80028be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028c0:	2300      	movs	r3, #0
 80028c2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80028c4:	2300      	movs	r3, #0
 80028c6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028c8:	4b79      	ldr	r3, [pc, #484]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x200>)
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f003 030c 	and.w	r3, r3, #12
 80028d0:	2b08      	cmp	r3, #8
 80028d2:	d00d      	beq.n	80028f0 <HAL_RCC_GetSysClockFreq+0x40>
 80028d4:	2b08      	cmp	r3, #8
 80028d6:	f200 80e1 	bhi.w	8002a9c <HAL_RCC_GetSysClockFreq+0x1ec>
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d002      	beq.n	80028e4 <HAL_RCC_GetSysClockFreq+0x34>
 80028de:	2b04      	cmp	r3, #4
 80028e0:	d003      	beq.n	80028ea <HAL_RCC_GetSysClockFreq+0x3a>
 80028e2:	e0db      	b.n	8002a9c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028e4:	4b73      	ldr	r3, [pc, #460]	; (8002ab4 <HAL_RCC_GetSysClockFreq+0x204>)
 80028e6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80028e8:	e0db      	b.n	8002aa2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028ea:	4b73      	ldr	r3, [pc, #460]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0x208>)
 80028ec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80028ee:	e0d8      	b.n	8002aa2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028f0:	4b6f      	ldr	r3, [pc, #444]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x200>)
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028f8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028fa:	4b6d      	ldr	r3, [pc, #436]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x200>)
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d063      	beq.n	80029ce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002906:	4b6a      	ldr	r3, [pc, #424]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	099b      	lsrs	r3, r3, #6
 800290c:	2200      	movs	r2, #0
 800290e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002910:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002914:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002918:	633b      	str	r3, [r7, #48]	; 0x30
 800291a:	2300      	movs	r3, #0
 800291c:	637b      	str	r3, [r7, #52]	; 0x34
 800291e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002922:	4622      	mov	r2, r4
 8002924:	462b      	mov	r3, r5
 8002926:	f04f 0000 	mov.w	r0, #0
 800292a:	f04f 0100 	mov.w	r1, #0
 800292e:	0159      	lsls	r1, r3, #5
 8002930:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002934:	0150      	lsls	r0, r2, #5
 8002936:	4602      	mov	r2, r0
 8002938:	460b      	mov	r3, r1
 800293a:	4621      	mov	r1, r4
 800293c:	1a51      	subs	r1, r2, r1
 800293e:	6139      	str	r1, [r7, #16]
 8002940:	4629      	mov	r1, r5
 8002942:	eb63 0301 	sbc.w	r3, r3, r1
 8002946:	617b      	str	r3, [r7, #20]
 8002948:	f04f 0200 	mov.w	r2, #0
 800294c:	f04f 0300 	mov.w	r3, #0
 8002950:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002954:	4659      	mov	r1, fp
 8002956:	018b      	lsls	r3, r1, #6
 8002958:	4651      	mov	r1, sl
 800295a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800295e:	4651      	mov	r1, sl
 8002960:	018a      	lsls	r2, r1, #6
 8002962:	4651      	mov	r1, sl
 8002964:	ebb2 0801 	subs.w	r8, r2, r1
 8002968:	4659      	mov	r1, fp
 800296a:	eb63 0901 	sbc.w	r9, r3, r1
 800296e:	f04f 0200 	mov.w	r2, #0
 8002972:	f04f 0300 	mov.w	r3, #0
 8002976:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800297a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800297e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002982:	4690      	mov	r8, r2
 8002984:	4699      	mov	r9, r3
 8002986:	4623      	mov	r3, r4
 8002988:	eb18 0303 	adds.w	r3, r8, r3
 800298c:	60bb      	str	r3, [r7, #8]
 800298e:	462b      	mov	r3, r5
 8002990:	eb49 0303 	adc.w	r3, r9, r3
 8002994:	60fb      	str	r3, [r7, #12]
 8002996:	f04f 0200 	mov.w	r2, #0
 800299a:	f04f 0300 	mov.w	r3, #0
 800299e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80029a2:	4629      	mov	r1, r5
 80029a4:	024b      	lsls	r3, r1, #9
 80029a6:	4621      	mov	r1, r4
 80029a8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80029ac:	4621      	mov	r1, r4
 80029ae:	024a      	lsls	r2, r1, #9
 80029b0:	4610      	mov	r0, r2
 80029b2:	4619      	mov	r1, r3
 80029b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029b6:	2200      	movs	r2, #0
 80029b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80029ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80029bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80029c0:	f7fd fc0e 	bl	80001e0 <__aeabi_uldivmod>
 80029c4:	4602      	mov	r2, r0
 80029c6:	460b      	mov	r3, r1
 80029c8:	4613      	mov	r3, r2
 80029ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029cc:	e058      	b.n	8002a80 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029ce:	4b38      	ldr	r3, [pc, #224]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x200>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	099b      	lsrs	r3, r3, #6
 80029d4:	2200      	movs	r2, #0
 80029d6:	4618      	mov	r0, r3
 80029d8:	4611      	mov	r1, r2
 80029da:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80029de:	623b      	str	r3, [r7, #32]
 80029e0:	2300      	movs	r3, #0
 80029e2:	627b      	str	r3, [r7, #36]	; 0x24
 80029e4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80029e8:	4642      	mov	r2, r8
 80029ea:	464b      	mov	r3, r9
 80029ec:	f04f 0000 	mov.w	r0, #0
 80029f0:	f04f 0100 	mov.w	r1, #0
 80029f4:	0159      	lsls	r1, r3, #5
 80029f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029fa:	0150      	lsls	r0, r2, #5
 80029fc:	4602      	mov	r2, r0
 80029fe:	460b      	mov	r3, r1
 8002a00:	4641      	mov	r1, r8
 8002a02:	ebb2 0a01 	subs.w	sl, r2, r1
 8002a06:	4649      	mov	r1, r9
 8002a08:	eb63 0b01 	sbc.w	fp, r3, r1
 8002a0c:	f04f 0200 	mov.w	r2, #0
 8002a10:	f04f 0300 	mov.w	r3, #0
 8002a14:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002a18:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002a1c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002a20:	ebb2 040a 	subs.w	r4, r2, sl
 8002a24:	eb63 050b 	sbc.w	r5, r3, fp
 8002a28:	f04f 0200 	mov.w	r2, #0
 8002a2c:	f04f 0300 	mov.w	r3, #0
 8002a30:	00eb      	lsls	r3, r5, #3
 8002a32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a36:	00e2      	lsls	r2, r4, #3
 8002a38:	4614      	mov	r4, r2
 8002a3a:	461d      	mov	r5, r3
 8002a3c:	4643      	mov	r3, r8
 8002a3e:	18e3      	adds	r3, r4, r3
 8002a40:	603b      	str	r3, [r7, #0]
 8002a42:	464b      	mov	r3, r9
 8002a44:	eb45 0303 	adc.w	r3, r5, r3
 8002a48:	607b      	str	r3, [r7, #4]
 8002a4a:	f04f 0200 	mov.w	r2, #0
 8002a4e:	f04f 0300 	mov.w	r3, #0
 8002a52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a56:	4629      	mov	r1, r5
 8002a58:	028b      	lsls	r3, r1, #10
 8002a5a:	4621      	mov	r1, r4
 8002a5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a60:	4621      	mov	r1, r4
 8002a62:	028a      	lsls	r2, r1, #10
 8002a64:	4610      	mov	r0, r2
 8002a66:	4619      	mov	r1, r3
 8002a68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	61bb      	str	r3, [r7, #24]
 8002a6e:	61fa      	str	r2, [r7, #28]
 8002a70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a74:	f7fd fbb4 	bl	80001e0 <__aeabi_uldivmod>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a80:	4b0b      	ldr	r3, [pc, #44]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	0c1b      	lsrs	r3, r3, #16
 8002a86:	f003 0303 	and.w	r3, r3, #3
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002a90:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a98:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a9a:	e002      	b.n	8002aa2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a9c:	4b05      	ldr	r3, [pc, #20]	; (8002ab4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a9e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002aa0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002aa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3750      	adds	r7, #80	; 0x50
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002aae:	bf00      	nop
 8002ab0:	40023800 	.word	0x40023800
 8002ab4:	00f42400 	.word	0x00f42400
 8002ab8:	007a1200 	.word	0x007a1200

08002abc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ac0:	4b03      	ldr	r3, [pc, #12]	; (8002ad0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	20000074 	.word	0x20000074

08002ad4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ad8:	f7ff fff0 	bl	8002abc <HAL_RCC_GetHCLKFreq>
 8002adc:	4602      	mov	r2, r0
 8002ade:	4b05      	ldr	r3, [pc, #20]	; (8002af4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	0a9b      	lsrs	r3, r3, #10
 8002ae4:	f003 0307 	and.w	r3, r3, #7
 8002ae8:	4903      	ldr	r1, [pc, #12]	; (8002af8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002aea:	5ccb      	ldrb	r3, [r1, r3]
 8002aec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	40023800 	.word	0x40023800
 8002af8:	08004820 	.word	0x08004820

08002afc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b00:	f7ff ffdc 	bl	8002abc <HAL_RCC_GetHCLKFreq>
 8002b04:	4602      	mov	r2, r0
 8002b06:	4b05      	ldr	r3, [pc, #20]	; (8002b1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	0b5b      	lsrs	r3, r3, #13
 8002b0c:	f003 0307 	and.w	r3, r3, #7
 8002b10:	4903      	ldr	r1, [pc, #12]	; (8002b20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b12:	5ccb      	ldrb	r3, [r1, r3]
 8002b14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	40023800 	.word	0x40023800
 8002b20:	08004820 	.word	0x08004820

08002b24 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	220f      	movs	r2, #15
 8002b32:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002b34:	4b12      	ldr	r3, [pc, #72]	; (8002b80 <HAL_RCC_GetClockConfig+0x5c>)
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f003 0203 	and.w	r2, r3, #3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002b40:	4b0f      	ldr	r3, [pc, #60]	; (8002b80 <HAL_RCC_GetClockConfig+0x5c>)
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002b4c:	4b0c      	ldr	r3, [pc, #48]	; (8002b80 <HAL_RCC_GetClockConfig+0x5c>)
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002b58:	4b09      	ldr	r3, [pc, #36]	; (8002b80 <HAL_RCC_GetClockConfig+0x5c>)
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	08db      	lsrs	r3, r3, #3
 8002b5e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002b66:	4b07      	ldr	r3, [pc, #28]	; (8002b84 <HAL_RCC_GetClockConfig+0x60>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0207 	and.w	r2, r3, #7
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	601a      	str	r2, [r3, #0]
}
 8002b72:	bf00      	nop
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	40023800 	.word	0x40023800
 8002b84:	40023c00 	.word	0x40023c00

08002b88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d101      	bne.n	8002b9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e041      	b.n	8002c1e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d106      	bne.n	8002bb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f000 f839 	bl	8002c26 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2202      	movs	r2, #2
 8002bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	3304      	adds	r3, #4
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	4610      	mov	r0, r2
 8002bc8:	f000 f9b2 	bl	8002f30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3708      	adds	r7, #8
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002c26:	b480      	push	{r7}
 8002c28:	b083      	sub	sp, #12
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002c2e:	bf00      	nop
 8002c30:	370c      	adds	r7, #12
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
	...

08002c3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b085      	sub	sp, #20
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d001      	beq.n	8002c54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e044      	b.n	8002cde <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2202      	movs	r2, #2
 8002c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	68da      	ldr	r2, [r3, #12]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f042 0201 	orr.w	r2, r2, #1
 8002c6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a1e      	ldr	r2, [pc, #120]	; (8002cec <HAL_TIM_Base_Start_IT+0xb0>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d018      	beq.n	8002ca8 <HAL_TIM_Base_Start_IT+0x6c>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c7e:	d013      	beq.n	8002ca8 <HAL_TIM_Base_Start_IT+0x6c>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a1a      	ldr	r2, [pc, #104]	; (8002cf0 <HAL_TIM_Base_Start_IT+0xb4>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d00e      	beq.n	8002ca8 <HAL_TIM_Base_Start_IT+0x6c>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a19      	ldr	r2, [pc, #100]	; (8002cf4 <HAL_TIM_Base_Start_IT+0xb8>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d009      	beq.n	8002ca8 <HAL_TIM_Base_Start_IT+0x6c>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a17      	ldr	r2, [pc, #92]	; (8002cf8 <HAL_TIM_Base_Start_IT+0xbc>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d004      	beq.n	8002ca8 <HAL_TIM_Base_Start_IT+0x6c>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a16      	ldr	r2, [pc, #88]	; (8002cfc <HAL_TIM_Base_Start_IT+0xc0>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d111      	bne.n	8002ccc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f003 0307 	and.w	r3, r3, #7
 8002cb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2b06      	cmp	r3, #6
 8002cb8:	d010      	beq.n	8002cdc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f042 0201 	orr.w	r2, r2, #1
 8002cc8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cca:	e007      	b.n	8002cdc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f042 0201 	orr.w	r2, r2, #1
 8002cda:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3714      	adds	r7, #20
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	40010000 	.word	0x40010000
 8002cf0:	40000400 	.word	0x40000400
 8002cf4:	40000800 	.word	0x40000800
 8002cf8:	40000c00 	.word	0x40000c00
 8002cfc:	40014000 	.word	0x40014000

08002d00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d020      	beq.n	8002d64 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f003 0302 	and.w	r3, r3, #2
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d01b      	beq.n	8002d64 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f06f 0202 	mvn.w	r2, #2
 8002d34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	699b      	ldr	r3, [r3, #24]
 8002d42:	f003 0303 	and.w	r3, r3, #3
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d003      	beq.n	8002d52 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 f8d2 	bl	8002ef4 <HAL_TIM_IC_CaptureCallback>
 8002d50:	e005      	b.n	8002d5e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f000 f8c4 	bl	8002ee0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f000 f8d5 	bl	8002f08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	f003 0304 	and.w	r3, r3, #4
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d020      	beq.n	8002db0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	f003 0304 	and.w	r3, r3, #4
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d01b      	beq.n	8002db0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f06f 0204 	mvn.w	r2, #4
 8002d80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2202      	movs	r2, #2
 8002d86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d003      	beq.n	8002d9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f000 f8ac 	bl	8002ef4 <HAL_TIM_IC_CaptureCallback>
 8002d9c:	e005      	b.n	8002daa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f000 f89e 	bl	8002ee0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f000 f8af 	bl	8002f08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	f003 0308 	and.w	r3, r3, #8
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d020      	beq.n	8002dfc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	f003 0308 	and.w	r3, r3, #8
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d01b      	beq.n	8002dfc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f06f 0208 	mvn.w	r2, #8
 8002dcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2204      	movs	r2, #4
 8002dd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	69db      	ldr	r3, [r3, #28]
 8002dda:	f003 0303 	and.w	r3, r3, #3
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d003      	beq.n	8002dea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 f886 	bl	8002ef4 <HAL_TIM_IC_CaptureCallback>
 8002de8:	e005      	b.n	8002df6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f000 f878 	bl	8002ee0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f000 f889 	bl	8002f08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	f003 0310 	and.w	r3, r3, #16
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d020      	beq.n	8002e48 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f003 0310 	and.w	r3, r3, #16
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d01b      	beq.n	8002e48 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f06f 0210 	mvn.w	r2, #16
 8002e18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2208      	movs	r2, #8
 8002e1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	69db      	ldr	r3, [r3, #28]
 8002e26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d003      	beq.n	8002e36 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f000 f860 	bl	8002ef4 <HAL_TIM_IC_CaptureCallback>
 8002e34:	e005      	b.n	8002e42 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f000 f852 	bl	8002ee0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f000 f863 	bl	8002f08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d00c      	beq.n	8002e6c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f003 0301 	and.w	r3, r3, #1
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d007      	beq.n	8002e6c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f06f 0201 	mvn.w	r2, #1
 8002e64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f7fe f836 	bl	8000ed8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d00c      	beq.n	8002e90 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d007      	beq.n	8002e90 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 f8e6 	bl	800305c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d00c      	beq.n	8002eb4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d007      	beq.n	8002eb4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002eac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f000 f834 	bl	8002f1c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	f003 0320 	and.w	r3, r3, #32
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d00c      	beq.n	8002ed8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	f003 0320 	and.w	r3, r3, #32
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d007      	beq.n	8002ed8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f06f 0220 	mvn.w	r2, #32
 8002ed0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f000 f8b8 	bl	8003048 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ed8:	bf00      	nop
 8002eda:	3710      	adds	r7, #16
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ee8:	bf00      	nop
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002efc:	bf00      	nop
 8002efe:	370c      	adds	r7, #12
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f10:	bf00      	nop
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f24:	bf00      	nop
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b085      	sub	sp, #20
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	4a3a      	ldr	r2, [pc, #232]	; (800302c <TIM_Base_SetConfig+0xfc>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d00f      	beq.n	8002f68 <TIM_Base_SetConfig+0x38>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f4e:	d00b      	beq.n	8002f68 <TIM_Base_SetConfig+0x38>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4a37      	ldr	r2, [pc, #220]	; (8003030 <TIM_Base_SetConfig+0x100>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d007      	beq.n	8002f68 <TIM_Base_SetConfig+0x38>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4a36      	ldr	r2, [pc, #216]	; (8003034 <TIM_Base_SetConfig+0x104>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d003      	beq.n	8002f68 <TIM_Base_SetConfig+0x38>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4a35      	ldr	r2, [pc, #212]	; (8003038 <TIM_Base_SetConfig+0x108>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d108      	bne.n	8002f7a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	68fa      	ldr	r2, [r7, #12]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a2b      	ldr	r2, [pc, #172]	; (800302c <TIM_Base_SetConfig+0xfc>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d01b      	beq.n	8002fba <TIM_Base_SetConfig+0x8a>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f88:	d017      	beq.n	8002fba <TIM_Base_SetConfig+0x8a>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a28      	ldr	r2, [pc, #160]	; (8003030 <TIM_Base_SetConfig+0x100>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d013      	beq.n	8002fba <TIM_Base_SetConfig+0x8a>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a27      	ldr	r2, [pc, #156]	; (8003034 <TIM_Base_SetConfig+0x104>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d00f      	beq.n	8002fba <TIM_Base_SetConfig+0x8a>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a26      	ldr	r2, [pc, #152]	; (8003038 <TIM_Base_SetConfig+0x108>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d00b      	beq.n	8002fba <TIM_Base_SetConfig+0x8a>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a25      	ldr	r2, [pc, #148]	; (800303c <TIM_Base_SetConfig+0x10c>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d007      	beq.n	8002fba <TIM_Base_SetConfig+0x8a>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a24      	ldr	r2, [pc, #144]	; (8003040 <TIM_Base_SetConfig+0x110>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d003      	beq.n	8002fba <TIM_Base_SetConfig+0x8a>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a23      	ldr	r2, [pc, #140]	; (8003044 <TIM_Base_SetConfig+0x114>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d108      	bne.n	8002fcc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	68fa      	ldr	r2, [r7, #12]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	695b      	ldr	r3, [r3, #20]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	68fa      	ldr	r2, [r7, #12]
 8002fde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	689a      	ldr	r2, [r3, #8]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	4a0e      	ldr	r2, [pc, #56]	; (800302c <TIM_Base_SetConfig+0xfc>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d103      	bne.n	8003000 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	691a      	ldr	r2, [r3, #16]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	2b01      	cmp	r3, #1
 8003010:	d105      	bne.n	800301e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	f023 0201 	bic.w	r2, r3, #1
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	611a      	str	r2, [r3, #16]
  }
}
 800301e:	bf00      	nop
 8003020:	3714      	adds	r7, #20
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop
 800302c:	40010000 	.word	0x40010000
 8003030:	40000400 	.word	0x40000400
 8003034:	40000800 	.word	0x40000800
 8003038:	40000c00 	.word	0x40000c00
 800303c:	40014000 	.word	0x40014000
 8003040:	40014400 	.word	0x40014400
 8003044:	40014800 	.word	0x40014800

08003048 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003050:	bf00      	nop
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr

0800305c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003064:	bf00      	nop
 8003066:	370c      	adds	r7, #12
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr

08003070 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003070:	b480      	push	{r7}
 8003072:	b085      	sub	sp, #20
 8003074:	af00      	add	r7, sp, #0
 8003076:	4603      	mov	r3, r0
 8003078:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800307a:	2300      	movs	r3, #0
 800307c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800307e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003082:	2b84      	cmp	r3, #132	; 0x84
 8003084:	d005      	beq.n	8003092 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003086:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	4413      	add	r3, r2
 800308e:	3303      	adds	r3, #3
 8003090:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003092:	68fb      	ldr	r3, [r7, #12]
}
 8003094:	4618      	mov	r0, r3
 8003096:	3714      	adds	r7, #20
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80030a4:	f000 faf6 	bl	8003694 <vTaskStartScheduler>
  
  return osOK;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	bd80      	pop	{r7, pc}

080030ae <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80030ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030b0:	b089      	sub	sp, #36	; 0x24
 80030b2:	af04      	add	r7, sp, #16
 80030b4:	6078      	str	r0, [r7, #4]
 80030b6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	695b      	ldr	r3, [r3, #20]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d020      	beq.n	8003102 <osThreadCreate+0x54>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	699b      	ldr	r3, [r3, #24]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d01c      	beq.n	8003102 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685c      	ldr	r4, [r3, #4]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	691e      	ldr	r6, [r3, #16]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80030da:	4618      	mov	r0, r3
 80030dc:	f7ff ffc8 	bl	8003070 <makeFreeRtosPriority>
 80030e0:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	695b      	ldr	r3, [r3, #20]
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80030ea:	9202      	str	r2, [sp, #8]
 80030ec:	9301      	str	r3, [sp, #4]
 80030ee:	9100      	str	r1, [sp, #0]
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	4632      	mov	r2, r6
 80030f4:	4629      	mov	r1, r5
 80030f6:	4620      	mov	r0, r4
 80030f8:	f000 f8ed 	bl	80032d6 <xTaskCreateStatic>
 80030fc:	4603      	mov	r3, r0
 80030fe:	60fb      	str	r3, [r7, #12]
 8003100:	e01c      	b.n	800313c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685c      	ldr	r4, [r3, #4]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800310e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003116:	4618      	mov	r0, r3
 8003118:	f7ff ffaa 	bl	8003070 <makeFreeRtosPriority>
 800311c:	4602      	mov	r2, r0
 800311e:	f107 030c 	add.w	r3, r7, #12
 8003122:	9301      	str	r3, [sp, #4]
 8003124:	9200      	str	r2, [sp, #0]
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	4632      	mov	r2, r6
 800312a:	4629      	mov	r1, r5
 800312c:	4620      	mov	r0, r4
 800312e:	f000 f92f 	bl	8003390 <xTaskCreate>
 8003132:	4603      	mov	r3, r0
 8003134:	2b01      	cmp	r3, #1
 8003136:	d001      	beq.n	800313c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003138:	2300      	movs	r3, #0
 800313a:	e000      	b.n	800313e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800313c:	68fb      	ldr	r3, [r7, #12]
}
 800313e:	4618      	mov	r0, r3
 8003140:	3714      	adds	r7, #20
 8003142:	46bd      	mov	sp, r7
 8003144:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003146 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003146:	b580      	push	{r7, lr}
 8003148:	b084      	sub	sp, #16
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d001      	beq.n	800315c <osDelay+0x16>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	e000      	b.n	800315e <osDelay+0x18>
 800315c:	2301      	movs	r3, #1
 800315e:	4618      	mov	r0, r3
 8003160:	f000 fa64 	bl	800362c <vTaskDelay>
  
  return osOK;
 8003164:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003166:	4618      	mov	r0, r3
 8003168:	3710      	adds	r7, #16
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}

0800316e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800316e:	b480      	push	{r7}
 8003170:	b083      	sub	sp, #12
 8003172:	af00      	add	r7, sp, #0
 8003174:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f103 0208 	add.w	r2, r3, #8
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f04f 32ff 	mov.w	r2, #4294967295
 8003186:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f103 0208 	add.w	r2, r3, #8
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f103 0208 	add.w	r2, r3, #8
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80031a2:	bf00      	nop
 80031a4:	370c      	adds	r7, #12
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr

080031ae <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80031ae:	b480      	push	{r7}
 80031b0:	b083      	sub	sp, #12
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80031c8:	b480      	push	{r7}
 80031ca:	b085      	sub	sp, #20
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	68fa      	ldr	r2, [r7, #12]
 80031dc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	689a      	ldr	r2, [r3, #8]
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	683a      	ldr	r2, [r7, #0]
 80031ec:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	683a      	ldr	r2, [r7, #0]
 80031f2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	1c5a      	adds	r2, r3, #1
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	601a      	str	r2, [r3, #0]
}
 8003204:	bf00      	nop
 8003206:	3714      	adds	r7, #20
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr

08003210 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003210:	b480      	push	{r7}
 8003212:	b085      	sub	sp, #20
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003226:	d103      	bne.n	8003230 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	691b      	ldr	r3, [r3, #16]
 800322c:	60fb      	str	r3, [r7, #12]
 800322e:	e00c      	b.n	800324a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	3308      	adds	r3, #8
 8003234:	60fb      	str	r3, [r7, #12]
 8003236:	e002      	b.n	800323e <vListInsert+0x2e>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	60fb      	str	r3, [r7, #12]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	68ba      	ldr	r2, [r7, #8]
 8003246:	429a      	cmp	r2, r3
 8003248:	d2f6      	bcs.n	8003238 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	685a      	ldr	r2, [r3, #4]
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	683a      	ldr	r2, [r7, #0]
 8003258:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	68fa      	ldr	r2, [r7, #12]
 800325e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	683a      	ldr	r2, [r7, #0]
 8003264:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	1c5a      	adds	r2, r3, #1
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	601a      	str	r2, [r3, #0]
}
 8003276:	bf00      	nop
 8003278:	3714      	adds	r7, #20
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr

08003282 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003282:	b480      	push	{r7}
 8003284:	b085      	sub	sp, #20
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	6892      	ldr	r2, [r2, #8]
 8003298:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	6852      	ldr	r2, [r2, #4]
 80032a2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d103      	bne.n	80032b6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	689a      	ldr	r2, [r3, #8]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	1e5a      	subs	r2, r3, #1
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3714      	adds	r7, #20
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr

080032d6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80032d6:	b580      	push	{r7, lr}
 80032d8:	b08e      	sub	sp, #56	; 0x38
 80032da:	af04      	add	r7, sp, #16
 80032dc:	60f8      	str	r0, [r7, #12]
 80032de:	60b9      	str	r1, [r7, #8]
 80032e0:	607a      	str	r2, [r7, #4]
 80032e2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80032e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d10a      	bne.n	8003300 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80032ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ee:	f383 8811 	msr	BASEPRI, r3
 80032f2:	f3bf 8f6f 	isb	sy
 80032f6:	f3bf 8f4f 	dsb	sy
 80032fa:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80032fc:	bf00      	nop
 80032fe:	e7fe      	b.n	80032fe <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003302:	2b00      	cmp	r3, #0
 8003304:	d10a      	bne.n	800331c <xTaskCreateStatic+0x46>
	__asm volatile
 8003306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800330a:	f383 8811 	msr	BASEPRI, r3
 800330e:	f3bf 8f6f 	isb	sy
 8003312:	f3bf 8f4f 	dsb	sy
 8003316:	61fb      	str	r3, [r7, #28]
}
 8003318:	bf00      	nop
 800331a:	e7fe      	b.n	800331a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800331c:	23a0      	movs	r3, #160	; 0xa0
 800331e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	2ba0      	cmp	r3, #160	; 0xa0
 8003324:	d00a      	beq.n	800333c <xTaskCreateStatic+0x66>
	__asm volatile
 8003326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800332a:	f383 8811 	msr	BASEPRI, r3
 800332e:	f3bf 8f6f 	isb	sy
 8003332:	f3bf 8f4f 	dsb	sy
 8003336:	61bb      	str	r3, [r7, #24]
}
 8003338:	bf00      	nop
 800333a:	e7fe      	b.n	800333a <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800333c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800333e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003340:	2b00      	cmp	r3, #0
 8003342:	d01e      	beq.n	8003382 <xTaskCreateStatic+0xac>
 8003344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003346:	2b00      	cmp	r3, #0
 8003348:	d01b      	beq.n	8003382 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800334a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800334c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800334e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003350:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003352:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003356:	2202      	movs	r2, #2
 8003358:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800335c:	2300      	movs	r3, #0
 800335e:	9303      	str	r3, [sp, #12]
 8003360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003362:	9302      	str	r3, [sp, #8]
 8003364:	f107 0314 	add.w	r3, r7, #20
 8003368:	9301      	str	r3, [sp, #4]
 800336a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800336c:	9300      	str	r3, [sp, #0]
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	68b9      	ldr	r1, [r7, #8]
 8003374:	68f8      	ldr	r0, [r7, #12]
 8003376:	f000 f851 	bl	800341c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800337a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800337c:	f000 f8ec 	bl	8003558 <prvAddNewTaskToReadyList>
 8003380:	e001      	b.n	8003386 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003382:	2300      	movs	r3, #0
 8003384:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003386:	697b      	ldr	r3, [r7, #20]
	}
 8003388:	4618      	mov	r0, r3
 800338a:	3728      	adds	r7, #40	; 0x28
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003390:	b580      	push	{r7, lr}
 8003392:	b08c      	sub	sp, #48	; 0x30
 8003394:	af04      	add	r7, sp, #16
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	60b9      	str	r1, [r7, #8]
 800339a:	603b      	str	r3, [r7, #0]
 800339c:	4613      	mov	r3, r2
 800339e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80033a0:	88fb      	ldrh	r3, [r7, #6]
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	4618      	mov	r0, r3
 80033a6:	f000 feef 	bl	8004188 <pvPortMalloc>
 80033aa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d00e      	beq.n	80033d0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80033b2:	20a0      	movs	r0, #160	; 0xa0
 80033b4:	f000 fee8 	bl	8004188 <pvPortMalloc>
 80033b8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d003      	beq.n	80033c8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	697a      	ldr	r2, [r7, #20]
 80033c4:	631a      	str	r2, [r3, #48]	; 0x30
 80033c6:	e005      	b.n	80033d4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80033c8:	6978      	ldr	r0, [r7, #20]
 80033ca:	f000 ffa9 	bl	8004320 <vPortFree>
 80033ce:	e001      	b.n	80033d4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80033d0:	2300      	movs	r3, #0
 80033d2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d017      	beq.n	800340a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80033e2:	88fa      	ldrh	r2, [r7, #6]
 80033e4:	2300      	movs	r3, #0
 80033e6:	9303      	str	r3, [sp, #12]
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	9302      	str	r3, [sp, #8]
 80033ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ee:	9301      	str	r3, [sp, #4]
 80033f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f2:	9300      	str	r3, [sp, #0]
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	68b9      	ldr	r1, [r7, #8]
 80033f8:	68f8      	ldr	r0, [r7, #12]
 80033fa:	f000 f80f 	bl	800341c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80033fe:	69f8      	ldr	r0, [r7, #28]
 8003400:	f000 f8aa 	bl	8003558 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003404:	2301      	movs	r3, #1
 8003406:	61bb      	str	r3, [r7, #24]
 8003408:	e002      	b.n	8003410 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800340a:	f04f 33ff 	mov.w	r3, #4294967295
 800340e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003410:	69bb      	ldr	r3, [r7, #24]
	}
 8003412:	4618      	mov	r0, r3
 8003414:	3720      	adds	r7, #32
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
	...

0800341c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b088      	sub	sp, #32
 8003420:	af00      	add	r7, sp, #0
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	60b9      	str	r1, [r7, #8]
 8003426:	607a      	str	r2, [r7, #4]
 8003428:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800342a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800342c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003434:	3b01      	subs	r3, #1
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	4413      	add	r3, r2
 800343a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	f023 0307 	bic.w	r3, r3, #7
 8003442:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003444:	69bb      	ldr	r3, [r7, #24]
 8003446:	f003 0307 	and.w	r3, r3, #7
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00a      	beq.n	8003464 <prvInitialiseNewTask+0x48>
	__asm volatile
 800344e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003452:	f383 8811 	msr	BASEPRI, r3
 8003456:	f3bf 8f6f 	isb	sy
 800345a:	f3bf 8f4f 	dsb	sy
 800345e:	617b      	str	r3, [r7, #20]
}
 8003460:	bf00      	nop
 8003462:	e7fe      	b.n	8003462 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d01f      	beq.n	80034aa <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800346a:	2300      	movs	r3, #0
 800346c:	61fb      	str	r3, [r7, #28]
 800346e:	e012      	b.n	8003496 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003470:	68ba      	ldr	r2, [r7, #8]
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	4413      	add	r3, r2
 8003476:	7819      	ldrb	r1, [r3, #0]
 8003478:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	4413      	add	r3, r2
 800347e:	3334      	adds	r3, #52	; 0x34
 8003480:	460a      	mov	r2, r1
 8003482:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003484:	68ba      	ldr	r2, [r7, #8]
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	4413      	add	r3, r2
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d006      	beq.n	800349e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	3301      	adds	r3, #1
 8003494:	61fb      	str	r3, [r7, #28]
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	2b0f      	cmp	r3, #15
 800349a:	d9e9      	bls.n	8003470 <prvInitialiseNewTask+0x54>
 800349c:	e000      	b.n	80034a0 <prvInitialiseNewTask+0x84>
			{
				break;
 800349e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80034a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80034a8:	e003      	b.n	80034b2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80034aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80034b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b4:	2b06      	cmp	r3, #6
 80034b6:	d901      	bls.n	80034bc <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80034b8:	2306      	movs	r3, #6
 80034ba:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80034bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034c0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80034c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034c6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80034c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ca:	2200      	movs	r2, #0
 80034cc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80034ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d0:	3304      	adds	r3, #4
 80034d2:	4618      	mov	r0, r3
 80034d4:	f7ff fe6b 	bl	80031ae <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80034d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034da:	3318      	adds	r3, #24
 80034dc:	4618      	mov	r0, r3
 80034de:	f7ff fe66 	bl	80031ae <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80034e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034e6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ea:	f1c3 0207 	rsb	r2, r3, #7
 80034ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034f0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80034f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034f6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80034f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034fa:	2200      	movs	r2, #0
 80034fc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003502:	2200      	movs	r2, #0
 8003504:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800350a:	334c      	adds	r3, #76	; 0x4c
 800350c:	224c      	movs	r2, #76	; 0x4c
 800350e:	2100      	movs	r1, #0
 8003510:	4618      	mov	r0, r3
 8003512:	f001 f823 	bl	800455c <memset>
 8003516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003518:	4a0c      	ldr	r2, [pc, #48]	; (800354c <prvInitialiseNewTask+0x130>)
 800351a:	651a      	str	r2, [r3, #80]	; 0x50
 800351c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800351e:	4a0c      	ldr	r2, [pc, #48]	; (8003550 <prvInitialiseNewTask+0x134>)
 8003520:	655a      	str	r2, [r3, #84]	; 0x54
 8003522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003524:	4a0b      	ldr	r2, [pc, #44]	; (8003554 <prvInitialiseNewTask+0x138>)
 8003526:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003528:	683a      	ldr	r2, [r7, #0]
 800352a:	68f9      	ldr	r1, [r7, #12]
 800352c:	69b8      	ldr	r0, [r7, #24]
 800352e:	f000 fc1f 	bl	8003d70 <pxPortInitialiseStack>
 8003532:	4602      	mov	r2, r0
 8003534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003536:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800353a:	2b00      	cmp	r3, #0
 800353c:	d002      	beq.n	8003544 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800353e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003540:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003542:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003544:	bf00      	nop
 8003546:	3720      	adds	r7, #32
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	200041a0 	.word	0x200041a0
 8003550:	20004208 	.word	0x20004208
 8003554:	20004270 	.word	0x20004270

08003558 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003560:	f000 fd30 	bl	8003fc4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003564:	4b2a      	ldr	r3, [pc, #168]	; (8003610 <prvAddNewTaskToReadyList+0xb8>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	3301      	adds	r3, #1
 800356a:	4a29      	ldr	r2, [pc, #164]	; (8003610 <prvAddNewTaskToReadyList+0xb8>)
 800356c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800356e:	4b29      	ldr	r3, [pc, #164]	; (8003614 <prvAddNewTaskToReadyList+0xbc>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d109      	bne.n	800358a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003576:	4a27      	ldr	r2, [pc, #156]	; (8003614 <prvAddNewTaskToReadyList+0xbc>)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800357c:	4b24      	ldr	r3, [pc, #144]	; (8003610 <prvAddNewTaskToReadyList+0xb8>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2b01      	cmp	r3, #1
 8003582:	d110      	bne.n	80035a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003584:	f000 facc 	bl	8003b20 <prvInitialiseTaskLists>
 8003588:	e00d      	b.n	80035a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800358a:	4b23      	ldr	r3, [pc, #140]	; (8003618 <prvAddNewTaskToReadyList+0xc0>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d109      	bne.n	80035a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003592:	4b20      	ldr	r3, [pc, #128]	; (8003614 <prvAddNewTaskToReadyList+0xbc>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800359c:	429a      	cmp	r2, r3
 800359e:	d802      	bhi.n	80035a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80035a0:	4a1c      	ldr	r2, [pc, #112]	; (8003614 <prvAddNewTaskToReadyList+0xbc>)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80035a6:	4b1d      	ldr	r3, [pc, #116]	; (800361c <prvAddNewTaskToReadyList+0xc4>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	3301      	adds	r3, #1
 80035ac:	4a1b      	ldr	r2, [pc, #108]	; (800361c <prvAddNewTaskToReadyList+0xc4>)
 80035ae:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b4:	2201      	movs	r2, #1
 80035b6:	409a      	lsls	r2, r3
 80035b8:	4b19      	ldr	r3, [pc, #100]	; (8003620 <prvAddNewTaskToReadyList+0xc8>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4313      	orrs	r3, r2
 80035be:	4a18      	ldr	r2, [pc, #96]	; (8003620 <prvAddNewTaskToReadyList+0xc8>)
 80035c0:	6013      	str	r3, [r2, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035c6:	4613      	mov	r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	4413      	add	r3, r2
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	4a15      	ldr	r2, [pc, #84]	; (8003624 <prvAddNewTaskToReadyList+0xcc>)
 80035d0:	441a      	add	r2, r3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	3304      	adds	r3, #4
 80035d6:	4619      	mov	r1, r3
 80035d8:	4610      	mov	r0, r2
 80035da:	f7ff fdf5 	bl	80031c8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80035de:	f000 fd21 	bl	8004024 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80035e2:	4b0d      	ldr	r3, [pc, #52]	; (8003618 <prvAddNewTaskToReadyList+0xc0>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d00e      	beq.n	8003608 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80035ea:	4b0a      	ldr	r3, [pc, #40]	; (8003614 <prvAddNewTaskToReadyList+0xbc>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d207      	bcs.n	8003608 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80035f8:	4b0b      	ldr	r3, [pc, #44]	; (8003628 <prvAddNewTaskToReadyList+0xd0>)
 80035fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035fe:	601a      	str	r2, [r3, #0]
 8003600:	f3bf 8f4f 	dsb	sy
 8003604:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003608:	bf00      	nop
 800360a:	3708      	adds	r7, #8
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}
 8003610:	2000054c 	.word	0x2000054c
 8003614:	2000044c 	.word	0x2000044c
 8003618:	20000558 	.word	0x20000558
 800361c:	20000568 	.word	0x20000568
 8003620:	20000554 	.word	0x20000554
 8003624:	20000450 	.word	0x20000450
 8003628:	e000ed04 	.word	0xe000ed04

0800362c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003634:	2300      	movs	r3, #0
 8003636:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d017      	beq.n	800366e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800363e:	4b13      	ldr	r3, [pc, #76]	; (800368c <vTaskDelay+0x60>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d00a      	beq.n	800365c <vTaskDelay+0x30>
	__asm volatile
 8003646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800364a:	f383 8811 	msr	BASEPRI, r3
 800364e:	f3bf 8f6f 	isb	sy
 8003652:	f3bf 8f4f 	dsb	sy
 8003656:	60bb      	str	r3, [r7, #8]
}
 8003658:	bf00      	nop
 800365a:	e7fe      	b.n	800365a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800365c:	f000 f884 	bl	8003768 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003660:	2100      	movs	r1, #0
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 fb1e 	bl	8003ca4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003668:	f000 f88c 	bl	8003784 <xTaskResumeAll>
 800366c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d107      	bne.n	8003684 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003674:	4b06      	ldr	r3, [pc, #24]	; (8003690 <vTaskDelay+0x64>)
 8003676:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800367a:	601a      	str	r2, [r3, #0]
 800367c:	f3bf 8f4f 	dsb	sy
 8003680:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003684:	bf00      	nop
 8003686:	3710      	adds	r7, #16
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	20000574 	.word	0x20000574
 8003690:	e000ed04 	.word	0xe000ed04

08003694 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b08a      	sub	sp, #40	; 0x28
 8003698:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800369a:	2300      	movs	r3, #0
 800369c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800369e:	2300      	movs	r3, #0
 80036a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80036a2:	463a      	mov	r2, r7
 80036a4:	1d39      	adds	r1, r7, #4
 80036a6:	f107 0308 	add.w	r3, r7, #8
 80036aa:	4618      	mov	r0, r3
 80036ac:	f7fc ff16 	bl	80004dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80036b0:	6839      	ldr	r1, [r7, #0]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	68ba      	ldr	r2, [r7, #8]
 80036b6:	9202      	str	r2, [sp, #8]
 80036b8:	9301      	str	r3, [sp, #4]
 80036ba:	2300      	movs	r3, #0
 80036bc:	9300      	str	r3, [sp, #0]
 80036be:	2300      	movs	r3, #0
 80036c0:	460a      	mov	r2, r1
 80036c2:	4921      	ldr	r1, [pc, #132]	; (8003748 <vTaskStartScheduler+0xb4>)
 80036c4:	4821      	ldr	r0, [pc, #132]	; (800374c <vTaskStartScheduler+0xb8>)
 80036c6:	f7ff fe06 	bl	80032d6 <xTaskCreateStatic>
 80036ca:	4603      	mov	r3, r0
 80036cc:	4a20      	ldr	r2, [pc, #128]	; (8003750 <vTaskStartScheduler+0xbc>)
 80036ce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80036d0:	4b1f      	ldr	r3, [pc, #124]	; (8003750 <vTaskStartScheduler+0xbc>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d002      	beq.n	80036de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80036d8:	2301      	movs	r3, #1
 80036da:	617b      	str	r3, [r7, #20]
 80036dc:	e001      	b.n	80036e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80036de:	2300      	movs	r3, #0
 80036e0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d11b      	bne.n	8003720 <vTaskStartScheduler+0x8c>
	__asm volatile
 80036e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ec:	f383 8811 	msr	BASEPRI, r3
 80036f0:	f3bf 8f6f 	isb	sy
 80036f4:	f3bf 8f4f 	dsb	sy
 80036f8:	613b      	str	r3, [r7, #16]
}
 80036fa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80036fc:	4b15      	ldr	r3, [pc, #84]	; (8003754 <vTaskStartScheduler+0xc0>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	334c      	adds	r3, #76	; 0x4c
 8003702:	4a15      	ldr	r2, [pc, #84]	; (8003758 <vTaskStartScheduler+0xc4>)
 8003704:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003706:	4b15      	ldr	r3, [pc, #84]	; (800375c <vTaskStartScheduler+0xc8>)
 8003708:	f04f 32ff 	mov.w	r2, #4294967295
 800370c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800370e:	4b14      	ldr	r3, [pc, #80]	; (8003760 <vTaskStartScheduler+0xcc>)
 8003710:	2201      	movs	r2, #1
 8003712:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003714:	4b13      	ldr	r3, [pc, #76]	; (8003764 <vTaskStartScheduler+0xd0>)
 8003716:	2200      	movs	r2, #0
 8003718:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800371a:	f000 fbb1 	bl	8003e80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800371e:	e00e      	b.n	800373e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003726:	d10a      	bne.n	800373e <vTaskStartScheduler+0xaa>
	__asm volatile
 8003728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800372c:	f383 8811 	msr	BASEPRI, r3
 8003730:	f3bf 8f6f 	isb	sy
 8003734:	f3bf 8f4f 	dsb	sy
 8003738:	60fb      	str	r3, [r7, #12]
}
 800373a:	bf00      	nop
 800373c:	e7fe      	b.n	800373c <vTaskStartScheduler+0xa8>
}
 800373e:	bf00      	nop
 8003740:	3718      	adds	r7, #24
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	08004808 	.word	0x08004808
 800374c:	08003af1 	.word	0x08003af1
 8003750:	20000570 	.word	0x20000570
 8003754:	2000044c 	.word	0x2000044c
 8003758:	200000d0 	.word	0x200000d0
 800375c:	2000056c 	.word	0x2000056c
 8003760:	20000558 	.word	0x20000558
 8003764:	20000550 	.word	0x20000550

08003768 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003768:	b480      	push	{r7}
 800376a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800376c:	4b04      	ldr	r3, [pc, #16]	; (8003780 <vTaskSuspendAll+0x18>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	3301      	adds	r3, #1
 8003772:	4a03      	ldr	r2, [pc, #12]	; (8003780 <vTaskSuspendAll+0x18>)
 8003774:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003776:	bf00      	nop
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr
 8003780:	20000574 	.word	0x20000574

08003784 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800378a:	2300      	movs	r3, #0
 800378c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800378e:	2300      	movs	r3, #0
 8003790:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003792:	4b41      	ldr	r3, [pc, #260]	; (8003898 <xTaskResumeAll+0x114>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d10a      	bne.n	80037b0 <xTaskResumeAll+0x2c>
	__asm volatile
 800379a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800379e:	f383 8811 	msr	BASEPRI, r3
 80037a2:	f3bf 8f6f 	isb	sy
 80037a6:	f3bf 8f4f 	dsb	sy
 80037aa:	603b      	str	r3, [r7, #0]
}
 80037ac:	bf00      	nop
 80037ae:	e7fe      	b.n	80037ae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80037b0:	f000 fc08 	bl	8003fc4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80037b4:	4b38      	ldr	r3, [pc, #224]	; (8003898 <xTaskResumeAll+0x114>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	3b01      	subs	r3, #1
 80037ba:	4a37      	ldr	r2, [pc, #220]	; (8003898 <xTaskResumeAll+0x114>)
 80037bc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037be:	4b36      	ldr	r3, [pc, #216]	; (8003898 <xTaskResumeAll+0x114>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d161      	bne.n	800388a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80037c6:	4b35      	ldr	r3, [pc, #212]	; (800389c <xTaskResumeAll+0x118>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d05d      	beq.n	800388a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80037ce:	e02e      	b.n	800382e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037d0:	4b33      	ldr	r3, [pc, #204]	; (80038a0 <xTaskResumeAll+0x11c>)
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	3318      	adds	r3, #24
 80037dc:	4618      	mov	r0, r3
 80037de:	f7ff fd50 	bl	8003282 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	3304      	adds	r3, #4
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7ff fd4b 	bl	8003282 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f0:	2201      	movs	r2, #1
 80037f2:	409a      	lsls	r2, r3
 80037f4:	4b2b      	ldr	r3, [pc, #172]	; (80038a4 <xTaskResumeAll+0x120>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	4a2a      	ldr	r2, [pc, #168]	; (80038a4 <xTaskResumeAll+0x120>)
 80037fc:	6013      	str	r3, [r2, #0]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003802:	4613      	mov	r3, r2
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	4413      	add	r3, r2
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	4a27      	ldr	r2, [pc, #156]	; (80038a8 <xTaskResumeAll+0x124>)
 800380c:	441a      	add	r2, r3
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	3304      	adds	r3, #4
 8003812:	4619      	mov	r1, r3
 8003814:	4610      	mov	r0, r2
 8003816:	f7ff fcd7 	bl	80031c8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800381e:	4b23      	ldr	r3, [pc, #140]	; (80038ac <xTaskResumeAll+0x128>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003824:	429a      	cmp	r2, r3
 8003826:	d302      	bcc.n	800382e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003828:	4b21      	ldr	r3, [pc, #132]	; (80038b0 <xTaskResumeAll+0x12c>)
 800382a:	2201      	movs	r2, #1
 800382c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800382e:	4b1c      	ldr	r3, [pc, #112]	; (80038a0 <xTaskResumeAll+0x11c>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d1cc      	bne.n	80037d0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d001      	beq.n	8003840 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800383c:	f000 fa12 	bl	8003c64 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003840:	4b1c      	ldr	r3, [pc, #112]	; (80038b4 <xTaskResumeAll+0x130>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d010      	beq.n	800386e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800384c:	f000 f836 	bl	80038bc <xTaskIncrementTick>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d002      	beq.n	800385c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003856:	4b16      	ldr	r3, [pc, #88]	; (80038b0 <xTaskResumeAll+0x12c>)
 8003858:	2201      	movs	r2, #1
 800385a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	3b01      	subs	r3, #1
 8003860:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d1f1      	bne.n	800384c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8003868:	4b12      	ldr	r3, [pc, #72]	; (80038b4 <xTaskResumeAll+0x130>)
 800386a:	2200      	movs	r2, #0
 800386c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800386e:	4b10      	ldr	r3, [pc, #64]	; (80038b0 <xTaskResumeAll+0x12c>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d009      	beq.n	800388a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003876:	2301      	movs	r3, #1
 8003878:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800387a:	4b0f      	ldr	r3, [pc, #60]	; (80038b8 <xTaskResumeAll+0x134>)
 800387c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003880:	601a      	str	r2, [r3, #0]
 8003882:	f3bf 8f4f 	dsb	sy
 8003886:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800388a:	f000 fbcb 	bl	8004024 <vPortExitCritical>

	return xAlreadyYielded;
 800388e:	68bb      	ldr	r3, [r7, #8]
}
 8003890:	4618      	mov	r0, r3
 8003892:	3710      	adds	r7, #16
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}
 8003898:	20000574 	.word	0x20000574
 800389c:	2000054c 	.word	0x2000054c
 80038a0:	2000050c 	.word	0x2000050c
 80038a4:	20000554 	.word	0x20000554
 80038a8:	20000450 	.word	0x20000450
 80038ac:	2000044c 	.word	0x2000044c
 80038b0:	20000560 	.word	0x20000560
 80038b4:	2000055c 	.word	0x2000055c
 80038b8:	e000ed04 	.word	0xe000ed04

080038bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b086      	sub	sp, #24
 80038c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80038c2:	2300      	movs	r3, #0
 80038c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038c6:	4b4e      	ldr	r3, [pc, #312]	; (8003a00 <xTaskIncrementTick+0x144>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	f040 808e 	bne.w	80039ec <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80038d0:	4b4c      	ldr	r3, [pc, #304]	; (8003a04 <xTaskIncrementTick+0x148>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	3301      	adds	r3, #1
 80038d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80038d8:	4a4a      	ldr	r2, [pc, #296]	; (8003a04 <xTaskIncrementTick+0x148>)
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d120      	bne.n	8003926 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80038e4:	4b48      	ldr	r3, [pc, #288]	; (8003a08 <xTaskIncrementTick+0x14c>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d00a      	beq.n	8003904 <xTaskIncrementTick+0x48>
	__asm volatile
 80038ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038f2:	f383 8811 	msr	BASEPRI, r3
 80038f6:	f3bf 8f6f 	isb	sy
 80038fa:	f3bf 8f4f 	dsb	sy
 80038fe:	603b      	str	r3, [r7, #0]
}
 8003900:	bf00      	nop
 8003902:	e7fe      	b.n	8003902 <xTaskIncrementTick+0x46>
 8003904:	4b40      	ldr	r3, [pc, #256]	; (8003a08 <xTaskIncrementTick+0x14c>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	60fb      	str	r3, [r7, #12]
 800390a:	4b40      	ldr	r3, [pc, #256]	; (8003a0c <xTaskIncrementTick+0x150>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a3e      	ldr	r2, [pc, #248]	; (8003a08 <xTaskIncrementTick+0x14c>)
 8003910:	6013      	str	r3, [r2, #0]
 8003912:	4a3e      	ldr	r2, [pc, #248]	; (8003a0c <xTaskIncrementTick+0x150>)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6013      	str	r3, [r2, #0]
 8003918:	4b3d      	ldr	r3, [pc, #244]	; (8003a10 <xTaskIncrementTick+0x154>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	3301      	adds	r3, #1
 800391e:	4a3c      	ldr	r2, [pc, #240]	; (8003a10 <xTaskIncrementTick+0x154>)
 8003920:	6013      	str	r3, [r2, #0]
 8003922:	f000 f99f 	bl	8003c64 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003926:	4b3b      	ldr	r3, [pc, #236]	; (8003a14 <xTaskIncrementTick+0x158>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	693a      	ldr	r2, [r7, #16]
 800392c:	429a      	cmp	r2, r3
 800392e:	d348      	bcc.n	80039c2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003930:	4b35      	ldr	r3, [pc, #212]	; (8003a08 <xTaskIncrementTick+0x14c>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d104      	bne.n	8003944 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800393a:	4b36      	ldr	r3, [pc, #216]	; (8003a14 <xTaskIncrementTick+0x158>)
 800393c:	f04f 32ff 	mov.w	r2, #4294967295
 8003940:	601a      	str	r2, [r3, #0]
					break;
 8003942:	e03e      	b.n	80039c2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003944:	4b30      	ldr	r3, [pc, #192]	; (8003a08 <xTaskIncrementTick+0x14c>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003954:	693a      	ldr	r2, [r7, #16]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	429a      	cmp	r2, r3
 800395a:	d203      	bcs.n	8003964 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800395c:	4a2d      	ldr	r2, [pc, #180]	; (8003a14 <xTaskIncrementTick+0x158>)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003962:	e02e      	b.n	80039c2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	3304      	adds	r3, #4
 8003968:	4618      	mov	r0, r3
 800396a:	f7ff fc8a 	bl	8003282 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003972:	2b00      	cmp	r3, #0
 8003974:	d004      	beq.n	8003980 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	3318      	adds	r3, #24
 800397a:	4618      	mov	r0, r3
 800397c:	f7ff fc81 	bl	8003282 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003984:	2201      	movs	r2, #1
 8003986:	409a      	lsls	r2, r3
 8003988:	4b23      	ldr	r3, [pc, #140]	; (8003a18 <xTaskIncrementTick+0x15c>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4313      	orrs	r3, r2
 800398e:	4a22      	ldr	r2, [pc, #136]	; (8003a18 <xTaskIncrementTick+0x15c>)
 8003990:	6013      	str	r3, [r2, #0]
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003996:	4613      	mov	r3, r2
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	4413      	add	r3, r2
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	4a1f      	ldr	r2, [pc, #124]	; (8003a1c <xTaskIncrementTick+0x160>)
 80039a0:	441a      	add	r2, r3
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	3304      	adds	r3, #4
 80039a6:	4619      	mov	r1, r3
 80039a8:	4610      	mov	r0, r2
 80039aa:	f7ff fc0d 	bl	80031c8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039b2:	4b1b      	ldr	r3, [pc, #108]	; (8003a20 <xTaskIncrementTick+0x164>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d3b9      	bcc.n	8003930 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80039bc:	2301      	movs	r3, #1
 80039be:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80039c0:	e7b6      	b.n	8003930 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80039c2:	4b17      	ldr	r3, [pc, #92]	; (8003a20 <xTaskIncrementTick+0x164>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039c8:	4914      	ldr	r1, [pc, #80]	; (8003a1c <xTaskIncrementTick+0x160>)
 80039ca:	4613      	mov	r3, r2
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	4413      	add	r3, r2
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	440b      	add	r3, r1
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d901      	bls.n	80039de <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80039da:	2301      	movs	r3, #1
 80039dc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80039de:	4b11      	ldr	r3, [pc, #68]	; (8003a24 <xTaskIncrementTick+0x168>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d007      	beq.n	80039f6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80039e6:	2301      	movs	r3, #1
 80039e8:	617b      	str	r3, [r7, #20]
 80039ea:	e004      	b.n	80039f6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80039ec:	4b0e      	ldr	r3, [pc, #56]	; (8003a28 <xTaskIncrementTick+0x16c>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	3301      	adds	r3, #1
 80039f2:	4a0d      	ldr	r2, [pc, #52]	; (8003a28 <xTaskIncrementTick+0x16c>)
 80039f4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80039f6:	697b      	ldr	r3, [r7, #20]
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3718      	adds	r7, #24
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	20000574 	.word	0x20000574
 8003a04:	20000550 	.word	0x20000550
 8003a08:	20000504 	.word	0x20000504
 8003a0c:	20000508 	.word	0x20000508
 8003a10:	20000564 	.word	0x20000564
 8003a14:	2000056c 	.word	0x2000056c
 8003a18:	20000554 	.word	0x20000554
 8003a1c:	20000450 	.word	0x20000450
 8003a20:	2000044c 	.word	0x2000044c
 8003a24:	20000560 	.word	0x20000560
 8003a28:	2000055c 	.word	0x2000055c

08003a2c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b087      	sub	sp, #28
 8003a30:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003a32:	4b29      	ldr	r3, [pc, #164]	; (8003ad8 <vTaskSwitchContext+0xac>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d003      	beq.n	8003a42 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003a3a:	4b28      	ldr	r3, [pc, #160]	; (8003adc <vTaskSwitchContext+0xb0>)
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003a40:	e044      	b.n	8003acc <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8003a42:	4b26      	ldr	r3, [pc, #152]	; (8003adc <vTaskSwitchContext+0xb0>)
 8003a44:	2200      	movs	r2, #0
 8003a46:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a48:	4b25      	ldr	r3, [pc, #148]	; (8003ae0 <vTaskSwitchContext+0xb4>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	fab3 f383 	clz	r3, r3
 8003a54:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003a56:	7afb      	ldrb	r3, [r7, #11]
 8003a58:	f1c3 031f 	rsb	r3, r3, #31
 8003a5c:	617b      	str	r3, [r7, #20]
 8003a5e:	4921      	ldr	r1, [pc, #132]	; (8003ae4 <vTaskSwitchContext+0xb8>)
 8003a60:	697a      	ldr	r2, [r7, #20]
 8003a62:	4613      	mov	r3, r2
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	4413      	add	r3, r2
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	440b      	add	r3, r1
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d10a      	bne.n	8003a88 <vTaskSwitchContext+0x5c>
	__asm volatile
 8003a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a76:	f383 8811 	msr	BASEPRI, r3
 8003a7a:	f3bf 8f6f 	isb	sy
 8003a7e:	f3bf 8f4f 	dsb	sy
 8003a82:	607b      	str	r3, [r7, #4]
}
 8003a84:	bf00      	nop
 8003a86:	e7fe      	b.n	8003a86 <vTaskSwitchContext+0x5a>
 8003a88:	697a      	ldr	r2, [r7, #20]
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	4413      	add	r3, r2
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	4a14      	ldr	r2, [pc, #80]	; (8003ae4 <vTaskSwitchContext+0xb8>)
 8003a94:	4413      	add	r3, r2
 8003a96:	613b      	str	r3, [r7, #16]
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	685a      	ldr	r2, [r3, #4]
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	605a      	str	r2, [r3, #4]
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	685a      	ldr	r2, [r3, #4]
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	3308      	adds	r3, #8
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d104      	bne.n	8003ab8 <vTaskSwitchContext+0x8c>
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	685a      	ldr	r2, [r3, #4]
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	605a      	str	r2, [r3, #4]
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	4a0a      	ldr	r2, [pc, #40]	; (8003ae8 <vTaskSwitchContext+0xbc>)
 8003ac0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003ac2:	4b09      	ldr	r3, [pc, #36]	; (8003ae8 <vTaskSwitchContext+0xbc>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	334c      	adds	r3, #76	; 0x4c
 8003ac8:	4a08      	ldr	r2, [pc, #32]	; (8003aec <vTaskSwitchContext+0xc0>)
 8003aca:	6013      	str	r3, [r2, #0]
}
 8003acc:	bf00      	nop
 8003ace:	371c      	adds	r7, #28
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr
 8003ad8:	20000574 	.word	0x20000574
 8003adc:	20000560 	.word	0x20000560
 8003ae0:	20000554 	.word	0x20000554
 8003ae4:	20000450 	.word	0x20000450
 8003ae8:	2000044c 	.word	0x2000044c
 8003aec:	200000d0 	.word	0x200000d0

08003af0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003af8:	f000 f852 	bl	8003ba0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003afc:	4b06      	ldr	r3, [pc, #24]	; (8003b18 <prvIdleTask+0x28>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d9f9      	bls.n	8003af8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003b04:	4b05      	ldr	r3, [pc, #20]	; (8003b1c <prvIdleTask+0x2c>)
 8003b06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b0a:	601a      	str	r2, [r3, #0]
 8003b0c:	f3bf 8f4f 	dsb	sy
 8003b10:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003b14:	e7f0      	b.n	8003af8 <prvIdleTask+0x8>
 8003b16:	bf00      	nop
 8003b18:	20000450 	.word	0x20000450
 8003b1c:	e000ed04 	.word	0xe000ed04

08003b20 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b26:	2300      	movs	r3, #0
 8003b28:	607b      	str	r3, [r7, #4]
 8003b2a:	e00c      	b.n	8003b46 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	4613      	mov	r3, r2
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	4413      	add	r3, r2
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	4a12      	ldr	r2, [pc, #72]	; (8003b80 <prvInitialiseTaskLists+0x60>)
 8003b38:	4413      	add	r3, r2
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f7ff fb17 	bl	800316e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	3301      	adds	r3, #1
 8003b44:	607b      	str	r3, [r7, #4]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2b06      	cmp	r3, #6
 8003b4a:	d9ef      	bls.n	8003b2c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003b4c:	480d      	ldr	r0, [pc, #52]	; (8003b84 <prvInitialiseTaskLists+0x64>)
 8003b4e:	f7ff fb0e 	bl	800316e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003b52:	480d      	ldr	r0, [pc, #52]	; (8003b88 <prvInitialiseTaskLists+0x68>)
 8003b54:	f7ff fb0b 	bl	800316e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003b58:	480c      	ldr	r0, [pc, #48]	; (8003b8c <prvInitialiseTaskLists+0x6c>)
 8003b5a:	f7ff fb08 	bl	800316e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003b5e:	480c      	ldr	r0, [pc, #48]	; (8003b90 <prvInitialiseTaskLists+0x70>)
 8003b60:	f7ff fb05 	bl	800316e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003b64:	480b      	ldr	r0, [pc, #44]	; (8003b94 <prvInitialiseTaskLists+0x74>)
 8003b66:	f7ff fb02 	bl	800316e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003b6a:	4b0b      	ldr	r3, [pc, #44]	; (8003b98 <prvInitialiseTaskLists+0x78>)
 8003b6c:	4a05      	ldr	r2, [pc, #20]	; (8003b84 <prvInitialiseTaskLists+0x64>)
 8003b6e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003b70:	4b0a      	ldr	r3, [pc, #40]	; (8003b9c <prvInitialiseTaskLists+0x7c>)
 8003b72:	4a05      	ldr	r2, [pc, #20]	; (8003b88 <prvInitialiseTaskLists+0x68>)
 8003b74:	601a      	str	r2, [r3, #0]
}
 8003b76:	bf00      	nop
 8003b78:	3708      	adds	r7, #8
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	20000450 	.word	0x20000450
 8003b84:	200004dc 	.word	0x200004dc
 8003b88:	200004f0 	.word	0x200004f0
 8003b8c:	2000050c 	.word	0x2000050c
 8003b90:	20000520 	.word	0x20000520
 8003b94:	20000538 	.word	0x20000538
 8003b98:	20000504 	.word	0x20000504
 8003b9c:	20000508 	.word	0x20000508

08003ba0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b082      	sub	sp, #8
 8003ba4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ba6:	e019      	b.n	8003bdc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003ba8:	f000 fa0c 	bl	8003fc4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bac:	4b10      	ldr	r3, [pc, #64]	; (8003bf0 <prvCheckTasksWaitingTermination+0x50>)
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	3304      	adds	r3, #4
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f7ff fb62 	bl	8003282 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003bbe:	4b0d      	ldr	r3, [pc, #52]	; (8003bf4 <prvCheckTasksWaitingTermination+0x54>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	3b01      	subs	r3, #1
 8003bc4:	4a0b      	ldr	r2, [pc, #44]	; (8003bf4 <prvCheckTasksWaitingTermination+0x54>)
 8003bc6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003bc8:	4b0b      	ldr	r3, [pc, #44]	; (8003bf8 <prvCheckTasksWaitingTermination+0x58>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	3b01      	subs	r3, #1
 8003bce:	4a0a      	ldr	r2, [pc, #40]	; (8003bf8 <prvCheckTasksWaitingTermination+0x58>)
 8003bd0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003bd2:	f000 fa27 	bl	8004024 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f000 f810 	bl	8003bfc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003bdc:	4b06      	ldr	r3, [pc, #24]	; (8003bf8 <prvCheckTasksWaitingTermination+0x58>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d1e1      	bne.n	8003ba8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003be4:	bf00      	nop
 8003be6:	bf00      	nop
 8003be8:	3708      	adds	r7, #8
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	20000520 	.word	0x20000520
 8003bf4:	2000054c 	.word	0x2000054c
 8003bf8:	20000534 	.word	0x20000534

08003bfc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b084      	sub	sp, #16
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	334c      	adds	r3, #76	; 0x4c
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f000 fcaf 	bl	800456c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d108      	bne.n	8003c2a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f000 fb7f 	bl	8004320 <vPortFree>
				vPortFree( pxTCB );
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f000 fb7c 	bl	8004320 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003c28:	e018      	b.n	8003c5c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d103      	bne.n	8003c3c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f000 fb73 	bl	8004320 <vPortFree>
	}
 8003c3a:	e00f      	b.n	8003c5c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	d00a      	beq.n	8003c5c <prvDeleteTCB+0x60>
	__asm volatile
 8003c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c4a:	f383 8811 	msr	BASEPRI, r3
 8003c4e:	f3bf 8f6f 	isb	sy
 8003c52:	f3bf 8f4f 	dsb	sy
 8003c56:	60fb      	str	r3, [r7, #12]
}
 8003c58:	bf00      	nop
 8003c5a:	e7fe      	b.n	8003c5a <prvDeleteTCB+0x5e>
	}
 8003c5c:	bf00      	nop
 8003c5e:	3710      	adds	r7, #16
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}

08003c64 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003c64:	b480      	push	{r7}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c6a:	4b0c      	ldr	r3, [pc, #48]	; (8003c9c <prvResetNextTaskUnblockTime+0x38>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d104      	bne.n	8003c7e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003c74:	4b0a      	ldr	r3, [pc, #40]	; (8003ca0 <prvResetNextTaskUnblockTime+0x3c>)
 8003c76:	f04f 32ff 	mov.w	r2, #4294967295
 8003c7a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003c7c:	e008      	b.n	8003c90 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c7e:	4b07      	ldr	r3, [pc, #28]	; (8003c9c <prvResetNextTaskUnblockTime+0x38>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	4a04      	ldr	r2, [pc, #16]	; (8003ca0 <prvResetNextTaskUnblockTime+0x3c>)
 8003c8e:	6013      	str	r3, [r2, #0]
}
 8003c90:	bf00      	nop
 8003c92:	370c      	adds	r7, #12
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr
 8003c9c:	20000504 	.word	0x20000504
 8003ca0:	2000056c 	.word	0x2000056c

08003ca4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003cae:	4b29      	ldr	r3, [pc, #164]	; (8003d54 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003cb4:	4b28      	ldr	r3, [pc, #160]	; (8003d58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	3304      	adds	r3, #4
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f7ff fae1 	bl	8003282 <uxListRemove>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d10b      	bne.n	8003cde <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003cc6:	4b24      	ldr	r3, [pc, #144]	; (8003d58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ccc:	2201      	movs	r2, #1
 8003cce:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd2:	43da      	mvns	r2, r3
 8003cd4:	4b21      	ldr	r3, [pc, #132]	; (8003d5c <prvAddCurrentTaskToDelayedList+0xb8>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4013      	ands	r3, r2
 8003cda:	4a20      	ldr	r2, [pc, #128]	; (8003d5c <prvAddCurrentTaskToDelayedList+0xb8>)
 8003cdc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ce4:	d10a      	bne.n	8003cfc <prvAddCurrentTaskToDelayedList+0x58>
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d007      	beq.n	8003cfc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003cec:	4b1a      	ldr	r3, [pc, #104]	; (8003d58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	3304      	adds	r3, #4
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	481a      	ldr	r0, [pc, #104]	; (8003d60 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003cf6:	f7ff fa67 	bl	80031c8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003cfa:	e026      	b.n	8003d4a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003cfc:	68fa      	ldr	r2, [r7, #12]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4413      	add	r3, r2
 8003d02:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003d04:	4b14      	ldr	r3, [pc, #80]	; (8003d58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	68ba      	ldr	r2, [r7, #8]
 8003d0a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003d0c:	68ba      	ldr	r2, [r7, #8]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d209      	bcs.n	8003d28 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d14:	4b13      	ldr	r3, [pc, #76]	; (8003d64 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	4b0f      	ldr	r3, [pc, #60]	; (8003d58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	3304      	adds	r3, #4
 8003d1e:	4619      	mov	r1, r3
 8003d20:	4610      	mov	r0, r2
 8003d22:	f7ff fa75 	bl	8003210 <vListInsert>
}
 8003d26:	e010      	b.n	8003d4a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d28:	4b0f      	ldr	r3, [pc, #60]	; (8003d68 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	4b0a      	ldr	r3, [pc, #40]	; (8003d58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	3304      	adds	r3, #4
 8003d32:	4619      	mov	r1, r3
 8003d34:	4610      	mov	r0, r2
 8003d36:	f7ff fa6b 	bl	8003210 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003d3a:	4b0c      	ldr	r3, [pc, #48]	; (8003d6c <prvAddCurrentTaskToDelayedList+0xc8>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	68ba      	ldr	r2, [r7, #8]
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d202      	bcs.n	8003d4a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003d44:	4a09      	ldr	r2, [pc, #36]	; (8003d6c <prvAddCurrentTaskToDelayedList+0xc8>)
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	6013      	str	r3, [r2, #0]
}
 8003d4a:	bf00      	nop
 8003d4c:	3710      	adds	r7, #16
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	20000550 	.word	0x20000550
 8003d58:	2000044c 	.word	0x2000044c
 8003d5c:	20000554 	.word	0x20000554
 8003d60:	20000538 	.word	0x20000538
 8003d64:	20000508 	.word	0x20000508
 8003d68:	20000504 	.word	0x20000504
 8003d6c:	2000056c 	.word	0x2000056c

08003d70 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003d70:	b480      	push	{r7}
 8003d72:	b085      	sub	sp, #20
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	3b04      	subs	r3, #4
 8003d80:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003d88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	3b04      	subs	r3, #4
 8003d8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	f023 0201 	bic.w	r2, r3, #1
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	3b04      	subs	r3, #4
 8003d9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003da0:	4a0c      	ldr	r2, [pc, #48]	; (8003dd4 <pxPortInitialiseStack+0x64>)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	3b14      	subs	r3, #20
 8003daa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	3b04      	subs	r3, #4
 8003db6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f06f 0202 	mvn.w	r2, #2
 8003dbe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	3b20      	subs	r3, #32
 8003dc4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3714      	adds	r7, #20
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr
 8003dd4:	08003dd9 	.word	0x08003dd9

08003dd8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b085      	sub	sp, #20
 8003ddc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003dde:	2300      	movs	r3, #0
 8003de0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003de2:	4b12      	ldr	r3, [pc, #72]	; (8003e2c <prvTaskExitError+0x54>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dea:	d00a      	beq.n	8003e02 <prvTaskExitError+0x2a>
	__asm volatile
 8003dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df0:	f383 8811 	msr	BASEPRI, r3
 8003df4:	f3bf 8f6f 	isb	sy
 8003df8:	f3bf 8f4f 	dsb	sy
 8003dfc:	60fb      	str	r3, [r7, #12]
}
 8003dfe:	bf00      	nop
 8003e00:	e7fe      	b.n	8003e00 <prvTaskExitError+0x28>
	__asm volatile
 8003e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e06:	f383 8811 	msr	BASEPRI, r3
 8003e0a:	f3bf 8f6f 	isb	sy
 8003e0e:	f3bf 8f4f 	dsb	sy
 8003e12:	60bb      	str	r3, [r7, #8]
}
 8003e14:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003e16:	bf00      	nop
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d0fc      	beq.n	8003e18 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003e1e:	bf00      	nop
 8003e20:	bf00      	nop
 8003e22:	3714      	adds	r7, #20
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr
 8003e2c:	20000080 	.word	0x20000080

08003e30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003e30:	4b07      	ldr	r3, [pc, #28]	; (8003e50 <pxCurrentTCBConst2>)
 8003e32:	6819      	ldr	r1, [r3, #0]
 8003e34:	6808      	ldr	r0, [r1, #0]
 8003e36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e3a:	f380 8809 	msr	PSP, r0
 8003e3e:	f3bf 8f6f 	isb	sy
 8003e42:	f04f 0000 	mov.w	r0, #0
 8003e46:	f380 8811 	msr	BASEPRI, r0
 8003e4a:	4770      	bx	lr
 8003e4c:	f3af 8000 	nop.w

08003e50 <pxCurrentTCBConst2>:
 8003e50:	2000044c 	.word	0x2000044c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003e54:	bf00      	nop
 8003e56:	bf00      	nop

08003e58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003e58:	4808      	ldr	r0, [pc, #32]	; (8003e7c <prvPortStartFirstTask+0x24>)
 8003e5a:	6800      	ldr	r0, [r0, #0]
 8003e5c:	6800      	ldr	r0, [r0, #0]
 8003e5e:	f380 8808 	msr	MSP, r0
 8003e62:	f04f 0000 	mov.w	r0, #0
 8003e66:	f380 8814 	msr	CONTROL, r0
 8003e6a:	b662      	cpsie	i
 8003e6c:	b661      	cpsie	f
 8003e6e:	f3bf 8f4f 	dsb	sy
 8003e72:	f3bf 8f6f 	isb	sy
 8003e76:	df00      	svc	0
 8003e78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003e7a:	bf00      	nop
 8003e7c:	e000ed08 	.word	0xe000ed08

08003e80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b086      	sub	sp, #24
 8003e84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003e86:	4b46      	ldr	r3, [pc, #280]	; (8003fa0 <xPortStartScheduler+0x120>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a46      	ldr	r2, [pc, #280]	; (8003fa4 <xPortStartScheduler+0x124>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d10a      	bne.n	8003ea6 <xPortStartScheduler+0x26>
	__asm volatile
 8003e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e94:	f383 8811 	msr	BASEPRI, r3
 8003e98:	f3bf 8f6f 	isb	sy
 8003e9c:	f3bf 8f4f 	dsb	sy
 8003ea0:	613b      	str	r3, [r7, #16]
}
 8003ea2:	bf00      	nop
 8003ea4:	e7fe      	b.n	8003ea4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003ea6:	4b3e      	ldr	r3, [pc, #248]	; (8003fa0 <xPortStartScheduler+0x120>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a3f      	ldr	r2, [pc, #252]	; (8003fa8 <xPortStartScheduler+0x128>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d10a      	bne.n	8003ec6 <xPortStartScheduler+0x46>
	__asm volatile
 8003eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb4:	f383 8811 	msr	BASEPRI, r3
 8003eb8:	f3bf 8f6f 	isb	sy
 8003ebc:	f3bf 8f4f 	dsb	sy
 8003ec0:	60fb      	str	r3, [r7, #12]
}
 8003ec2:	bf00      	nop
 8003ec4:	e7fe      	b.n	8003ec4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003ec6:	4b39      	ldr	r3, [pc, #228]	; (8003fac <xPortStartScheduler+0x12c>)
 8003ec8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	781b      	ldrb	r3, [r3, #0]
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	22ff      	movs	r2, #255	; 0xff
 8003ed6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003ee0:	78fb      	ldrb	r3, [r7, #3]
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003ee8:	b2da      	uxtb	r2, r3
 8003eea:	4b31      	ldr	r3, [pc, #196]	; (8003fb0 <xPortStartScheduler+0x130>)
 8003eec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003eee:	4b31      	ldr	r3, [pc, #196]	; (8003fb4 <xPortStartScheduler+0x134>)
 8003ef0:	2207      	movs	r2, #7
 8003ef2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003ef4:	e009      	b.n	8003f0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8003ef6:	4b2f      	ldr	r3, [pc, #188]	; (8003fb4 <xPortStartScheduler+0x134>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	3b01      	subs	r3, #1
 8003efc:	4a2d      	ldr	r2, [pc, #180]	; (8003fb4 <xPortStartScheduler+0x134>)
 8003efe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003f00:	78fb      	ldrb	r3, [r7, #3]
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	005b      	lsls	r3, r3, #1
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f0a:	78fb      	ldrb	r3, [r7, #3]
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f12:	2b80      	cmp	r3, #128	; 0x80
 8003f14:	d0ef      	beq.n	8003ef6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003f16:	4b27      	ldr	r3, [pc, #156]	; (8003fb4 <xPortStartScheduler+0x134>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f1c3 0307 	rsb	r3, r3, #7
 8003f1e:	2b04      	cmp	r3, #4
 8003f20:	d00a      	beq.n	8003f38 <xPortStartScheduler+0xb8>
	__asm volatile
 8003f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f26:	f383 8811 	msr	BASEPRI, r3
 8003f2a:	f3bf 8f6f 	isb	sy
 8003f2e:	f3bf 8f4f 	dsb	sy
 8003f32:	60bb      	str	r3, [r7, #8]
}
 8003f34:	bf00      	nop
 8003f36:	e7fe      	b.n	8003f36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003f38:	4b1e      	ldr	r3, [pc, #120]	; (8003fb4 <xPortStartScheduler+0x134>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	021b      	lsls	r3, r3, #8
 8003f3e:	4a1d      	ldr	r2, [pc, #116]	; (8003fb4 <xPortStartScheduler+0x134>)
 8003f40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003f42:	4b1c      	ldr	r3, [pc, #112]	; (8003fb4 <xPortStartScheduler+0x134>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f4a:	4a1a      	ldr	r2, [pc, #104]	; (8003fb4 <xPortStartScheduler+0x134>)
 8003f4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	b2da      	uxtb	r2, r3
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003f56:	4b18      	ldr	r3, [pc, #96]	; (8003fb8 <xPortStartScheduler+0x138>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a17      	ldr	r2, [pc, #92]	; (8003fb8 <xPortStartScheduler+0x138>)
 8003f5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003f62:	4b15      	ldr	r3, [pc, #84]	; (8003fb8 <xPortStartScheduler+0x138>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a14      	ldr	r2, [pc, #80]	; (8003fb8 <xPortStartScheduler+0x138>)
 8003f68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003f6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003f6e:	f000 f8dd 	bl	800412c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003f72:	4b12      	ldr	r3, [pc, #72]	; (8003fbc <xPortStartScheduler+0x13c>)
 8003f74:	2200      	movs	r2, #0
 8003f76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003f78:	f000 f8fc 	bl	8004174 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003f7c:	4b10      	ldr	r3, [pc, #64]	; (8003fc0 <xPortStartScheduler+0x140>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a0f      	ldr	r2, [pc, #60]	; (8003fc0 <xPortStartScheduler+0x140>)
 8003f82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003f86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003f88:	f7ff ff66 	bl	8003e58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003f8c:	f7ff fd4e 	bl	8003a2c <vTaskSwitchContext>
	prvTaskExitError();
 8003f90:	f7ff ff22 	bl	8003dd8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003f94:	2300      	movs	r3, #0
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3718      	adds	r7, #24
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	e000ed00 	.word	0xe000ed00
 8003fa4:	410fc271 	.word	0x410fc271
 8003fa8:	410fc270 	.word	0x410fc270
 8003fac:	e000e400 	.word	0xe000e400
 8003fb0:	20000578 	.word	0x20000578
 8003fb4:	2000057c 	.word	0x2000057c
 8003fb8:	e000ed20 	.word	0xe000ed20
 8003fbc:	20000080 	.word	0x20000080
 8003fc0:	e000ef34 	.word	0xe000ef34

08003fc4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
	__asm volatile
 8003fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fce:	f383 8811 	msr	BASEPRI, r3
 8003fd2:	f3bf 8f6f 	isb	sy
 8003fd6:	f3bf 8f4f 	dsb	sy
 8003fda:	607b      	str	r3, [r7, #4]
}
 8003fdc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003fde:	4b0f      	ldr	r3, [pc, #60]	; (800401c <vPortEnterCritical+0x58>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	4a0d      	ldr	r2, [pc, #52]	; (800401c <vPortEnterCritical+0x58>)
 8003fe6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003fe8:	4b0c      	ldr	r3, [pc, #48]	; (800401c <vPortEnterCritical+0x58>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d10f      	bne.n	8004010 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003ff0:	4b0b      	ldr	r3, [pc, #44]	; (8004020 <vPortEnterCritical+0x5c>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d00a      	beq.n	8004010 <vPortEnterCritical+0x4c>
	__asm volatile
 8003ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ffe:	f383 8811 	msr	BASEPRI, r3
 8004002:	f3bf 8f6f 	isb	sy
 8004006:	f3bf 8f4f 	dsb	sy
 800400a:	603b      	str	r3, [r7, #0]
}
 800400c:	bf00      	nop
 800400e:	e7fe      	b.n	800400e <vPortEnterCritical+0x4a>
	}
}
 8004010:	bf00      	nop
 8004012:	370c      	adds	r7, #12
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr
 800401c:	20000080 	.word	0x20000080
 8004020:	e000ed04 	.word	0xe000ed04

08004024 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800402a:	4b12      	ldr	r3, [pc, #72]	; (8004074 <vPortExitCritical+0x50>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d10a      	bne.n	8004048 <vPortExitCritical+0x24>
	__asm volatile
 8004032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004036:	f383 8811 	msr	BASEPRI, r3
 800403a:	f3bf 8f6f 	isb	sy
 800403e:	f3bf 8f4f 	dsb	sy
 8004042:	607b      	str	r3, [r7, #4]
}
 8004044:	bf00      	nop
 8004046:	e7fe      	b.n	8004046 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004048:	4b0a      	ldr	r3, [pc, #40]	; (8004074 <vPortExitCritical+0x50>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	3b01      	subs	r3, #1
 800404e:	4a09      	ldr	r2, [pc, #36]	; (8004074 <vPortExitCritical+0x50>)
 8004050:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004052:	4b08      	ldr	r3, [pc, #32]	; (8004074 <vPortExitCritical+0x50>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d105      	bne.n	8004066 <vPortExitCritical+0x42>
 800405a:	2300      	movs	r3, #0
 800405c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004064:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004066:	bf00      	nop
 8004068:	370c      	adds	r7, #12
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr
 8004072:	bf00      	nop
 8004074:	20000080 	.word	0x20000080
	...

08004080 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004080:	f3ef 8009 	mrs	r0, PSP
 8004084:	f3bf 8f6f 	isb	sy
 8004088:	4b15      	ldr	r3, [pc, #84]	; (80040e0 <pxCurrentTCBConst>)
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	f01e 0f10 	tst.w	lr, #16
 8004090:	bf08      	it	eq
 8004092:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004096:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800409a:	6010      	str	r0, [r2, #0]
 800409c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80040a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80040a4:	f380 8811 	msr	BASEPRI, r0
 80040a8:	f3bf 8f4f 	dsb	sy
 80040ac:	f3bf 8f6f 	isb	sy
 80040b0:	f7ff fcbc 	bl	8003a2c <vTaskSwitchContext>
 80040b4:	f04f 0000 	mov.w	r0, #0
 80040b8:	f380 8811 	msr	BASEPRI, r0
 80040bc:	bc09      	pop	{r0, r3}
 80040be:	6819      	ldr	r1, [r3, #0]
 80040c0:	6808      	ldr	r0, [r1, #0]
 80040c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040c6:	f01e 0f10 	tst.w	lr, #16
 80040ca:	bf08      	it	eq
 80040cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80040d0:	f380 8809 	msr	PSP, r0
 80040d4:	f3bf 8f6f 	isb	sy
 80040d8:	4770      	bx	lr
 80040da:	bf00      	nop
 80040dc:	f3af 8000 	nop.w

080040e0 <pxCurrentTCBConst>:
 80040e0:	2000044c 	.word	0x2000044c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80040e4:	bf00      	nop
 80040e6:	bf00      	nop

080040e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
	__asm volatile
 80040ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040f2:	f383 8811 	msr	BASEPRI, r3
 80040f6:	f3bf 8f6f 	isb	sy
 80040fa:	f3bf 8f4f 	dsb	sy
 80040fe:	607b      	str	r3, [r7, #4]
}
 8004100:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004102:	f7ff fbdb 	bl	80038bc <xTaskIncrementTick>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d003      	beq.n	8004114 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800410c:	4b06      	ldr	r3, [pc, #24]	; (8004128 <SysTick_Handler+0x40>)
 800410e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004112:	601a      	str	r2, [r3, #0]
 8004114:	2300      	movs	r3, #0
 8004116:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	f383 8811 	msr	BASEPRI, r3
}
 800411e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004120:	bf00      	nop
 8004122:	3708      	adds	r7, #8
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}
 8004128:	e000ed04 	.word	0xe000ed04

0800412c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800412c:	b480      	push	{r7}
 800412e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004130:	4b0b      	ldr	r3, [pc, #44]	; (8004160 <vPortSetupTimerInterrupt+0x34>)
 8004132:	2200      	movs	r2, #0
 8004134:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004136:	4b0b      	ldr	r3, [pc, #44]	; (8004164 <vPortSetupTimerInterrupt+0x38>)
 8004138:	2200      	movs	r2, #0
 800413a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800413c:	4b0a      	ldr	r3, [pc, #40]	; (8004168 <vPortSetupTimerInterrupt+0x3c>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a0a      	ldr	r2, [pc, #40]	; (800416c <vPortSetupTimerInterrupt+0x40>)
 8004142:	fba2 2303 	umull	r2, r3, r2, r3
 8004146:	099b      	lsrs	r3, r3, #6
 8004148:	4a09      	ldr	r2, [pc, #36]	; (8004170 <vPortSetupTimerInterrupt+0x44>)
 800414a:	3b01      	subs	r3, #1
 800414c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800414e:	4b04      	ldr	r3, [pc, #16]	; (8004160 <vPortSetupTimerInterrupt+0x34>)
 8004150:	2207      	movs	r2, #7
 8004152:	601a      	str	r2, [r3, #0]
}
 8004154:	bf00      	nop
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	e000e010 	.word	0xe000e010
 8004164:	e000e018 	.word	0xe000e018
 8004168:	20000074 	.word	0x20000074
 800416c:	10624dd3 	.word	0x10624dd3
 8004170:	e000e014 	.word	0xe000e014

08004174 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004174:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004184 <vPortEnableVFP+0x10>
 8004178:	6801      	ldr	r1, [r0, #0]
 800417a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800417e:	6001      	str	r1, [r0, #0]
 8004180:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004182:	bf00      	nop
 8004184:	e000ed88 	.word	0xe000ed88

08004188 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b08a      	sub	sp, #40	; 0x28
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004190:	2300      	movs	r3, #0
 8004192:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004194:	f7ff fae8 	bl	8003768 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004198:	4b5b      	ldr	r3, [pc, #364]	; (8004308 <pvPortMalloc+0x180>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d101      	bne.n	80041a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80041a0:	f000 f920 	bl	80043e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80041a4:	4b59      	ldr	r3, [pc, #356]	; (800430c <pvPortMalloc+0x184>)
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4013      	ands	r3, r2
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	f040 8093 	bne.w	80042d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d01d      	beq.n	80041f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80041b8:	2208      	movs	r2, #8
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4413      	add	r3, r2
 80041be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f003 0307 	and.w	r3, r3, #7
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d014      	beq.n	80041f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f023 0307 	bic.w	r3, r3, #7
 80041d0:	3308      	adds	r3, #8
 80041d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f003 0307 	and.w	r3, r3, #7
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d00a      	beq.n	80041f4 <pvPortMalloc+0x6c>
	__asm volatile
 80041de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e2:	f383 8811 	msr	BASEPRI, r3
 80041e6:	f3bf 8f6f 	isb	sy
 80041ea:	f3bf 8f4f 	dsb	sy
 80041ee:	617b      	str	r3, [r7, #20]
}
 80041f0:	bf00      	nop
 80041f2:	e7fe      	b.n	80041f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d06e      	beq.n	80042d8 <pvPortMalloc+0x150>
 80041fa:	4b45      	ldr	r3, [pc, #276]	; (8004310 <pvPortMalloc+0x188>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	429a      	cmp	r2, r3
 8004202:	d869      	bhi.n	80042d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004204:	4b43      	ldr	r3, [pc, #268]	; (8004314 <pvPortMalloc+0x18c>)
 8004206:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004208:	4b42      	ldr	r3, [pc, #264]	; (8004314 <pvPortMalloc+0x18c>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800420e:	e004      	b.n	800421a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004212:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800421a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	429a      	cmp	r2, r3
 8004222:	d903      	bls.n	800422c <pvPortMalloc+0xa4>
 8004224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d1f1      	bne.n	8004210 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800422c:	4b36      	ldr	r3, [pc, #216]	; (8004308 <pvPortMalloc+0x180>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004232:	429a      	cmp	r2, r3
 8004234:	d050      	beq.n	80042d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004236:	6a3b      	ldr	r3, [r7, #32]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	2208      	movs	r2, #8
 800423c:	4413      	add	r3, r2
 800423e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	6a3b      	ldr	r3, [r7, #32]
 8004246:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424a:	685a      	ldr	r2, [r3, #4]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	1ad2      	subs	r2, r2, r3
 8004250:	2308      	movs	r3, #8
 8004252:	005b      	lsls	r3, r3, #1
 8004254:	429a      	cmp	r2, r3
 8004256:	d91f      	bls.n	8004298 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4413      	add	r3, r2
 800425e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004260:	69bb      	ldr	r3, [r7, #24]
 8004262:	f003 0307 	and.w	r3, r3, #7
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00a      	beq.n	8004280 <pvPortMalloc+0xf8>
	__asm volatile
 800426a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800426e:	f383 8811 	msr	BASEPRI, r3
 8004272:	f3bf 8f6f 	isb	sy
 8004276:	f3bf 8f4f 	dsb	sy
 800427a:	613b      	str	r3, [r7, #16]
}
 800427c:	bf00      	nop
 800427e:	e7fe      	b.n	800427e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004282:	685a      	ldr	r2, [r3, #4]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	1ad2      	subs	r2, r2, r3
 8004288:	69bb      	ldr	r3, [r7, #24]
 800428a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800428c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004292:	69b8      	ldr	r0, [r7, #24]
 8004294:	f000 f908 	bl	80044a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004298:	4b1d      	ldr	r3, [pc, #116]	; (8004310 <pvPortMalloc+0x188>)
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	4a1b      	ldr	r2, [pc, #108]	; (8004310 <pvPortMalloc+0x188>)
 80042a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80042a6:	4b1a      	ldr	r3, [pc, #104]	; (8004310 <pvPortMalloc+0x188>)
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	4b1b      	ldr	r3, [pc, #108]	; (8004318 <pvPortMalloc+0x190>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d203      	bcs.n	80042ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80042b2:	4b17      	ldr	r3, [pc, #92]	; (8004310 <pvPortMalloc+0x188>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a18      	ldr	r2, [pc, #96]	; (8004318 <pvPortMalloc+0x190>)
 80042b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80042ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042bc:	685a      	ldr	r2, [r3, #4]
 80042be:	4b13      	ldr	r3, [pc, #76]	; (800430c <pvPortMalloc+0x184>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	431a      	orrs	r2, r3
 80042c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80042c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ca:	2200      	movs	r2, #0
 80042cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80042ce:	4b13      	ldr	r3, [pc, #76]	; (800431c <pvPortMalloc+0x194>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	3301      	adds	r3, #1
 80042d4:	4a11      	ldr	r2, [pc, #68]	; (800431c <pvPortMalloc+0x194>)
 80042d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80042d8:	f7ff fa54 	bl	8003784 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	f003 0307 	and.w	r3, r3, #7
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d00a      	beq.n	80042fc <pvPortMalloc+0x174>
	__asm volatile
 80042e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ea:	f383 8811 	msr	BASEPRI, r3
 80042ee:	f3bf 8f6f 	isb	sy
 80042f2:	f3bf 8f4f 	dsb	sy
 80042f6:	60fb      	str	r3, [r7, #12]
}
 80042f8:	bf00      	nop
 80042fa:	e7fe      	b.n	80042fa <pvPortMalloc+0x172>
	return pvReturn;
 80042fc:	69fb      	ldr	r3, [r7, #28]
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3728      	adds	r7, #40	; 0x28
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	20004188 	.word	0x20004188
 800430c:	2000419c 	.word	0x2000419c
 8004310:	2000418c 	.word	0x2000418c
 8004314:	20004180 	.word	0x20004180
 8004318:	20004190 	.word	0x20004190
 800431c:	20004194 	.word	0x20004194

08004320 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b086      	sub	sp, #24
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d04d      	beq.n	80043ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004332:	2308      	movs	r3, #8
 8004334:	425b      	negs	r3, r3
 8004336:	697a      	ldr	r2, [r7, #20]
 8004338:	4413      	add	r3, r2
 800433a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	685a      	ldr	r2, [r3, #4]
 8004344:	4b24      	ldr	r3, [pc, #144]	; (80043d8 <vPortFree+0xb8>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4013      	ands	r3, r2
 800434a:	2b00      	cmp	r3, #0
 800434c:	d10a      	bne.n	8004364 <vPortFree+0x44>
	__asm volatile
 800434e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004352:	f383 8811 	msr	BASEPRI, r3
 8004356:	f3bf 8f6f 	isb	sy
 800435a:	f3bf 8f4f 	dsb	sy
 800435e:	60fb      	str	r3, [r7, #12]
}
 8004360:	bf00      	nop
 8004362:	e7fe      	b.n	8004362 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d00a      	beq.n	8004382 <vPortFree+0x62>
	__asm volatile
 800436c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004370:	f383 8811 	msr	BASEPRI, r3
 8004374:	f3bf 8f6f 	isb	sy
 8004378:	f3bf 8f4f 	dsb	sy
 800437c:	60bb      	str	r3, [r7, #8]
}
 800437e:	bf00      	nop
 8004380:	e7fe      	b.n	8004380 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	685a      	ldr	r2, [r3, #4]
 8004386:	4b14      	ldr	r3, [pc, #80]	; (80043d8 <vPortFree+0xb8>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4013      	ands	r3, r2
 800438c:	2b00      	cmp	r3, #0
 800438e:	d01e      	beq.n	80043ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d11a      	bne.n	80043ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	685a      	ldr	r2, [r3, #4]
 800439c:	4b0e      	ldr	r3, [pc, #56]	; (80043d8 <vPortFree+0xb8>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	43db      	mvns	r3, r3
 80043a2:	401a      	ands	r2, r3
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80043a8:	f7ff f9de 	bl	8003768 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	685a      	ldr	r2, [r3, #4]
 80043b0:	4b0a      	ldr	r3, [pc, #40]	; (80043dc <vPortFree+0xbc>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4413      	add	r3, r2
 80043b6:	4a09      	ldr	r2, [pc, #36]	; (80043dc <vPortFree+0xbc>)
 80043b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80043ba:	6938      	ldr	r0, [r7, #16]
 80043bc:	f000 f874 	bl	80044a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80043c0:	4b07      	ldr	r3, [pc, #28]	; (80043e0 <vPortFree+0xc0>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	3301      	adds	r3, #1
 80043c6:	4a06      	ldr	r2, [pc, #24]	; (80043e0 <vPortFree+0xc0>)
 80043c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80043ca:	f7ff f9db 	bl	8003784 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80043ce:	bf00      	nop
 80043d0:	3718      	adds	r7, #24
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	2000419c 	.word	0x2000419c
 80043dc:	2000418c 	.word	0x2000418c
 80043e0:	20004198 	.word	0x20004198

080043e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80043e4:	b480      	push	{r7}
 80043e6:	b085      	sub	sp, #20
 80043e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80043ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80043ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80043f0:	4b27      	ldr	r3, [pc, #156]	; (8004490 <prvHeapInit+0xac>)
 80043f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f003 0307 	and.w	r3, r3, #7
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00c      	beq.n	8004418 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	3307      	adds	r3, #7
 8004402:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f023 0307 	bic.w	r3, r3, #7
 800440a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800440c:	68ba      	ldr	r2, [r7, #8]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	4a1f      	ldr	r2, [pc, #124]	; (8004490 <prvHeapInit+0xac>)
 8004414:	4413      	add	r3, r2
 8004416:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800441c:	4a1d      	ldr	r2, [pc, #116]	; (8004494 <prvHeapInit+0xb0>)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004422:	4b1c      	ldr	r3, [pc, #112]	; (8004494 <prvHeapInit+0xb0>)
 8004424:	2200      	movs	r2, #0
 8004426:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	68ba      	ldr	r2, [r7, #8]
 800442c:	4413      	add	r3, r2
 800442e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004430:	2208      	movs	r2, #8
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	1a9b      	subs	r3, r3, r2
 8004436:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f023 0307 	bic.w	r3, r3, #7
 800443e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	4a15      	ldr	r2, [pc, #84]	; (8004498 <prvHeapInit+0xb4>)
 8004444:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004446:	4b14      	ldr	r3, [pc, #80]	; (8004498 <prvHeapInit+0xb4>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	2200      	movs	r2, #0
 800444c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800444e:	4b12      	ldr	r3, [pc, #72]	; (8004498 <prvHeapInit+0xb4>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	2200      	movs	r2, #0
 8004454:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	68fa      	ldr	r2, [r7, #12]
 800445e:	1ad2      	subs	r2, r2, r3
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004464:	4b0c      	ldr	r3, [pc, #48]	; (8004498 <prvHeapInit+0xb4>)
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	4a0a      	ldr	r2, [pc, #40]	; (800449c <prvHeapInit+0xb8>)
 8004472:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	4a09      	ldr	r2, [pc, #36]	; (80044a0 <prvHeapInit+0xbc>)
 800447a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800447c:	4b09      	ldr	r3, [pc, #36]	; (80044a4 <prvHeapInit+0xc0>)
 800447e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004482:	601a      	str	r2, [r3, #0]
}
 8004484:	bf00      	nop
 8004486:	3714      	adds	r7, #20
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr
 8004490:	20000580 	.word	0x20000580
 8004494:	20004180 	.word	0x20004180
 8004498:	20004188 	.word	0x20004188
 800449c:	20004190 	.word	0x20004190
 80044a0:	2000418c 	.word	0x2000418c
 80044a4:	2000419c 	.word	0x2000419c

080044a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80044a8:	b480      	push	{r7}
 80044aa:	b085      	sub	sp, #20
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80044b0:	4b28      	ldr	r3, [pc, #160]	; (8004554 <prvInsertBlockIntoFreeList+0xac>)
 80044b2:	60fb      	str	r3, [r7, #12]
 80044b4:	e002      	b.n	80044bc <prvInsertBlockIntoFreeList+0x14>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	60fb      	str	r3, [r7, #12]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d8f7      	bhi.n	80044b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	68ba      	ldr	r2, [r7, #8]
 80044d0:	4413      	add	r3, r2
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d108      	bne.n	80044ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	685a      	ldr	r2, [r3, #4]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	441a      	add	r2, r3
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	68ba      	ldr	r2, [r7, #8]
 80044f4:	441a      	add	r2, r3
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d118      	bne.n	8004530 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	4b15      	ldr	r3, [pc, #84]	; (8004558 <prvInsertBlockIntoFreeList+0xb0>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	429a      	cmp	r2, r3
 8004508:	d00d      	beq.n	8004526 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685a      	ldr	r2, [r3, #4]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	441a      	add	r2, r3
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	601a      	str	r2, [r3, #0]
 8004524:	e008      	b.n	8004538 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004526:	4b0c      	ldr	r3, [pc, #48]	; (8004558 <prvInsertBlockIntoFreeList+0xb0>)
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	601a      	str	r2, [r3, #0]
 800452e:	e003      	b.n	8004538 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004538:	68fa      	ldr	r2, [r7, #12]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	429a      	cmp	r2, r3
 800453e:	d002      	beq.n	8004546 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004546:	bf00      	nop
 8004548:	3714      	adds	r7, #20
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr
 8004552:	bf00      	nop
 8004554:	20004180 	.word	0x20004180
 8004558:	20004188 	.word	0x20004188

0800455c <memset>:
 800455c:	4402      	add	r2, r0
 800455e:	4603      	mov	r3, r0
 8004560:	4293      	cmp	r3, r2
 8004562:	d100      	bne.n	8004566 <memset+0xa>
 8004564:	4770      	bx	lr
 8004566:	f803 1b01 	strb.w	r1, [r3], #1
 800456a:	e7f9      	b.n	8004560 <memset+0x4>

0800456c <_reclaim_reent>:
 800456c:	4b29      	ldr	r3, [pc, #164]	; (8004614 <_reclaim_reent+0xa8>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4283      	cmp	r3, r0
 8004572:	b570      	push	{r4, r5, r6, lr}
 8004574:	4604      	mov	r4, r0
 8004576:	d04b      	beq.n	8004610 <_reclaim_reent+0xa4>
 8004578:	69c3      	ldr	r3, [r0, #28]
 800457a:	b143      	cbz	r3, 800458e <_reclaim_reent+0x22>
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d144      	bne.n	800460c <_reclaim_reent+0xa0>
 8004582:	69e3      	ldr	r3, [r4, #28]
 8004584:	6819      	ldr	r1, [r3, #0]
 8004586:	b111      	cbz	r1, 800458e <_reclaim_reent+0x22>
 8004588:	4620      	mov	r0, r4
 800458a:	f000 f86b 	bl	8004664 <_free_r>
 800458e:	6961      	ldr	r1, [r4, #20]
 8004590:	b111      	cbz	r1, 8004598 <_reclaim_reent+0x2c>
 8004592:	4620      	mov	r0, r4
 8004594:	f000 f866 	bl	8004664 <_free_r>
 8004598:	69e1      	ldr	r1, [r4, #28]
 800459a:	b111      	cbz	r1, 80045a2 <_reclaim_reent+0x36>
 800459c:	4620      	mov	r0, r4
 800459e:	f000 f861 	bl	8004664 <_free_r>
 80045a2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80045a4:	b111      	cbz	r1, 80045ac <_reclaim_reent+0x40>
 80045a6:	4620      	mov	r0, r4
 80045a8:	f000 f85c 	bl	8004664 <_free_r>
 80045ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80045ae:	b111      	cbz	r1, 80045b6 <_reclaim_reent+0x4a>
 80045b0:	4620      	mov	r0, r4
 80045b2:	f000 f857 	bl	8004664 <_free_r>
 80045b6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80045b8:	b111      	cbz	r1, 80045c0 <_reclaim_reent+0x54>
 80045ba:	4620      	mov	r0, r4
 80045bc:	f000 f852 	bl	8004664 <_free_r>
 80045c0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80045c2:	b111      	cbz	r1, 80045ca <_reclaim_reent+0x5e>
 80045c4:	4620      	mov	r0, r4
 80045c6:	f000 f84d 	bl	8004664 <_free_r>
 80045ca:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80045cc:	b111      	cbz	r1, 80045d4 <_reclaim_reent+0x68>
 80045ce:	4620      	mov	r0, r4
 80045d0:	f000 f848 	bl	8004664 <_free_r>
 80045d4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80045d6:	b111      	cbz	r1, 80045de <_reclaim_reent+0x72>
 80045d8:	4620      	mov	r0, r4
 80045da:	f000 f843 	bl	8004664 <_free_r>
 80045de:	6a23      	ldr	r3, [r4, #32]
 80045e0:	b1b3      	cbz	r3, 8004610 <_reclaim_reent+0xa4>
 80045e2:	4620      	mov	r0, r4
 80045e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80045e8:	4718      	bx	r3
 80045ea:	5949      	ldr	r1, [r1, r5]
 80045ec:	b941      	cbnz	r1, 8004600 <_reclaim_reent+0x94>
 80045ee:	3504      	adds	r5, #4
 80045f0:	69e3      	ldr	r3, [r4, #28]
 80045f2:	2d80      	cmp	r5, #128	; 0x80
 80045f4:	68d9      	ldr	r1, [r3, #12]
 80045f6:	d1f8      	bne.n	80045ea <_reclaim_reent+0x7e>
 80045f8:	4620      	mov	r0, r4
 80045fa:	f000 f833 	bl	8004664 <_free_r>
 80045fe:	e7c0      	b.n	8004582 <_reclaim_reent+0x16>
 8004600:	680e      	ldr	r6, [r1, #0]
 8004602:	4620      	mov	r0, r4
 8004604:	f000 f82e 	bl	8004664 <_free_r>
 8004608:	4631      	mov	r1, r6
 800460a:	e7ef      	b.n	80045ec <_reclaim_reent+0x80>
 800460c:	2500      	movs	r5, #0
 800460e:	e7ef      	b.n	80045f0 <_reclaim_reent+0x84>
 8004610:	bd70      	pop	{r4, r5, r6, pc}
 8004612:	bf00      	nop
 8004614:	200000d0 	.word	0x200000d0

08004618 <__libc_init_array>:
 8004618:	b570      	push	{r4, r5, r6, lr}
 800461a:	4d0d      	ldr	r5, [pc, #52]	; (8004650 <__libc_init_array+0x38>)
 800461c:	4c0d      	ldr	r4, [pc, #52]	; (8004654 <__libc_init_array+0x3c>)
 800461e:	1b64      	subs	r4, r4, r5
 8004620:	10a4      	asrs	r4, r4, #2
 8004622:	2600      	movs	r6, #0
 8004624:	42a6      	cmp	r6, r4
 8004626:	d109      	bne.n	800463c <__libc_init_array+0x24>
 8004628:	4d0b      	ldr	r5, [pc, #44]	; (8004658 <__libc_init_array+0x40>)
 800462a:	4c0c      	ldr	r4, [pc, #48]	; (800465c <__libc_init_array+0x44>)
 800462c:	f000 f872 	bl	8004714 <_init>
 8004630:	1b64      	subs	r4, r4, r5
 8004632:	10a4      	asrs	r4, r4, #2
 8004634:	2600      	movs	r6, #0
 8004636:	42a6      	cmp	r6, r4
 8004638:	d105      	bne.n	8004646 <__libc_init_array+0x2e>
 800463a:	bd70      	pop	{r4, r5, r6, pc}
 800463c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004640:	4798      	blx	r3
 8004642:	3601      	adds	r6, #1
 8004644:	e7ee      	b.n	8004624 <__libc_init_array+0xc>
 8004646:	f855 3b04 	ldr.w	r3, [r5], #4
 800464a:	4798      	blx	r3
 800464c:	3601      	adds	r6, #1
 800464e:	e7f2      	b.n	8004636 <__libc_init_array+0x1e>
 8004650:	08004830 	.word	0x08004830
 8004654:	08004830 	.word	0x08004830
 8004658:	08004830 	.word	0x08004830
 800465c:	08004834 	.word	0x08004834

08004660 <__retarget_lock_acquire_recursive>:
 8004660:	4770      	bx	lr

08004662 <__retarget_lock_release_recursive>:
 8004662:	4770      	bx	lr

08004664 <_free_r>:
 8004664:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004666:	2900      	cmp	r1, #0
 8004668:	d044      	beq.n	80046f4 <_free_r+0x90>
 800466a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800466e:	9001      	str	r0, [sp, #4]
 8004670:	2b00      	cmp	r3, #0
 8004672:	f1a1 0404 	sub.w	r4, r1, #4
 8004676:	bfb8      	it	lt
 8004678:	18e4      	addlt	r4, r4, r3
 800467a:	f000 f83f 	bl	80046fc <__malloc_lock>
 800467e:	4a1e      	ldr	r2, [pc, #120]	; (80046f8 <_free_r+0x94>)
 8004680:	9801      	ldr	r0, [sp, #4]
 8004682:	6813      	ldr	r3, [r2, #0]
 8004684:	b933      	cbnz	r3, 8004694 <_free_r+0x30>
 8004686:	6063      	str	r3, [r4, #4]
 8004688:	6014      	str	r4, [r2, #0]
 800468a:	b003      	add	sp, #12
 800468c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004690:	f000 b83a 	b.w	8004708 <__malloc_unlock>
 8004694:	42a3      	cmp	r3, r4
 8004696:	d908      	bls.n	80046aa <_free_r+0x46>
 8004698:	6825      	ldr	r5, [r4, #0]
 800469a:	1961      	adds	r1, r4, r5
 800469c:	428b      	cmp	r3, r1
 800469e:	bf01      	itttt	eq
 80046a0:	6819      	ldreq	r1, [r3, #0]
 80046a2:	685b      	ldreq	r3, [r3, #4]
 80046a4:	1949      	addeq	r1, r1, r5
 80046a6:	6021      	streq	r1, [r4, #0]
 80046a8:	e7ed      	b.n	8004686 <_free_r+0x22>
 80046aa:	461a      	mov	r2, r3
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	b10b      	cbz	r3, 80046b4 <_free_r+0x50>
 80046b0:	42a3      	cmp	r3, r4
 80046b2:	d9fa      	bls.n	80046aa <_free_r+0x46>
 80046b4:	6811      	ldr	r1, [r2, #0]
 80046b6:	1855      	adds	r5, r2, r1
 80046b8:	42a5      	cmp	r5, r4
 80046ba:	d10b      	bne.n	80046d4 <_free_r+0x70>
 80046bc:	6824      	ldr	r4, [r4, #0]
 80046be:	4421      	add	r1, r4
 80046c0:	1854      	adds	r4, r2, r1
 80046c2:	42a3      	cmp	r3, r4
 80046c4:	6011      	str	r1, [r2, #0]
 80046c6:	d1e0      	bne.n	800468a <_free_r+0x26>
 80046c8:	681c      	ldr	r4, [r3, #0]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	6053      	str	r3, [r2, #4]
 80046ce:	440c      	add	r4, r1
 80046d0:	6014      	str	r4, [r2, #0]
 80046d2:	e7da      	b.n	800468a <_free_r+0x26>
 80046d4:	d902      	bls.n	80046dc <_free_r+0x78>
 80046d6:	230c      	movs	r3, #12
 80046d8:	6003      	str	r3, [r0, #0]
 80046da:	e7d6      	b.n	800468a <_free_r+0x26>
 80046dc:	6825      	ldr	r5, [r4, #0]
 80046de:	1961      	adds	r1, r4, r5
 80046e0:	428b      	cmp	r3, r1
 80046e2:	bf04      	itt	eq
 80046e4:	6819      	ldreq	r1, [r3, #0]
 80046e6:	685b      	ldreq	r3, [r3, #4]
 80046e8:	6063      	str	r3, [r4, #4]
 80046ea:	bf04      	itt	eq
 80046ec:	1949      	addeq	r1, r1, r5
 80046ee:	6021      	streq	r1, [r4, #0]
 80046f0:	6054      	str	r4, [r2, #4]
 80046f2:	e7ca      	b.n	800468a <_free_r+0x26>
 80046f4:	b003      	add	sp, #12
 80046f6:	bd30      	pop	{r4, r5, pc}
 80046f8:	200042dc 	.word	0x200042dc

080046fc <__malloc_lock>:
 80046fc:	4801      	ldr	r0, [pc, #4]	; (8004704 <__malloc_lock+0x8>)
 80046fe:	f7ff bfaf 	b.w	8004660 <__retarget_lock_acquire_recursive>
 8004702:	bf00      	nop
 8004704:	200042d8 	.word	0x200042d8

08004708 <__malloc_unlock>:
 8004708:	4801      	ldr	r0, [pc, #4]	; (8004710 <__malloc_unlock+0x8>)
 800470a:	f7ff bfaa 	b.w	8004662 <__retarget_lock_release_recursive>
 800470e:	bf00      	nop
 8004710:	200042d8 	.word	0x200042d8

08004714 <_init>:
 8004714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004716:	bf00      	nop
 8004718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800471a:	bc08      	pop	{r3}
 800471c:	469e      	mov	lr, r3
 800471e:	4770      	bx	lr

08004720 <_fini>:
 8004720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004722:	bf00      	nop
 8004724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004726:	bc08      	pop	{r3}
 8004728:	469e      	mov	lr, r3
 800472a:	4770      	bx	lr
