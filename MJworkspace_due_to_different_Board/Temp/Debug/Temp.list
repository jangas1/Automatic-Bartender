
Temp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b48  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  08005ce8  08005ce8  00015ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e34  08005e34  00020120  2**0
                  CONTENTS
  4 .ARM          00000008  08005e34  08005e34  00015e34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e3c  08005e3c  00020120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e3c  08005e3c  00015e3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e40  08005e40  00015e40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000120  20000000  08005e44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004290  20000120  08005f64  00020120  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200043b0  08005f64  000243b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY
 13 .debug_info   000143b4  00000000  00000000  00020193  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000328f  00000000  00000000  00034547  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013b0  00000000  00000000  000377d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f30  00000000  00000000  00038b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000194a2  00000000  00000000  00039ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016ac0  00000000  00000000  00052f5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00097fc3  00000000  00000000  00069a1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000055fc  00000000  00000000  001019e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  00106fdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000120 	.word	0x20000120
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005cd0 	.word	0x08005cd0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000124 	.word	0x20000124
 80001dc:	08005cd0 	.word	0x08005cd0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <LeftReact>:

encoder enc;
extern menu_t menu;


void LeftReact(){
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0

	//HAL_UART_Transmit(&huart2, (uint8_t*)"LEFT\n", 5, 100);
	menu.handleLeft(&menu);
 8000580:	4b02      	ldr	r3, [pc, #8]	; (800058c <LeftReact+0x10>)
 8000582:	695b      	ldr	r3, [r3, #20]
 8000584:	4801      	ldr	r0, [pc, #4]	; (800058c <LeftReact+0x10>)
 8000586:	4798      	blx	r3

}
 8000588:	bf00      	nop
 800058a:	bd80      	pop	{r7, pc}
 800058c:	20000040 	.word	0x20000040

08000590 <RightReact>:

void RightReact(){
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0

	//HAL_UART_Transmit(&huart2, (uint8_t*)"RIGHT\n", 6, 100);
	menu.handleRight(&menu);
 8000594:	4b02      	ldr	r3, [pc, #8]	; (80005a0 <RightReact+0x10>)
 8000596:	699b      	ldr	r3, [r3, #24]
 8000598:	4801      	ldr	r0, [pc, #4]	; (80005a0 <RightReact+0x10>)
 800059a:	4798      	blx	r3
}
 800059c:	bf00      	nop
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	20000040 	.word	0x20000040

080005a4 <ClickedReact>:

void ClickedReact(){
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
	menu.clickedReact(&menu);
 80005a8:	4b02      	ldr	r3, [pc, #8]	; (80005b4 <ClickedReact+0x10>)
 80005aa:	69db      	ldr	r3, [r3, #28]
 80005ac:	4801      	ldr	r0, [pc, #4]	; (80005b4 <ClickedReact+0x10>)
 80005ae:	4798      	blx	r3
}
 80005b0:	bf00      	nop
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	20000040 	.word	0x20000040

080005b8 <ISR>:


void ISR(){
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
	  enc.lastClock = enc.newClock;
 80005bc:	4b2c      	ldr	r3, [pc, #176]	; (8000670 <ISR+0xb8>)
 80005be:	789a      	ldrb	r2, [r3, #2]
 80005c0:	4b2b      	ldr	r3, [pc, #172]	; (8000670 <ISR+0xb8>)
 80005c2:	701a      	strb	r2, [r3, #0]
	  enc.lastDir = enc.direction;
 80005c4:	4b2a      	ldr	r3, [pc, #168]	; (8000670 <ISR+0xb8>)
 80005c6:	785a      	ldrb	r2, [r3, #1]
 80005c8:	4b29      	ldr	r3, [pc, #164]	; (8000670 <ISR+0xb8>)
 80005ca:	70da      	strb	r2, [r3, #3]
	  enc.lastClicked = enc.Clicked;
 80005cc:	4b28      	ldr	r3, [pc, #160]	; (8000670 <ISR+0xb8>)
 80005ce:	795a      	ldrb	r2, [r3, #5]
 80005d0:	4b27      	ldr	r3, [pc, #156]	; (8000670 <ISR+0xb8>)
 80005d2:	711a      	strb	r2, [r3, #4]
	  enc.newClock = HAL_GPIO_ReadPin(enc_CLK_GPIO_Port, enc_CLK_Pin);
 80005d4:	2140      	movs	r1, #64	; 0x40
 80005d6:	4827      	ldr	r0, [pc, #156]	; (8000674 <ISR+0xbc>)
 80005d8:	f001 fe34 	bl	8002244 <HAL_GPIO_ReadPin>
 80005dc:	4603      	mov	r3, r0
 80005de:	461a      	mov	r2, r3
 80005e0:	4b23      	ldr	r3, [pc, #140]	; (8000670 <ISR+0xb8>)
 80005e2:	709a      	strb	r2, [r3, #2]
	  enc.direction = HAL_GPIO_ReadPin(enc_DATA_GPIO_Port, enc_DATA_Pin);
 80005e4:	2120      	movs	r1, #32
 80005e6:	4823      	ldr	r0, [pc, #140]	; (8000674 <ISR+0xbc>)
 80005e8:	f001 fe2c 	bl	8002244 <HAL_GPIO_ReadPin>
 80005ec:	4603      	mov	r3, r0
 80005ee:	461a      	mov	r2, r3
 80005f0:	4b1f      	ldr	r3, [pc, #124]	; (8000670 <ISR+0xb8>)
 80005f2:	705a      	strb	r2, [r3, #1]
	  enc.Clicked = !HAL_GPIO_ReadPin(enc_CLICK_GPIO_Port, enc_CLICK_Pin);
 80005f4:	2110      	movs	r1, #16
 80005f6:	481f      	ldr	r0, [pc, #124]	; (8000674 <ISR+0xbc>)
 80005f8:	f001 fe24 	bl	8002244 <HAL_GPIO_ReadPin>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	bf0c      	ite	eq
 8000602:	2301      	moveq	r3, #1
 8000604:	2300      	movne	r3, #0
 8000606:	b2db      	uxtb	r3, r3
 8000608:	461a      	mov	r2, r3
 800060a:	4b19      	ldr	r3, [pc, #100]	; (8000670 <ISR+0xb8>)
 800060c:	715a      	strb	r2, [r3, #5]
	  //HAL_UART_Transmit(&huart2, (uint8_t*)"ISR\n", 6, 100);
	  if (((enc.lastClock != enc.newClock)&& enc.newClock == 1)) {
 800060e:	4b18      	ldr	r3, [pc, #96]	; (8000670 <ISR+0xb8>)
 8000610:	781a      	ldrb	r2, [r3, #0]
 8000612:	4b17      	ldr	r3, [pc, #92]	; (8000670 <ISR+0xb8>)
 8000614:	789b      	ldrb	r3, [r3, #2]
 8000616:	429a      	cmp	r2, r3
 8000618:	d00b      	beq.n	8000632 <ISR+0x7a>
 800061a:	4b15      	ldr	r3, [pc, #84]	; (8000670 <ISR+0xb8>)
 800061c:	789b      	ldrb	r3, [r3, #2]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d107      	bne.n	8000632 <ISR+0x7a>
		if (enc.direction == 1) {
 8000622:	4b13      	ldr	r3, [pc, #76]	; (8000670 <ISR+0xb8>)
 8000624:	785b      	ldrb	r3, [r3, #1]
 8000626:	2b01      	cmp	r3, #1
 8000628:	d114      	bne.n	8000654 <ISR+0x9c>
			enc.LeftCallback();
 800062a:	4b11      	ldr	r3, [pc, #68]	; (8000670 <ISR+0xb8>)
 800062c:	68db      	ldr	r3, [r3, #12]
 800062e:	4798      	blx	r3
		if (enc.direction == 1) {
 8000630:	e010      	b.n	8000654 <ISR+0x9c>
		}
		}else if((enc.lastDir != enc.direction)&& enc.direction == 1){
 8000632:	4b0f      	ldr	r3, [pc, #60]	; (8000670 <ISR+0xb8>)
 8000634:	78da      	ldrb	r2, [r3, #3]
 8000636:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <ISR+0xb8>)
 8000638:	785b      	ldrb	r3, [r3, #1]
 800063a:	429a      	cmp	r2, r3
 800063c:	d00a      	beq.n	8000654 <ISR+0x9c>
 800063e:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <ISR+0xb8>)
 8000640:	785b      	ldrb	r3, [r3, #1]
 8000642:	2b01      	cmp	r3, #1
 8000644:	d106      	bne.n	8000654 <ISR+0x9c>
			if (enc.newClock == 1) {
 8000646:	4b0a      	ldr	r3, [pc, #40]	; (8000670 <ISR+0xb8>)
 8000648:	789b      	ldrb	r3, [r3, #2]
 800064a:	2b01      	cmp	r3, #1
 800064c:	d102      	bne.n	8000654 <ISR+0x9c>
				enc.RightCallback();
 800064e:	4b08      	ldr	r3, [pc, #32]	; (8000670 <ISR+0xb8>)
 8000650:	691b      	ldr	r3, [r3, #16]
 8000652:	4798      	blx	r3
			}
	  }
	  if ((enc.Clicked == 1)&&(enc.lastClicked==0)) {
 8000654:	4b06      	ldr	r3, [pc, #24]	; (8000670 <ISR+0xb8>)
 8000656:	795b      	ldrb	r3, [r3, #5]
 8000658:	2b01      	cmp	r3, #1
 800065a:	d106      	bne.n	800066a <ISR+0xb2>
 800065c:	4b04      	ldr	r3, [pc, #16]	; (8000670 <ISR+0xb8>)
 800065e:	791b      	ldrb	r3, [r3, #4]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d102      	bne.n	800066a <ISR+0xb2>
		enc.ClickedCallback();
 8000664:	4b02      	ldr	r3, [pc, #8]	; (8000670 <ISR+0xb8>)
 8000666:	695b      	ldr	r3, [r3, #20]
 8000668:	4798      	blx	r3
	  }
}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	2000013c 	.word	0x2000013c
 8000674:	40020400 	.word	0x40020400

08000678 <encoderInit>:

void encoderInit(){
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
	enc.ISR = ISR;
 800067c:	4b0e      	ldr	r3, [pc, #56]	; (80006b8 <encoderInit+0x40>)
 800067e:	4a0f      	ldr	r2, [pc, #60]	; (80006bc <encoderInit+0x44>)
 8000680:	609a      	str	r2, [r3, #8]
	enc.RightCallback = RightReact;
 8000682:	4b0d      	ldr	r3, [pc, #52]	; (80006b8 <encoderInit+0x40>)
 8000684:	4a0e      	ldr	r2, [pc, #56]	; (80006c0 <encoderInit+0x48>)
 8000686:	611a      	str	r2, [r3, #16]
	enc.LeftCallback = LeftReact;
 8000688:	4b0b      	ldr	r3, [pc, #44]	; (80006b8 <encoderInit+0x40>)
 800068a:	4a0e      	ldr	r2, [pc, #56]	; (80006c4 <encoderInit+0x4c>)
 800068c:	60da      	str	r2, [r3, #12]
	enc.ClickedCallback = ClickedReact;
 800068e:	4b0a      	ldr	r3, [pc, #40]	; (80006b8 <encoderInit+0x40>)
 8000690:	4a0d      	ldr	r2, [pc, #52]	; (80006c8 <encoderInit+0x50>)
 8000692:	615a      	str	r2, [r3, #20]
	enc.direction=1;
 8000694:	4b08      	ldr	r3, [pc, #32]	; (80006b8 <encoderInit+0x40>)
 8000696:	2201      	movs	r2, #1
 8000698:	705a      	strb	r2, [r3, #1]
	enc.lastClock=1;
 800069a:	4b07      	ldr	r3, [pc, #28]	; (80006b8 <encoderInit+0x40>)
 800069c:	2201      	movs	r2, #1
 800069e:	701a      	strb	r2, [r3, #0]
	enc.lastDir =1;
 80006a0:	4b05      	ldr	r3, [pc, #20]	; (80006b8 <encoderInit+0x40>)
 80006a2:	2201      	movs	r2, #1
 80006a4:	70da      	strb	r2, [r3, #3]
	enc.newClock=1;
 80006a6:	4b04      	ldr	r3, [pc, #16]	; (80006b8 <encoderInit+0x40>)
 80006a8:	2201      	movs	r2, #1
 80006aa:	709a      	strb	r2, [r3, #2]
}
 80006ac:	bf00      	nop
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	2000013c 	.word	0x2000013c
 80006bc:	080005b9 	.word	0x080005b9
 80006c0:	08000591 	.word	0x08000591
 80006c4:	0800057d 	.word	0x0800057d
 80006c8:	080005a5 	.word	0x080005a5

080006cc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80006cc:	b480      	push	{r7}
 80006ce:	b085      	sub	sp, #20
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	60f8      	str	r0, [r7, #12]
 80006d4:	60b9      	str	r1, [r7, #8]
 80006d6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	4a07      	ldr	r2, [pc, #28]	; (80006f8 <vApplicationGetIdleTaskMemory+0x2c>)
 80006dc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80006de:	68bb      	ldr	r3, [r7, #8]
 80006e0:	4a06      	ldr	r2, [pc, #24]	; (80006fc <vApplicationGetIdleTaskMemory+0x30>)
 80006e2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	2280      	movs	r2, #128	; 0x80
 80006e8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80006ea:	bf00      	nop
 80006ec:	3714      	adds	r7, #20
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	20000154 	.word	0x20000154
 80006fc:	200001f4 	.word	0x200001f4

08000700 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 800070a:	4a38      	ldr	r2, [pc, #224]	; (80007ec <HD44780_Init+0xec>)
 800070c:	79fb      	ldrb	r3, [r7, #7]
 800070e:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8000710:	4b37      	ldr	r3, [pc, #220]	; (80007f0 <HD44780_Init+0xf0>)
 8000712:	2208      	movs	r2, #8
 8000714:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000716:	4b37      	ldr	r3, [pc, #220]	; (80007f4 <HD44780_Init+0xf4>)
 8000718:	2200      	movs	r2, #0
 800071a:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 800071c:	4b33      	ldr	r3, [pc, #204]	; (80007ec <HD44780_Init+0xec>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	2b01      	cmp	r3, #1
 8000722:	d907      	bls.n	8000734 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000724:	4b33      	ldr	r3, [pc, #204]	; (80007f4 <HD44780_Init+0xf4>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	f043 0308 	orr.w	r3, r3, #8
 800072c:	b2da      	uxtb	r2, r3
 800072e:	4b31      	ldr	r3, [pc, #196]	; (80007f4 <HD44780_Init+0xf4>)
 8000730:	701a      	strb	r2, [r3, #0]
 8000732:	e006      	b.n	8000742 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000734:	4b2f      	ldr	r3, [pc, #188]	; (80007f4 <HD44780_Init+0xf4>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	f043 0304 	orr.w	r3, r3, #4
 800073c:	b2da      	uxtb	r2, r3
 800073e:	4b2d      	ldr	r3, [pc, #180]	; (80007f4 <HD44780_Init+0xf4>)
 8000740:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8000742:	f000 f985 	bl	8000a50 <DelayInit>
  osDelay(50);
 8000746:	2032      	movs	r0, #50	; 0x32
 8000748:	f000 f9ac 	bl	8000aa4 <osDelay>

  ExpanderWrite(dpBacklight);
 800074c:	4b28      	ldr	r3, [pc, #160]	; (80007f0 <HD44780_Init+0xf0>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	4618      	mov	r0, r3
 8000752:	f000 f943 	bl	80009dc <ExpanderWrite>
  osDelay(1000);
 8000756:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800075a:	f000 f9a3 	bl	8000aa4 <osDelay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 800075e:	2030      	movs	r0, #48	; 0x30
 8000760:	f000 f92b 	bl	80009ba <Write4Bits>
  osDelay(4500);
 8000764:	f241 1094 	movw	r0, #4500	; 0x1194
 8000768:	f000 f99c 	bl	8000aa4 <osDelay>

  Write4Bits(0x03 << 4);
 800076c:	2030      	movs	r0, #48	; 0x30
 800076e:	f000 f924 	bl	80009ba <Write4Bits>
  osDelay(4500);
 8000772:	f241 1094 	movw	r0, #4500	; 0x1194
 8000776:	f000 f995 	bl	8000aa4 <osDelay>

  Write4Bits(0x03 << 4);
 800077a:	2030      	movs	r0, #48	; 0x30
 800077c:	f000 f91d 	bl	80009ba <Write4Bits>
  osDelay(4500);
 8000780:	f241 1094 	movw	r0, #4500	; 0x1194
 8000784:	f000 f98e 	bl	8000aa4 <osDelay>

  Write4Bits(0x02 << 4);
 8000788:	2020      	movs	r0, #32
 800078a:	f000 f916 	bl	80009ba <Write4Bits>
  osDelay(100);
 800078e:	2064      	movs	r0, #100	; 0x64
 8000790:	f000 f988 	bl	8000aa4 <osDelay>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8000794:	4b17      	ldr	r3, [pc, #92]	; (80007f4 <HD44780_Init+0xf4>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	f043 0320 	orr.w	r3, r3, #32
 800079c:	b2db      	uxtb	r3, r3
 800079e:	4618      	mov	r0, r3
 80007a0:	f000 f8ce 	bl	8000940 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80007a4:	4b14      	ldr	r3, [pc, #80]	; (80007f8 <HD44780_Init+0xf8>)
 80007a6:	2204      	movs	r2, #4
 80007a8:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 80007aa:	f000 f875 	bl	8000898 <HD44780_Display>
  HD44780_Clear();
 80007ae:	f000 f82b 	bl	8000808 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80007b2:	4b12      	ldr	r3, [pc, #72]	; (80007fc <HD44780_Init+0xfc>)
 80007b4:	2202      	movs	r2, #2
 80007b6:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 80007b8:	4b10      	ldr	r3, [pc, #64]	; (80007fc <HD44780_Init+0xfc>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	f043 0304 	orr.w	r3, r3, #4
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	4618      	mov	r0, r3
 80007c4:	f000 f8bc 	bl	8000940 <SendCommand>
  osDelay(4500);
 80007c8:	f241 1094 	movw	r0, #4500	; 0x1194
 80007cc:	f000 f96a 	bl	8000aa4 <osDelay>

  HD44780_CreateSpecialChar(0, special1);
 80007d0:	490b      	ldr	r1, [pc, #44]	; (8000800 <HD44780_Init+0x100>)
 80007d2:	2000      	movs	r0, #0
 80007d4:	f000 f876 	bl	80008c4 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 80007d8:	490a      	ldr	r1, [pc, #40]	; (8000804 <HD44780_Init+0x104>)
 80007da:	2001      	movs	r0, #1
 80007dc:	f000 f872 	bl	80008c4 <HD44780_CreateSpecialChar>

  HD44780_Home();
 80007e0:	f000 f81d 	bl	800081e <HD44780_Home>
}
 80007e4:	bf00      	nop
 80007e6:	3708      	adds	r7, #8
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	200003f7 	.word	0x200003f7
 80007f0:	200003f8 	.word	0x200003f8
 80007f4:	200003f4 	.word	0x200003f4
 80007f8:	200003f5 	.word	0x200003f5
 80007fc:	200003f6 	.word	0x200003f6
 8000800:	20000000 	.word	0x20000000
 8000804:	20000008 	.word	0x20000008

08000808 <HD44780_Clear>:

void HD44780_Clear()
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 800080c:	2001      	movs	r0, #1
 800080e:	f000 f897 	bl	8000940 <SendCommand>
  osDelay(2000);
 8000812:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000816:	f000 f945 	bl	8000aa4 <osDelay>
}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}

0800081e <HD44780_Home>:

void HD44780_Home()
{
 800081e:	b580      	push	{r7, lr}
 8000820:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8000822:	2002      	movs	r0, #2
 8000824:	f000 f88c 	bl	8000940 <SendCommand>
  osDelay(2000);
 8000828:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800082c:	f000 f93a 	bl	8000aa4 <osDelay>
}
 8000830:	bf00      	nop
 8000832:	bd80      	pop	{r7, pc}

08000834 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8000834:	b590      	push	{r4, r7, lr}
 8000836:	b087      	sub	sp, #28
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	460a      	mov	r2, r1
 800083e:	71fb      	strb	r3, [r7, #7]
 8000840:	4613      	mov	r3, r2
 8000842:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000844:	4b12      	ldr	r3, [pc, #72]	; (8000890 <HD44780_SetCursor+0x5c>)
 8000846:	f107 0408 	add.w	r4, r7, #8
 800084a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800084c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8000850:	4b10      	ldr	r3, [pc, #64]	; (8000894 <HD44780_SetCursor+0x60>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	79ba      	ldrb	r2, [r7, #6]
 8000856:	429a      	cmp	r2, r3
 8000858:	d303      	bcc.n	8000862 <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 800085a:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <HD44780_SetCursor+0x60>)
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	3b01      	subs	r3, #1
 8000860:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8000862:	79bb      	ldrb	r3, [r7, #6]
 8000864:	009b      	lsls	r3, r3, #2
 8000866:	3318      	adds	r3, #24
 8000868:	443b      	add	r3, r7
 800086a:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800086e:	b2da      	uxtb	r2, r3
 8000870:	79fb      	ldrb	r3, [r7, #7]
 8000872:	4413      	add	r3, r2
 8000874:	b2db      	uxtb	r3, r3
 8000876:	b25b      	sxtb	r3, r3
 8000878:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800087c:	b25b      	sxtb	r3, r3
 800087e:	b2db      	uxtb	r3, r3
 8000880:	4618      	mov	r0, r3
 8000882:	f000 f85d 	bl	8000940 <SendCommand>
}
 8000886:	bf00      	nop
 8000888:	371c      	adds	r7, #28
 800088a:	46bd      	mov	sp, r7
 800088c:	bd90      	pop	{r4, r7, pc}
 800088e:	bf00      	nop
 8000890:	08005ce8 	.word	0x08005ce8
 8000894:	200003f7 	.word	0x200003f7

08000898 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 800089c:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <HD44780_Display+0x28>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	f043 0304 	orr.w	r3, r3, #4
 80008a4:	b2da      	uxtb	r2, r3
 80008a6:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <HD44780_Display+0x28>)
 80008a8:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80008aa:	4b05      	ldr	r3, [pc, #20]	; (80008c0 <HD44780_Display+0x28>)
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	f043 0308 	orr.w	r3, r3, #8
 80008b2:	b2db      	uxtb	r3, r3
 80008b4:	4618      	mov	r0, r3
 80008b6:	f000 f843 	bl	8000940 <SendCommand>
}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	200003f5 	.word	0x200003f5

080008c4 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	4603      	mov	r3, r0
 80008cc:	6039      	str	r1, [r7, #0]
 80008ce:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 80008d0:	79fb      	ldrb	r3, [r7, #7]
 80008d2:	f003 0307 	and.w	r3, r3, #7
 80008d6:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 80008d8:	79fb      	ldrb	r3, [r7, #7]
 80008da:	00db      	lsls	r3, r3, #3
 80008dc:	b25b      	sxtb	r3, r3
 80008de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008e2:	b25b      	sxtb	r3, r3
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	4618      	mov	r0, r3
 80008e8:	f000 f82a 	bl	8000940 <SendCommand>
  for (int i=0; i<8; i++)
 80008ec:	2300      	movs	r3, #0
 80008ee:	60fb      	str	r3, [r7, #12]
 80008f0:	e009      	b.n	8000906 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	683a      	ldr	r2, [r7, #0]
 80008f6:	4413      	add	r3, r2
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	4618      	mov	r0, r3
 80008fc:	f000 f82e 	bl	800095c <SendChar>
  for (int i=0; i<8; i++)
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	3301      	adds	r3, #1
 8000904:	60fb      	str	r3, [r7, #12]
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	2b07      	cmp	r3, #7
 800090a:	ddf2      	ble.n	80008f2 <HD44780_CreateSpecialChar+0x2e>
  }
}
 800090c:	bf00      	nop
 800090e:	bf00      	nop
 8000910:	3710      	adds	r7, #16
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}

08000916 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8000916:	b580      	push	{r7, lr}
 8000918:	b082      	sub	sp, #8
 800091a:	af00      	add	r7, sp, #0
 800091c:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 800091e:	e006      	b.n	800092e <HD44780_PrintStr+0x18>
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	1c5a      	adds	r2, r3, #1
 8000924:	607a      	str	r2, [r7, #4]
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	4618      	mov	r0, r3
 800092a:	f000 f817 	bl	800095c <SendChar>
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d1f4      	bne.n	8000920 <HD44780_PrintStr+0xa>
}
 8000936:	bf00      	nop
 8000938:	bf00      	nop
 800093a:	3708      	adds	r7, #8
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}

08000940 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	4603      	mov	r3, r0
 8000948:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 800094a:	79fb      	ldrb	r3, [r7, #7]
 800094c:	2100      	movs	r1, #0
 800094e:	4618      	mov	r0, r3
 8000950:	f000 f812 	bl	8000978 <Send>
}
 8000954:	bf00      	nop
 8000956:	3708      	adds	r7, #8
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}

0800095c <SendChar>:

static void SendChar(uint8_t ch)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	4603      	mov	r3, r0
 8000964:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8000966:	79fb      	ldrb	r3, [r7, #7]
 8000968:	2101      	movs	r1, #1
 800096a:	4618      	mov	r0, r3
 800096c:	f000 f804 	bl	8000978 <Send>
}
 8000970:	bf00      	nop
 8000972:	3708      	adds	r7, #8
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}

08000978 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b084      	sub	sp, #16
 800097c:	af00      	add	r7, sp, #0
 800097e:	4603      	mov	r3, r0
 8000980:	460a      	mov	r2, r1
 8000982:	71fb      	strb	r3, [r7, #7]
 8000984:	4613      	mov	r3, r2
 8000986:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8000988:	79fb      	ldrb	r3, [r7, #7]
 800098a:	f023 030f 	bic.w	r3, r3, #15
 800098e:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8000990:	79fb      	ldrb	r3, [r7, #7]
 8000992:	011b      	lsls	r3, r3, #4
 8000994:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8000996:	7bfa      	ldrb	r2, [r7, #15]
 8000998:	79bb      	ldrb	r3, [r7, #6]
 800099a:	4313      	orrs	r3, r2
 800099c:	b2db      	uxtb	r3, r3
 800099e:	4618      	mov	r0, r3
 80009a0:	f000 f80b 	bl	80009ba <Write4Bits>
  Write4Bits((lownib)|mode);
 80009a4:	7bba      	ldrb	r2, [r7, #14]
 80009a6:	79bb      	ldrb	r3, [r7, #6]
 80009a8:	4313      	orrs	r3, r2
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	4618      	mov	r0, r3
 80009ae:	f000 f804 	bl	80009ba <Write4Bits>
}
 80009b2:	bf00      	nop
 80009b4:	3710      	adds	r7, #16
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}

080009ba <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 80009ba:	b580      	push	{r7, lr}
 80009bc:	b082      	sub	sp, #8
 80009be:	af00      	add	r7, sp, #0
 80009c0:	4603      	mov	r3, r0
 80009c2:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 80009c4:	79fb      	ldrb	r3, [r7, #7]
 80009c6:	4618      	mov	r0, r3
 80009c8:	f000 f808 	bl	80009dc <ExpanderWrite>
  PulseEnable(value);
 80009cc:	79fb      	ldrb	r3, [r7, #7]
 80009ce:	4618      	mov	r0, r3
 80009d0:	f000 f820 	bl	8000a14 <PulseEnable>
}
 80009d4:	bf00      	nop
 80009d6:	3708      	adds	r7, #8
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}

080009dc <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b086      	sub	sp, #24
 80009e0:	af02      	add	r7, sp, #8
 80009e2:	4603      	mov	r3, r0
 80009e4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 80009e6:	4b09      	ldr	r3, [pc, #36]	; (8000a0c <ExpanderWrite+0x30>)
 80009e8:	781a      	ldrb	r2, [r3, #0]
 80009ea:	79fb      	ldrb	r3, [r7, #7]
 80009ec:	4313      	orrs	r3, r2
 80009ee:	b2db      	uxtb	r3, r3
 80009f0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 80009f2:	f107 020f 	add.w	r2, r7, #15
 80009f6:	230a      	movs	r3, #10
 80009f8:	9300      	str	r3, [sp, #0]
 80009fa:	2301      	movs	r3, #1
 80009fc:	214e      	movs	r1, #78	; 0x4e
 80009fe:	4804      	ldr	r0, [pc, #16]	; (8000a10 <ExpanderWrite+0x34>)
 8000a00:	f001 fd96 	bl	8002530 <HAL_I2C_Master_Transmit>
}
 8000a04:	bf00      	nop
 8000a06:	3710      	adds	r7, #16
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	200003f8 	.word	0x200003f8
 8000a10:	200003fc 	.word	0x200003fc

08000a14 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
 8000a20:	f043 0304 	orr.w	r3, r3, #4
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	4618      	mov	r0, r3
 8000a28:	f7ff ffd8 	bl	80009dc <ExpanderWrite>
  osDelay(20);
 8000a2c:	2014      	movs	r0, #20
 8000a2e:	f000 f839 	bl	8000aa4 <osDelay>

  ExpanderWrite(_data & ~ENABLE);
 8000a32:	79fb      	ldrb	r3, [r7, #7]
 8000a34:	f023 0304 	bic.w	r3, r3, #4
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f7ff ffce 	bl	80009dc <ExpanderWrite>
  osDelay(20);
 8000a40:	2014      	movs	r0, #20
 8000a42:	f000 f82f 	bl	8000aa4 <osDelay>
}
 8000a46:	bf00      	nop
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
	...

08000a50 <DelayInit>:

static void DelayInit(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8000a54:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <DelayInit+0x4c>)
 8000a56:	68db      	ldr	r3, [r3, #12]
 8000a58:	4a10      	ldr	r2, [pc, #64]	; (8000a9c <DelayInit+0x4c>)
 8000a5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000a5e:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8000a60:	4b0e      	ldr	r3, [pc, #56]	; (8000a9c <DelayInit+0x4c>)
 8000a62:	68db      	ldr	r3, [r3, #12]
 8000a64:	4a0d      	ldr	r2, [pc, #52]	; (8000a9c <DelayInit+0x4c>)
 8000a66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a6a:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000a6c:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <DelayInit+0x50>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a0b      	ldr	r2, [pc, #44]	; (8000aa0 <DelayInit+0x50>)
 8000a72:	f023 0301 	bic.w	r3, r3, #1
 8000a76:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000a78:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <DelayInit+0x50>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a08      	ldr	r2, [pc, #32]	; (8000aa0 <DelayInit+0x50>)
 8000a7e:	f043 0301 	orr.w	r3, r3, #1
 8000a82:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8000a84:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <DelayInit+0x50>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8000a8a:	bf00      	nop
  __ASM volatile ("NOP");
 8000a8c:	bf00      	nop
  __ASM volatile ("NOP");
 8000a8e:	bf00      	nop
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	e000edf0 	.word	0xe000edf0
 8000aa0:	e0001000 	.word	0xe0001000

08000aa4 <osDelay>:

static void osDelay(uint32_t us) {
 8000aa4:	b480      	push	{r7}
 8000aa6:	b087      	sub	sp, #28
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8000aac:	4b0e      	ldr	r3, [pc, #56]	; (8000ae8 <osDelay+0x44>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a0e      	ldr	r2, [pc, #56]	; (8000aec <osDelay+0x48>)
 8000ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ab6:	0c9a      	lsrs	r2, r3, #18
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	fb02 f303 	mul.w	r3, r2, r3
 8000abe:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8000ac0:	4b0b      	ldr	r3, [pc, #44]	; (8000af0 <osDelay+0x4c>)
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8000ac6:	4b0a      	ldr	r3, [pc, #40]	; (8000af0 <osDelay+0x4c>)
 8000ac8:	685a      	ldr	r2, [r3, #4]
 8000aca:	693b      	ldr	r3, [r7, #16]
 8000acc:	1ad3      	subs	r3, r2, r3
 8000ace:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	697a      	ldr	r2, [r7, #20]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	d8f6      	bhi.n	8000ac6 <osDelay+0x22>
}
 8000ad8:	bf00      	nop
 8000ada:	bf00      	nop
 8000adc:	371c      	adds	r7, #28
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	200000c0 	.word	0x200000c0
 8000aec:	431bde83 	.word	0x431bde83
 8000af0:	e0001000 	.word	0xe0001000

08000af4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000af4:	b5b0      	push	{r4, r5, r7, lr}
 8000af6:	b09c      	sub	sp, #112	; 0x70
 8000af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  menu.currentMenu = &SUB1;
 8000afa:	4b2f      	ldr	r3, [pc, #188]	; (8000bb8 <main+0xc4>)
 8000afc:	4a2f      	ldr	r2, [pc, #188]	; (8000bbc <main+0xc8>)
 8000afe:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b00:	f001 f8f8 	bl	8001cf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b04:	f000 f86e 	bl	8000be4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b08:	f000 f950 	bl	8000dac <MX_GPIO_Init>
  MX_I2C1_Init();
 8000b0c:	f000 f8d4 	bl	8000cb8 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000b10:	f000 f900 	bl	8000d14 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  encoderInit();
 8000b14:	f7ff fdb0 	bl	8000678 <encoderInit>
  HAL_TIM_Base_Start_IT(&htim2);
 8000b18:	4829      	ldr	r0, [pc, #164]	; (8000bc0 <main+0xcc>)
 8000b1a:	f002 fd7d 	bl	8003618 <HAL_TIM_Base_Start_IT>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityAboveNormal, 0, 128);
 8000b1e:	4b29      	ldr	r3, [pc, #164]	; (8000bc4 <main+0xd0>)
 8000b20:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000b24:	461d      	mov	r5, r3
 8000b26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b2a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b2e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000b32:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b36:	2100      	movs	r1, #0
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f003 f976 	bl	8003e2a <osThreadCreate>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	4a21      	ldr	r2, [pc, #132]	; (8000bc8 <main+0xd4>)
 8000b42:	6013      	str	r3, [r2, #0]

  /* definition and creation of diodeDetector */
  osThreadDef(diodeDetector, diodeDetector_Init, osPriorityIdle, 0, 128);
 8000b44:	4b21      	ldr	r3, [pc, #132]	; (8000bcc <main+0xd8>)
 8000b46:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000b4a:	461d      	mov	r5, r3
 8000b4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b50:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b54:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  diodeDetectorHandle = osThreadCreate(osThread(diodeDetector), NULL);
 8000b58:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f003 f963 	bl	8003e2a <osThreadCreate>
 8000b64:	4603      	mov	r3, r0
 8000b66:	4a1a      	ldr	r2, [pc, #104]	; (8000bd0 <main+0xdc>)
 8000b68:	6013      	str	r3, [r2, #0]

  /* definition and creation of holeState */
  osThreadDef(holeState, holeState_Init, osPriorityNormal, 0, 128);
 8000b6a:	4b1a      	ldr	r3, [pc, #104]	; (8000bd4 <main+0xe0>)
 8000b6c:	f107 041c 	add.w	r4, r7, #28
 8000b70:	461d      	mov	r5, r3
 8000b72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b76:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b7a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  holeStateHandle = osThreadCreate(osThread(holeState), NULL);
 8000b7e:	f107 031c 	add.w	r3, r7, #28
 8000b82:	2100      	movs	r1, #0
 8000b84:	4618      	mov	r0, r3
 8000b86:	f003 f950 	bl	8003e2a <osThreadCreate>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	4a12      	ldr	r2, [pc, #72]	; (8000bd8 <main+0xe4>)
 8000b8e:	6013      	str	r3, [r2, #0]

  /* definition and creation of displayMenu */
  osThreadDef(displayMenu, displayMenu_Init, osPriorityIdle, 0, 128);
 8000b90:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <main+0xe8>)
 8000b92:	463c      	mov	r4, r7
 8000b94:	461d      	mov	r5, r3
 8000b96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b9a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b9e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  displayMenuHandle = osThreadCreate(osThread(displayMenu), NULL);
 8000ba2:	463b      	mov	r3, r7
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f003 f93f 	bl	8003e2a <osThreadCreate>
 8000bac:	4603      	mov	r3, r0
 8000bae:	4a0c      	ldr	r2, [pc, #48]	; (8000be0 <main+0xec>)
 8000bb0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000bb2:	f003 f933 	bl	8003e1c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000bb6:	e7fe      	b.n	8000bb6 <main+0xc2>
 8000bb8:	20000040 	.word	0x20000040
 8000bbc:	20000010 	.word	0x20000010
 8000bc0:	20000450 	.word	0x20000450
 8000bc4:	08005d04 	.word	0x08005d04
 8000bc8:	20000498 	.word	0x20000498
 8000bcc:	08005d30 	.word	0x08005d30
 8000bd0:	2000049c 	.word	0x2000049c
 8000bd4:	08005d58 	.word	0x08005d58
 8000bd8:	200004a0 	.word	0x200004a0
 8000bdc:	08005d80 	.word	0x08005d80
 8000be0:	200004a4 	.word	0x200004a4

08000be4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b094      	sub	sp, #80	; 0x50
 8000be8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bea:	f107 0320 	add.w	r3, r7, #32
 8000bee:	2230      	movs	r2, #48	; 0x30
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f004 fb92 	bl	800531c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bf8:	f107 030c 	add.w	r3, r7, #12
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]
 8000c06:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c08:	2300      	movs	r3, #0
 8000c0a:	60bb      	str	r3, [r7, #8]
 8000c0c:	4b28      	ldr	r3, [pc, #160]	; (8000cb0 <SystemClock_Config+0xcc>)
 8000c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c10:	4a27      	ldr	r2, [pc, #156]	; (8000cb0 <SystemClock_Config+0xcc>)
 8000c12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c16:	6413      	str	r3, [r2, #64]	; 0x40
 8000c18:	4b25      	ldr	r3, [pc, #148]	; (8000cb0 <SystemClock_Config+0xcc>)
 8000c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c20:	60bb      	str	r3, [r7, #8]
 8000c22:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c24:	2300      	movs	r3, #0
 8000c26:	607b      	str	r3, [r7, #4]
 8000c28:	4b22      	ldr	r3, [pc, #136]	; (8000cb4 <SystemClock_Config+0xd0>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a21      	ldr	r2, [pc, #132]	; (8000cb4 <SystemClock_Config+0xd0>)
 8000c2e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c32:	6013      	str	r3, [r2, #0]
 8000c34:	4b1f      	ldr	r3, [pc, #124]	; (8000cb4 <SystemClock_Config+0xd0>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c3c:	607b      	str	r3, [r7, #4]
 8000c3e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c40:	2302      	movs	r3, #2
 8000c42:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c44:	2301      	movs	r3, #1
 8000c46:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c48:	2310      	movs	r3, #16
 8000c4a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c50:	2300      	movs	r3, #0
 8000c52:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000c54:	2308      	movs	r3, #8
 8000c56:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000c58:	2360      	movs	r3, #96	; 0x60
 8000c5a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000c60:	2308      	movs	r3, #8
 8000c62:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c64:	f107 0320 	add.w	r3, r7, #32
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f001 ffbb 	bl	8002be4 <HAL_RCC_OscConfig>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c74:	f000 fadc 	bl	8001230 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c78:	230f      	movs	r3, #15
 8000c7a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c80:	2300      	movs	r3, #0
 8000c82:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c88:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000c8a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c8e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000c90:	f107 030c 	add.w	r3, r7, #12
 8000c94:	2103      	movs	r1, #3
 8000c96:	4618      	mov	r0, r3
 8000c98:	f002 fa1c 	bl	80030d4 <HAL_RCC_ClockConfig>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000ca2:	f000 fac5 	bl	8001230 <Error_Handler>
  }
}
 8000ca6:	bf00      	nop
 8000ca8:	3750      	adds	r7, #80	; 0x50
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40023800 	.word	0x40023800
 8000cb4:	40007000 	.word	0x40007000

08000cb8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cbc:	4b13      	ldr	r3, [pc, #76]	; (8000d0c <MX_I2C1_Init+0x54>)
 8000cbe:	4a14      	ldr	r2, [pc, #80]	; (8000d10 <MX_I2C1_Init+0x58>)
 8000cc0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 25000;
 8000cc2:	4b12      	ldr	r3, [pc, #72]	; (8000d0c <MX_I2C1_Init+0x54>)
 8000cc4:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8000cc8:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000cca:	4b10      	ldr	r3, [pc, #64]	; (8000d0c <MX_I2C1_Init+0x54>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000cd0:	4b0e      	ldr	r3, [pc, #56]	; (8000d0c <MX_I2C1_Init+0x54>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cd6:	4b0d      	ldr	r3, [pc, #52]	; (8000d0c <MX_I2C1_Init+0x54>)
 8000cd8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cdc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cde:	4b0b      	ldr	r3, [pc, #44]	; (8000d0c <MX_I2C1_Init+0x54>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ce4:	4b09      	ldr	r3, [pc, #36]	; (8000d0c <MX_I2C1_Init+0x54>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cea:	4b08      	ldr	r3, [pc, #32]	; (8000d0c <MX_I2C1_Init+0x54>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cf0:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <MX_I2C1_Init+0x54>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cf6:	4805      	ldr	r0, [pc, #20]	; (8000d0c <MX_I2C1_Init+0x54>)
 8000cf8:	f001 fad6 	bl	80022a8 <HAL_I2C_Init>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8000d02:	f000 fa95 	bl	8001230 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	200003fc 	.word	0x200003fc
 8000d10:	40005400 	.word	0x40005400

08000d14 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b086      	sub	sp, #24
 8000d18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d1a:	f107 0308 	add.w	r3, r7, #8
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	605a      	str	r2, [r3, #4]
 8000d24:	609a      	str	r2, [r3, #8]
 8000d26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d28:	463b      	mov	r3, r7
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	601a      	str	r2, [r3, #0]
 8000d2e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d30:	4b1d      	ldr	r3, [pc, #116]	; (8000da8 <MX_TIM2_Init+0x94>)
 8000d32:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d36:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000d38:	4b1b      	ldr	r3, [pc, #108]	; (8000da8 <MX_TIM2_Init+0x94>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d3e:	4b1a      	ldr	r3, [pc, #104]	; (8000da8 <MX_TIM2_Init+0x94>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60000;
 8000d44:	4b18      	ldr	r3, [pc, #96]	; (8000da8 <MX_TIM2_Init+0x94>)
 8000d46:	f64e 2260 	movw	r2, #60000	; 0xea60
 8000d4a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d4c:	4b16      	ldr	r3, [pc, #88]	; (8000da8 <MX_TIM2_Init+0x94>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d52:	4b15      	ldr	r3, [pc, #84]	; (8000da8 <MX_TIM2_Init+0x94>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d58:	4813      	ldr	r0, [pc, #76]	; (8000da8 <MX_TIM2_Init+0x94>)
 8000d5a:	f002 fc0d 	bl	8003578 <HAL_TIM_Base_Init>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000d64:	f000 fa64 	bl	8001230 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d6c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d6e:	f107 0308 	add.w	r3, r7, #8
 8000d72:	4619      	mov	r1, r3
 8000d74:	480c      	ldr	r0, [pc, #48]	; (8000da8 <MX_TIM2_Init+0x94>)
 8000d76:	f002 fda1 	bl	80038bc <HAL_TIM_ConfigClockSource>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000d80:	f000 fa56 	bl	8001230 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d84:	2300      	movs	r3, #0
 8000d86:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d8c:	463b      	mov	r3, r7
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4805      	ldr	r0, [pc, #20]	; (8000da8 <MX_TIM2_Init+0x94>)
 8000d92:	f002 ffa9 	bl	8003ce8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000d9c:	f000 fa48 	bl	8001230 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000da0:	bf00      	nop
 8000da2:	3718      	adds	r7, #24
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	20000450 	.word	0x20000450

08000dac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b08c      	sub	sp, #48	; 0x30
 8000db0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db2:	f107 031c 	add.w	r3, r7, #28
 8000db6:	2200      	movs	r2, #0
 8000db8:	601a      	str	r2, [r3, #0]
 8000dba:	605a      	str	r2, [r3, #4]
 8000dbc:	609a      	str	r2, [r3, #8]
 8000dbe:	60da      	str	r2, [r3, #12]
 8000dc0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	61bb      	str	r3, [r7, #24]
 8000dc6:	4ba8      	ldr	r3, [pc, #672]	; (8001068 <MX_GPIO_Init+0x2bc>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	4aa7      	ldr	r2, [pc, #668]	; (8001068 <MX_GPIO_Init+0x2bc>)
 8000dcc:	f043 0310 	orr.w	r3, r3, #16
 8000dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd2:	4ba5      	ldr	r3, [pc, #660]	; (8001068 <MX_GPIO_Init+0x2bc>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	f003 0310 	and.w	r3, r3, #16
 8000dda:	61bb      	str	r3, [r7, #24]
 8000ddc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	617b      	str	r3, [r7, #20]
 8000de2:	4ba1      	ldr	r3, [pc, #644]	; (8001068 <MX_GPIO_Init+0x2bc>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	4aa0      	ldr	r2, [pc, #640]	; (8001068 <MX_GPIO_Init+0x2bc>)
 8000de8:	f043 0304 	orr.w	r3, r3, #4
 8000dec:	6313      	str	r3, [r2, #48]	; 0x30
 8000dee:	4b9e      	ldr	r3, [pc, #632]	; (8001068 <MX_GPIO_Init+0x2bc>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	f003 0304 	and.w	r3, r3, #4
 8000df6:	617b      	str	r3, [r7, #20]
 8000df8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	613b      	str	r3, [r7, #16]
 8000dfe:	4b9a      	ldr	r3, [pc, #616]	; (8001068 <MX_GPIO_Init+0x2bc>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	4a99      	ldr	r2, [pc, #612]	; (8001068 <MX_GPIO_Init+0x2bc>)
 8000e04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e08:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0a:	4b97      	ldr	r3, [pc, #604]	; (8001068 <MX_GPIO_Init+0x2bc>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e12:	613b      	str	r3, [r7, #16]
 8000e14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	60fb      	str	r3, [r7, #12]
 8000e1a:	4b93      	ldr	r3, [pc, #588]	; (8001068 <MX_GPIO_Init+0x2bc>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	4a92      	ldr	r2, [pc, #584]	; (8001068 <MX_GPIO_Init+0x2bc>)
 8000e20:	f043 0301 	orr.w	r3, r3, #1
 8000e24:	6313      	str	r3, [r2, #48]	; 0x30
 8000e26:	4b90      	ldr	r3, [pc, #576]	; (8001068 <MX_GPIO_Init+0x2bc>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	60bb      	str	r3, [r7, #8]
 8000e36:	4b8c      	ldr	r3, [pc, #560]	; (8001068 <MX_GPIO_Init+0x2bc>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	4a8b      	ldr	r2, [pc, #556]	; (8001068 <MX_GPIO_Init+0x2bc>)
 8000e3c:	f043 0302 	orr.w	r3, r3, #2
 8000e40:	6313      	str	r3, [r2, #48]	; 0x30
 8000e42:	4b89      	ldr	r3, [pc, #548]	; (8001068 <MX_GPIO_Init+0x2bc>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	f003 0302 	and.w	r3, r3, #2
 8000e4a:	60bb      	str	r3, [r7, #8]
 8000e4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	607b      	str	r3, [r7, #4]
 8000e52:	4b85      	ldr	r3, [pc, #532]	; (8001068 <MX_GPIO_Init+0x2bc>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	4a84      	ldr	r2, [pc, #528]	; (8001068 <MX_GPIO_Init+0x2bc>)
 8000e58:	f043 0308 	orr.w	r3, r3, #8
 8000e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5e:	4b82      	ldr	r3, [pc, #520]	; (8001068 <MX_GPIO_Init+0x2bc>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	f003 0308 	and.w	r3, r3, #8
 8000e66:	607b      	str	r3, [r7, #4]
 8000e68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	2108      	movs	r1, #8
 8000e6e:	487f      	ldr	r0, [pc, #508]	; (800106c <MX_GPIO_Init+0x2c0>)
 8000e70:	f001 fa00 	bl	8002274 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000e74:	2201      	movs	r2, #1
 8000e76:	2101      	movs	r1, #1
 8000e78:	487d      	ldr	r0, [pc, #500]	; (8001070 <MX_GPIO_Init+0x2c4>)
 8000e7a:	f001 f9fb 	bl	8002274 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(diode1_GPIO_Port, diode1_Pin, GPIO_PIN_RESET);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	2104      	movs	r1, #4
 8000e82:	487b      	ldr	r0, [pc, #492]	; (8001070 <MX_GPIO_Init+0x2c4>)
 8000e84:	f001 f9f6 	bl	8002274 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000e88:	2200      	movs	r2, #0
 8000e8a:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000e8e:	4879      	ldr	r0, [pc, #484]	; (8001074 <MX_GPIO_Init+0x2c8>)
 8000e90:	f001 f9f0 	bl	8002274 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e94:	2304      	movs	r3, #4
 8000e96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ea0:	f107 031c 	add.w	r3, r7, #28
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4871      	ldr	r0, [pc, #452]	; (800106c <MX_GPIO_Init+0x2c0>)
 8000ea8:	f001 f848 	bl	8001f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000eac:	2308      	movs	r3, #8
 8000eae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000ebc:	f107 031c 	add.w	r3, r7, #28
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	486a      	ldr	r0, [pc, #424]	; (800106c <MX_GPIO_Init+0x2c0>)
 8000ec4:	f001 f83a 	bl	8001f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|MEMS_INT2_Pin;
 8000ec8:	2332      	movs	r3, #50	; 0x32
 8000eca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ecc:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000ed0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ed6:	f107 031c 	add.w	r3, r7, #28
 8000eda:	4619      	mov	r1, r3
 8000edc:	4863      	ldr	r0, [pc, #396]	; (800106c <MX_GPIO_Init+0x2c0>)
 8000ede:	f001 f82d 	bl	8001f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin diode1_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|diode1_Pin;
 8000ee2:	2305      	movs	r3, #5
 8000ee4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ef2:	f107 031c 	add.w	r3, r7, #28
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	485d      	ldr	r0, [pc, #372]	; (8001070 <MX_GPIO_Init+0x2c4>)
 8000efa:	f001 f81f 	bl	8001f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : holeStatePin1_Pin */
  GPIO_InitStruct.Pin = holeStatePin1_Pin;
 8000efe:	2302      	movs	r3, #2
 8000f00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f02:	2300      	movs	r3, #0
 8000f04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f06:	2302      	movs	r3, #2
 8000f08:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(holeStatePin1_GPIO_Port, &GPIO_InitStruct);
 8000f0a:	f107 031c 	add.w	r3, r7, #28
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4857      	ldr	r0, [pc, #348]	; (8001070 <MX_GPIO_Init+0x2c4>)
 8000f12:	f001 f813 	bl	8001f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000f16:	2308      	movs	r3, #8
 8000f18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f22:	2300      	movs	r3, #0
 8000f24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f26:	2305      	movs	r3, #5
 8000f28:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000f2a:	f107 031c 	add.w	r3, r7, #28
 8000f2e:	4619      	mov	r1, r3
 8000f30:	484f      	ldr	r0, [pc, #316]	; (8001070 <MX_GPIO_Init+0x2c4>)
 8000f32:	f001 f803 	bl	8001f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f36:	2301      	movs	r3, #1
 8000f38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000f3a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000f3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f44:	f107 031c 	add.w	r3, r7, #28
 8000f48:	4619      	mov	r1, r3
 8000f4a:	484b      	ldr	r0, [pc, #300]	; (8001078 <MX_GPIO_Init+0x2cc>)
 8000f4c:	f000 fff6 	bl	8001f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000f50:	2310      	movs	r3, #16
 8000f52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f54:	2302      	movs	r3, #2
 8000f56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f60:	2306      	movs	r3, #6
 8000f62:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000f64:	f107 031c 	add.w	r3, r7, #28
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4843      	ldr	r0, [pc, #268]	; (8001078 <MX_GPIO_Init+0x2cc>)
 8000f6c:	f000 ffe6 	bl	8001f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000f70:	23e0      	movs	r3, #224	; 0xe0
 8000f72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f74:	2302      	movs	r3, #2
 8000f76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f80:	2305      	movs	r3, #5
 8000f82:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f84:	f107 031c 	add.w	r3, r7, #28
 8000f88:	4619      	mov	r1, r3
 8000f8a:	483b      	ldr	r0, [pc, #236]	; (8001078 <MX_GPIO_Init+0x2cc>)
 8000f8c:	f000 ffd6 	bl	8001f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_IN_Pin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000f90:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f96:	2302      	movs	r3, #2
 8000f98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000fa2:	2305      	movs	r3, #5
 8000fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa6:	f107 031c 	add.w	r3, r7, #28
 8000faa:	4619      	mov	r1, r3
 8000fac:	4833      	ldr	r0, [pc, #204]	; (800107c <MX_GPIO_Init+0x2d0>)
 8000fae:	f000 ffc5 	bl	8001f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000fb2:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000fb6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fc4:	f107 031c 	add.w	r3, r7, #28
 8000fc8:	4619      	mov	r1, r3
 8000fca:	482a      	ldr	r0, [pc, #168]	; (8001074 <MX_GPIO_Init+0x2c8>)
 8000fcc:	f000 ffb6 	bl	8001f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000fd0:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000fd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000fe2:	2306      	movs	r3, #6
 8000fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fe6:	f107 031c 	add.w	r3, r7, #28
 8000fea:	4619      	mov	r1, r3
 8000fec:	4820      	ldr	r0, [pc, #128]	; (8001070 <MX_GPIO_Init+0x2c4>)
 8000fee:	f000 ffa5 	bl	8001f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000ff2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ff6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8001000:	f107 031c 	add.w	r3, r7, #28
 8001004:	4619      	mov	r1, r3
 8001006:	481c      	ldr	r0, [pc, #112]	; (8001078 <MX_GPIO_Init+0x2cc>)
 8001008:	f000 ff98 	bl	8001f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800100c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001010:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001012:	2302      	movs	r3, #2
 8001014:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001016:	2300      	movs	r3, #0
 8001018:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800101a:	2303      	movs	r3, #3
 800101c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800101e:	230a      	movs	r3, #10
 8001020:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001022:	f107 031c 	add.w	r3, r7, #28
 8001026:	4619      	mov	r1, r3
 8001028:	4813      	ldr	r0, [pc, #76]	; (8001078 <MX_GPIO_Init+0x2cc>)
 800102a:	f000 ff87 	bl	8001f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800102e:	2320      	movs	r3, #32
 8001030:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001032:	2300      	movs	r3, #0
 8001034:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	2300      	movs	r3, #0
 8001038:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800103a:	f107 031c 	add.w	r3, r7, #28
 800103e:	4619      	mov	r1, r3
 8001040:	480c      	ldr	r0, [pc, #48]	; (8001074 <MX_GPIO_Init+0x2c8>)
 8001042:	f000 ff7b 	bl	8001f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : enc_CLICK_Pin enc_DATA_Pin enc_CLK_Pin */
  GPIO_InitStruct.Pin = enc_CLICK_Pin|enc_DATA_Pin|enc_CLK_Pin;
 8001046:	2370      	movs	r3, #112	; 0x70
 8001048:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800104a:	2300      	movs	r3, #0
 800104c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	2300      	movs	r3, #0
 8001050:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001052:	f107 031c 	add.w	r3, r7, #28
 8001056:	4619      	mov	r1, r3
 8001058:	4808      	ldr	r0, [pc, #32]	; (800107c <MX_GPIO_Init+0x2d0>)
 800105a:	f000 ff6f 	bl	8001f3c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800105e:	bf00      	nop
 8001060:	3730      	adds	r7, #48	; 0x30
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40023800 	.word	0x40023800
 800106c:	40021000 	.word	0x40021000
 8001070:	40020800 	.word	0x40020800
 8001074:	40020c00 	.word	0x40020c00
 8001078:	40020000 	.word	0x40020000
 800107c:	40020400 	.word	0x40020400

08001080 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
	  osDelay(2000);
	  menu.handleLeft(&menu);
	  osDelay(2000);
	  menu.clickedReact(&menu);
	  */
	  osDelay(10);
 8001088:	200a      	movs	r0, #10
 800108a:	f002 ff1a 	bl	8003ec2 <osDelay>
 800108e:	e7fb      	b.n	8001088 <StartDefaultTask+0x8>

08001090 <diodeDetector_Init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_diodeDetector_Init */
void diodeDetector_Init(void const * argument)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN diodeDetector_Init */
  /* Infinite loop */
  for(;;)
  {
	if (drinkpos.postitionOfDrinks[0] == 1){
 8001098:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <diodeDetector_Init+0x30>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2b01      	cmp	r3, #1
 800109e:	d105      	bne.n	80010ac <diodeDetector_Init+0x1c>
		HAL_GPIO_WritePin(diode1_GPIO_Port, diode1_Pin, 1);
 80010a0:	2201      	movs	r2, #1
 80010a2:	2104      	movs	r1, #4
 80010a4:	4807      	ldr	r0, [pc, #28]	; (80010c4 <diodeDetector_Init+0x34>)
 80010a6:	f001 f8e5 	bl	8002274 <HAL_GPIO_WritePin>
 80010aa:	e004      	b.n	80010b6 <diodeDetector_Init+0x26>
	}
	else{
		HAL_GPIO_WritePin(diode1_GPIO_Port, diode1_Pin, 0);
 80010ac:	2200      	movs	r2, #0
 80010ae:	2104      	movs	r1, #4
 80010b0:	4804      	ldr	r0, [pc, #16]	; (80010c4 <diodeDetector_Init+0x34>)
 80010b2:	f001 f8df 	bl	8002274 <HAL_GPIO_WritePin>
	else{
		HAL_GPIO_WritePin(diode4_GPIO_Port, diode4_Pin, 0);
	}

	*/
	osDelay(30);
 80010b6:	201e      	movs	r0, #30
 80010b8:	f002 ff03 	bl	8003ec2 <osDelay>
	if (drinkpos.postitionOfDrinks[0] == 1){
 80010bc:	e7ec      	b.n	8001098 <diodeDetector_Init+0x8>
 80010be:	bf00      	nop
 80010c0:	20000060 	.word	0x20000060
 80010c4:	40020800 	.word	0x40020800

080010c8 <holeState_Init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_holeState_Init */
void holeState_Init(void const * argument)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN holeState_Init */
  /* Infinite loop */
  for(;;)
  {
	if (HAL_GPIO_ReadPin(holeStatePin1_GPIO_Port, holeStatePin1_Pin) == 1){
 80010d0:	2102      	movs	r1, #2
 80010d2:	480a      	ldr	r0, [pc, #40]	; (80010fc <holeState_Init+0x34>)
 80010d4:	f001 f8b6 	bl	8002244 <HAL_GPIO_ReadPin>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d105      	bne.n	80010ea <holeState_Init+0x22>
		drinkpos.drinkChange(&drinkpos, 1);
 80010de:	4b08      	ldr	r3, [pc, #32]	; (8001100 <holeState_Init+0x38>)
 80010e0:	691b      	ldr	r3, [r3, #16]
 80010e2:	2101      	movs	r1, #1
 80010e4:	4806      	ldr	r0, [pc, #24]	; (8001100 <holeState_Init+0x38>)
 80010e6:	4798      	blx	r3
 80010e8:	e004      	b.n	80010f4 <holeState_Init+0x2c>
	}
	else{
		drinkpos.drinkChange(&drinkpos, 11);
 80010ea:	4b05      	ldr	r3, [pc, #20]	; (8001100 <holeState_Init+0x38>)
 80010ec:	691b      	ldr	r3, [r3, #16]
 80010ee:	210b      	movs	r1, #11
 80010f0:	4803      	ldr	r0, [pc, #12]	; (8001100 <holeState_Init+0x38>)
 80010f2:	4798      	blx	r3
	else{
		drinkpos.drinkChange(&dirnkpos, 44);
	}

	*/
    osDelay(30);
 80010f4:	201e      	movs	r0, #30
 80010f6:	f002 fee4 	bl	8003ec2 <osDelay>
	if (HAL_GPIO_ReadPin(holeStatePin1_GPIO_Port, holeStatePin1_Pin) == 1){
 80010fa:	e7e9      	b.n	80010d0 <holeState_Init+0x8>
 80010fc:	40020800 	.word	0x40020800
 8001100:	20000060 	.word	0x20000060

08001104 <displayMenu_Init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_displayMenu_Init */
void displayMenu_Init(void const * argument)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN displayMenu_Init */
  HD44780_Init(2);
 800110c:	2002      	movs	r0, #2
 800110e:	f7ff faf7 	bl	8000700 <HD44780_Init>
  drinkCounterReset();
 8001112:	f000 fa25 	bl	8001560 <drinkCounterReset>
  menu.subMenuFlag = 1;
 8001116:	4b39      	ldr	r3, [pc, #228]	; (80011fc <displayMenu_Init+0xf8>)
 8001118:	2201      	movs	r2, #1
 800111a:	60da      	str	r2, [r3, #12]
  menu.cursorPos = 0;
 800111c:	4b37      	ldr	r3, [pc, #220]	; (80011fc <displayMenu_Init+0xf8>)
 800111e:	2200      	movs	r2, #0
 8001120:	605a      	str	r2, [r3, #4]
  menu.menuChanged = 1;
 8001122:	4b36      	ldr	r3, [pc, #216]	; (80011fc <displayMenu_Init+0xf8>)
 8001124:	2201      	movs	r2, #1
 8001126:	609a      	str	r2, [r3, #8]
  menu.mililiters = 10;
 8001128:	4b34      	ldr	r3, [pc, #208]	; (80011fc <displayMenu_Init+0xf8>)
 800112a:	220a      	movs	r2, #10
 800112c:	611a      	str	r2, [r3, #16]
  /* Infinite loop */
  for(;;)
  {
	  switch(menu.subMenuFlag){
 800112e:	4b33      	ldr	r3, [pc, #204]	; (80011fc <displayMenu_Init+0xf8>)
 8001130:	68db      	ldr	r3, [r3, #12]
 8001132:	2b03      	cmp	r3, #3
 8001134:	d00e      	beq.n	8001154 <displayMenu_Init+0x50>
 8001136:	2b03      	cmp	r3, #3
 8001138:	dc10      	bgt.n	800115c <displayMenu_Init+0x58>
 800113a:	2b01      	cmp	r3, #1
 800113c:	d002      	beq.n	8001144 <displayMenu_Init+0x40>
 800113e:	2b02      	cmp	r3, #2
 8001140:	d004      	beq.n	800114c <displayMenu_Init+0x48>
 8001142:	e00b      	b.n	800115c <displayMenu_Init+0x58>
	  	  case 1:
	  		  menu.currentMenu = &SUB1;
 8001144:	4b2d      	ldr	r3, [pc, #180]	; (80011fc <displayMenu_Init+0xf8>)
 8001146:	4a2e      	ldr	r2, [pc, #184]	; (8001200 <displayMenu_Init+0xfc>)
 8001148:	601a      	str	r2, [r3, #0]
	  		  break;
 800114a:	e007      	b.n	800115c <displayMenu_Init+0x58>
	  	  case 2:
	          menu.currentMenu = &SUB2;
 800114c:	4b2b      	ldr	r3, [pc, #172]	; (80011fc <displayMenu_Init+0xf8>)
 800114e:	4a2d      	ldr	r2, [pc, #180]	; (8001204 <displayMenu_Init+0x100>)
 8001150:	601a      	str	r2, [r3, #0]
	          break;
 8001152:	e003      	b.n	800115c <displayMenu_Init+0x58>
	  	  case 3:
	  		  menu.currentMenu = &SUB3;
 8001154:	4b29      	ldr	r3, [pc, #164]	; (80011fc <displayMenu_Init+0xf8>)
 8001156:	4a2c      	ldr	r2, [pc, #176]	; (8001208 <displayMenu_Init+0x104>)
 8001158:	601a      	str	r2, [r3, #0]
	  		  break;
 800115a:	bf00      	nop
	  	  //default:
	  	//	  menuError();
	  }
	  if(menu.menuChanged==1){
 800115c:	4b27      	ldr	r3, [pc, #156]	; (80011fc <displayMenu_Init+0xf8>)
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	2b01      	cmp	r3, #1
 8001162:	d146      	bne.n	80011f2 <displayMenu_Init+0xee>
		  if (menu.currentMenu==&SUB1){
 8001164:	4b25      	ldr	r3, [pc, #148]	; (80011fc <displayMenu_Init+0xf8>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a25      	ldr	r2, [pc, #148]	; (8001200 <displayMenu_Init+0xfc>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d115      	bne.n	800119a <displayMenu_Init+0x96>
			  defaultMenu();
 800116e:	f000 f865 	bl	800123c <defaultMenu>
			  switch(menu.cursorPos){
 8001172:	4b22      	ldr	r3, [pc, #136]	; (80011fc <displayMenu_Init+0xf8>)
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	2b02      	cmp	r3, #2
 8001178:	d00c      	beq.n	8001194 <displayMenu_Init+0x90>
 800117a:	2b02      	cmp	r3, #2
 800117c:	dc0d      	bgt.n	800119a <displayMenu_Init+0x96>
 800117e:	2b00      	cmp	r3, #0
 8001180:	d002      	beq.n	8001188 <displayMenu_Init+0x84>
 8001182:	2b01      	cmp	r3, #1
 8001184:	d003      	beq.n	800118e <displayMenu_Init+0x8a>
 8001186:	e008      	b.n	800119a <displayMenu_Init+0x96>
			  	  case 0:
			  		  defaultMenuCursorPos1();
 8001188:	f000 f938 	bl	80013fc <defaultMenuCursorPos1>
			  		  break;
 800118c:	e005      	b.n	800119a <displayMenu_Init+0x96>
			  	  case 1:
			  		  defaultMenuCursorPos2();
 800118e:	f000 f953 	bl	8001438 <defaultMenuCursorPos2>
			  		  break;
 8001192:	e002      	b.n	800119a <displayMenu_Init+0x96>
			  	  case 2:
			  		  defaultMenuCursorPos3();
 8001194:	f000 f96e 	bl	8001474 <defaultMenuCursorPos3>
			  		  break;
 8001198:	bf00      	nop
			//  	  default:
			//  		  menuError();
			  }
		  }
		  if (menu.currentMenu==&SUB2){
 800119a:	4b18      	ldr	r3, [pc, #96]	; (80011fc <displayMenu_Init+0xf8>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a19      	ldr	r2, [pc, #100]	; (8001204 <displayMenu_Init+0x100>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d10f      	bne.n	80011c4 <displayMenu_Init+0xc0>
			  sub2Menu(&menu);
 80011a4:	4815      	ldr	r0, [pc, #84]	; (80011fc <displayMenu_Init+0xf8>)
 80011a6:	f000 f86b 	bl	8001280 <sub2Menu>
			  switch(menu.cursorPos){
 80011aa:	4b14      	ldr	r3, [pc, #80]	; (80011fc <displayMenu_Init+0xf8>)
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d002      	beq.n	80011b8 <displayMenu_Init+0xb4>
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d003      	beq.n	80011be <displayMenu_Init+0xba>
 80011b6:	e005      	b.n	80011c4 <displayMenu_Init+0xc0>
			  	  case 0:
			  		  sub2MenuCursorPos1();
 80011b8:	f000 f97a 	bl	80014b0 <sub2MenuCursorPos1>
			  		  break;
 80011bc:	e002      	b.n	80011c4 <displayMenu_Init+0xc0>
			  	  case 1:
			  		  sub2MenuCursorPos2();
 80011be:	f000 f98d 	bl	80014dc <sub2MenuCursorPos2>
			  		  break;
 80011c2:	bf00      	nop
			  //	  default:
			  //		  menuError();
			  }
		  }
		  if (menu.currentMenu==&SUB3){
 80011c4:	4b0d      	ldr	r3, [pc, #52]	; (80011fc <displayMenu_Init+0xf8>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a0f      	ldr	r2, [pc, #60]	; (8001208 <displayMenu_Init+0x104>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d10e      	bne.n	80011ec <displayMenu_Init+0xe8>
			  sub3Menu();
 80011ce:	f000 f88f 	bl	80012f0 <sub3Menu>
			  switch(menu.cursorPos){
 80011d2:	4b0a      	ldr	r3, [pc, #40]	; (80011fc <displayMenu_Init+0xf8>)
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d002      	beq.n	80011e0 <displayMenu_Init+0xdc>
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d003      	beq.n	80011e6 <displayMenu_Init+0xe2>
 80011de:	e005      	b.n	80011ec <displayMenu_Init+0xe8>
			  	  case 0:
			  		  sub3MenuCursorPos1();
 80011e0:	f000 f992 	bl	8001508 <sub3MenuCursorPos1>
			  		  break;
 80011e4:	e002      	b.n	80011ec <displayMenu_Init+0xe8>
			  	  case 1:
			  		  sub3MenuCursorPos2();
 80011e6:	f000 f9a5 	bl	8001534 <sub3MenuCursorPos2>
			  		  break;
 80011ea:	bf00      	nop
			  //	  default:
			  //		  menuError();
			  }
		  }
	  menu.menuChanged = 0;
 80011ec:	4b03      	ldr	r3, [pc, #12]	; (80011fc <displayMenu_Init+0xf8>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
	  }
	osDelay(30);
 80011f2:	201e      	movs	r0, #30
 80011f4:	f002 fe65 	bl	8003ec2 <osDelay>
	  switch(menu.subMenuFlag){
 80011f8:	e799      	b.n	800112e <displayMenu_Init+0x2a>
 80011fa:	bf00      	nop
 80011fc:	20000040 	.word	0x20000040
 8001200:	20000010 	.word	0x20000010
 8001204:	20000020 	.word	0x20000020
 8001208:	20000030 	.word	0x20000030

0800120c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a04      	ldr	r2, [pc, #16]	; (800122c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d101      	bne.n	8001222 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800121e:	f000 fd8b 	bl	8001d38 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	40010000 	.word	0x40010000

08001230 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001234:	b672      	cpsid	i
}
 8001236:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001238:	e7fe      	b.n	8001238 <Error_Handler+0x8>
	...

0800123c <defaultMenu>:
	HD44780_Clear();
	HD44780_SetCursor(0,0);
	HD44780_PrintStr("Menu Display Error");
}

void defaultMenu(){
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
	HD44780_Clear();
 8001240:	f7ff fae2 	bl	8000808 <HD44780_Clear>
	HD44780_SetCursor(0,0);
 8001244:	2100      	movs	r1, #0
 8001246:	2000      	movs	r0, #0
 8001248:	f7ff faf4 	bl	8000834 <HD44780_SetCursor>
	HD44780_PrintStr(FirstOpt);
 800124c:	4809      	ldr	r0, [pc, #36]	; (8001274 <defaultMenu+0x38>)
 800124e:	f7ff fb62 	bl	8000916 <HD44780_PrintStr>
	HD44780_SetCursor(0,1);
 8001252:	2101      	movs	r1, #1
 8001254:	2000      	movs	r0, #0
 8001256:	f7ff faed 	bl	8000834 <HD44780_SetCursor>
	HD44780_PrintStr(SecondOpt);
 800125a:	4807      	ldr	r0, [pc, #28]	; (8001278 <defaultMenu+0x3c>)
 800125c:	f7ff fb5b 	bl	8000916 <HD44780_PrintStr>
	HD44780_SetCursor(13,0);
 8001260:	2100      	movs	r1, #0
 8001262:	200d      	movs	r0, #13
 8001264:	f7ff fae6 	bl	8000834 <HD44780_SetCursor>
	HD44780_PrintStr(ThirdOpt);
 8001268:	4804      	ldr	r0, [pc, #16]	; (800127c <defaultMenu+0x40>)
 800126a:	f7ff fb54 	bl	8000916 <HD44780_PrintStr>
}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	20000078 	.word	0x20000078
 8001278:	20000084 	.word	0x20000084
 800127c:	20000094 	.word	0x20000094

08001280 <sub2Menu>:

void sub2Menu(menu_t* self){
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
	HD44780_Clear();
 8001288:	f7ff fabe 	bl	8000808 <HD44780_Clear>
	HD44780_SetCursor(0,0);
 800128c:	2100      	movs	r1, #0
 800128e:	2000      	movs	r0, #0
 8001290:	f7ff fad0 	bl	8000834 <HD44780_SetCursor>
	HD44780_PrintStr(FirstOptsub2);
 8001294:	4811      	ldr	r0, [pc, #68]	; (80012dc <sub2Menu+0x5c>)
 8001296:	f7ff fb3e 	bl	8000916 <HD44780_PrintStr>
	HD44780_SetCursor(0,1);
 800129a:	2101      	movs	r1, #1
 800129c:	2000      	movs	r0, #0
 800129e:	f7ff fac9 	bl	8000834 <HD44780_SetCursor>
	HD44780_PrintStr(SecondOptsub2);
 80012a2:	480f      	ldr	r0, [pc, #60]	; (80012e0 <sub2Menu+0x60>)
 80012a4:	f7ff fb37 	bl	8000916 <HD44780_PrintStr>
	HD44780_SetCursor(16,0);
 80012a8:	2100      	movs	r1, #0
 80012aa:	2010      	movs	r0, #16
 80012ac:	f7ff fac2 	bl	8000834 <HD44780_SetCursor>
	sprintf(Ml, "%d", self->mililiters);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	691b      	ldr	r3, [r3, #16]
 80012b4:	461a      	mov	r2, r3
 80012b6:	490b      	ldr	r1, [pc, #44]	; (80012e4 <sub2Menu+0x64>)
 80012b8:	480b      	ldr	r0, [pc, #44]	; (80012e8 <sub2Menu+0x68>)
 80012ba:	f004 f80f 	bl	80052dc <siprintf>
	HD44780_PrintStr(Ml);
 80012be:	480a      	ldr	r0, [pc, #40]	; (80012e8 <sub2Menu+0x68>)
 80012c0:	f7ff fb29 	bl	8000916 <HD44780_PrintStr>
	HD44780_SetCursor(18,0);
 80012c4:	2100      	movs	r1, #0
 80012c6:	2012      	movs	r0, #18
 80012c8:	f7ff fab4 	bl	8000834 <HD44780_SetCursor>
	HD44780_PrintStr("ml");
 80012cc:	4807      	ldr	r0, [pc, #28]	; (80012ec <sub2Menu+0x6c>)
 80012ce:	f7ff fb22 	bl	8000916 <HD44780_PrintStr>
}
 80012d2:	bf00      	nop
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	2000009c 	.word	0x2000009c
 80012e0:	200000a8 	.word	0x200000a8
 80012e4:	08005db0 	.word	0x08005db0
 80012e8:	200004a8 	.word	0x200004a8
 80012ec:	08005db4 	.word	0x08005db4

080012f0 <sub3Menu>:

void sub3Menu(){
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
	HD44780_Clear();
 80012f4:	f7ff fa88 	bl	8000808 <HD44780_Clear>
	HD44780_SetCursor(0,0);
 80012f8:	2100      	movs	r1, #0
 80012fa:	2000      	movs	r0, #0
 80012fc:	f7ff fa9a 	bl	8000834 <HD44780_SetCursor>
	HD44780_PrintStr(FirstOptsub3);
 8001300:	482f      	ldr	r0, [pc, #188]	; (80013c0 <sub3Menu+0xd0>)
 8001302:	f7ff fb08 	bl	8000916 <HD44780_PrintStr>
	HD44780_SetCursor(0,1);
 8001306:	2101      	movs	r1, #1
 8001308:	2000      	movs	r0, #0
 800130a:	f7ff fa93 	bl	8000834 <HD44780_SetCursor>
	HD44780_PrintStr(SecondOptsub3);
 800130e:	482d      	ldr	r0, [pc, #180]	; (80013c4 <sub3Menu+0xd4>)
 8001310:	f7ff fb01 	bl	8000916 <HD44780_PrintStr>
	HD44780_SetCursor(8,0);
 8001314:	2100      	movs	r1, #0
 8001316:	2008      	movs	r0, #8
 8001318:	f7ff fa8c 	bl	8000834 <HD44780_SetCursor>
	HD44780_PrintStr("1st:");
 800131c:	482a      	ldr	r0, [pc, #168]	; (80013c8 <sub3Menu+0xd8>)
 800131e:	f7ff fafa 	bl	8000916 <HD44780_PrintStr>
	HD44780_SetCursor(12,0);
 8001322:	2100      	movs	r1, #0
 8001324:	200c      	movs	r0, #12
 8001326:	f7ff fa85 	bl	8000834 <HD44780_SetCursor>
	sprintf(DrnCnt1, "%d", drinkCounter1);
 800132a:	4b28      	ldr	r3, [pc, #160]	; (80013cc <sub3Menu+0xdc>)
 800132c:	881b      	ldrh	r3, [r3, #0]
 800132e:	461a      	mov	r2, r3
 8001330:	4927      	ldr	r1, [pc, #156]	; (80013d0 <sub3Menu+0xe0>)
 8001332:	4828      	ldr	r0, [pc, #160]	; (80013d4 <sub3Menu+0xe4>)
 8001334:	f003 ffd2 	bl	80052dc <siprintf>
	HD44780_PrintStr(DrnCnt1);
 8001338:	4826      	ldr	r0, [pc, #152]	; (80013d4 <sub3Menu+0xe4>)
 800133a:	f7ff faec 	bl	8000916 <HD44780_PrintStr>
	HD44780_SetCursor(14,0);
 800133e:	2100      	movs	r1, #0
 8001340:	200e      	movs	r0, #14
 8001342:	f7ff fa77 	bl	8000834 <HD44780_SetCursor>
	HD44780_PrintStr("2nd:");
 8001346:	4824      	ldr	r0, [pc, #144]	; (80013d8 <sub3Menu+0xe8>)
 8001348:	f7ff fae5 	bl	8000916 <HD44780_PrintStr>
	HD44780_SetCursor(18,0);
 800134c:	2100      	movs	r1, #0
 800134e:	2012      	movs	r0, #18
 8001350:	f7ff fa70 	bl	8000834 <HD44780_SetCursor>
	sprintf(DrnCnt2, "%d", drinkCounter2);
 8001354:	4b21      	ldr	r3, [pc, #132]	; (80013dc <sub3Menu+0xec>)
 8001356:	881b      	ldrh	r3, [r3, #0]
 8001358:	461a      	mov	r2, r3
 800135a:	491d      	ldr	r1, [pc, #116]	; (80013d0 <sub3Menu+0xe0>)
 800135c:	4820      	ldr	r0, [pc, #128]	; (80013e0 <sub3Menu+0xf0>)
 800135e:	f003 ffbd 	bl	80052dc <siprintf>
	HD44780_PrintStr(DrnCnt2);
 8001362:	481f      	ldr	r0, [pc, #124]	; (80013e0 <sub3Menu+0xf0>)
 8001364:	f7ff fad7 	bl	8000916 <HD44780_PrintStr>
	HD44780_SetCursor(8,1);
 8001368:	2101      	movs	r1, #1
 800136a:	2008      	movs	r0, #8
 800136c:	f7ff fa62 	bl	8000834 <HD44780_SetCursor>
	HD44780_PrintStr("3rd:");
 8001370:	481c      	ldr	r0, [pc, #112]	; (80013e4 <sub3Menu+0xf4>)
 8001372:	f7ff fad0 	bl	8000916 <HD44780_PrintStr>
	HD44780_SetCursor(12,1);
 8001376:	2101      	movs	r1, #1
 8001378:	200c      	movs	r0, #12
 800137a:	f7ff fa5b 	bl	8000834 <HD44780_SetCursor>
	sprintf(DrnCnt3, "%d", drinkCounter3);
 800137e:	4b1a      	ldr	r3, [pc, #104]	; (80013e8 <sub3Menu+0xf8>)
 8001380:	881b      	ldrh	r3, [r3, #0]
 8001382:	461a      	mov	r2, r3
 8001384:	4912      	ldr	r1, [pc, #72]	; (80013d0 <sub3Menu+0xe0>)
 8001386:	4819      	ldr	r0, [pc, #100]	; (80013ec <sub3Menu+0xfc>)
 8001388:	f003 ffa8 	bl	80052dc <siprintf>
	HD44780_PrintStr(DrnCnt3);
 800138c:	4817      	ldr	r0, [pc, #92]	; (80013ec <sub3Menu+0xfc>)
 800138e:	f7ff fac2 	bl	8000916 <HD44780_PrintStr>
	HD44780_SetCursor(14,1);
 8001392:	2101      	movs	r1, #1
 8001394:	200e      	movs	r0, #14
 8001396:	f7ff fa4d 	bl	8000834 <HD44780_SetCursor>
	HD44780_PrintStr("4th:");
 800139a:	4815      	ldr	r0, [pc, #84]	; (80013f0 <sub3Menu+0x100>)
 800139c:	f7ff fabb 	bl	8000916 <HD44780_PrintStr>
	HD44780_SetCursor(18,1);
 80013a0:	2101      	movs	r1, #1
 80013a2:	2012      	movs	r0, #18
 80013a4:	f7ff fa46 	bl	8000834 <HD44780_SetCursor>
	sprintf(DrnCnt4, "%d", drinkCounter4);
 80013a8:	4b12      	ldr	r3, [pc, #72]	; (80013f4 <sub3Menu+0x104>)
 80013aa:	881b      	ldrh	r3, [r3, #0]
 80013ac:	461a      	mov	r2, r3
 80013ae:	4908      	ldr	r1, [pc, #32]	; (80013d0 <sub3Menu+0xe0>)
 80013b0:	4811      	ldr	r0, [pc, #68]	; (80013f8 <sub3Menu+0x108>)
 80013b2:	f003 ff93 	bl	80052dc <siprintf>
	HD44780_PrintStr(DrnCnt4);
 80013b6:	4810      	ldr	r0, [pc, #64]	; (80013f8 <sub3Menu+0x108>)
 80013b8:	f7ff faad 	bl	8000916 <HD44780_PrintStr>
}
 80013bc:	bf00      	nop
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	200000b0 	.word	0x200000b0
 80013c4:	200000b8 	.word	0x200000b8
 80013c8:	08005db8 	.word	0x08005db8
 80013cc:	200004ba 	.word	0x200004ba
 80013d0:	08005db0 	.word	0x08005db0
 80013d4:	200004ac 	.word	0x200004ac
 80013d8:	08005dc0 	.word	0x08005dc0
 80013dc:	200004bc 	.word	0x200004bc
 80013e0:	200004b0 	.word	0x200004b0
 80013e4:	08005dc8 	.word	0x08005dc8
 80013e8:	200004be 	.word	0x200004be
 80013ec:	200004b4 	.word	0x200004b4
 80013f0:	08005dd0 	.word	0x08005dd0
 80013f4:	200004c0 	.word	0x200004c0
 80013f8:	200004b8 	.word	0x200004b8

080013fc <defaultMenuCursorPos1>:

void defaultMenuCursorPos1(){
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
	HD44780_SetCursor(sizeof(SecondOpt),1);
 8001400:	2101      	movs	r1, #1
 8001402:	200e      	movs	r0, #14
 8001404:	f7ff fa16 	bl	8000834 <HD44780_SetCursor>
	HD44780_PrintStr("  ");
 8001408:	4809      	ldr	r0, [pc, #36]	; (8001430 <defaultMenuCursorPos1+0x34>)
 800140a:	f7ff fa84 	bl	8000916 <HD44780_PrintStr>
	HD44780_SetCursor(sizeof(ThirdOpt)+ 13,0);
 800140e:	2100      	movs	r1, #0
 8001410:	2012      	movs	r0, #18
 8001412:	f7ff fa0f 	bl	8000834 <HD44780_SetCursor>
	HD44780_PrintStr("  ");
 8001416:	4806      	ldr	r0, [pc, #24]	; (8001430 <defaultMenuCursorPos1+0x34>)
 8001418:	f7ff fa7d 	bl	8000916 <HD44780_PrintStr>
	HD44780_SetCursor(sizeof(FirstOpt),0);
 800141c:	2100      	movs	r1, #0
 800141e:	2009      	movs	r0, #9
 8001420:	f7ff fa08 	bl	8000834 <HD44780_SetCursor>
	HD44780_PrintStr("<-");
 8001424:	4803      	ldr	r0, [pc, #12]	; (8001434 <defaultMenuCursorPos1+0x38>)
 8001426:	f7ff fa76 	bl	8000916 <HD44780_PrintStr>
}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	08005dd8 	.word	0x08005dd8
 8001434:	08005ddc 	.word	0x08005ddc

08001438 <defaultMenuCursorPos2>:

void defaultMenuCursorPos2(){
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
	HD44780_SetCursor(sizeof(FirstOpt),0);
 800143c:	2100      	movs	r1, #0
 800143e:	2009      	movs	r0, #9
 8001440:	f7ff f9f8 	bl	8000834 <HD44780_SetCursor>
	HD44780_PrintStr("  ");
 8001444:	4809      	ldr	r0, [pc, #36]	; (800146c <defaultMenuCursorPos2+0x34>)
 8001446:	f7ff fa66 	bl	8000916 <HD44780_PrintStr>
	HD44780_SetCursor(sizeof(ThirdOpt)+ 13,0);
 800144a:	2100      	movs	r1, #0
 800144c:	2012      	movs	r0, #18
 800144e:	f7ff f9f1 	bl	8000834 <HD44780_SetCursor>
	HD44780_PrintStr("  ");
 8001452:	4806      	ldr	r0, [pc, #24]	; (800146c <defaultMenuCursorPos2+0x34>)
 8001454:	f7ff fa5f 	bl	8000916 <HD44780_PrintStr>
	HD44780_SetCursor(sizeof(SecondOpt),1);
 8001458:	2101      	movs	r1, #1
 800145a:	200e      	movs	r0, #14
 800145c:	f7ff f9ea 	bl	8000834 <HD44780_SetCursor>
	HD44780_PrintStr("<-");
 8001460:	4803      	ldr	r0, [pc, #12]	; (8001470 <defaultMenuCursorPos2+0x38>)
 8001462:	f7ff fa58 	bl	8000916 <HD44780_PrintStr>
}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	08005dd8 	.word	0x08005dd8
 8001470:	08005ddc 	.word	0x08005ddc

08001474 <defaultMenuCursorPos3>:

void defaultMenuCursorPos3(){
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
	HD44780_SetCursor(sizeof(SecondOpt),1);
 8001478:	2101      	movs	r1, #1
 800147a:	200e      	movs	r0, #14
 800147c:	f7ff f9da 	bl	8000834 <HD44780_SetCursor>
	HD44780_PrintStr("  ");
 8001480:	4809      	ldr	r0, [pc, #36]	; (80014a8 <defaultMenuCursorPos3+0x34>)
 8001482:	f7ff fa48 	bl	8000916 <HD44780_PrintStr>
	HD44780_SetCursor(sizeof(FirstOpt),0);
 8001486:	2100      	movs	r1, #0
 8001488:	2009      	movs	r0, #9
 800148a:	f7ff f9d3 	bl	8000834 <HD44780_SetCursor>
	HD44780_PrintStr("  ");
 800148e:	4806      	ldr	r0, [pc, #24]	; (80014a8 <defaultMenuCursorPos3+0x34>)
 8001490:	f7ff fa41 	bl	8000916 <HD44780_PrintStr>
	HD44780_SetCursor(sizeof(ThirdOpt)+ 13,0);
 8001494:	2100      	movs	r1, #0
 8001496:	2012      	movs	r0, #18
 8001498:	f7ff f9cc 	bl	8000834 <HD44780_SetCursor>
	HD44780_PrintStr("<-");
 800149c:	4803      	ldr	r0, [pc, #12]	; (80014ac <defaultMenuCursorPos3+0x38>)
 800149e:	f7ff fa3a 	bl	8000916 <HD44780_PrintStr>
}
 80014a2:	bf00      	nop
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	08005dd8 	.word	0x08005dd8
 80014ac:	08005ddc 	.word	0x08005ddc

080014b0 <sub2MenuCursorPos1>:

void sub2MenuCursorPos1(){
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
	HD44780_SetCursor(sizeof(SecondOptsub2),1);
 80014b4:	2101      	movs	r1, #1
 80014b6:	2005      	movs	r0, #5
 80014b8:	f7ff f9bc 	bl	8000834 <HD44780_SetCursor>
	HD44780_PrintStr("  ");
 80014bc:	4805      	ldr	r0, [pc, #20]	; (80014d4 <sub2MenuCursorPos1+0x24>)
 80014be:	f7ff fa2a 	bl	8000916 <HD44780_PrintStr>
	HD44780_SetCursor(sizeof(FirstOptsub2),0);
 80014c2:	2100      	movs	r1, #0
 80014c4:	200b      	movs	r0, #11
 80014c6:	f7ff f9b5 	bl	8000834 <HD44780_SetCursor>
	HD44780_PrintStr("<-");
 80014ca:	4803      	ldr	r0, [pc, #12]	; (80014d8 <sub2MenuCursorPos1+0x28>)
 80014cc:	f7ff fa23 	bl	8000916 <HD44780_PrintStr>
}
 80014d0:	bf00      	nop
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	08005dd8 	.word	0x08005dd8
 80014d8:	08005ddc 	.word	0x08005ddc

080014dc <sub2MenuCursorPos2>:

void sub2MenuCursorPos2(){
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
	HD44780_SetCursor(sizeof(FirstOptsub2),0);
 80014e0:	2100      	movs	r1, #0
 80014e2:	200b      	movs	r0, #11
 80014e4:	f7ff f9a6 	bl	8000834 <HD44780_SetCursor>
	HD44780_PrintStr("  ");
 80014e8:	4805      	ldr	r0, [pc, #20]	; (8001500 <sub2MenuCursorPos2+0x24>)
 80014ea:	f7ff fa14 	bl	8000916 <HD44780_PrintStr>
	HD44780_SetCursor(sizeof(SecondOptsub2),1);
 80014ee:	2101      	movs	r1, #1
 80014f0:	2005      	movs	r0, #5
 80014f2:	f7ff f99f 	bl	8000834 <HD44780_SetCursor>
	HD44780_PrintStr("<-");
 80014f6:	4803      	ldr	r0, [pc, #12]	; (8001504 <sub2MenuCursorPos2+0x28>)
 80014f8:	f7ff fa0d 	bl	8000916 <HD44780_PrintStr>
}
 80014fc:	bf00      	nop
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	08005dd8 	.word	0x08005dd8
 8001504:	08005ddc 	.word	0x08005ddc

08001508 <sub3MenuCursorPos1>:

void sub3MenuCursorPos1(){
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
	HD44780_SetCursor(sizeof(SecondOptsub3),1);
 800150c:	2101      	movs	r1, #1
 800150e:	2005      	movs	r0, #5
 8001510:	f7ff f990 	bl	8000834 <HD44780_SetCursor>
	HD44780_PrintStr("  ");
 8001514:	4805      	ldr	r0, [pc, #20]	; (800152c <sub3MenuCursorPos1+0x24>)
 8001516:	f7ff f9fe 	bl	8000916 <HD44780_PrintStr>
	HD44780_SetCursor(sizeof(FirstOptsub3),0);
 800151a:	2100      	movs	r1, #0
 800151c:	2006      	movs	r0, #6
 800151e:	f7ff f989 	bl	8000834 <HD44780_SetCursor>
	HD44780_PrintStr("<-");
 8001522:	4803      	ldr	r0, [pc, #12]	; (8001530 <sub3MenuCursorPos1+0x28>)
 8001524:	f7ff f9f7 	bl	8000916 <HD44780_PrintStr>
}
 8001528:	bf00      	nop
 800152a:	bd80      	pop	{r7, pc}
 800152c:	08005dd8 	.word	0x08005dd8
 8001530:	08005ddc 	.word	0x08005ddc

08001534 <sub3MenuCursorPos2>:

void sub3MenuCursorPos2(){
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
	HD44780_SetCursor(sizeof(FirstOptsub3),0);
 8001538:	2100      	movs	r1, #0
 800153a:	2006      	movs	r0, #6
 800153c:	f7ff f97a 	bl	8000834 <HD44780_SetCursor>
	HD44780_PrintStr("  ");
 8001540:	4805      	ldr	r0, [pc, #20]	; (8001558 <sub3MenuCursorPos2+0x24>)
 8001542:	f7ff f9e8 	bl	8000916 <HD44780_PrintStr>
	HD44780_SetCursor(sizeof(SecondOptsub3),1);
 8001546:	2101      	movs	r1, #1
 8001548:	2005      	movs	r0, #5
 800154a:	f7ff f973 	bl	8000834 <HD44780_SetCursor>
	HD44780_PrintStr("<-");
 800154e:	4803      	ldr	r0, [pc, #12]	; (800155c <sub3MenuCursorPos2+0x28>)
 8001550:	f7ff f9e1 	bl	8000916 <HD44780_PrintStr>
}
 8001554:	bf00      	nop
 8001556:	bd80      	pop	{r7, pc}
 8001558:	08005dd8 	.word	0x08005dd8
 800155c:	08005ddc 	.word	0x08005ddc

08001560 <drinkCounterReset>:

void drinkAddCounter4(){
	drinkCounter4++;
}

void drinkCounterReset(){
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
	drinkCounter1 = 0;
 8001564:	4b08      	ldr	r3, [pc, #32]	; (8001588 <drinkCounterReset+0x28>)
 8001566:	2200      	movs	r2, #0
 8001568:	801a      	strh	r2, [r3, #0]
	drinkCounter2 = 0;
 800156a:	4b08      	ldr	r3, [pc, #32]	; (800158c <drinkCounterReset+0x2c>)
 800156c:	2200      	movs	r2, #0
 800156e:	801a      	strh	r2, [r3, #0]
	drinkCounter3 = 0;
 8001570:	4b07      	ldr	r3, [pc, #28]	; (8001590 <drinkCounterReset+0x30>)
 8001572:	2200      	movs	r2, #0
 8001574:	801a      	strh	r2, [r3, #0]
	drinkCounter4 = 0;
 8001576:	4b07      	ldr	r3, [pc, #28]	; (8001594 <drinkCounterReset+0x34>)
 8001578:	2200      	movs	r2, #0
 800157a:	801a      	strh	r2, [r3, #0]
}
 800157c:	bf00      	nop
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	200004ba 	.word	0x200004ba
 800158c:	200004bc 	.word	0x200004bc
 8001590:	200004be 	.word	0x200004be
 8001594:	200004c0 	.word	0x200004c0

08001598 <leftReact1>:

void leftReact1(menu_t* self){
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
	self->menuChanged = 1;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2201      	movs	r2, #1
 80015a4:	609a      	str	r2, [r3, #8]
	self->cursorPos--;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	1e5a      	subs	r2, r3, #1
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	605a      	str	r2, [r3, #4]
	if (self->cursorPos < 0){
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	da02      	bge.n	80015be <leftReact1+0x26>
		self->cursorPos = 2;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2202      	movs	r2, #2
 80015bc:	605a      	str	r2, [r3, #4]
	}
}
 80015be:	bf00      	nop
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr

080015ca <rightReact1>:

void rightReact1(menu_t* self){
 80015ca:	b480      	push	{r7}
 80015cc:	b083      	sub	sp, #12
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
	self->menuChanged = 1;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2201      	movs	r2, #1
 80015d6:	609a      	str	r2, [r3, #8]
	self->cursorPos++;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	1c5a      	adds	r2, r3, #1
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	605a      	str	r2, [r3, #4]
	if (self->cursorPos > 2){
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	dd02      	ble.n	80015f0 <rightReact1+0x26>
		self->cursorPos = 0;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2200      	movs	r2, #0
 80015ee:	605a      	str	r2, [r3, #4]
	}
}
 80015f0:	bf00      	nop
 80015f2:	370c      	adds	r7, #12
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <leftReact2>:

void leftReact2(menu_t* self){
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
	self->menuChanged = 1;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2201      	movs	r2, #1
 8001608:	609a      	str	r2, [r3, #8]
	switch(self->cursorPos){
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	2b02      	cmp	r3, #2
 8001610:	d00e      	beq.n	8001630 <leftReact2+0x34>
 8001612:	2b02      	cmp	r3, #2
 8001614:	dc19      	bgt.n	800164a <leftReact2+0x4e>
 8001616:	2b00      	cmp	r3, #0
 8001618:	d002      	beq.n	8001620 <leftReact2+0x24>
 800161a:	2b01      	cmp	r3, #1
 800161c:	d004      	beq.n	8001628 <leftReact2+0x2c>
			}
			break;
		//default:
		//	menuError();
	}
}
 800161e:	e014      	b.n	800164a <leftReact2+0x4e>
			self->cursorPos = 1;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2201      	movs	r2, #1
 8001624:	605a      	str	r2, [r3, #4]
			break;
 8001626:	e010      	b.n	800164a <leftReact2+0x4e>
			self->cursorPos = 0;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2200      	movs	r2, #0
 800162c:	605a      	str	r2, [r3, #4]
			break;
 800162e:	e00c      	b.n	800164a <leftReact2+0x4e>
			self->mililiters = self->mililiters - 5;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	691b      	ldr	r3, [r3, #16]
 8001634:	1f5a      	subs	r2, r3, #5
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	611a      	str	r2, [r3, #16]
			if(self->mililiters < 10){
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	691b      	ldr	r3, [r3, #16]
 800163e:	2b09      	cmp	r3, #9
 8001640:	dc02      	bgt.n	8001648 <leftReact2+0x4c>
				self->mililiters = 10;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	220a      	movs	r2, #10
 8001646:	611a      	str	r2, [r3, #16]
			break;
 8001648:	bf00      	nop
}
 800164a:	bf00      	nop
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr

08001656 <rightReact2>:

void rightReact2(menu_t* self){
 8001656:	b480      	push	{r7}
 8001658:	b083      	sub	sp, #12
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
	self->menuChanged = 1;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2201      	movs	r2, #1
 8001662:	609a      	str	r2, [r3, #8]
	switch(self->cursorPos){
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	2b02      	cmp	r3, #2
 800166a:	d00e      	beq.n	800168a <rightReact2+0x34>
 800166c:	2b02      	cmp	r3, #2
 800166e:	dc19      	bgt.n	80016a4 <rightReact2+0x4e>
 8001670:	2b00      	cmp	r3, #0
 8001672:	d002      	beq.n	800167a <rightReact2+0x24>
 8001674:	2b01      	cmp	r3, #1
 8001676:	d004      	beq.n	8001682 <rightReact2+0x2c>
			}
			break;
		//default:
		//	menuError();
	}
}
 8001678:	e014      	b.n	80016a4 <rightReact2+0x4e>
			self->cursorPos = 1;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2201      	movs	r2, #1
 800167e:	605a      	str	r2, [r3, #4]
			break;
 8001680:	e010      	b.n	80016a4 <rightReact2+0x4e>
			self->cursorPos = 0;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	605a      	str	r2, [r3, #4]
			break;
 8001688:	e00c      	b.n	80016a4 <rightReact2+0x4e>
			self->mililiters = self->mililiters + 5;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	691b      	ldr	r3, [r3, #16]
 800168e:	1d5a      	adds	r2, r3, #5
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	611a      	str	r2, [r3, #16]
			if(self->mililiters > 95){
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	691b      	ldr	r3, [r3, #16]
 8001698:	2b5f      	cmp	r3, #95	; 0x5f
 800169a:	dd02      	ble.n	80016a2 <rightReact2+0x4c>
				self->mililiters = 95;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	225f      	movs	r2, #95	; 0x5f
 80016a0:	611a      	str	r2, [r3, #16]
			break;
 80016a2:	bf00      	nop
}
 80016a4:	bf00      	nop
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <leftReact3>:

void leftReact3(menu_t* self){
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
	self->menuChanged = 1;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2201      	movs	r2, #1
 80016bc:	609a      	str	r2, [r3, #8]
	self->cursorPos--;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	1e5a      	subs	r2, r3, #1
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	605a      	str	r2, [r3, #4]
	if (self->cursorPos < 0){
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	da02      	bge.n	80016d6 <leftReact3+0x26>
		self->cursorPos = 1;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2201      	movs	r2, #1
 80016d4:	605a      	str	r2, [r3, #4]
	}
}
 80016d6:	bf00      	nop
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr

080016e2 <rightReact3>:

void rightReact3(menu_t* self){
 80016e2:	b480      	push	{r7}
 80016e4:	b083      	sub	sp, #12
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
	self->menuChanged = 1;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2201      	movs	r2, #1
 80016ee:	609a      	str	r2, [r3, #8]
	self->cursorPos++;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	1c5a      	adds	r2, r3, #1
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	605a      	str	r2, [r3, #4]
	if (self->cursorPos > 1){
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	2b01      	cmp	r3, #1
 8001700:	dd02      	ble.n	8001708 <rightReact3+0x26>
		self->cursorPos = 0;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2200      	movs	r2, #0
 8001706:	605a      	str	r2, [r3, #4]
	}
}
 8001708:	bf00      	nop
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <clickedReact1>:

void clickedReact1(menu_t* self){
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
	self->menuChanged = 1;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2201      	movs	r2, #1
 8001720:	609a      	str	r2, [r3, #8]
	switch(self->cursorPos){
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	2b02      	cmp	r3, #2
 8001728:	d00e      	beq.n	8001748 <clickedReact1+0x34>
 800172a:	2b02      	cmp	r3, #2
 800172c:	dc0d      	bgt.n	800174a <clickedReact1+0x36>
 800172e:	2b00      	cmp	r3, #0
 8001730:	d002      	beq.n	8001738 <clickedReact1+0x24>
 8001732:	2b01      	cmp	r3, #1
 8001734:	d004      	beq.n	8001740 <clickedReact1+0x2c>
 8001736:	e008      	b.n	800174a <clickedReact1+0x36>
		case 0:
			self->subMenuFlag = 2;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2202      	movs	r2, #2
 800173c:	60da      	str	r2, [r3, #12]
			break;
 800173e:	e004      	b.n	800174a <clickedReact1+0x36>
		case 1:
			self->subMenuFlag = 3;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2203      	movs	r2, #3
 8001744:	60da      	str	r2, [r3, #12]
			break;
 8001746:	e000      	b.n	800174a <clickedReact1+0x36>
		case 2:
			// TU PISZ DANIEL PROSZE KOCHANIE
			break;
 8001748:	bf00      	nop
		//default:
		//	menuError();
	}
	self->cursorPos = 0;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	605a      	str	r2, [r3, #4]
}
 8001750:	bf00      	nop
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <clickedReact3>:

void clickedReact3(menu_t* self){
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
	self->menuChanged = 1;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2201      	movs	r2, #1
 8001768:	609a      	str	r2, [r3, #8]
	switch(self->cursorPos){
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d002      	beq.n	8001778 <clickedReact3+0x1c>
 8001772:	2b01      	cmp	r3, #1
 8001774:	d003      	beq.n	800177e <clickedReact3+0x22>
			self->cursorPos = 0;
			break;
		//default:
		//	menuError();
	}
}
 8001776:	e009      	b.n	800178c <clickedReact3+0x30>
			drinkCounterReset();
 8001778:	f7ff fef2 	bl	8001560 <drinkCounterReset>
			break;
 800177c:	e006      	b.n	800178c <clickedReact3+0x30>
			self->subMenuFlag = 1;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2201      	movs	r2, #1
 8001782:	60da      	str	r2, [r3, #12]
			self->cursorPos = 0;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2200      	movs	r2, #0
 8001788:	605a      	str	r2, [r3, #4]
			break;
 800178a:	bf00      	nop
}
 800178c:	bf00      	nop
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}

08001794 <clickedReact2>:

void clickedReact2(menu_t* self){
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
	self->menuChanged = 1;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2201      	movs	r2, #1
 80017a0:	609a      	str	r2, [r3, #8]
	switch(self->cursorPos){
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d011      	beq.n	80017ce <clickedReact2+0x3a>
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	dc13      	bgt.n	80017d6 <clickedReact2+0x42>
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d002      	beq.n	80017b8 <clickedReact2+0x24>
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d004      	beq.n	80017c0 <clickedReact2+0x2c>
			break;
		case 2:
			self->cursorPos = 0;
			break;
	}
}
 80017b6:	e00e      	b.n	80017d6 <clickedReact2+0x42>
			self->cursorPos = 2;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2202      	movs	r2, #2
 80017bc:	605a      	str	r2, [r3, #4]
			break;
 80017be:	e00a      	b.n	80017d6 <clickedReact2+0x42>
			self->subMenuFlag = 1;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2201      	movs	r2, #1
 80017c4:	60da      	str	r2, [r3, #12]
			self->cursorPos = 0;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2200      	movs	r2, #0
 80017ca:	605a      	str	r2, [r3, #4]
			break;
 80017cc:	e003      	b.n	80017d6 <clickedReact2+0x42>
			self->cursorPos = 0;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2200      	movs	r2, #0
 80017d2:	605a      	str	r2, [r3, #4]
			break;
 80017d4:	bf00      	nop
}
 80017d6:	bf00      	nop
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr

080017e2 <handleLeft>:

void handleLeft(menu_t* self){
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b082      	sub	sp, #8
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
    self->currentMenu->leftReact(self);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	4798      	blx	r3
}
 80017f4:	bf00      	nop
 80017f6:	3708      	adds	r7, #8
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}

080017fc <handleRight>:

void handleRight(menu_t* self){
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
    self->currentMenu->rightReact(self);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	4798      	blx	r3
}
 800180e:	bf00      	nop
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}

08001816 <handleClicked>:

void handleClicked(menu_t* self){
 8001816:	b580      	push	{r7, lr}
 8001818:	b082      	sub	sp, #8
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
    self->currentMenu->clickedReact(self);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	4798      	blx	r3
}
 8001828:	bf00      	nop
 800182a:	3708      	adds	r7, #8
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}

08001830 <drinkChange>:
#include "shotHolder.h"
#include <stdio.h>

void drinkChange(drinkpos_t* self, int position){
 8001830:	b480      	push	{r7}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	6039      	str	r1, [r7, #0]
	switch(position){
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	3b01      	subs	r3, #1
 800183e:	2b2b      	cmp	r3, #43	; 0x2b
 8001840:	d87a      	bhi.n	8001938 <drinkChange+0x108>
 8001842:	a201      	add	r2, pc, #4	; (adr r2, 8001848 <drinkChange+0x18>)
 8001844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001848:	080018f9 	.word	0x080018f9
 800184c:	08001909 	.word	0x08001909
 8001850:	08001919 	.word	0x08001919
 8001854:	08001929 	.word	0x08001929
 8001858:	08001939 	.word	0x08001939
 800185c:	08001939 	.word	0x08001939
 8001860:	08001939 	.word	0x08001939
 8001864:	08001939 	.word	0x08001939
 8001868:	08001939 	.word	0x08001939
 800186c:	08001939 	.word	0x08001939
 8001870:	08001901 	.word	0x08001901
 8001874:	08001939 	.word	0x08001939
 8001878:	08001939 	.word	0x08001939
 800187c:	08001939 	.word	0x08001939
 8001880:	08001939 	.word	0x08001939
 8001884:	08001939 	.word	0x08001939
 8001888:	08001939 	.word	0x08001939
 800188c:	08001939 	.word	0x08001939
 8001890:	08001939 	.word	0x08001939
 8001894:	08001939 	.word	0x08001939
 8001898:	08001939 	.word	0x08001939
 800189c:	08001911 	.word	0x08001911
 80018a0:	08001939 	.word	0x08001939
 80018a4:	08001939 	.word	0x08001939
 80018a8:	08001939 	.word	0x08001939
 80018ac:	08001939 	.word	0x08001939
 80018b0:	08001939 	.word	0x08001939
 80018b4:	08001939 	.word	0x08001939
 80018b8:	08001939 	.word	0x08001939
 80018bc:	08001939 	.word	0x08001939
 80018c0:	08001939 	.word	0x08001939
 80018c4:	08001939 	.word	0x08001939
 80018c8:	08001921 	.word	0x08001921
 80018cc:	08001939 	.word	0x08001939
 80018d0:	08001939 	.word	0x08001939
 80018d4:	08001939 	.word	0x08001939
 80018d8:	08001939 	.word	0x08001939
 80018dc:	08001939 	.word	0x08001939
 80018e0:	08001939 	.word	0x08001939
 80018e4:	08001939 	.word	0x08001939
 80018e8:	08001939 	.word	0x08001939
 80018ec:	08001939 	.word	0x08001939
 80018f0:	08001939 	.word	0x08001939
 80018f4:	08001931 	.word	0x08001931
	case(1):
		self->postitionOfDrinks[0] = 1;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2201      	movs	r2, #1
 80018fc:	601a      	str	r2, [r3, #0]
		break;
 80018fe:	e02a      	b.n	8001956 <drinkChange+0x126>
	case(11):
		self->postitionOfDrinks[0] = 0;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2200      	movs	r2, #0
 8001904:	601a      	str	r2, [r3, #0]
		break;
 8001906:	e026      	b.n	8001956 <drinkChange+0x126>
	case(2):
		self->postitionOfDrinks[1] = 1;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2201      	movs	r2, #1
 800190c:	605a      	str	r2, [r3, #4]
		break;
 800190e:	e022      	b.n	8001956 <drinkChange+0x126>
	case(22):
		self->postitionOfDrinks[1] = 0;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2200      	movs	r2, #0
 8001914:	605a      	str	r2, [r3, #4]
		break;
 8001916:	e01e      	b.n	8001956 <drinkChange+0x126>
	case(3):
		self->postitionOfDrinks[2] = 1;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2201      	movs	r2, #1
 800191c:	609a      	str	r2, [r3, #8]
		break;
 800191e:	e01a      	b.n	8001956 <drinkChange+0x126>
	case(33):
		self->postitionOfDrinks[2] = 0;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2200      	movs	r2, #0
 8001924:	609a      	str	r2, [r3, #8]
		break;
 8001926:	e016      	b.n	8001956 <drinkChange+0x126>
	case(4):
		self->postitionOfDrinks[3] = 1;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2201      	movs	r2, #1
 800192c:	60da      	str	r2, [r3, #12]
		break;
 800192e:	e012      	b.n	8001956 <drinkChange+0x126>
	case(44):
		self->postitionOfDrinks[3] = 0;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2200      	movs	r2, #0
 8001934:	60da      	str	r2, [r3, #12]
		break;
 8001936:	e00e      	b.n	8001956 <drinkChange+0x126>
	default:
	    for (int i = 0; i < 4; ++i) {
 8001938:	2300      	movs	r3, #0
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	e007      	b.n	800194e <drinkChange+0x11e>
	        self->postitionOfDrinks[i] = 0;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	68fa      	ldr	r2, [r7, #12]
 8001942:	2100      	movs	r1, #0
 8001944:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	    for (int i = 0; i < 4; ++i) {
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	3301      	adds	r3, #1
 800194c:	60fb      	str	r3, [r7, #12]
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	2b03      	cmp	r3, #3
 8001952:	ddf4      	ble.n	800193e <drinkChange+0x10e>
	    }
	}
}
 8001954:	bf00      	nop
 8001956:	bf00      	nop
 8001958:	3714      	adds	r7, #20
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop

08001964 <drinkReset>:
void drinkReset(drinkpos_t* self){
 8001964:	b480      	push	{r7}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 4; ++i) {
 800196c:	2300      	movs	r3, #0
 800196e:	60fb      	str	r3, [r7, #12]
 8001970:	e007      	b.n	8001982 <drinkReset+0x1e>
        self->postitionOfDrinks[i] = 0;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	68fa      	ldr	r2, [r7, #12]
 8001976:	2100      	movs	r1, #0
 8001978:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (int i = 0; i < 4; ++i) {
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	3301      	adds	r3, #1
 8001980:	60fb      	str	r3, [r7, #12]
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2b03      	cmp	r3, #3
 8001986:	ddf4      	ble.n	8001972 <drinkReset+0xe>
    }
}
 8001988:	bf00      	nop
 800198a:	bf00      	nop
 800198c:	3714      	adds	r7, #20
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
	...

08001998 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800199e:	2300      	movs	r3, #0
 80019a0:	607b      	str	r3, [r7, #4]
 80019a2:	4b12      	ldr	r3, [pc, #72]	; (80019ec <HAL_MspInit+0x54>)
 80019a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a6:	4a11      	ldr	r2, [pc, #68]	; (80019ec <HAL_MspInit+0x54>)
 80019a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019ac:	6453      	str	r3, [r2, #68]	; 0x44
 80019ae:	4b0f      	ldr	r3, [pc, #60]	; (80019ec <HAL_MspInit+0x54>)
 80019b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019b6:	607b      	str	r3, [r7, #4]
 80019b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	603b      	str	r3, [r7, #0]
 80019be:	4b0b      	ldr	r3, [pc, #44]	; (80019ec <HAL_MspInit+0x54>)
 80019c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c2:	4a0a      	ldr	r2, [pc, #40]	; (80019ec <HAL_MspInit+0x54>)
 80019c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019c8:	6413      	str	r3, [r2, #64]	; 0x40
 80019ca:	4b08      	ldr	r3, [pc, #32]	; (80019ec <HAL_MspInit+0x54>)
 80019cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d2:	603b      	str	r3, [r7, #0]
 80019d4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80019d6:	2200      	movs	r2, #0
 80019d8:	210f      	movs	r1, #15
 80019da:	f06f 0001 	mvn.w	r0, #1
 80019de:	f000 fa83 	bl	8001ee8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019e2:	bf00      	nop
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	40023800 	.word	0x40023800

080019f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b08a      	sub	sp, #40	; 0x28
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f8:	f107 0314 	add.w	r3, r7, #20
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	605a      	str	r2, [r3, #4]
 8001a02:	609a      	str	r2, [r3, #8]
 8001a04:	60da      	str	r2, [r3, #12]
 8001a06:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a19      	ldr	r2, [pc, #100]	; (8001a74 <HAL_I2C_MspInit+0x84>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d12c      	bne.n	8001a6c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a12:	2300      	movs	r3, #0
 8001a14:	613b      	str	r3, [r7, #16]
 8001a16:	4b18      	ldr	r3, [pc, #96]	; (8001a78 <HAL_I2C_MspInit+0x88>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1a:	4a17      	ldr	r2, [pc, #92]	; (8001a78 <HAL_I2C_MspInit+0x88>)
 8001a1c:	f043 0302 	orr.w	r3, r3, #2
 8001a20:	6313      	str	r3, [r2, #48]	; 0x30
 8001a22:	4b15      	ldr	r3, [pc, #84]	; (8001a78 <HAL_I2C_MspInit+0x88>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	613b      	str	r3, [r7, #16]
 8001a2c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a2e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a34:	2312      	movs	r3, #18
 8001a36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a40:	2304      	movs	r3, #4
 8001a42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a44:	f107 0314 	add.w	r3, r7, #20
 8001a48:	4619      	mov	r1, r3
 8001a4a:	480c      	ldr	r0, [pc, #48]	; (8001a7c <HAL_I2C_MspInit+0x8c>)
 8001a4c:	f000 fa76 	bl	8001f3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a50:	2300      	movs	r3, #0
 8001a52:	60fb      	str	r3, [r7, #12]
 8001a54:	4b08      	ldr	r3, [pc, #32]	; (8001a78 <HAL_I2C_MspInit+0x88>)
 8001a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a58:	4a07      	ldr	r2, [pc, #28]	; (8001a78 <HAL_I2C_MspInit+0x88>)
 8001a5a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a5e:	6413      	str	r3, [r2, #64]	; 0x40
 8001a60:	4b05      	ldr	r3, [pc, #20]	; (8001a78 <HAL_I2C_MspInit+0x88>)
 8001a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a68:	60fb      	str	r3, [r7, #12]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a6c:	bf00      	nop
 8001a6e:	3728      	adds	r7, #40	; 0x28
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	40005400 	.word	0x40005400
 8001a78:	40023800 	.word	0x40023800
 8001a7c:	40020400 	.word	0x40020400

08001a80 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a90:	d115      	bne.n	8001abe <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	60fb      	str	r3, [r7, #12]
 8001a96:	4b0c      	ldr	r3, [pc, #48]	; (8001ac8 <HAL_TIM_Base_MspInit+0x48>)
 8001a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9a:	4a0b      	ldr	r2, [pc, #44]	; (8001ac8 <HAL_TIM_Base_MspInit+0x48>)
 8001a9c:	f043 0301 	orr.w	r3, r3, #1
 8001aa0:	6413      	str	r3, [r2, #64]	; 0x40
 8001aa2:	4b09      	ldr	r3, [pc, #36]	; (8001ac8 <HAL_TIM_Base_MspInit+0x48>)
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	60fb      	str	r3, [r7, #12]
 8001aac:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001aae:	2200      	movs	r2, #0
 8001ab0:	2105      	movs	r1, #5
 8001ab2:	201c      	movs	r0, #28
 8001ab4:	f000 fa18 	bl	8001ee8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ab8:	201c      	movs	r0, #28
 8001aba:	f000 fa31 	bl	8001f20 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001abe:	bf00      	nop
 8001ac0:	3710      	adds	r7, #16
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	40023800 	.word	0x40023800

08001acc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b08c      	sub	sp, #48	; 0x30
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001adc:	2300      	movs	r3, #0
 8001ade:	60bb      	str	r3, [r7, #8]
 8001ae0:	4b2f      	ldr	r3, [pc, #188]	; (8001ba0 <HAL_InitTick+0xd4>)
 8001ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae4:	4a2e      	ldr	r2, [pc, #184]	; (8001ba0 <HAL_InitTick+0xd4>)
 8001ae6:	f043 0301 	orr.w	r3, r3, #1
 8001aea:	6453      	str	r3, [r2, #68]	; 0x44
 8001aec:	4b2c      	ldr	r3, [pc, #176]	; (8001ba0 <HAL_InitTick+0xd4>)
 8001aee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af0:	f003 0301 	and.w	r3, r3, #1
 8001af4:	60bb      	str	r3, [r7, #8]
 8001af6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001af8:	f107 020c 	add.w	r2, r7, #12
 8001afc:	f107 0310 	add.w	r3, r7, #16
 8001b00:	4611      	mov	r1, r2
 8001b02:	4618      	mov	r0, r3
 8001b04:	f001 fd06 	bl	8003514 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001b08:	f001 fcf0 	bl	80034ec <HAL_RCC_GetPCLK2Freq>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b14:	4a23      	ldr	r2, [pc, #140]	; (8001ba4 <HAL_InitTick+0xd8>)
 8001b16:	fba2 2303 	umull	r2, r3, r2, r3
 8001b1a:	0c9b      	lsrs	r3, r3, #18
 8001b1c:	3b01      	subs	r3, #1
 8001b1e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001b20:	4b21      	ldr	r3, [pc, #132]	; (8001ba8 <HAL_InitTick+0xdc>)
 8001b22:	4a22      	ldr	r2, [pc, #136]	; (8001bac <HAL_InitTick+0xe0>)
 8001b24:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001b26:	4b20      	ldr	r3, [pc, #128]	; (8001ba8 <HAL_InitTick+0xdc>)
 8001b28:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b2c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001b2e:	4a1e      	ldr	r2, [pc, #120]	; (8001ba8 <HAL_InitTick+0xdc>)
 8001b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b32:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001b34:	4b1c      	ldr	r3, [pc, #112]	; (8001ba8 <HAL_InitTick+0xdc>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b3a:	4b1b      	ldr	r3, [pc, #108]	; (8001ba8 <HAL_InitTick+0xdc>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b40:	4b19      	ldr	r3, [pc, #100]	; (8001ba8 <HAL_InitTick+0xdc>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001b46:	4818      	ldr	r0, [pc, #96]	; (8001ba8 <HAL_InitTick+0xdc>)
 8001b48:	f001 fd16 	bl	8003578 <HAL_TIM_Base_Init>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001b52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d11b      	bne.n	8001b92 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001b5a:	4813      	ldr	r0, [pc, #76]	; (8001ba8 <HAL_InitTick+0xdc>)
 8001b5c:	f001 fd5c 	bl	8003618 <HAL_TIM_Base_Start_IT>
 8001b60:	4603      	mov	r3, r0
 8001b62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001b66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d111      	bne.n	8001b92 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001b6e:	2019      	movs	r0, #25
 8001b70:	f000 f9d6 	bl	8001f20 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2b0f      	cmp	r3, #15
 8001b78:	d808      	bhi.n	8001b8c <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	6879      	ldr	r1, [r7, #4]
 8001b7e:	2019      	movs	r0, #25
 8001b80:	f000 f9b2 	bl	8001ee8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b84:	4a0a      	ldr	r2, [pc, #40]	; (8001bb0 <HAL_InitTick+0xe4>)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6013      	str	r3, [r2, #0]
 8001b8a:	e002      	b.n	8001b92 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001b92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3730      	adds	r7, #48	; 0x30
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40023800 	.word	0x40023800
 8001ba4:	431bde83 	.word	0x431bde83
 8001ba8:	200004c4 	.word	0x200004c4
 8001bac:	40010000 	.word	0x40010000
 8001bb0:	200000c4 	.word	0x200000c4

08001bb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bb8:	e7fe      	b.n	8001bb8 <NMI_Handler+0x4>

08001bba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bbe:	e7fe      	b.n	8001bbe <HardFault_Handler+0x4>

08001bc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bc4:	e7fe      	b.n	8001bc4 <MemManage_Handler+0x4>

08001bc6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bca:	e7fe      	b.n	8001bca <BusFault_Handler+0x4>

08001bcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bd0:	e7fe      	b.n	8001bd0 <UsageFault_Handler+0x4>

08001bd2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bd6:	bf00      	nop
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001be4:	4802      	ldr	r0, [pc, #8]	; (8001bf0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001be6:	f001 fd79 	bl	80036dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001bea:	bf00      	nop
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	200004c4 	.word	0x200004c4

08001bf4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001bf8:	4803      	ldr	r0, [pc, #12]	; (8001c08 <TIM2_IRQHandler+0x14>)
 8001bfa:	f001 fd6f 	bl	80036dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  enc.ISR();
 8001bfe:	4b03      	ldr	r3, [pc, #12]	; (8001c0c <TIM2_IRQHandler+0x18>)
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	4798      	blx	r3
  /* USER CODE END TIM2_IRQn 1 */
}
 8001c04:	bf00      	nop
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	20000450 	.word	0x20000450
 8001c0c:	2000013c 	.word	0x2000013c

08001c10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b086      	sub	sp, #24
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c18:	4a14      	ldr	r2, [pc, #80]	; (8001c6c <_sbrk+0x5c>)
 8001c1a:	4b15      	ldr	r3, [pc, #84]	; (8001c70 <_sbrk+0x60>)
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c24:	4b13      	ldr	r3, [pc, #76]	; (8001c74 <_sbrk+0x64>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d102      	bne.n	8001c32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c2c:	4b11      	ldr	r3, [pc, #68]	; (8001c74 <_sbrk+0x64>)
 8001c2e:	4a12      	ldr	r2, [pc, #72]	; (8001c78 <_sbrk+0x68>)
 8001c30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c32:	4b10      	ldr	r3, [pc, #64]	; (8001c74 <_sbrk+0x64>)
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4413      	add	r3, r2
 8001c3a:	693a      	ldr	r2, [r7, #16]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d207      	bcs.n	8001c50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c40:	f003 fbca 	bl	80053d8 <__errno>
 8001c44:	4603      	mov	r3, r0
 8001c46:	220c      	movs	r2, #12
 8001c48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c4e:	e009      	b.n	8001c64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c50:	4b08      	ldr	r3, [pc, #32]	; (8001c74 <_sbrk+0x64>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c56:	4b07      	ldr	r3, [pc, #28]	; (8001c74 <_sbrk+0x64>)
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	4a05      	ldr	r2, [pc, #20]	; (8001c74 <_sbrk+0x64>)
 8001c60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c62:	68fb      	ldr	r3, [r7, #12]
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3718      	adds	r7, #24
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	20020000 	.word	0x20020000
 8001c70:	00000400 	.word	0x00000400
 8001c74:	2000050c 	.word	0x2000050c
 8001c78:	200043b0 	.word	0x200043b0

08001c7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c80:	4b06      	ldr	r3, [pc, #24]	; (8001c9c <SystemInit+0x20>)
 8001c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c86:	4a05      	ldr	r2, [pc, #20]	; (8001c9c <SystemInit+0x20>)
 8001c88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c90:	bf00      	nop
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	e000ed00 	.word	0xe000ed00

08001ca0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ca0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cd8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ca4:	f7ff ffea 	bl	8001c7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ca8:	480c      	ldr	r0, [pc, #48]	; (8001cdc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001caa:	490d      	ldr	r1, [pc, #52]	; (8001ce0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001cac:	4a0d      	ldr	r2, [pc, #52]	; (8001ce4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001cae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cb0:	e002      	b.n	8001cb8 <LoopCopyDataInit>

08001cb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cb6:	3304      	adds	r3, #4

08001cb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cbc:	d3f9      	bcc.n	8001cb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cbe:	4a0a      	ldr	r2, [pc, #40]	; (8001ce8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001cc0:	4c0a      	ldr	r4, [pc, #40]	; (8001cec <LoopFillZerobss+0x22>)
  movs r3, #0
 8001cc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cc4:	e001      	b.n	8001cca <LoopFillZerobss>

08001cc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cc8:	3204      	adds	r2, #4

08001cca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ccc:	d3fb      	bcc.n	8001cc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cce:	f003 fb89 	bl	80053e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cd2:	f7fe ff0f 	bl	8000af4 <main>
  bx  lr    
 8001cd6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001cd8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001cdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ce0:	20000120 	.word	0x20000120
  ldr r2, =_sidata
 8001ce4:	08005e44 	.word	0x08005e44
  ldr r2, =_sbss
 8001ce8:	20000120 	.word	0x20000120
  ldr r4, =_ebss
 8001cec:	200043b0 	.word	0x200043b0

08001cf0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cf0:	e7fe      	b.n	8001cf0 <ADC_IRQHandler>
	...

08001cf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cf8:	4b0e      	ldr	r3, [pc, #56]	; (8001d34 <HAL_Init+0x40>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a0d      	ldr	r2, [pc, #52]	; (8001d34 <HAL_Init+0x40>)
 8001cfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d04:	4b0b      	ldr	r3, [pc, #44]	; (8001d34 <HAL_Init+0x40>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a0a      	ldr	r2, [pc, #40]	; (8001d34 <HAL_Init+0x40>)
 8001d0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d10:	4b08      	ldr	r3, [pc, #32]	; (8001d34 <HAL_Init+0x40>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a07      	ldr	r2, [pc, #28]	; (8001d34 <HAL_Init+0x40>)
 8001d16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d1c:	2003      	movs	r0, #3
 8001d1e:	f000 f8d8 	bl	8001ed2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d22:	200f      	movs	r0, #15
 8001d24:	f7ff fed2 	bl	8001acc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d28:	f7ff fe36 	bl	8001998 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	40023c00 	.word	0x40023c00

08001d38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d3c:	4b06      	ldr	r3, [pc, #24]	; (8001d58 <HAL_IncTick+0x20>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	461a      	mov	r2, r3
 8001d42:	4b06      	ldr	r3, [pc, #24]	; (8001d5c <HAL_IncTick+0x24>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4413      	add	r3, r2
 8001d48:	4a04      	ldr	r2, [pc, #16]	; (8001d5c <HAL_IncTick+0x24>)
 8001d4a:	6013      	str	r3, [r2, #0]
}
 8001d4c:	bf00      	nop
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	200000c8 	.word	0x200000c8
 8001d5c:	20000510 	.word	0x20000510

08001d60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  return uwTick;
 8001d64:	4b03      	ldr	r3, [pc, #12]	; (8001d74 <HAL_GetTick+0x14>)
 8001d66:	681b      	ldr	r3, [r3, #0]
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	20000510 	.word	0x20000510

08001d78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f003 0307 	and.w	r3, r3, #7
 8001d86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d88:	4b0c      	ldr	r3, [pc, #48]	; (8001dbc <__NVIC_SetPriorityGrouping+0x44>)
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d8e:	68ba      	ldr	r2, [r7, #8]
 8001d90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d94:	4013      	ands	r3, r2
 8001d96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001da0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001da4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001da8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001daa:	4a04      	ldr	r2, [pc, #16]	; (8001dbc <__NVIC_SetPriorityGrouping+0x44>)
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	60d3      	str	r3, [r2, #12]
}
 8001db0:	bf00      	nop
 8001db2:	3714      	adds	r7, #20
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr
 8001dbc:	e000ed00 	.word	0xe000ed00

08001dc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dc4:	4b04      	ldr	r3, [pc, #16]	; (8001dd8 <__NVIC_GetPriorityGrouping+0x18>)
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	0a1b      	lsrs	r3, r3, #8
 8001dca:	f003 0307 	and.w	r3, r3, #7
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr
 8001dd8:	e000ed00 	.word	0xe000ed00

08001ddc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	4603      	mov	r3, r0
 8001de4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	db0b      	blt.n	8001e06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dee:	79fb      	ldrb	r3, [r7, #7]
 8001df0:	f003 021f 	and.w	r2, r3, #31
 8001df4:	4907      	ldr	r1, [pc, #28]	; (8001e14 <__NVIC_EnableIRQ+0x38>)
 8001df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfa:	095b      	lsrs	r3, r3, #5
 8001dfc:	2001      	movs	r0, #1
 8001dfe:	fa00 f202 	lsl.w	r2, r0, r2
 8001e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e06:	bf00      	nop
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	e000e100 	.word	0xe000e100

08001e18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	4603      	mov	r3, r0
 8001e20:	6039      	str	r1, [r7, #0]
 8001e22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	db0a      	blt.n	8001e42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	b2da      	uxtb	r2, r3
 8001e30:	490c      	ldr	r1, [pc, #48]	; (8001e64 <__NVIC_SetPriority+0x4c>)
 8001e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e36:	0112      	lsls	r2, r2, #4
 8001e38:	b2d2      	uxtb	r2, r2
 8001e3a:	440b      	add	r3, r1
 8001e3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e40:	e00a      	b.n	8001e58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	b2da      	uxtb	r2, r3
 8001e46:	4908      	ldr	r1, [pc, #32]	; (8001e68 <__NVIC_SetPriority+0x50>)
 8001e48:	79fb      	ldrb	r3, [r7, #7]
 8001e4a:	f003 030f 	and.w	r3, r3, #15
 8001e4e:	3b04      	subs	r3, #4
 8001e50:	0112      	lsls	r2, r2, #4
 8001e52:	b2d2      	uxtb	r2, r2
 8001e54:	440b      	add	r3, r1
 8001e56:	761a      	strb	r2, [r3, #24]
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr
 8001e64:	e000e100 	.word	0xe000e100
 8001e68:	e000ed00 	.word	0xe000ed00

08001e6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b089      	sub	sp, #36	; 0x24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	60b9      	str	r1, [r7, #8]
 8001e76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	f003 0307 	and.w	r3, r3, #7
 8001e7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	f1c3 0307 	rsb	r3, r3, #7
 8001e86:	2b04      	cmp	r3, #4
 8001e88:	bf28      	it	cs
 8001e8a:	2304      	movcs	r3, #4
 8001e8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	3304      	adds	r3, #4
 8001e92:	2b06      	cmp	r3, #6
 8001e94:	d902      	bls.n	8001e9c <NVIC_EncodePriority+0x30>
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	3b03      	subs	r3, #3
 8001e9a:	e000      	b.n	8001e9e <NVIC_EncodePriority+0x32>
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	43da      	mvns	r2, r3
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	401a      	ands	r2, r3
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001eb4:	f04f 31ff 	mov.w	r1, #4294967295
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	fa01 f303 	lsl.w	r3, r1, r3
 8001ebe:	43d9      	mvns	r1, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec4:	4313      	orrs	r3, r2
         );
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3724      	adds	r7, #36	; 0x24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr

08001ed2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b082      	sub	sp, #8
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f7ff ff4c 	bl	8001d78 <__NVIC_SetPriorityGrouping>
}
 8001ee0:	bf00      	nop
 8001ee2:	3708      	adds	r7, #8
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b086      	sub	sp, #24
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	4603      	mov	r3, r0
 8001ef0:	60b9      	str	r1, [r7, #8]
 8001ef2:	607a      	str	r2, [r7, #4]
 8001ef4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001efa:	f7ff ff61 	bl	8001dc0 <__NVIC_GetPriorityGrouping>
 8001efe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	68b9      	ldr	r1, [r7, #8]
 8001f04:	6978      	ldr	r0, [r7, #20]
 8001f06:	f7ff ffb1 	bl	8001e6c <NVIC_EncodePriority>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f10:	4611      	mov	r1, r2
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7ff ff80 	bl	8001e18 <__NVIC_SetPriority>
}
 8001f18:	bf00      	nop
 8001f1a:	3718      	adds	r7, #24
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	4603      	mov	r3, r0
 8001f28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7ff ff54 	bl	8001ddc <__NVIC_EnableIRQ>
}
 8001f34:	bf00      	nop
 8001f36:	3708      	adds	r7, #8
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b089      	sub	sp, #36	; 0x24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f46:	2300      	movs	r3, #0
 8001f48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f52:	2300      	movs	r3, #0
 8001f54:	61fb      	str	r3, [r7, #28]
 8001f56:	e159      	b.n	800220c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f58:	2201      	movs	r2, #1
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	697a      	ldr	r2, [r7, #20]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f6c:	693a      	ldr	r2, [r7, #16]
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	f040 8148 	bne.w	8002206 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f003 0303 	and.w	r3, r3, #3
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d005      	beq.n	8001f8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d130      	bne.n	8001ff0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	2203      	movs	r2, #3
 8001f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9e:	43db      	mvns	r3, r3
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	68da      	ldr	r2, [r3, #12]
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb2:	69ba      	ldr	r2, [r7, #24]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	43db      	mvns	r3, r3
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	091b      	lsrs	r3, r3, #4
 8001fda:	f003 0201 	and.w	r2, r3, #1
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f003 0303 	and.w	r3, r3, #3
 8001ff8:	2b03      	cmp	r3, #3
 8001ffa:	d017      	beq.n	800202c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	2203      	movs	r2, #3
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	43db      	mvns	r3, r3
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	4013      	ands	r3, r2
 8002012:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	689a      	ldr	r2, [r3, #8]
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	4313      	orrs	r3, r2
 8002024:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f003 0303 	and.w	r3, r3, #3
 8002034:	2b02      	cmp	r3, #2
 8002036:	d123      	bne.n	8002080 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	08da      	lsrs	r2, r3, #3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	3208      	adds	r2, #8
 8002040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002044:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	f003 0307 	and.w	r3, r3, #7
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	220f      	movs	r2, #15
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	43db      	mvns	r3, r3
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	4013      	ands	r3, r2
 800205a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	691a      	ldr	r2, [r3, #16]
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	f003 0307 	and.w	r3, r3, #7
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	fa02 f303 	lsl.w	r3, r2, r3
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	4313      	orrs	r3, r2
 8002070:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	08da      	lsrs	r2, r3, #3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	3208      	adds	r2, #8
 800207a:	69b9      	ldr	r1, [r7, #24]
 800207c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	2203      	movs	r2, #3
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	43db      	mvns	r3, r3
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	4013      	ands	r3, r2
 8002096:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f003 0203 	and.w	r2, r3, #3
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	005b      	lsls	r3, r3, #1
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	f000 80a2 	beq.w	8002206 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020c2:	2300      	movs	r3, #0
 80020c4:	60fb      	str	r3, [r7, #12]
 80020c6:	4b57      	ldr	r3, [pc, #348]	; (8002224 <HAL_GPIO_Init+0x2e8>)
 80020c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ca:	4a56      	ldr	r2, [pc, #344]	; (8002224 <HAL_GPIO_Init+0x2e8>)
 80020cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020d0:	6453      	str	r3, [r2, #68]	; 0x44
 80020d2:	4b54      	ldr	r3, [pc, #336]	; (8002224 <HAL_GPIO_Init+0x2e8>)
 80020d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020da:	60fb      	str	r3, [r7, #12]
 80020dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020de:	4a52      	ldr	r2, [pc, #328]	; (8002228 <HAL_GPIO_Init+0x2ec>)
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	089b      	lsrs	r3, r3, #2
 80020e4:	3302      	adds	r3, #2
 80020e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	f003 0303 	and.w	r3, r3, #3
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	220f      	movs	r2, #15
 80020f6:	fa02 f303 	lsl.w	r3, r2, r3
 80020fa:	43db      	mvns	r3, r3
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	4013      	ands	r3, r2
 8002100:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a49      	ldr	r2, [pc, #292]	; (800222c <HAL_GPIO_Init+0x2f0>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d019      	beq.n	800213e <HAL_GPIO_Init+0x202>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a48      	ldr	r2, [pc, #288]	; (8002230 <HAL_GPIO_Init+0x2f4>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d013      	beq.n	800213a <HAL_GPIO_Init+0x1fe>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a47      	ldr	r2, [pc, #284]	; (8002234 <HAL_GPIO_Init+0x2f8>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d00d      	beq.n	8002136 <HAL_GPIO_Init+0x1fa>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a46      	ldr	r2, [pc, #280]	; (8002238 <HAL_GPIO_Init+0x2fc>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d007      	beq.n	8002132 <HAL_GPIO_Init+0x1f6>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a45      	ldr	r2, [pc, #276]	; (800223c <HAL_GPIO_Init+0x300>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d101      	bne.n	800212e <HAL_GPIO_Init+0x1f2>
 800212a:	2304      	movs	r3, #4
 800212c:	e008      	b.n	8002140 <HAL_GPIO_Init+0x204>
 800212e:	2307      	movs	r3, #7
 8002130:	e006      	b.n	8002140 <HAL_GPIO_Init+0x204>
 8002132:	2303      	movs	r3, #3
 8002134:	e004      	b.n	8002140 <HAL_GPIO_Init+0x204>
 8002136:	2302      	movs	r3, #2
 8002138:	e002      	b.n	8002140 <HAL_GPIO_Init+0x204>
 800213a:	2301      	movs	r3, #1
 800213c:	e000      	b.n	8002140 <HAL_GPIO_Init+0x204>
 800213e:	2300      	movs	r3, #0
 8002140:	69fa      	ldr	r2, [r7, #28]
 8002142:	f002 0203 	and.w	r2, r2, #3
 8002146:	0092      	lsls	r2, r2, #2
 8002148:	4093      	lsls	r3, r2
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	4313      	orrs	r3, r2
 800214e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002150:	4935      	ldr	r1, [pc, #212]	; (8002228 <HAL_GPIO_Init+0x2ec>)
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	089b      	lsrs	r3, r3, #2
 8002156:	3302      	adds	r3, #2
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800215e:	4b38      	ldr	r3, [pc, #224]	; (8002240 <HAL_GPIO_Init+0x304>)
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	43db      	mvns	r3, r3
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	4013      	ands	r3, r2
 800216c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d003      	beq.n	8002182 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800217a:	69ba      	ldr	r2, [r7, #24]
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	4313      	orrs	r3, r2
 8002180:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002182:	4a2f      	ldr	r2, [pc, #188]	; (8002240 <HAL_GPIO_Init+0x304>)
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002188:	4b2d      	ldr	r3, [pc, #180]	; (8002240 <HAL_GPIO_Init+0x304>)
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	43db      	mvns	r3, r3
 8002192:	69ba      	ldr	r2, [r7, #24]
 8002194:	4013      	ands	r3, r2
 8002196:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d003      	beq.n	80021ac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021ac:	4a24      	ldr	r2, [pc, #144]	; (8002240 <HAL_GPIO_Init+0x304>)
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021b2:	4b23      	ldr	r3, [pc, #140]	; (8002240 <HAL_GPIO_Init+0x304>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	43db      	mvns	r3, r3
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	4013      	ands	r3, r2
 80021c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d003      	beq.n	80021d6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021d6:	4a1a      	ldr	r2, [pc, #104]	; (8002240 <HAL_GPIO_Init+0x304>)
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021dc:	4b18      	ldr	r3, [pc, #96]	; (8002240 <HAL_GPIO_Init+0x304>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	43db      	mvns	r3, r3
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	4013      	ands	r3, r2
 80021ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d003      	beq.n	8002200 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002200:	4a0f      	ldr	r2, [pc, #60]	; (8002240 <HAL_GPIO_Init+0x304>)
 8002202:	69bb      	ldr	r3, [r7, #24]
 8002204:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	3301      	adds	r3, #1
 800220a:	61fb      	str	r3, [r7, #28]
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	2b0f      	cmp	r3, #15
 8002210:	f67f aea2 	bls.w	8001f58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002214:	bf00      	nop
 8002216:	bf00      	nop
 8002218:	3724      	adds	r7, #36	; 0x24
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	40023800 	.word	0x40023800
 8002228:	40013800 	.word	0x40013800
 800222c:	40020000 	.word	0x40020000
 8002230:	40020400 	.word	0x40020400
 8002234:	40020800 	.word	0x40020800
 8002238:	40020c00 	.word	0x40020c00
 800223c:	40021000 	.word	0x40021000
 8002240:	40013c00 	.word	0x40013c00

08002244 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002244:	b480      	push	{r7}
 8002246:	b085      	sub	sp, #20
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	460b      	mov	r3, r1
 800224e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	691a      	ldr	r2, [r3, #16]
 8002254:	887b      	ldrh	r3, [r7, #2]
 8002256:	4013      	ands	r3, r2
 8002258:	2b00      	cmp	r3, #0
 800225a:	d002      	beq.n	8002262 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800225c:	2301      	movs	r3, #1
 800225e:	73fb      	strb	r3, [r7, #15]
 8002260:	e001      	b.n	8002266 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002262:	2300      	movs	r3, #0
 8002264:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002266:	7bfb      	ldrb	r3, [r7, #15]
}
 8002268:	4618      	mov	r0, r3
 800226a:	3714      	adds	r7, #20
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	460b      	mov	r3, r1
 800227e:	807b      	strh	r3, [r7, #2]
 8002280:	4613      	mov	r3, r2
 8002282:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002284:	787b      	ldrb	r3, [r7, #1]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d003      	beq.n	8002292 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800228a:	887a      	ldrh	r2, [r7, #2]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002290:	e003      	b.n	800229a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002292:	887b      	ldrh	r3, [r7, #2]
 8002294:	041a      	lsls	r2, r3, #16
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	619a      	str	r2, [r3, #24]
}
 800229a:	bf00      	nop
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
	...

080022a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d101      	bne.n	80022ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e12b      	b.n	8002512 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d106      	bne.n	80022d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f7ff fb8e 	bl	80019f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2224      	movs	r2, #36	; 0x24
 80022d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f022 0201 	bic.w	r2, r2, #1
 80022ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800230a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800230c:	f001 f8da 	bl	80034c4 <HAL_RCC_GetPCLK1Freq>
 8002310:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	4a81      	ldr	r2, [pc, #516]	; (800251c <HAL_I2C_Init+0x274>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d807      	bhi.n	800232c <HAL_I2C_Init+0x84>
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	4a80      	ldr	r2, [pc, #512]	; (8002520 <HAL_I2C_Init+0x278>)
 8002320:	4293      	cmp	r3, r2
 8002322:	bf94      	ite	ls
 8002324:	2301      	movls	r3, #1
 8002326:	2300      	movhi	r3, #0
 8002328:	b2db      	uxtb	r3, r3
 800232a:	e006      	b.n	800233a <HAL_I2C_Init+0x92>
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	4a7d      	ldr	r2, [pc, #500]	; (8002524 <HAL_I2C_Init+0x27c>)
 8002330:	4293      	cmp	r3, r2
 8002332:	bf94      	ite	ls
 8002334:	2301      	movls	r3, #1
 8002336:	2300      	movhi	r3, #0
 8002338:	b2db      	uxtb	r3, r3
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e0e7      	b.n	8002512 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	4a78      	ldr	r2, [pc, #480]	; (8002528 <HAL_I2C_Init+0x280>)
 8002346:	fba2 2303 	umull	r2, r3, r2, r3
 800234a:	0c9b      	lsrs	r3, r3, #18
 800234c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	68ba      	ldr	r2, [r7, #8]
 800235e:	430a      	orrs	r2, r1
 8002360:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	6a1b      	ldr	r3, [r3, #32]
 8002368:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	4a6a      	ldr	r2, [pc, #424]	; (800251c <HAL_I2C_Init+0x274>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d802      	bhi.n	800237c <HAL_I2C_Init+0xd4>
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	3301      	adds	r3, #1
 800237a:	e009      	b.n	8002390 <HAL_I2C_Init+0xe8>
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002382:	fb02 f303 	mul.w	r3, r2, r3
 8002386:	4a69      	ldr	r2, [pc, #420]	; (800252c <HAL_I2C_Init+0x284>)
 8002388:	fba2 2303 	umull	r2, r3, r2, r3
 800238c:	099b      	lsrs	r3, r3, #6
 800238e:	3301      	adds	r3, #1
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	6812      	ldr	r2, [r2, #0]
 8002394:	430b      	orrs	r3, r1
 8002396:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	69db      	ldr	r3, [r3, #28]
 800239e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80023a2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	495c      	ldr	r1, [pc, #368]	; (800251c <HAL_I2C_Init+0x274>)
 80023ac:	428b      	cmp	r3, r1
 80023ae:	d819      	bhi.n	80023e4 <HAL_I2C_Init+0x13c>
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	1e59      	subs	r1, r3, #1
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80023be:	1c59      	adds	r1, r3, #1
 80023c0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80023c4:	400b      	ands	r3, r1
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d00a      	beq.n	80023e0 <HAL_I2C_Init+0x138>
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	1e59      	subs	r1, r3, #1
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	005b      	lsls	r3, r3, #1
 80023d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80023d8:	3301      	adds	r3, #1
 80023da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023de:	e051      	b.n	8002484 <HAL_I2C_Init+0x1dc>
 80023e0:	2304      	movs	r3, #4
 80023e2:	e04f      	b.n	8002484 <HAL_I2C_Init+0x1dc>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d111      	bne.n	8002410 <HAL_I2C_Init+0x168>
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	1e58      	subs	r0, r3, #1
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6859      	ldr	r1, [r3, #4]
 80023f4:	460b      	mov	r3, r1
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	440b      	add	r3, r1
 80023fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80023fe:	3301      	adds	r3, #1
 8002400:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002404:	2b00      	cmp	r3, #0
 8002406:	bf0c      	ite	eq
 8002408:	2301      	moveq	r3, #1
 800240a:	2300      	movne	r3, #0
 800240c:	b2db      	uxtb	r3, r3
 800240e:	e012      	b.n	8002436 <HAL_I2C_Init+0x18e>
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	1e58      	subs	r0, r3, #1
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6859      	ldr	r1, [r3, #4]
 8002418:	460b      	mov	r3, r1
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	440b      	add	r3, r1
 800241e:	0099      	lsls	r1, r3, #2
 8002420:	440b      	add	r3, r1
 8002422:	fbb0 f3f3 	udiv	r3, r0, r3
 8002426:	3301      	adds	r3, #1
 8002428:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800242c:	2b00      	cmp	r3, #0
 800242e:	bf0c      	ite	eq
 8002430:	2301      	moveq	r3, #1
 8002432:	2300      	movne	r3, #0
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <HAL_I2C_Init+0x196>
 800243a:	2301      	movs	r3, #1
 800243c:	e022      	b.n	8002484 <HAL_I2C_Init+0x1dc>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d10e      	bne.n	8002464 <HAL_I2C_Init+0x1bc>
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	1e58      	subs	r0, r3, #1
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6859      	ldr	r1, [r3, #4]
 800244e:	460b      	mov	r3, r1
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	440b      	add	r3, r1
 8002454:	fbb0 f3f3 	udiv	r3, r0, r3
 8002458:	3301      	adds	r3, #1
 800245a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800245e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002462:	e00f      	b.n	8002484 <HAL_I2C_Init+0x1dc>
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	1e58      	subs	r0, r3, #1
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6859      	ldr	r1, [r3, #4]
 800246c:	460b      	mov	r3, r1
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	440b      	add	r3, r1
 8002472:	0099      	lsls	r1, r3, #2
 8002474:	440b      	add	r3, r1
 8002476:	fbb0 f3f3 	udiv	r3, r0, r3
 800247a:	3301      	adds	r3, #1
 800247c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002480:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002484:	6879      	ldr	r1, [r7, #4]
 8002486:	6809      	ldr	r1, [r1, #0]
 8002488:	4313      	orrs	r3, r2
 800248a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	69da      	ldr	r2, [r3, #28]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a1b      	ldr	r3, [r3, #32]
 800249e:	431a      	orrs	r2, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	430a      	orrs	r2, r1
 80024a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80024b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	6911      	ldr	r1, [r2, #16]
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	68d2      	ldr	r2, [r2, #12]
 80024be:	4311      	orrs	r1, r2
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	6812      	ldr	r2, [r2, #0]
 80024c4:	430b      	orrs	r3, r1
 80024c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	695a      	ldr	r2, [r3, #20]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	699b      	ldr	r3, [r3, #24]
 80024da:	431a      	orrs	r2, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	430a      	orrs	r2, r1
 80024e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f042 0201 	orr.w	r2, r2, #1
 80024f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2220      	movs	r2, #32
 80024fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3710      	adds	r7, #16
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	000186a0 	.word	0x000186a0
 8002520:	001e847f 	.word	0x001e847f
 8002524:	003d08ff 	.word	0x003d08ff
 8002528:	431bde83 	.word	0x431bde83
 800252c:	10624dd3 	.word	0x10624dd3

08002530 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b088      	sub	sp, #32
 8002534:	af02      	add	r7, sp, #8
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	607a      	str	r2, [r7, #4]
 800253a:	461a      	mov	r2, r3
 800253c:	460b      	mov	r3, r1
 800253e:	817b      	strh	r3, [r7, #10]
 8002540:	4613      	mov	r3, r2
 8002542:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002544:	f7ff fc0c 	bl	8001d60 <HAL_GetTick>
 8002548:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2b20      	cmp	r3, #32
 8002554:	f040 80e0 	bne.w	8002718 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	9300      	str	r3, [sp, #0]
 800255c:	2319      	movs	r3, #25
 800255e:	2201      	movs	r2, #1
 8002560:	4970      	ldr	r1, [pc, #448]	; (8002724 <HAL_I2C_Master_Transmit+0x1f4>)
 8002562:	68f8      	ldr	r0, [r7, #12]
 8002564:	f000 f964 	bl	8002830 <I2C_WaitOnFlagUntilTimeout>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800256e:	2302      	movs	r3, #2
 8002570:	e0d3      	b.n	800271a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002578:	2b01      	cmp	r3, #1
 800257a:	d101      	bne.n	8002580 <HAL_I2C_Master_Transmit+0x50>
 800257c:	2302      	movs	r3, #2
 800257e:	e0cc      	b.n	800271a <HAL_I2C_Master_Transmit+0x1ea>
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	2b01      	cmp	r3, #1
 8002594:	d007      	beq.n	80025a6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f042 0201 	orr.w	r2, r2, #1
 80025a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025b4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2221      	movs	r2, #33	; 0x21
 80025ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2210      	movs	r2, #16
 80025c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2200      	movs	r2, #0
 80025ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	893a      	ldrh	r2, [r7, #8]
 80025d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025dc:	b29a      	uxth	r2, r3
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	4a50      	ldr	r2, [pc, #320]	; (8002728 <HAL_I2C_Master_Transmit+0x1f8>)
 80025e6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80025e8:	8979      	ldrh	r1, [r7, #10]
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	6a3a      	ldr	r2, [r7, #32]
 80025ee:	68f8      	ldr	r0, [r7, #12]
 80025f0:	f000 f89c 	bl	800272c <I2C_MasterRequestWrite>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e08d      	b.n	800271a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025fe:	2300      	movs	r3, #0
 8002600:	613b      	str	r3, [r7, #16]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	695b      	ldr	r3, [r3, #20]
 8002608:	613b      	str	r3, [r7, #16]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	699b      	ldr	r3, [r3, #24]
 8002610:	613b      	str	r3, [r7, #16]
 8002612:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002614:	e066      	b.n	80026e4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002616:	697a      	ldr	r2, [r7, #20]
 8002618:	6a39      	ldr	r1, [r7, #32]
 800261a:	68f8      	ldr	r0, [r7, #12]
 800261c:	f000 fa22 	bl	8002a64 <I2C_WaitOnTXEFlagUntilTimeout>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d00d      	beq.n	8002642 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262a:	2b04      	cmp	r3, #4
 800262c:	d107      	bne.n	800263e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800263c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e06b      	b.n	800271a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002646:	781a      	ldrb	r2, [r3, #0]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002652:	1c5a      	adds	r2, r3, #1
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800265c:	b29b      	uxth	r3, r3
 800265e:	3b01      	subs	r3, #1
 8002660:	b29a      	uxth	r2, r3
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800266a:	3b01      	subs	r3, #1
 800266c:	b29a      	uxth	r2, r3
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	695b      	ldr	r3, [r3, #20]
 8002678:	f003 0304 	and.w	r3, r3, #4
 800267c:	2b04      	cmp	r3, #4
 800267e:	d11b      	bne.n	80026b8 <HAL_I2C_Master_Transmit+0x188>
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002684:	2b00      	cmp	r3, #0
 8002686:	d017      	beq.n	80026b8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268c:	781a      	ldrb	r2, [r3, #0]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002698:	1c5a      	adds	r2, r3, #1
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	3b01      	subs	r3, #1
 80026a6:	b29a      	uxth	r2, r3
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026b0:	3b01      	subs	r3, #1
 80026b2:	b29a      	uxth	r2, r3
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026b8:	697a      	ldr	r2, [r7, #20]
 80026ba:	6a39      	ldr	r1, [r7, #32]
 80026bc:	68f8      	ldr	r0, [r7, #12]
 80026be:	f000 fa19 	bl	8002af4 <I2C_WaitOnBTFFlagUntilTimeout>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d00d      	beq.n	80026e4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026cc:	2b04      	cmp	r3, #4
 80026ce:	d107      	bne.n	80026e0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026de:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e01a      	b.n	800271a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d194      	bne.n	8002616 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2220      	movs	r2, #32
 8002700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2200      	movs	r2, #0
 8002708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2200      	movs	r2, #0
 8002710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002714:	2300      	movs	r3, #0
 8002716:	e000      	b.n	800271a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002718:	2302      	movs	r3, #2
  }
}
 800271a:	4618      	mov	r0, r3
 800271c:	3718      	adds	r7, #24
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	00100002 	.word	0x00100002
 8002728:	ffff0000 	.word	0xffff0000

0800272c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b088      	sub	sp, #32
 8002730:	af02      	add	r7, sp, #8
 8002732:	60f8      	str	r0, [r7, #12]
 8002734:	607a      	str	r2, [r7, #4]
 8002736:	603b      	str	r3, [r7, #0]
 8002738:	460b      	mov	r3, r1
 800273a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002740:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	2b08      	cmp	r3, #8
 8002746:	d006      	beq.n	8002756 <I2C_MasterRequestWrite+0x2a>
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	2b01      	cmp	r3, #1
 800274c:	d003      	beq.n	8002756 <I2C_MasterRequestWrite+0x2a>
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002754:	d108      	bne.n	8002768 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002764:	601a      	str	r2, [r3, #0]
 8002766:	e00b      	b.n	8002780 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276c:	2b12      	cmp	r3, #18
 800276e:	d107      	bne.n	8002780 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800277e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	9300      	str	r3, [sp, #0]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800278c:	68f8      	ldr	r0, [r7, #12]
 800278e:	f000 f84f 	bl	8002830 <I2C_WaitOnFlagUntilTimeout>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d00d      	beq.n	80027b4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027a6:	d103      	bne.n	80027b0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e035      	b.n	8002820 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	691b      	ldr	r3, [r3, #16]
 80027b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80027bc:	d108      	bne.n	80027d0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80027be:	897b      	ldrh	r3, [r7, #10]
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	461a      	mov	r2, r3
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80027cc:	611a      	str	r2, [r3, #16]
 80027ce:	e01b      	b.n	8002808 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80027d0:	897b      	ldrh	r3, [r7, #10]
 80027d2:	11db      	asrs	r3, r3, #7
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	f003 0306 	and.w	r3, r3, #6
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	f063 030f 	orn	r3, r3, #15
 80027e0:	b2da      	uxtb	r2, r3
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	490e      	ldr	r1, [pc, #56]	; (8002828 <I2C_MasterRequestWrite+0xfc>)
 80027ee:	68f8      	ldr	r0, [r7, #12]
 80027f0:	f000 f898 	bl	8002924 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d001      	beq.n	80027fe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e010      	b.n	8002820 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80027fe:	897b      	ldrh	r3, [r7, #10]
 8002800:	b2da      	uxtb	r2, r3
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	4907      	ldr	r1, [pc, #28]	; (800282c <I2C_MasterRequestWrite+0x100>)
 800280e:	68f8      	ldr	r0, [r7, #12]
 8002810:	f000 f888 	bl	8002924 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e000      	b.n	8002820 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800281e:	2300      	movs	r3, #0
}
 8002820:	4618      	mov	r0, r3
 8002822:	3718      	adds	r7, #24
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	00010008 	.word	0x00010008
 800282c:	00010002 	.word	0x00010002

08002830 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	603b      	str	r3, [r7, #0]
 800283c:	4613      	mov	r3, r2
 800283e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002840:	e048      	b.n	80028d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002848:	d044      	beq.n	80028d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800284a:	f7ff fa89 	bl	8001d60 <HAL_GetTick>
 800284e:	4602      	mov	r2, r0
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	683a      	ldr	r2, [r7, #0]
 8002856:	429a      	cmp	r2, r3
 8002858:	d302      	bcc.n	8002860 <I2C_WaitOnFlagUntilTimeout+0x30>
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d139      	bne.n	80028d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	0c1b      	lsrs	r3, r3, #16
 8002864:	b2db      	uxtb	r3, r3
 8002866:	2b01      	cmp	r3, #1
 8002868:	d10d      	bne.n	8002886 <I2C_WaitOnFlagUntilTimeout+0x56>
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	695b      	ldr	r3, [r3, #20]
 8002870:	43da      	mvns	r2, r3
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	4013      	ands	r3, r2
 8002876:	b29b      	uxth	r3, r3
 8002878:	2b00      	cmp	r3, #0
 800287a:	bf0c      	ite	eq
 800287c:	2301      	moveq	r3, #1
 800287e:	2300      	movne	r3, #0
 8002880:	b2db      	uxtb	r3, r3
 8002882:	461a      	mov	r2, r3
 8002884:	e00c      	b.n	80028a0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	699b      	ldr	r3, [r3, #24]
 800288c:	43da      	mvns	r2, r3
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	4013      	ands	r3, r2
 8002892:	b29b      	uxth	r3, r3
 8002894:	2b00      	cmp	r3, #0
 8002896:	bf0c      	ite	eq
 8002898:	2301      	moveq	r3, #1
 800289a:	2300      	movne	r3, #0
 800289c:	b2db      	uxtb	r3, r3
 800289e:	461a      	mov	r2, r3
 80028a0:	79fb      	ldrb	r3, [r7, #7]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d116      	bne.n	80028d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2200      	movs	r2, #0
 80028aa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2220      	movs	r2, #32
 80028b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c0:	f043 0220 	orr.w	r2, r3, #32
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e023      	b.n	800291c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	0c1b      	lsrs	r3, r3, #16
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d10d      	bne.n	80028fa <I2C_WaitOnFlagUntilTimeout+0xca>
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	695b      	ldr	r3, [r3, #20]
 80028e4:	43da      	mvns	r2, r3
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	4013      	ands	r3, r2
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	bf0c      	ite	eq
 80028f0:	2301      	moveq	r3, #1
 80028f2:	2300      	movne	r3, #0
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	461a      	mov	r2, r3
 80028f8:	e00c      	b.n	8002914 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	699b      	ldr	r3, [r3, #24]
 8002900:	43da      	mvns	r2, r3
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	4013      	ands	r3, r2
 8002906:	b29b      	uxth	r3, r3
 8002908:	2b00      	cmp	r3, #0
 800290a:	bf0c      	ite	eq
 800290c:	2301      	moveq	r3, #1
 800290e:	2300      	movne	r3, #0
 8002910:	b2db      	uxtb	r3, r3
 8002912:	461a      	mov	r2, r3
 8002914:	79fb      	ldrb	r3, [r7, #7]
 8002916:	429a      	cmp	r2, r3
 8002918:	d093      	beq.n	8002842 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800291a:	2300      	movs	r3, #0
}
 800291c:	4618      	mov	r0, r3
 800291e:	3710      	adds	r7, #16
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}

08002924 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	60b9      	str	r1, [r7, #8]
 800292e:	607a      	str	r2, [r7, #4]
 8002930:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002932:	e071      	b.n	8002a18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	695b      	ldr	r3, [r3, #20]
 800293a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800293e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002942:	d123      	bne.n	800298c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002952:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800295c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2200      	movs	r2, #0
 8002962:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2220      	movs	r2, #32
 8002968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2200      	movs	r2, #0
 8002970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002978:	f043 0204 	orr.w	r2, r3, #4
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e067      	b.n	8002a5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002992:	d041      	beq.n	8002a18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002994:	f7ff f9e4 	bl	8001d60 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d302      	bcc.n	80029aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d136      	bne.n	8002a18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	0c1b      	lsrs	r3, r3, #16
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d10c      	bne.n	80029ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	695b      	ldr	r3, [r3, #20]
 80029ba:	43da      	mvns	r2, r3
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	4013      	ands	r3, r2
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	bf14      	ite	ne
 80029c6:	2301      	movne	r3, #1
 80029c8:	2300      	moveq	r3, #0
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	e00b      	b.n	80029e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	699b      	ldr	r3, [r3, #24]
 80029d4:	43da      	mvns	r2, r3
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	4013      	ands	r3, r2
 80029da:	b29b      	uxth	r3, r3
 80029dc:	2b00      	cmp	r3, #0
 80029de:	bf14      	ite	ne
 80029e0:	2301      	movne	r3, #1
 80029e2:	2300      	moveq	r3, #0
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d016      	beq.n	8002a18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2200      	movs	r2, #0
 80029ee:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2220      	movs	r2, #32
 80029f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a04:	f043 0220 	orr.w	r2, r3, #32
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e021      	b.n	8002a5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	0c1b      	lsrs	r3, r3, #16
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d10c      	bne.n	8002a3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	695b      	ldr	r3, [r3, #20]
 8002a28:	43da      	mvns	r2, r3
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	bf14      	ite	ne
 8002a34:	2301      	movne	r3, #1
 8002a36:	2300      	moveq	r3, #0
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	e00b      	b.n	8002a54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	699b      	ldr	r3, [r3, #24]
 8002a42:	43da      	mvns	r2, r3
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	4013      	ands	r3, r2
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	bf14      	ite	ne
 8002a4e:	2301      	movne	r3, #1
 8002a50:	2300      	moveq	r3, #0
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	f47f af6d 	bne.w	8002934 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002a5a:	2300      	movs	r3, #0
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3710      	adds	r7, #16
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a70:	e034      	b.n	8002adc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a72:	68f8      	ldr	r0, [r7, #12]
 8002a74:	f000 f886 	bl	8002b84 <I2C_IsAcknowledgeFailed>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d001      	beq.n	8002a82 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e034      	b.n	8002aec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a88:	d028      	beq.n	8002adc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a8a:	f7ff f969 	bl	8001d60 <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	68ba      	ldr	r2, [r7, #8]
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d302      	bcc.n	8002aa0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d11d      	bne.n	8002adc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	695b      	ldr	r3, [r3, #20]
 8002aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aaa:	2b80      	cmp	r3, #128	; 0x80
 8002aac:	d016      	beq.n	8002adc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2220      	movs	r2, #32
 8002ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac8:	f043 0220 	orr.w	r2, r3, #32
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e007      	b.n	8002aec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	695b      	ldr	r3, [r3, #20]
 8002ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ae6:	2b80      	cmp	r3, #128	; 0x80
 8002ae8:	d1c3      	bne.n	8002a72 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002aea:	2300      	movs	r3, #0
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3710      	adds	r7, #16
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b00:	e034      	b.n	8002b6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b02:	68f8      	ldr	r0, [r7, #12]
 8002b04:	f000 f83e 	bl	8002b84 <I2C_IsAcknowledgeFailed>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e034      	b.n	8002b7c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b18:	d028      	beq.n	8002b6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b1a:	f7ff f921 	bl	8001d60 <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	68ba      	ldr	r2, [r7, #8]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d302      	bcc.n	8002b30 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d11d      	bne.n	8002b6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	695b      	ldr	r3, [r3, #20]
 8002b36:	f003 0304 	and.w	r3, r3, #4
 8002b3a:	2b04      	cmp	r3, #4
 8002b3c:	d016      	beq.n	8002b6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2200      	movs	r2, #0
 8002b42:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2220      	movs	r2, #32
 8002b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b58:	f043 0220 	orr.w	r2, r3, #32
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e007      	b.n	8002b7c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	695b      	ldr	r3, [r3, #20]
 8002b72:	f003 0304 	and.w	r3, r3, #4
 8002b76:	2b04      	cmp	r3, #4
 8002b78:	d1c3      	bne.n	8002b02 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002b7a:	2300      	movs	r3, #0
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3710      	adds	r7, #16
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	695b      	ldr	r3, [r3, #20]
 8002b92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b9a:	d11b      	bne.n	8002bd4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ba4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2220      	movs	r2, #32
 8002bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc0:	f043 0204 	orr.w	r2, r3, #4
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e000      	b.n	8002bd6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
	...

08002be4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b086      	sub	sp, #24
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d101      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e267      	b.n	80030c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0301 	and.w	r3, r3, #1
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d075      	beq.n	8002cee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c02:	4b88      	ldr	r3, [pc, #544]	; (8002e24 <HAL_RCC_OscConfig+0x240>)
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	f003 030c 	and.w	r3, r3, #12
 8002c0a:	2b04      	cmp	r3, #4
 8002c0c:	d00c      	beq.n	8002c28 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c0e:	4b85      	ldr	r3, [pc, #532]	; (8002e24 <HAL_RCC_OscConfig+0x240>)
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c16:	2b08      	cmp	r3, #8
 8002c18:	d112      	bne.n	8002c40 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c1a:	4b82      	ldr	r3, [pc, #520]	; (8002e24 <HAL_RCC_OscConfig+0x240>)
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c26:	d10b      	bne.n	8002c40 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c28:	4b7e      	ldr	r3, [pc, #504]	; (8002e24 <HAL_RCC_OscConfig+0x240>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d05b      	beq.n	8002cec <HAL_RCC_OscConfig+0x108>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d157      	bne.n	8002cec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e242      	b.n	80030c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c48:	d106      	bne.n	8002c58 <HAL_RCC_OscConfig+0x74>
 8002c4a:	4b76      	ldr	r3, [pc, #472]	; (8002e24 <HAL_RCC_OscConfig+0x240>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a75      	ldr	r2, [pc, #468]	; (8002e24 <HAL_RCC_OscConfig+0x240>)
 8002c50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c54:	6013      	str	r3, [r2, #0]
 8002c56:	e01d      	b.n	8002c94 <HAL_RCC_OscConfig+0xb0>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c60:	d10c      	bne.n	8002c7c <HAL_RCC_OscConfig+0x98>
 8002c62:	4b70      	ldr	r3, [pc, #448]	; (8002e24 <HAL_RCC_OscConfig+0x240>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a6f      	ldr	r2, [pc, #444]	; (8002e24 <HAL_RCC_OscConfig+0x240>)
 8002c68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c6c:	6013      	str	r3, [r2, #0]
 8002c6e:	4b6d      	ldr	r3, [pc, #436]	; (8002e24 <HAL_RCC_OscConfig+0x240>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a6c      	ldr	r2, [pc, #432]	; (8002e24 <HAL_RCC_OscConfig+0x240>)
 8002c74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c78:	6013      	str	r3, [r2, #0]
 8002c7a:	e00b      	b.n	8002c94 <HAL_RCC_OscConfig+0xb0>
 8002c7c:	4b69      	ldr	r3, [pc, #420]	; (8002e24 <HAL_RCC_OscConfig+0x240>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a68      	ldr	r2, [pc, #416]	; (8002e24 <HAL_RCC_OscConfig+0x240>)
 8002c82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c86:	6013      	str	r3, [r2, #0]
 8002c88:	4b66      	ldr	r3, [pc, #408]	; (8002e24 <HAL_RCC_OscConfig+0x240>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a65      	ldr	r2, [pc, #404]	; (8002e24 <HAL_RCC_OscConfig+0x240>)
 8002c8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d013      	beq.n	8002cc4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c9c:	f7ff f860 	bl	8001d60 <HAL_GetTick>
 8002ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ca2:	e008      	b.n	8002cb6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ca4:	f7ff f85c 	bl	8001d60 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b64      	cmp	r3, #100	; 0x64
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e207      	b.n	80030c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cb6:	4b5b      	ldr	r3, [pc, #364]	; (8002e24 <HAL_RCC_OscConfig+0x240>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d0f0      	beq.n	8002ca4 <HAL_RCC_OscConfig+0xc0>
 8002cc2:	e014      	b.n	8002cee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc4:	f7ff f84c 	bl	8001d60 <HAL_GetTick>
 8002cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cca:	e008      	b.n	8002cde <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ccc:	f7ff f848 	bl	8001d60 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	2b64      	cmp	r3, #100	; 0x64
 8002cd8:	d901      	bls.n	8002cde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e1f3      	b.n	80030c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cde:	4b51      	ldr	r3, [pc, #324]	; (8002e24 <HAL_RCC_OscConfig+0x240>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d1f0      	bne.n	8002ccc <HAL_RCC_OscConfig+0xe8>
 8002cea:	e000      	b.n	8002cee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d063      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cfa:	4b4a      	ldr	r3, [pc, #296]	; (8002e24 <HAL_RCC_OscConfig+0x240>)
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	f003 030c 	and.w	r3, r3, #12
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d00b      	beq.n	8002d1e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d06:	4b47      	ldr	r3, [pc, #284]	; (8002e24 <HAL_RCC_OscConfig+0x240>)
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d0e:	2b08      	cmp	r3, #8
 8002d10:	d11c      	bne.n	8002d4c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d12:	4b44      	ldr	r3, [pc, #272]	; (8002e24 <HAL_RCC_OscConfig+0x240>)
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d116      	bne.n	8002d4c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d1e:	4b41      	ldr	r3, [pc, #260]	; (8002e24 <HAL_RCC_OscConfig+0x240>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0302 	and.w	r3, r3, #2
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d005      	beq.n	8002d36 <HAL_RCC_OscConfig+0x152>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d001      	beq.n	8002d36 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e1c7      	b.n	80030c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d36:	4b3b      	ldr	r3, [pc, #236]	; (8002e24 <HAL_RCC_OscConfig+0x240>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	691b      	ldr	r3, [r3, #16]
 8002d42:	00db      	lsls	r3, r3, #3
 8002d44:	4937      	ldr	r1, [pc, #220]	; (8002e24 <HAL_RCC_OscConfig+0x240>)
 8002d46:	4313      	orrs	r3, r2
 8002d48:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d4a:	e03a      	b.n	8002dc2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d020      	beq.n	8002d96 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d54:	4b34      	ldr	r3, [pc, #208]	; (8002e28 <HAL_RCC_OscConfig+0x244>)
 8002d56:	2201      	movs	r2, #1
 8002d58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d5a:	f7ff f801 	bl	8001d60 <HAL_GetTick>
 8002d5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d60:	e008      	b.n	8002d74 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d62:	f7fe fffd 	bl	8001d60 <HAL_GetTick>
 8002d66:	4602      	mov	r2, r0
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d901      	bls.n	8002d74 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e1a8      	b.n	80030c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d74:	4b2b      	ldr	r3, [pc, #172]	; (8002e24 <HAL_RCC_OscConfig+0x240>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0302 	and.w	r3, r3, #2
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d0f0      	beq.n	8002d62 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d80:	4b28      	ldr	r3, [pc, #160]	; (8002e24 <HAL_RCC_OscConfig+0x240>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	691b      	ldr	r3, [r3, #16]
 8002d8c:	00db      	lsls	r3, r3, #3
 8002d8e:	4925      	ldr	r1, [pc, #148]	; (8002e24 <HAL_RCC_OscConfig+0x240>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	600b      	str	r3, [r1, #0]
 8002d94:	e015      	b.n	8002dc2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d96:	4b24      	ldr	r3, [pc, #144]	; (8002e28 <HAL_RCC_OscConfig+0x244>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d9c:	f7fe ffe0 	bl	8001d60 <HAL_GetTick>
 8002da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002da2:	e008      	b.n	8002db6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002da4:	f7fe ffdc 	bl	8001d60 <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d901      	bls.n	8002db6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e187      	b.n	80030c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002db6:	4b1b      	ldr	r3, [pc, #108]	; (8002e24 <HAL_RCC_OscConfig+0x240>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0302 	and.w	r3, r3, #2
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d1f0      	bne.n	8002da4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0308 	and.w	r3, r3, #8
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d036      	beq.n	8002e3c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	695b      	ldr	r3, [r3, #20]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d016      	beq.n	8002e04 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dd6:	4b15      	ldr	r3, [pc, #84]	; (8002e2c <HAL_RCC_OscConfig+0x248>)
 8002dd8:	2201      	movs	r2, #1
 8002dda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ddc:	f7fe ffc0 	bl	8001d60 <HAL_GetTick>
 8002de0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002de2:	e008      	b.n	8002df6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002de4:	f7fe ffbc 	bl	8001d60 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d901      	bls.n	8002df6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e167      	b.n	80030c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002df6:	4b0b      	ldr	r3, [pc, #44]	; (8002e24 <HAL_RCC_OscConfig+0x240>)
 8002df8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dfa:	f003 0302 	and.w	r3, r3, #2
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d0f0      	beq.n	8002de4 <HAL_RCC_OscConfig+0x200>
 8002e02:	e01b      	b.n	8002e3c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e04:	4b09      	ldr	r3, [pc, #36]	; (8002e2c <HAL_RCC_OscConfig+0x248>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e0a:	f7fe ffa9 	bl	8001d60 <HAL_GetTick>
 8002e0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e10:	e00e      	b.n	8002e30 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e12:	f7fe ffa5 	bl	8001d60 <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d907      	bls.n	8002e30 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e150      	b.n	80030c6 <HAL_RCC_OscConfig+0x4e2>
 8002e24:	40023800 	.word	0x40023800
 8002e28:	42470000 	.word	0x42470000
 8002e2c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e30:	4b88      	ldr	r3, [pc, #544]	; (8003054 <HAL_RCC_OscConfig+0x470>)
 8002e32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e34:	f003 0302 	and.w	r3, r3, #2
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d1ea      	bne.n	8002e12 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0304 	and.w	r3, r3, #4
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	f000 8097 	beq.w	8002f78 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e4e:	4b81      	ldr	r3, [pc, #516]	; (8003054 <HAL_RCC_OscConfig+0x470>)
 8002e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d10f      	bne.n	8002e7a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	60bb      	str	r3, [r7, #8]
 8002e5e:	4b7d      	ldr	r3, [pc, #500]	; (8003054 <HAL_RCC_OscConfig+0x470>)
 8002e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e62:	4a7c      	ldr	r2, [pc, #496]	; (8003054 <HAL_RCC_OscConfig+0x470>)
 8002e64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e68:	6413      	str	r3, [r2, #64]	; 0x40
 8002e6a:	4b7a      	ldr	r3, [pc, #488]	; (8003054 <HAL_RCC_OscConfig+0x470>)
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e72:	60bb      	str	r3, [r7, #8]
 8002e74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e76:	2301      	movs	r3, #1
 8002e78:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e7a:	4b77      	ldr	r3, [pc, #476]	; (8003058 <HAL_RCC_OscConfig+0x474>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d118      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e86:	4b74      	ldr	r3, [pc, #464]	; (8003058 <HAL_RCC_OscConfig+0x474>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a73      	ldr	r2, [pc, #460]	; (8003058 <HAL_RCC_OscConfig+0x474>)
 8002e8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e92:	f7fe ff65 	bl	8001d60 <HAL_GetTick>
 8002e96:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e98:	e008      	b.n	8002eac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e9a:	f7fe ff61 	bl	8001d60 <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d901      	bls.n	8002eac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e10c      	b.n	80030c6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eac:	4b6a      	ldr	r3, [pc, #424]	; (8003058 <HAL_RCC_OscConfig+0x474>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d0f0      	beq.n	8002e9a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d106      	bne.n	8002ece <HAL_RCC_OscConfig+0x2ea>
 8002ec0:	4b64      	ldr	r3, [pc, #400]	; (8003054 <HAL_RCC_OscConfig+0x470>)
 8002ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec4:	4a63      	ldr	r2, [pc, #396]	; (8003054 <HAL_RCC_OscConfig+0x470>)
 8002ec6:	f043 0301 	orr.w	r3, r3, #1
 8002eca:	6713      	str	r3, [r2, #112]	; 0x70
 8002ecc:	e01c      	b.n	8002f08 <HAL_RCC_OscConfig+0x324>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	2b05      	cmp	r3, #5
 8002ed4:	d10c      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x30c>
 8002ed6:	4b5f      	ldr	r3, [pc, #380]	; (8003054 <HAL_RCC_OscConfig+0x470>)
 8002ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eda:	4a5e      	ldr	r2, [pc, #376]	; (8003054 <HAL_RCC_OscConfig+0x470>)
 8002edc:	f043 0304 	orr.w	r3, r3, #4
 8002ee0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ee2:	4b5c      	ldr	r3, [pc, #368]	; (8003054 <HAL_RCC_OscConfig+0x470>)
 8002ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee6:	4a5b      	ldr	r2, [pc, #364]	; (8003054 <HAL_RCC_OscConfig+0x470>)
 8002ee8:	f043 0301 	orr.w	r3, r3, #1
 8002eec:	6713      	str	r3, [r2, #112]	; 0x70
 8002eee:	e00b      	b.n	8002f08 <HAL_RCC_OscConfig+0x324>
 8002ef0:	4b58      	ldr	r3, [pc, #352]	; (8003054 <HAL_RCC_OscConfig+0x470>)
 8002ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef4:	4a57      	ldr	r2, [pc, #348]	; (8003054 <HAL_RCC_OscConfig+0x470>)
 8002ef6:	f023 0301 	bic.w	r3, r3, #1
 8002efa:	6713      	str	r3, [r2, #112]	; 0x70
 8002efc:	4b55      	ldr	r3, [pc, #340]	; (8003054 <HAL_RCC_OscConfig+0x470>)
 8002efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f00:	4a54      	ldr	r2, [pc, #336]	; (8003054 <HAL_RCC_OscConfig+0x470>)
 8002f02:	f023 0304 	bic.w	r3, r3, #4
 8002f06:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d015      	beq.n	8002f3c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f10:	f7fe ff26 	bl	8001d60 <HAL_GetTick>
 8002f14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f16:	e00a      	b.n	8002f2e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f18:	f7fe ff22 	bl	8001d60 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e0cb      	b.n	80030c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f2e:	4b49      	ldr	r3, [pc, #292]	; (8003054 <HAL_RCC_OscConfig+0x470>)
 8002f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d0ee      	beq.n	8002f18 <HAL_RCC_OscConfig+0x334>
 8002f3a:	e014      	b.n	8002f66 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f3c:	f7fe ff10 	bl	8001d60 <HAL_GetTick>
 8002f40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f42:	e00a      	b.n	8002f5a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f44:	f7fe ff0c 	bl	8001d60 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e0b5      	b.n	80030c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f5a:	4b3e      	ldr	r3, [pc, #248]	; (8003054 <HAL_RCC_OscConfig+0x470>)
 8002f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f5e:	f003 0302 	and.w	r3, r3, #2
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1ee      	bne.n	8002f44 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f66:	7dfb      	ldrb	r3, [r7, #23]
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d105      	bne.n	8002f78 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f6c:	4b39      	ldr	r3, [pc, #228]	; (8003054 <HAL_RCC_OscConfig+0x470>)
 8002f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f70:	4a38      	ldr	r2, [pc, #224]	; (8003054 <HAL_RCC_OscConfig+0x470>)
 8002f72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f76:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	699b      	ldr	r3, [r3, #24]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	f000 80a1 	beq.w	80030c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f82:	4b34      	ldr	r3, [pc, #208]	; (8003054 <HAL_RCC_OscConfig+0x470>)
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f003 030c 	and.w	r3, r3, #12
 8002f8a:	2b08      	cmp	r3, #8
 8002f8c:	d05c      	beq.n	8003048 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d141      	bne.n	800301a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f96:	4b31      	ldr	r3, [pc, #196]	; (800305c <HAL_RCC_OscConfig+0x478>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f9c:	f7fe fee0 	bl	8001d60 <HAL_GetTick>
 8002fa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fa2:	e008      	b.n	8002fb6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fa4:	f7fe fedc 	bl	8001d60 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d901      	bls.n	8002fb6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e087      	b.n	80030c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fb6:	4b27      	ldr	r3, [pc, #156]	; (8003054 <HAL_RCC_OscConfig+0x470>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d1f0      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	69da      	ldr	r2, [r3, #28]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a1b      	ldr	r3, [r3, #32]
 8002fca:	431a      	orrs	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd0:	019b      	lsls	r3, r3, #6
 8002fd2:	431a      	orrs	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd8:	085b      	lsrs	r3, r3, #1
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	041b      	lsls	r3, r3, #16
 8002fde:	431a      	orrs	r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe4:	061b      	lsls	r3, r3, #24
 8002fe6:	491b      	ldr	r1, [pc, #108]	; (8003054 <HAL_RCC_OscConfig+0x470>)
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fec:	4b1b      	ldr	r3, [pc, #108]	; (800305c <HAL_RCC_OscConfig+0x478>)
 8002fee:	2201      	movs	r2, #1
 8002ff0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff2:	f7fe feb5 	bl	8001d60 <HAL_GetTick>
 8002ff6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ff8:	e008      	b.n	800300c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ffa:	f7fe feb1 	bl	8001d60 <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	2b02      	cmp	r3, #2
 8003006:	d901      	bls.n	800300c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e05c      	b.n	80030c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800300c:	4b11      	ldr	r3, [pc, #68]	; (8003054 <HAL_RCC_OscConfig+0x470>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003014:	2b00      	cmp	r3, #0
 8003016:	d0f0      	beq.n	8002ffa <HAL_RCC_OscConfig+0x416>
 8003018:	e054      	b.n	80030c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800301a:	4b10      	ldr	r3, [pc, #64]	; (800305c <HAL_RCC_OscConfig+0x478>)
 800301c:	2200      	movs	r2, #0
 800301e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003020:	f7fe fe9e 	bl	8001d60 <HAL_GetTick>
 8003024:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003026:	e008      	b.n	800303a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003028:	f7fe fe9a 	bl	8001d60 <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	2b02      	cmp	r3, #2
 8003034:	d901      	bls.n	800303a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e045      	b.n	80030c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800303a:	4b06      	ldr	r3, [pc, #24]	; (8003054 <HAL_RCC_OscConfig+0x470>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d1f0      	bne.n	8003028 <HAL_RCC_OscConfig+0x444>
 8003046:	e03d      	b.n	80030c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	699b      	ldr	r3, [r3, #24]
 800304c:	2b01      	cmp	r3, #1
 800304e:	d107      	bne.n	8003060 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e038      	b.n	80030c6 <HAL_RCC_OscConfig+0x4e2>
 8003054:	40023800 	.word	0x40023800
 8003058:	40007000 	.word	0x40007000
 800305c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003060:	4b1b      	ldr	r3, [pc, #108]	; (80030d0 <HAL_RCC_OscConfig+0x4ec>)
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	699b      	ldr	r3, [r3, #24]
 800306a:	2b01      	cmp	r3, #1
 800306c:	d028      	beq.n	80030c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003078:	429a      	cmp	r2, r3
 800307a:	d121      	bne.n	80030c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003086:	429a      	cmp	r2, r3
 8003088:	d11a      	bne.n	80030c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800308a:	68fa      	ldr	r2, [r7, #12]
 800308c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003090:	4013      	ands	r3, r2
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003096:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003098:	4293      	cmp	r3, r2
 800309a:	d111      	bne.n	80030c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a6:	085b      	lsrs	r3, r3, #1
 80030a8:	3b01      	subs	r3, #1
 80030aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d107      	bne.n	80030c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030bc:	429a      	cmp	r2, r3
 80030be:	d001      	beq.n	80030c4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e000      	b.n	80030c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3718      	adds	r7, #24
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	40023800 	.word	0x40023800

080030d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d101      	bne.n	80030e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e0cc      	b.n	8003282 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030e8:	4b68      	ldr	r3, [pc, #416]	; (800328c <HAL_RCC_ClockConfig+0x1b8>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0307 	and.w	r3, r3, #7
 80030f0:	683a      	ldr	r2, [r7, #0]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d90c      	bls.n	8003110 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030f6:	4b65      	ldr	r3, [pc, #404]	; (800328c <HAL_RCC_ClockConfig+0x1b8>)
 80030f8:	683a      	ldr	r2, [r7, #0]
 80030fa:	b2d2      	uxtb	r2, r2
 80030fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030fe:	4b63      	ldr	r3, [pc, #396]	; (800328c <HAL_RCC_ClockConfig+0x1b8>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0307 	and.w	r3, r3, #7
 8003106:	683a      	ldr	r2, [r7, #0]
 8003108:	429a      	cmp	r2, r3
 800310a:	d001      	beq.n	8003110 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e0b8      	b.n	8003282 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0302 	and.w	r3, r3, #2
 8003118:	2b00      	cmp	r3, #0
 800311a:	d020      	beq.n	800315e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0304 	and.w	r3, r3, #4
 8003124:	2b00      	cmp	r3, #0
 8003126:	d005      	beq.n	8003134 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003128:	4b59      	ldr	r3, [pc, #356]	; (8003290 <HAL_RCC_ClockConfig+0x1bc>)
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	4a58      	ldr	r2, [pc, #352]	; (8003290 <HAL_RCC_ClockConfig+0x1bc>)
 800312e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003132:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0308 	and.w	r3, r3, #8
 800313c:	2b00      	cmp	r3, #0
 800313e:	d005      	beq.n	800314c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003140:	4b53      	ldr	r3, [pc, #332]	; (8003290 <HAL_RCC_ClockConfig+0x1bc>)
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	4a52      	ldr	r2, [pc, #328]	; (8003290 <HAL_RCC_ClockConfig+0x1bc>)
 8003146:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800314a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800314c:	4b50      	ldr	r3, [pc, #320]	; (8003290 <HAL_RCC_ClockConfig+0x1bc>)
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	494d      	ldr	r1, [pc, #308]	; (8003290 <HAL_RCC_ClockConfig+0x1bc>)
 800315a:	4313      	orrs	r3, r2
 800315c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0301 	and.w	r3, r3, #1
 8003166:	2b00      	cmp	r3, #0
 8003168:	d044      	beq.n	80031f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	2b01      	cmp	r3, #1
 8003170:	d107      	bne.n	8003182 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003172:	4b47      	ldr	r3, [pc, #284]	; (8003290 <HAL_RCC_ClockConfig+0x1bc>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d119      	bne.n	80031b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e07f      	b.n	8003282 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	2b02      	cmp	r3, #2
 8003188:	d003      	beq.n	8003192 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800318e:	2b03      	cmp	r3, #3
 8003190:	d107      	bne.n	80031a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003192:	4b3f      	ldr	r3, [pc, #252]	; (8003290 <HAL_RCC_ClockConfig+0x1bc>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d109      	bne.n	80031b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e06f      	b.n	8003282 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031a2:	4b3b      	ldr	r3, [pc, #236]	; (8003290 <HAL_RCC_ClockConfig+0x1bc>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d101      	bne.n	80031b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e067      	b.n	8003282 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031b2:	4b37      	ldr	r3, [pc, #220]	; (8003290 <HAL_RCC_ClockConfig+0x1bc>)
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f023 0203 	bic.w	r2, r3, #3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	4934      	ldr	r1, [pc, #208]	; (8003290 <HAL_RCC_ClockConfig+0x1bc>)
 80031c0:	4313      	orrs	r3, r2
 80031c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031c4:	f7fe fdcc 	bl	8001d60 <HAL_GetTick>
 80031c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ca:	e00a      	b.n	80031e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031cc:	f7fe fdc8 	bl	8001d60 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80031da:	4293      	cmp	r3, r2
 80031dc:	d901      	bls.n	80031e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e04f      	b.n	8003282 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031e2:	4b2b      	ldr	r3, [pc, #172]	; (8003290 <HAL_RCC_ClockConfig+0x1bc>)
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f003 020c 	and.w	r2, r3, #12
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d1eb      	bne.n	80031cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031f4:	4b25      	ldr	r3, [pc, #148]	; (800328c <HAL_RCC_ClockConfig+0x1b8>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0307 	and.w	r3, r3, #7
 80031fc:	683a      	ldr	r2, [r7, #0]
 80031fe:	429a      	cmp	r2, r3
 8003200:	d20c      	bcs.n	800321c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003202:	4b22      	ldr	r3, [pc, #136]	; (800328c <HAL_RCC_ClockConfig+0x1b8>)
 8003204:	683a      	ldr	r2, [r7, #0]
 8003206:	b2d2      	uxtb	r2, r2
 8003208:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800320a:	4b20      	ldr	r3, [pc, #128]	; (800328c <HAL_RCC_ClockConfig+0x1b8>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0307 	and.w	r3, r3, #7
 8003212:	683a      	ldr	r2, [r7, #0]
 8003214:	429a      	cmp	r2, r3
 8003216:	d001      	beq.n	800321c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e032      	b.n	8003282 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0304 	and.w	r3, r3, #4
 8003224:	2b00      	cmp	r3, #0
 8003226:	d008      	beq.n	800323a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003228:	4b19      	ldr	r3, [pc, #100]	; (8003290 <HAL_RCC_ClockConfig+0x1bc>)
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	4916      	ldr	r1, [pc, #88]	; (8003290 <HAL_RCC_ClockConfig+0x1bc>)
 8003236:	4313      	orrs	r3, r2
 8003238:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0308 	and.w	r3, r3, #8
 8003242:	2b00      	cmp	r3, #0
 8003244:	d009      	beq.n	800325a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003246:	4b12      	ldr	r3, [pc, #72]	; (8003290 <HAL_RCC_ClockConfig+0x1bc>)
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	691b      	ldr	r3, [r3, #16]
 8003252:	00db      	lsls	r3, r3, #3
 8003254:	490e      	ldr	r1, [pc, #56]	; (8003290 <HAL_RCC_ClockConfig+0x1bc>)
 8003256:	4313      	orrs	r3, r2
 8003258:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800325a:	f000 f821 	bl	80032a0 <HAL_RCC_GetSysClockFreq>
 800325e:	4602      	mov	r2, r0
 8003260:	4b0b      	ldr	r3, [pc, #44]	; (8003290 <HAL_RCC_ClockConfig+0x1bc>)
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	091b      	lsrs	r3, r3, #4
 8003266:	f003 030f 	and.w	r3, r3, #15
 800326a:	490a      	ldr	r1, [pc, #40]	; (8003294 <HAL_RCC_ClockConfig+0x1c0>)
 800326c:	5ccb      	ldrb	r3, [r1, r3]
 800326e:	fa22 f303 	lsr.w	r3, r2, r3
 8003272:	4a09      	ldr	r2, [pc, #36]	; (8003298 <HAL_RCC_ClockConfig+0x1c4>)
 8003274:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003276:	4b09      	ldr	r3, [pc, #36]	; (800329c <HAL_RCC_ClockConfig+0x1c8>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4618      	mov	r0, r3
 800327c:	f7fe fc26 	bl	8001acc <HAL_InitTick>

  return HAL_OK;
 8003280:	2300      	movs	r3, #0
}
 8003282:	4618      	mov	r0, r3
 8003284:	3710      	adds	r7, #16
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	40023c00 	.word	0x40023c00
 8003290:	40023800 	.word	0x40023800
 8003294:	08005de8 	.word	0x08005de8
 8003298:	200000c0 	.word	0x200000c0
 800329c:	200000c4 	.word	0x200000c4

080032a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032a4:	b094      	sub	sp, #80	; 0x50
 80032a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80032a8:	2300      	movs	r3, #0
 80032aa:	647b      	str	r3, [r7, #68]	; 0x44
 80032ac:	2300      	movs	r3, #0
 80032ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032b0:	2300      	movs	r3, #0
 80032b2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80032b4:	2300      	movs	r3, #0
 80032b6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032b8:	4b79      	ldr	r3, [pc, #484]	; (80034a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	f003 030c 	and.w	r3, r3, #12
 80032c0:	2b08      	cmp	r3, #8
 80032c2:	d00d      	beq.n	80032e0 <HAL_RCC_GetSysClockFreq+0x40>
 80032c4:	2b08      	cmp	r3, #8
 80032c6:	f200 80e1 	bhi.w	800348c <HAL_RCC_GetSysClockFreq+0x1ec>
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d002      	beq.n	80032d4 <HAL_RCC_GetSysClockFreq+0x34>
 80032ce:	2b04      	cmp	r3, #4
 80032d0:	d003      	beq.n	80032da <HAL_RCC_GetSysClockFreq+0x3a>
 80032d2:	e0db      	b.n	800348c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032d4:	4b73      	ldr	r3, [pc, #460]	; (80034a4 <HAL_RCC_GetSysClockFreq+0x204>)
 80032d6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80032d8:	e0db      	b.n	8003492 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032da:	4b73      	ldr	r3, [pc, #460]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x208>)
 80032dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032de:	e0d8      	b.n	8003492 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032e0:	4b6f      	ldr	r3, [pc, #444]	; (80034a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032e8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032ea:	4b6d      	ldr	r3, [pc, #436]	; (80034a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d063      	beq.n	80033be <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032f6:	4b6a      	ldr	r3, [pc, #424]	; (80034a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	099b      	lsrs	r3, r3, #6
 80032fc:	2200      	movs	r2, #0
 80032fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8003300:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003304:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003308:	633b      	str	r3, [r7, #48]	; 0x30
 800330a:	2300      	movs	r3, #0
 800330c:	637b      	str	r3, [r7, #52]	; 0x34
 800330e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003312:	4622      	mov	r2, r4
 8003314:	462b      	mov	r3, r5
 8003316:	f04f 0000 	mov.w	r0, #0
 800331a:	f04f 0100 	mov.w	r1, #0
 800331e:	0159      	lsls	r1, r3, #5
 8003320:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003324:	0150      	lsls	r0, r2, #5
 8003326:	4602      	mov	r2, r0
 8003328:	460b      	mov	r3, r1
 800332a:	4621      	mov	r1, r4
 800332c:	1a51      	subs	r1, r2, r1
 800332e:	6139      	str	r1, [r7, #16]
 8003330:	4629      	mov	r1, r5
 8003332:	eb63 0301 	sbc.w	r3, r3, r1
 8003336:	617b      	str	r3, [r7, #20]
 8003338:	f04f 0200 	mov.w	r2, #0
 800333c:	f04f 0300 	mov.w	r3, #0
 8003340:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003344:	4659      	mov	r1, fp
 8003346:	018b      	lsls	r3, r1, #6
 8003348:	4651      	mov	r1, sl
 800334a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800334e:	4651      	mov	r1, sl
 8003350:	018a      	lsls	r2, r1, #6
 8003352:	4651      	mov	r1, sl
 8003354:	ebb2 0801 	subs.w	r8, r2, r1
 8003358:	4659      	mov	r1, fp
 800335a:	eb63 0901 	sbc.w	r9, r3, r1
 800335e:	f04f 0200 	mov.w	r2, #0
 8003362:	f04f 0300 	mov.w	r3, #0
 8003366:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800336a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800336e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003372:	4690      	mov	r8, r2
 8003374:	4699      	mov	r9, r3
 8003376:	4623      	mov	r3, r4
 8003378:	eb18 0303 	adds.w	r3, r8, r3
 800337c:	60bb      	str	r3, [r7, #8]
 800337e:	462b      	mov	r3, r5
 8003380:	eb49 0303 	adc.w	r3, r9, r3
 8003384:	60fb      	str	r3, [r7, #12]
 8003386:	f04f 0200 	mov.w	r2, #0
 800338a:	f04f 0300 	mov.w	r3, #0
 800338e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003392:	4629      	mov	r1, r5
 8003394:	024b      	lsls	r3, r1, #9
 8003396:	4621      	mov	r1, r4
 8003398:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800339c:	4621      	mov	r1, r4
 800339e:	024a      	lsls	r2, r1, #9
 80033a0:	4610      	mov	r0, r2
 80033a2:	4619      	mov	r1, r3
 80033a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033a6:	2200      	movs	r2, #0
 80033a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80033aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80033ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80033b0:	f7fc ff66 	bl	8000280 <__aeabi_uldivmod>
 80033b4:	4602      	mov	r2, r0
 80033b6:	460b      	mov	r3, r1
 80033b8:	4613      	mov	r3, r2
 80033ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033bc:	e058      	b.n	8003470 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033be:	4b38      	ldr	r3, [pc, #224]	; (80034a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	099b      	lsrs	r3, r3, #6
 80033c4:	2200      	movs	r2, #0
 80033c6:	4618      	mov	r0, r3
 80033c8:	4611      	mov	r1, r2
 80033ca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80033ce:	623b      	str	r3, [r7, #32]
 80033d0:	2300      	movs	r3, #0
 80033d2:	627b      	str	r3, [r7, #36]	; 0x24
 80033d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80033d8:	4642      	mov	r2, r8
 80033da:	464b      	mov	r3, r9
 80033dc:	f04f 0000 	mov.w	r0, #0
 80033e0:	f04f 0100 	mov.w	r1, #0
 80033e4:	0159      	lsls	r1, r3, #5
 80033e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033ea:	0150      	lsls	r0, r2, #5
 80033ec:	4602      	mov	r2, r0
 80033ee:	460b      	mov	r3, r1
 80033f0:	4641      	mov	r1, r8
 80033f2:	ebb2 0a01 	subs.w	sl, r2, r1
 80033f6:	4649      	mov	r1, r9
 80033f8:	eb63 0b01 	sbc.w	fp, r3, r1
 80033fc:	f04f 0200 	mov.w	r2, #0
 8003400:	f04f 0300 	mov.w	r3, #0
 8003404:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003408:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800340c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003410:	ebb2 040a 	subs.w	r4, r2, sl
 8003414:	eb63 050b 	sbc.w	r5, r3, fp
 8003418:	f04f 0200 	mov.w	r2, #0
 800341c:	f04f 0300 	mov.w	r3, #0
 8003420:	00eb      	lsls	r3, r5, #3
 8003422:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003426:	00e2      	lsls	r2, r4, #3
 8003428:	4614      	mov	r4, r2
 800342a:	461d      	mov	r5, r3
 800342c:	4643      	mov	r3, r8
 800342e:	18e3      	adds	r3, r4, r3
 8003430:	603b      	str	r3, [r7, #0]
 8003432:	464b      	mov	r3, r9
 8003434:	eb45 0303 	adc.w	r3, r5, r3
 8003438:	607b      	str	r3, [r7, #4]
 800343a:	f04f 0200 	mov.w	r2, #0
 800343e:	f04f 0300 	mov.w	r3, #0
 8003442:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003446:	4629      	mov	r1, r5
 8003448:	028b      	lsls	r3, r1, #10
 800344a:	4621      	mov	r1, r4
 800344c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003450:	4621      	mov	r1, r4
 8003452:	028a      	lsls	r2, r1, #10
 8003454:	4610      	mov	r0, r2
 8003456:	4619      	mov	r1, r3
 8003458:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800345a:	2200      	movs	r2, #0
 800345c:	61bb      	str	r3, [r7, #24]
 800345e:	61fa      	str	r2, [r7, #28]
 8003460:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003464:	f7fc ff0c 	bl	8000280 <__aeabi_uldivmod>
 8003468:	4602      	mov	r2, r0
 800346a:	460b      	mov	r3, r1
 800346c:	4613      	mov	r3, r2
 800346e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003470:	4b0b      	ldr	r3, [pc, #44]	; (80034a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	0c1b      	lsrs	r3, r3, #16
 8003476:	f003 0303 	and.w	r3, r3, #3
 800347a:	3301      	adds	r3, #1
 800347c:	005b      	lsls	r3, r3, #1
 800347e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003480:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003482:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003484:	fbb2 f3f3 	udiv	r3, r2, r3
 8003488:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800348a:	e002      	b.n	8003492 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800348c:	4b05      	ldr	r3, [pc, #20]	; (80034a4 <HAL_RCC_GetSysClockFreq+0x204>)
 800348e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003490:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003492:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003494:	4618      	mov	r0, r3
 8003496:	3750      	adds	r7, #80	; 0x50
 8003498:	46bd      	mov	sp, r7
 800349a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800349e:	bf00      	nop
 80034a0:	40023800 	.word	0x40023800
 80034a4:	00f42400 	.word	0x00f42400
 80034a8:	007a1200 	.word	0x007a1200

080034ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034ac:	b480      	push	{r7}
 80034ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034b0:	4b03      	ldr	r3, [pc, #12]	; (80034c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80034b2:	681b      	ldr	r3, [r3, #0]
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	200000c0 	.word	0x200000c0

080034c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80034c8:	f7ff fff0 	bl	80034ac <HAL_RCC_GetHCLKFreq>
 80034cc:	4602      	mov	r2, r0
 80034ce:	4b05      	ldr	r3, [pc, #20]	; (80034e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	0a9b      	lsrs	r3, r3, #10
 80034d4:	f003 0307 	and.w	r3, r3, #7
 80034d8:	4903      	ldr	r1, [pc, #12]	; (80034e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034da:	5ccb      	ldrb	r3, [r1, r3]
 80034dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	40023800 	.word	0x40023800
 80034e8:	08005df8 	.word	0x08005df8

080034ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80034f0:	f7ff ffdc 	bl	80034ac <HAL_RCC_GetHCLKFreq>
 80034f4:	4602      	mov	r2, r0
 80034f6:	4b05      	ldr	r3, [pc, #20]	; (800350c <HAL_RCC_GetPCLK2Freq+0x20>)
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	0b5b      	lsrs	r3, r3, #13
 80034fc:	f003 0307 	and.w	r3, r3, #7
 8003500:	4903      	ldr	r1, [pc, #12]	; (8003510 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003502:	5ccb      	ldrb	r3, [r1, r3]
 8003504:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003508:	4618      	mov	r0, r3
 800350a:	bd80      	pop	{r7, pc}
 800350c:	40023800 	.word	0x40023800
 8003510:	08005df8 	.word	0x08005df8

08003514 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	220f      	movs	r2, #15
 8003522:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003524:	4b12      	ldr	r3, [pc, #72]	; (8003570 <HAL_RCC_GetClockConfig+0x5c>)
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	f003 0203 	and.w	r2, r3, #3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003530:	4b0f      	ldr	r3, [pc, #60]	; (8003570 <HAL_RCC_GetClockConfig+0x5c>)
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800353c:	4b0c      	ldr	r3, [pc, #48]	; (8003570 <HAL_RCC_GetClockConfig+0x5c>)
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003548:	4b09      	ldr	r3, [pc, #36]	; (8003570 <HAL_RCC_GetClockConfig+0x5c>)
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	08db      	lsrs	r3, r3, #3
 800354e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003556:	4b07      	ldr	r3, [pc, #28]	; (8003574 <HAL_RCC_GetClockConfig+0x60>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0207 	and.w	r2, r3, #7
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	601a      	str	r2, [r3, #0]
}
 8003562:	bf00      	nop
 8003564:	370c      	adds	r7, #12
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop
 8003570:	40023800 	.word	0x40023800
 8003574:	40023c00 	.word	0x40023c00

08003578 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d101      	bne.n	800358a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e041      	b.n	800360e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003590:	b2db      	uxtb	r3, r3
 8003592:	2b00      	cmp	r3, #0
 8003594:	d106      	bne.n	80035a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f7fe fa6e 	bl	8001a80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2202      	movs	r2, #2
 80035a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	3304      	adds	r3, #4
 80035b4:	4619      	mov	r1, r3
 80035b6:	4610      	mov	r0, r2
 80035b8:	f000 fa70 	bl	8003a9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800360c:	2300      	movs	r3, #0
}
 800360e:	4618      	mov	r0, r3
 8003610:	3708      	adds	r7, #8
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
	...

08003618 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003618:	b480      	push	{r7}
 800361a:	b085      	sub	sp, #20
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003626:	b2db      	uxtb	r3, r3
 8003628:	2b01      	cmp	r3, #1
 800362a:	d001      	beq.n	8003630 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e044      	b.n	80036ba <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2202      	movs	r2, #2
 8003634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	68da      	ldr	r2, [r3, #12]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f042 0201 	orr.w	r2, r2, #1
 8003646:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a1e      	ldr	r2, [pc, #120]	; (80036c8 <HAL_TIM_Base_Start_IT+0xb0>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d018      	beq.n	8003684 <HAL_TIM_Base_Start_IT+0x6c>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800365a:	d013      	beq.n	8003684 <HAL_TIM_Base_Start_IT+0x6c>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a1a      	ldr	r2, [pc, #104]	; (80036cc <HAL_TIM_Base_Start_IT+0xb4>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d00e      	beq.n	8003684 <HAL_TIM_Base_Start_IT+0x6c>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a19      	ldr	r2, [pc, #100]	; (80036d0 <HAL_TIM_Base_Start_IT+0xb8>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d009      	beq.n	8003684 <HAL_TIM_Base_Start_IT+0x6c>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a17      	ldr	r2, [pc, #92]	; (80036d4 <HAL_TIM_Base_Start_IT+0xbc>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d004      	beq.n	8003684 <HAL_TIM_Base_Start_IT+0x6c>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a16      	ldr	r2, [pc, #88]	; (80036d8 <HAL_TIM_Base_Start_IT+0xc0>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d111      	bne.n	80036a8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	f003 0307 	and.w	r3, r3, #7
 800368e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2b06      	cmp	r3, #6
 8003694:	d010      	beq.n	80036b8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f042 0201 	orr.w	r2, r2, #1
 80036a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036a6:	e007      	b.n	80036b8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f042 0201 	orr.w	r2, r2, #1
 80036b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3714      	adds	r7, #20
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop
 80036c8:	40010000 	.word	0x40010000
 80036cc:	40000400 	.word	0x40000400
 80036d0:	40000800 	.word	0x40000800
 80036d4:	40000c00 	.word	0x40000c00
 80036d8:	40014000 	.word	0x40014000

080036dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	691b      	ldr	r3, [r3, #16]
 80036f2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	f003 0302 	and.w	r3, r3, #2
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d020      	beq.n	8003740 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f003 0302 	and.w	r3, r3, #2
 8003704:	2b00      	cmp	r3, #0
 8003706:	d01b      	beq.n	8003740 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f06f 0202 	mvn.w	r2, #2
 8003710:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2201      	movs	r2, #1
 8003716:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	699b      	ldr	r3, [r3, #24]
 800371e:	f003 0303 	and.w	r3, r3, #3
 8003722:	2b00      	cmp	r3, #0
 8003724:	d003      	beq.n	800372e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 f999 	bl	8003a5e <HAL_TIM_IC_CaptureCallback>
 800372c:	e005      	b.n	800373a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 f98b 	bl	8003a4a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f000 f99c 	bl	8003a72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	f003 0304 	and.w	r3, r3, #4
 8003746:	2b00      	cmp	r3, #0
 8003748:	d020      	beq.n	800378c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f003 0304 	and.w	r3, r3, #4
 8003750:	2b00      	cmp	r3, #0
 8003752:	d01b      	beq.n	800378c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f06f 0204 	mvn.w	r2, #4
 800375c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2202      	movs	r2, #2
 8003762:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	699b      	ldr	r3, [r3, #24]
 800376a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800376e:	2b00      	cmp	r3, #0
 8003770:	d003      	beq.n	800377a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 f973 	bl	8003a5e <HAL_TIM_IC_CaptureCallback>
 8003778:	e005      	b.n	8003786 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 f965 	bl	8003a4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f000 f976 	bl	8003a72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	f003 0308 	and.w	r3, r3, #8
 8003792:	2b00      	cmp	r3, #0
 8003794:	d020      	beq.n	80037d8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	f003 0308 	and.w	r3, r3, #8
 800379c:	2b00      	cmp	r3, #0
 800379e:	d01b      	beq.n	80037d8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f06f 0208 	mvn.w	r2, #8
 80037a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2204      	movs	r2, #4
 80037ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	69db      	ldr	r3, [r3, #28]
 80037b6:	f003 0303 	and.w	r3, r3, #3
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d003      	beq.n	80037c6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f000 f94d 	bl	8003a5e <HAL_TIM_IC_CaptureCallback>
 80037c4:	e005      	b.n	80037d2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 f93f 	bl	8003a4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f000 f950 	bl	8003a72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	f003 0310 	and.w	r3, r3, #16
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d020      	beq.n	8003824 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f003 0310 	and.w	r3, r3, #16
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d01b      	beq.n	8003824 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f06f 0210 	mvn.w	r2, #16
 80037f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2208      	movs	r2, #8
 80037fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	69db      	ldr	r3, [r3, #28]
 8003802:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003806:	2b00      	cmp	r3, #0
 8003808:	d003      	beq.n	8003812 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 f927 	bl	8003a5e <HAL_TIM_IC_CaptureCallback>
 8003810:	e005      	b.n	800381e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 f919 	bl	8003a4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f000 f92a 	bl	8003a72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	f003 0301 	and.w	r3, r3, #1
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00c      	beq.n	8003848 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	f003 0301 	and.w	r3, r3, #1
 8003834:	2b00      	cmp	r3, #0
 8003836:	d007      	beq.n	8003848 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f06f 0201 	mvn.w	r2, #1
 8003840:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f7fd fce2 	bl	800120c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800384e:	2b00      	cmp	r3, #0
 8003850:	d00c      	beq.n	800386c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003858:	2b00      	cmp	r3, #0
 800385a:	d007      	beq.n	800386c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003864:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 fab6 	bl	8003dd8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00c      	beq.n	8003890 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800387c:	2b00      	cmp	r3, #0
 800387e:	d007      	beq.n	8003890 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003888:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 f8fb 	bl	8003a86 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	f003 0320 	and.w	r3, r3, #32
 8003896:	2b00      	cmp	r3, #0
 8003898:	d00c      	beq.n	80038b4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	f003 0320 	and.w	r3, r3, #32
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d007      	beq.n	80038b4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f06f 0220 	mvn.w	r2, #32
 80038ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 fa88 	bl	8003dc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038b4:	bf00      	nop
 80038b6:	3710      	adds	r7, #16
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038c6:	2300      	movs	r3, #0
 80038c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d101      	bne.n	80038d8 <HAL_TIM_ConfigClockSource+0x1c>
 80038d4:	2302      	movs	r3, #2
 80038d6:	e0b4      	b.n	8003a42 <HAL_TIM_ConfigClockSource+0x186>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2202      	movs	r2, #2
 80038e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80038f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	68ba      	ldr	r2, [r7, #8]
 8003906:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003910:	d03e      	beq.n	8003990 <HAL_TIM_ConfigClockSource+0xd4>
 8003912:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003916:	f200 8087 	bhi.w	8003a28 <HAL_TIM_ConfigClockSource+0x16c>
 800391a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800391e:	f000 8086 	beq.w	8003a2e <HAL_TIM_ConfigClockSource+0x172>
 8003922:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003926:	d87f      	bhi.n	8003a28 <HAL_TIM_ConfigClockSource+0x16c>
 8003928:	2b70      	cmp	r3, #112	; 0x70
 800392a:	d01a      	beq.n	8003962 <HAL_TIM_ConfigClockSource+0xa6>
 800392c:	2b70      	cmp	r3, #112	; 0x70
 800392e:	d87b      	bhi.n	8003a28 <HAL_TIM_ConfigClockSource+0x16c>
 8003930:	2b60      	cmp	r3, #96	; 0x60
 8003932:	d050      	beq.n	80039d6 <HAL_TIM_ConfigClockSource+0x11a>
 8003934:	2b60      	cmp	r3, #96	; 0x60
 8003936:	d877      	bhi.n	8003a28 <HAL_TIM_ConfigClockSource+0x16c>
 8003938:	2b50      	cmp	r3, #80	; 0x50
 800393a:	d03c      	beq.n	80039b6 <HAL_TIM_ConfigClockSource+0xfa>
 800393c:	2b50      	cmp	r3, #80	; 0x50
 800393e:	d873      	bhi.n	8003a28 <HAL_TIM_ConfigClockSource+0x16c>
 8003940:	2b40      	cmp	r3, #64	; 0x40
 8003942:	d058      	beq.n	80039f6 <HAL_TIM_ConfigClockSource+0x13a>
 8003944:	2b40      	cmp	r3, #64	; 0x40
 8003946:	d86f      	bhi.n	8003a28 <HAL_TIM_ConfigClockSource+0x16c>
 8003948:	2b30      	cmp	r3, #48	; 0x30
 800394a:	d064      	beq.n	8003a16 <HAL_TIM_ConfigClockSource+0x15a>
 800394c:	2b30      	cmp	r3, #48	; 0x30
 800394e:	d86b      	bhi.n	8003a28 <HAL_TIM_ConfigClockSource+0x16c>
 8003950:	2b20      	cmp	r3, #32
 8003952:	d060      	beq.n	8003a16 <HAL_TIM_ConfigClockSource+0x15a>
 8003954:	2b20      	cmp	r3, #32
 8003956:	d867      	bhi.n	8003a28 <HAL_TIM_ConfigClockSource+0x16c>
 8003958:	2b00      	cmp	r3, #0
 800395a:	d05c      	beq.n	8003a16 <HAL_TIM_ConfigClockSource+0x15a>
 800395c:	2b10      	cmp	r3, #16
 800395e:	d05a      	beq.n	8003a16 <HAL_TIM_ConfigClockSource+0x15a>
 8003960:	e062      	b.n	8003a28 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003972:	f000 f999 	bl	8003ca8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003984:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	68ba      	ldr	r2, [r7, #8]
 800398c:	609a      	str	r2, [r3, #8]
      break;
 800398e:	e04f      	b.n	8003a30 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80039a0:	f000 f982 	bl	8003ca8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	689a      	ldr	r2, [r3, #8]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039b2:	609a      	str	r2, [r3, #8]
      break;
 80039b4:	e03c      	b.n	8003a30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039c2:	461a      	mov	r2, r3
 80039c4:	f000 f8f6 	bl	8003bb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	2150      	movs	r1, #80	; 0x50
 80039ce:	4618      	mov	r0, r3
 80039d0:	f000 f94f 	bl	8003c72 <TIM_ITRx_SetConfig>
      break;
 80039d4:	e02c      	b.n	8003a30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80039e2:	461a      	mov	r2, r3
 80039e4:	f000 f915 	bl	8003c12 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	2160      	movs	r1, #96	; 0x60
 80039ee:	4618      	mov	r0, r3
 80039f0:	f000 f93f 	bl	8003c72 <TIM_ITRx_SetConfig>
      break;
 80039f4:	e01c      	b.n	8003a30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a02:	461a      	mov	r2, r3
 8003a04:	f000 f8d6 	bl	8003bb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2140      	movs	r1, #64	; 0x40
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f000 f92f 	bl	8003c72 <TIM_ITRx_SetConfig>
      break;
 8003a14:	e00c      	b.n	8003a30 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4619      	mov	r1, r3
 8003a20:	4610      	mov	r0, r2
 8003a22:	f000 f926 	bl	8003c72 <TIM_ITRx_SetConfig>
      break;
 8003a26:	e003      	b.n	8003a30 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	73fb      	strb	r3, [r7, #15]
      break;
 8003a2c:	e000      	b.n	8003a30 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003a2e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3710      	adds	r7, #16
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}

08003a4a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a4a:	b480      	push	{r7}
 8003a4c:	b083      	sub	sp, #12
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a52:	bf00      	nop
 8003a54:	370c      	adds	r7, #12
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr

08003a5e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a5e:	b480      	push	{r7}
 8003a60:	b083      	sub	sp, #12
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a66:	bf00      	nop
 8003a68:	370c      	adds	r7, #12
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr

08003a72 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a72:	b480      	push	{r7}
 8003a74:	b083      	sub	sp, #12
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a7a:	bf00      	nop
 8003a7c:	370c      	adds	r7, #12
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr

08003a86 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a86:	b480      	push	{r7}
 8003a88:	b083      	sub	sp, #12
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a8e:	bf00      	nop
 8003a90:	370c      	adds	r7, #12
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr
	...

08003a9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b085      	sub	sp, #20
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	4a3a      	ldr	r2, [pc, #232]	; (8003b98 <TIM_Base_SetConfig+0xfc>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d00f      	beq.n	8003ad4 <TIM_Base_SetConfig+0x38>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aba:	d00b      	beq.n	8003ad4 <TIM_Base_SetConfig+0x38>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	4a37      	ldr	r2, [pc, #220]	; (8003b9c <TIM_Base_SetConfig+0x100>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d007      	beq.n	8003ad4 <TIM_Base_SetConfig+0x38>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	4a36      	ldr	r2, [pc, #216]	; (8003ba0 <TIM_Base_SetConfig+0x104>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d003      	beq.n	8003ad4 <TIM_Base_SetConfig+0x38>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	4a35      	ldr	r2, [pc, #212]	; (8003ba4 <TIM_Base_SetConfig+0x108>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d108      	bne.n	8003ae6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ada:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	68fa      	ldr	r2, [r7, #12]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a2b      	ldr	r2, [pc, #172]	; (8003b98 <TIM_Base_SetConfig+0xfc>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d01b      	beq.n	8003b26 <TIM_Base_SetConfig+0x8a>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003af4:	d017      	beq.n	8003b26 <TIM_Base_SetConfig+0x8a>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a28      	ldr	r2, [pc, #160]	; (8003b9c <TIM_Base_SetConfig+0x100>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d013      	beq.n	8003b26 <TIM_Base_SetConfig+0x8a>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a27      	ldr	r2, [pc, #156]	; (8003ba0 <TIM_Base_SetConfig+0x104>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d00f      	beq.n	8003b26 <TIM_Base_SetConfig+0x8a>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a26      	ldr	r2, [pc, #152]	; (8003ba4 <TIM_Base_SetConfig+0x108>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d00b      	beq.n	8003b26 <TIM_Base_SetConfig+0x8a>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a25      	ldr	r2, [pc, #148]	; (8003ba8 <TIM_Base_SetConfig+0x10c>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d007      	beq.n	8003b26 <TIM_Base_SetConfig+0x8a>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a24      	ldr	r2, [pc, #144]	; (8003bac <TIM_Base_SetConfig+0x110>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d003      	beq.n	8003b26 <TIM_Base_SetConfig+0x8a>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a23      	ldr	r2, [pc, #140]	; (8003bb0 <TIM_Base_SetConfig+0x114>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d108      	bne.n	8003b38 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	68fa      	ldr	r2, [r7, #12]
 8003b4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	689a      	ldr	r2, [r3, #8]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	4a0e      	ldr	r2, [pc, #56]	; (8003b98 <TIM_Base_SetConfig+0xfc>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d103      	bne.n	8003b6c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	691a      	ldr	r2, [r3, #16]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d105      	bne.n	8003b8a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	691b      	ldr	r3, [r3, #16]
 8003b82:	f023 0201 	bic.w	r2, r3, #1
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	611a      	str	r2, [r3, #16]
  }
}
 8003b8a:	bf00      	nop
 8003b8c:	3714      	adds	r7, #20
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	40010000 	.word	0x40010000
 8003b9c:	40000400 	.word	0x40000400
 8003ba0:	40000800 	.word	0x40000800
 8003ba4:	40000c00 	.word	0x40000c00
 8003ba8:	40014000 	.word	0x40014000
 8003bac:	40014400 	.word	0x40014400
 8003bb0:	40014800 	.word	0x40014800

08003bb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b087      	sub	sp, #28
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6a1b      	ldr	r3, [r3, #32]
 8003bc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6a1b      	ldr	r3, [r3, #32]
 8003bca:	f023 0201 	bic.w	r2, r3, #1
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	699b      	ldr	r3, [r3, #24]
 8003bd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	011b      	lsls	r3, r3, #4
 8003be4:	693a      	ldr	r2, [r7, #16]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	f023 030a 	bic.w	r3, r3, #10
 8003bf0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003bf2:	697a      	ldr	r2, [r7, #20]
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	693a      	ldr	r2, [r7, #16]
 8003bfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	697a      	ldr	r2, [r7, #20]
 8003c04:	621a      	str	r2, [r3, #32]
}
 8003c06:	bf00      	nop
 8003c08:	371c      	adds	r7, #28
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr

08003c12 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c12:	b480      	push	{r7}
 8003c14:	b087      	sub	sp, #28
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	60f8      	str	r0, [r7, #12]
 8003c1a:	60b9      	str	r1, [r7, #8]
 8003c1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	6a1b      	ldr	r3, [r3, #32]
 8003c22:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6a1b      	ldr	r3, [r3, #32]
 8003c28:	f023 0210 	bic.w	r2, r3, #16
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	699b      	ldr	r3, [r3, #24]
 8003c34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c3c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	031b      	lsls	r3, r3, #12
 8003c42:	693a      	ldr	r2, [r7, #16]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c4e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	011b      	lsls	r3, r3, #4
 8003c54:	697a      	ldr	r2, [r7, #20]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	693a      	ldr	r2, [r7, #16]
 8003c5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	697a      	ldr	r2, [r7, #20]
 8003c64:	621a      	str	r2, [r3, #32]
}
 8003c66:	bf00      	nop
 8003c68:	371c      	adds	r7, #28
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr

08003c72 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c72:	b480      	push	{r7}
 8003c74:	b085      	sub	sp, #20
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
 8003c7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c8a:	683a      	ldr	r2, [r7, #0]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	f043 0307 	orr.w	r3, r3, #7
 8003c94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	68fa      	ldr	r2, [r7, #12]
 8003c9a:	609a      	str	r2, [r3, #8]
}
 8003c9c:	bf00      	nop
 8003c9e:	3714      	adds	r7, #20
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b087      	sub	sp, #28
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	60b9      	str	r1, [r7, #8]
 8003cb2:	607a      	str	r2, [r7, #4]
 8003cb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003cc2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	021a      	lsls	r2, r3, #8
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	431a      	orrs	r2, r3
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	697a      	ldr	r2, [r7, #20]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	697a      	ldr	r2, [r7, #20]
 8003cda:	609a      	str	r2, [r3, #8]
}
 8003cdc:	bf00      	nop
 8003cde:	371c      	adds	r7, #28
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b085      	sub	sp, #20
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d101      	bne.n	8003d00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003cfc:	2302      	movs	r3, #2
 8003cfe:	e050      	b.n	8003da2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2202      	movs	r2, #2
 8003d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68fa      	ldr	r2, [r7, #12]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	68fa      	ldr	r2, [r7, #12]
 8003d38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a1c      	ldr	r2, [pc, #112]	; (8003db0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d018      	beq.n	8003d76 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d4c:	d013      	beq.n	8003d76 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a18      	ldr	r2, [pc, #96]	; (8003db4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d00e      	beq.n	8003d76 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a16      	ldr	r2, [pc, #88]	; (8003db8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d009      	beq.n	8003d76 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a15      	ldr	r2, [pc, #84]	; (8003dbc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d004      	beq.n	8003d76 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a13      	ldr	r2, [pc, #76]	; (8003dc0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d10c      	bne.n	8003d90 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	68ba      	ldr	r2, [r7, #8]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	68ba      	ldr	r2, [r7, #8]
 8003d8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003da0:	2300      	movs	r3, #0
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3714      	adds	r7, #20
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr
 8003dae:	bf00      	nop
 8003db0:	40010000 	.word	0x40010000
 8003db4:	40000400 	.word	0x40000400
 8003db8:	40000800 	.word	0x40000800
 8003dbc:	40000c00 	.word	0x40000c00
 8003dc0:	40014000 	.word	0x40014000

08003dc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003dcc:	bf00      	nop
 8003dce:	370c      	adds	r7, #12
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr

08003dd8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003de0:	bf00      	nop
 8003de2:	370c      	adds	r7, #12
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b085      	sub	sp, #20
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	4603      	mov	r3, r0
 8003df4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003df6:	2300      	movs	r3, #0
 8003df8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003dfa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003dfe:	2b84      	cmp	r3, #132	; 0x84
 8003e00:	d005      	beq.n	8003e0e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003e02:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	4413      	add	r3, r2
 8003e0a:	3303      	adds	r3, #3
 8003e0c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3714      	adds	r7, #20
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003e20:	f000 faf6 	bl	8004410 <vTaskStartScheduler>
  
  return osOK;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	bd80      	pop	{r7, pc}

08003e2a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003e2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e2c:	b089      	sub	sp, #36	; 0x24
 8003e2e:	af04      	add	r7, sp, #16
 8003e30:	6078      	str	r0, [r7, #4]
 8003e32:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	695b      	ldr	r3, [r3, #20]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d020      	beq.n	8003e7e <osThreadCreate+0x54>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	699b      	ldr	r3, [r3, #24]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d01c      	beq.n	8003e7e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685c      	ldr	r4, [r3, #4]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	691e      	ldr	r6, [r3, #16]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e56:	4618      	mov	r0, r3
 8003e58:	f7ff ffc8 	bl	8003dec <makeFreeRtosPriority>
 8003e5c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	695b      	ldr	r3, [r3, #20]
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e66:	9202      	str	r2, [sp, #8]
 8003e68:	9301      	str	r3, [sp, #4]
 8003e6a:	9100      	str	r1, [sp, #0]
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	4632      	mov	r2, r6
 8003e70:	4629      	mov	r1, r5
 8003e72:	4620      	mov	r0, r4
 8003e74:	f000 f8ed 	bl	8004052 <xTaskCreateStatic>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	60fb      	str	r3, [r7, #12]
 8003e7c:	e01c      	b.n	8003eb8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	685c      	ldr	r4, [r3, #4]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e8a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e92:	4618      	mov	r0, r3
 8003e94:	f7ff ffaa 	bl	8003dec <makeFreeRtosPriority>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	f107 030c 	add.w	r3, r7, #12
 8003e9e:	9301      	str	r3, [sp, #4]
 8003ea0:	9200      	str	r2, [sp, #0]
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	4632      	mov	r2, r6
 8003ea6:	4629      	mov	r1, r5
 8003ea8:	4620      	mov	r0, r4
 8003eaa:	f000 f92f 	bl	800410c <xTaskCreate>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d001      	beq.n	8003eb8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	e000      	b.n	8003eba <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3714      	adds	r7, #20
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003ec2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003ec2:	b580      	push	{r7, lr}
 8003ec4:	b084      	sub	sp, #16
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d001      	beq.n	8003ed8 <osDelay+0x16>
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	e000      	b.n	8003eda <osDelay+0x18>
 8003ed8:	2301      	movs	r3, #1
 8003eda:	4618      	mov	r0, r3
 8003edc:	f000 fa64 	bl	80043a8 <vTaskDelay>
  
  return osOK;
 8003ee0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3710      	adds	r7, #16
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}

08003eea <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003eea:	b480      	push	{r7}
 8003eec:	b083      	sub	sp, #12
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f103 0208 	add.w	r2, r3, #8
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f04f 32ff 	mov.w	r2, #4294967295
 8003f02:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f103 0208 	add.w	r2, r3, #8
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f103 0208 	add.w	r2, r3, #8
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003f1e:	bf00      	nop
 8003f20:	370c      	adds	r7, #12
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr

08003f2a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003f2a:	b480      	push	{r7}
 8003f2c:	b083      	sub	sp, #12
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003f38:	bf00      	nop
 8003f3a:	370c      	adds	r7, #12
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f44:	b480      	push	{r7}
 8003f46:	b085      	sub	sp, #20
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	68fa      	ldr	r2, [r7, #12]
 8003f58:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	689a      	ldr	r2, [r3, #8]
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	683a      	ldr	r2, [r7, #0]
 8003f68:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	683a      	ldr	r2, [r7, #0]
 8003f6e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	1c5a      	adds	r2, r3, #1
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	601a      	str	r2, [r3, #0]
}
 8003f80:	bf00      	nop
 8003f82:	3714      	adds	r7, #20
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b085      	sub	sp, #20
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fa2:	d103      	bne.n	8003fac <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	691b      	ldr	r3, [r3, #16]
 8003fa8:	60fb      	str	r3, [r7, #12]
 8003faa:	e00c      	b.n	8003fc6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	3308      	adds	r3, #8
 8003fb0:	60fb      	str	r3, [r7, #12]
 8003fb2:	e002      	b.n	8003fba <vListInsert+0x2e>
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	60fb      	str	r3, [r7, #12]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	68ba      	ldr	r2, [r7, #8]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d2f6      	bcs.n	8003fb4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	685a      	ldr	r2, [r3, #4]
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	683a      	ldr	r2, [r7, #0]
 8003fd4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	68fa      	ldr	r2, [r7, #12]
 8003fda:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	683a      	ldr	r2, [r7, #0]
 8003fe0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	1c5a      	adds	r2, r3, #1
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	601a      	str	r2, [r3, #0]
}
 8003ff2:	bf00      	nop
 8003ff4:	3714      	adds	r7, #20
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr

08003ffe <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003ffe:	b480      	push	{r7}
 8004000:	b085      	sub	sp, #20
 8004002:	af00      	add	r7, sp, #0
 8004004:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	6892      	ldr	r2, [r2, #8]
 8004014:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	6852      	ldr	r2, [r2, #4]
 800401e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	429a      	cmp	r2, r3
 8004028:	d103      	bne.n	8004032 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	689a      	ldr	r2, [r3, #8]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	1e5a      	subs	r2, r3, #1
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
}
 8004046:	4618      	mov	r0, r3
 8004048:	3714      	adds	r7, #20
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr

08004052 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004052:	b580      	push	{r7, lr}
 8004054:	b08e      	sub	sp, #56	; 0x38
 8004056:	af04      	add	r7, sp, #16
 8004058:	60f8      	str	r0, [r7, #12]
 800405a:	60b9      	str	r1, [r7, #8]
 800405c:	607a      	str	r2, [r7, #4]
 800405e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004062:	2b00      	cmp	r3, #0
 8004064:	d10a      	bne.n	800407c <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800406a:	f383 8811 	msr	BASEPRI, r3
 800406e:	f3bf 8f6f 	isb	sy
 8004072:	f3bf 8f4f 	dsb	sy
 8004076:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004078:	bf00      	nop
 800407a:	e7fe      	b.n	800407a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800407c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800407e:	2b00      	cmp	r3, #0
 8004080:	d10a      	bne.n	8004098 <xTaskCreateStatic+0x46>
	__asm volatile
 8004082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004086:	f383 8811 	msr	BASEPRI, r3
 800408a:	f3bf 8f6f 	isb	sy
 800408e:	f3bf 8f4f 	dsb	sy
 8004092:	61fb      	str	r3, [r7, #28]
}
 8004094:	bf00      	nop
 8004096:	e7fe      	b.n	8004096 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004098:	23a0      	movs	r3, #160	; 0xa0
 800409a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	2ba0      	cmp	r3, #160	; 0xa0
 80040a0:	d00a      	beq.n	80040b8 <xTaskCreateStatic+0x66>
	__asm volatile
 80040a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a6:	f383 8811 	msr	BASEPRI, r3
 80040aa:	f3bf 8f6f 	isb	sy
 80040ae:	f3bf 8f4f 	dsb	sy
 80040b2:	61bb      	str	r3, [r7, #24]
}
 80040b4:	bf00      	nop
 80040b6:	e7fe      	b.n	80040b6 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80040b8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80040ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d01e      	beq.n	80040fe <xTaskCreateStatic+0xac>
 80040c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d01b      	beq.n	80040fe <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80040c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040c8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80040ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040ce:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80040d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d2:	2202      	movs	r2, #2
 80040d4:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80040d8:	2300      	movs	r3, #0
 80040da:	9303      	str	r3, [sp, #12]
 80040dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040de:	9302      	str	r3, [sp, #8]
 80040e0:	f107 0314 	add.w	r3, r7, #20
 80040e4:	9301      	str	r3, [sp, #4]
 80040e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e8:	9300      	str	r3, [sp, #0]
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	68b9      	ldr	r1, [r7, #8]
 80040f0:	68f8      	ldr	r0, [r7, #12]
 80040f2:	f000 f851 	bl	8004198 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80040f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80040f8:	f000 f8ec 	bl	80042d4 <prvAddNewTaskToReadyList>
 80040fc:	e001      	b.n	8004102 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80040fe:	2300      	movs	r3, #0
 8004100:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004102:	697b      	ldr	r3, [r7, #20]
	}
 8004104:	4618      	mov	r0, r3
 8004106:	3728      	adds	r7, #40	; 0x28
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800410c:	b580      	push	{r7, lr}
 800410e:	b08c      	sub	sp, #48	; 0x30
 8004110:	af04      	add	r7, sp, #16
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	603b      	str	r3, [r7, #0]
 8004118:	4613      	mov	r3, r2
 800411a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800411c:	88fb      	ldrh	r3, [r7, #6]
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	4618      	mov	r0, r3
 8004122:	f000 fef1 	bl	8004f08 <pvPortMalloc>
 8004126:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00e      	beq.n	800414c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800412e:	20a0      	movs	r0, #160	; 0xa0
 8004130:	f000 feea 	bl	8004f08 <pvPortMalloc>
 8004134:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d003      	beq.n	8004144 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	697a      	ldr	r2, [r7, #20]
 8004140:	631a      	str	r2, [r3, #48]	; 0x30
 8004142:	e005      	b.n	8004150 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004144:	6978      	ldr	r0, [r7, #20]
 8004146:	f000 ffab 	bl	80050a0 <vPortFree>
 800414a:	e001      	b.n	8004150 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800414c:	2300      	movs	r3, #0
 800414e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d017      	beq.n	8004186 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	2200      	movs	r2, #0
 800415a:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800415e:	88fa      	ldrh	r2, [r7, #6]
 8004160:	2300      	movs	r3, #0
 8004162:	9303      	str	r3, [sp, #12]
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	9302      	str	r3, [sp, #8]
 8004168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800416a:	9301      	str	r3, [sp, #4]
 800416c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800416e:	9300      	str	r3, [sp, #0]
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	68b9      	ldr	r1, [r7, #8]
 8004174:	68f8      	ldr	r0, [r7, #12]
 8004176:	f000 f80f 	bl	8004198 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800417a:	69f8      	ldr	r0, [r7, #28]
 800417c:	f000 f8aa 	bl	80042d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004180:	2301      	movs	r3, #1
 8004182:	61bb      	str	r3, [r7, #24]
 8004184:	e002      	b.n	800418c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004186:	f04f 33ff 	mov.w	r3, #4294967295
 800418a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800418c:	69bb      	ldr	r3, [r7, #24]
	}
 800418e:	4618      	mov	r0, r3
 8004190:	3720      	adds	r7, #32
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
	...

08004198 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b088      	sub	sp, #32
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	607a      	str	r2, [r7, #4]
 80041a4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80041a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80041b0:	3b01      	subs	r3, #1
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	4413      	add	r3, r2
 80041b6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	f023 0307 	bic.w	r3, r3, #7
 80041be:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	f003 0307 	and.w	r3, r3, #7
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d00a      	beq.n	80041e0 <prvInitialiseNewTask+0x48>
	__asm volatile
 80041ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ce:	f383 8811 	msr	BASEPRI, r3
 80041d2:	f3bf 8f6f 	isb	sy
 80041d6:	f3bf 8f4f 	dsb	sy
 80041da:	617b      	str	r3, [r7, #20]
}
 80041dc:	bf00      	nop
 80041de:	e7fe      	b.n	80041de <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d01f      	beq.n	8004226 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80041e6:	2300      	movs	r3, #0
 80041e8:	61fb      	str	r3, [r7, #28]
 80041ea:	e012      	b.n	8004212 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80041ec:	68ba      	ldr	r2, [r7, #8]
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	4413      	add	r3, r2
 80041f2:	7819      	ldrb	r1, [r3, #0]
 80041f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	4413      	add	r3, r2
 80041fa:	3334      	adds	r3, #52	; 0x34
 80041fc:	460a      	mov	r2, r1
 80041fe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004200:	68ba      	ldr	r2, [r7, #8]
 8004202:	69fb      	ldr	r3, [r7, #28]
 8004204:	4413      	add	r3, r2
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d006      	beq.n	800421a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	3301      	adds	r3, #1
 8004210:	61fb      	str	r3, [r7, #28]
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	2b0f      	cmp	r3, #15
 8004216:	d9e9      	bls.n	80041ec <prvInitialiseNewTask+0x54>
 8004218:	e000      	b.n	800421c <prvInitialiseNewTask+0x84>
			{
				break;
 800421a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800421c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800421e:	2200      	movs	r2, #0
 8004220:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004224:	e003      	b.n	800422e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004228:	2200      	movs	r2, #0
 800422a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800422e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004230:	2b06      	cmp	r3, #6
 8004232:	d901      	bls.n	8004238 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004234:	2306      	movs	r3, #6
 8004236:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800423a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800423c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800423e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004240:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004242:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004246:	2200      	movs	r2, #0
 8004248:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800424a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800424c:	3304      	adds	r3, #4
 800424e:	4618      	mov	r0, r3
 8004250:	f7ff fe6b 	bl	8003f2a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004256:	3318      	adds	r3, #24
 8004258:	4618      	mov	r0, r3
 800425a:	f7ff fe66 	bl	8003f2a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800425e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004260:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004262:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004266:	f1c3 0207 	rsb	r2, r3, #7
 800426a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800426c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800426e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004270:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004272:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004276:	2200      	movs	r2, #0
 8004278:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800427c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800427e:	2200      	movs	r2, #0
 8004280:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004286:	334c      	adds	r3, #76	; 0x4c
 8004288:	224c      	movs	r2, #76	; 0x4c
 800428a:	2100      	movs	r1, #0
 800428c:	4618      	mov	r0, r3
 800428e:	f001 f845 	bl	800531c <memset>
 8004292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004294:	4a0c      	ldr	r2, [pc, #48]	; (80042c8 <prvInitialiseNewTask+0x130>)
 8004296:	651a      	str	r2, [r3, #80]	; 0x50
 8004298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800429a:	4a0c      	ldr	r2, [pc, #48]	; (80042cc <prvInitialiseNewTask+0x134>)
 800429c:	655a      	str	r2, [r3, #84]	; 0x54
 800429e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a0:	4a0b      	ldr	r2, [pc, #44]	; (80042d0 <prvInitialiseNewTask+0x138>)
 80042a2:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80042a4:	683a      	ldr	r2, [r7, #0]
 80042a6:	68f9      	ldr	r1, [r7, #12]
 80042a8:	69b8      	ldr	r0, [r7, #24]
 80042aa:	f000 fc1f 	bl	8004aec <pxPortInitialiseStack>
 80042ae:	4602      	mov	r2, r0
 80042b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80042b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d002      	beq.n	80042c0 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80042ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042be:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80042c0:	bf00      	nop
 80042c2:	3720      	adds	r7, #32
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	20004268 	.word	0x20004268
 80042cc:	200042d0 	.word	0x200042d0
 80042d0:	20004338 	.word	0x20004338

080042d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b082      	sub	sp, #8
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80042dc:	f000 fd32 	bl	8004d44 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80042e0:	4b2a      	ldr	r3, [pc, #168]	; (800438c <prvAddNewTaskToReadyList+0xb8>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	3301      	adds	r3, #1
 80042e6:	4a29      	ldr	r2, [pc, #164]	; (800438c <prvAddNewTaskToReadyList+0xb8>)
 80042e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80042ea:	4b29      	ldr	r3, [pc, #164]	; (8004390 <prvAddNewTaskToReadyList+0xbc>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d109      	bne.n	8004306 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80042f2:	4a27      	ldr	r2, [pc, #156]	; (8004390 <prvAddNewTaskToReadyList+0xbc>)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80042f8:	4b24      	ldr	r3, [pc, #144]	; (800438c <prvAddNewTaskToReadyList+0xb8>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d110      	bne.n	8004322 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004300:	f000 facc 	bl	800489c <prvInitialiseTaskLists>
 8004304:	e00d      	b.n	8004322 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004306:	4b23      	ldr	r3, [pc, #140]	; (8004394 <prvAddNewTaskToReadyList+0xc0>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d109      	bne.n	8004322 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800430e:	4b20      	ldr	r3, [pc, #128]	; (8004390 <prvAddNewTaskToReadyList+0xbc>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004318:	429a      	cmp	r2, r3
 800431a:	d802      	bhi.n	8004322 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800431c:	4a1c      	ldr	r2, [pc, #112]	; (8004390 <prvAddNewTaskToReadyList+0xbc>)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004322:	4b1d      	ldr	r3, [pc, #116]	; (8004398 <prvAddNewTaskToReadyList+0xc4>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	3301      	adds	r3, #1
 8004328:	4a1b      	ldr	r2, [pc, #108]	; (8004398 <prvAddNewTaskToReadyList+0xc4>)
 800432a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004330:	2201      	movs	r2, #1
 8004332:	409a      	lsls	r2, r3
 8004334:	4b19      	ldr	r3, [pc, #100]	; (800439c <prvAddNewTaskToReadyList+0xc8>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4313      	orrs	r3, r2
 800433a:	4a18      	ldr	r2, [pc, #96]	; (800439c <prvAddNewTaskToReadyList+0xc8>)
 800433c:	6013      	str	r3, [r2, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004342:	4613      	mov	r3, r2
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	4413      	add	r3, r2
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	4a15      	ldr	r2, [pc, #84]	; (80043a0 <prvAddNewTaskToReadyList+0xcc>)
 800434c:	441a      	add	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	3304      	adds	r3, #4
 8004352:	4619      	mov	r1, r3
 8004354:	4610      	mov	r0, r2
 8004356:	f7ff fdf5 	bl	8003f44 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800435a:	f000 fd23 	bl	8004da4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800435e:	4b0d      	ldr	r3, [pc, #52]	; (8004394 <prvAddNewTaskToReadyList+0xc0>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d00e      	beq.n	8004384 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004366:	4b0a      	ldr	r3, [pc, #40]	; (8004390 <prvAddNewTaskToReadyList+0xbc>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004370:	429a      	cmp	r2, r3
 8004372:	d207      	bcs.n	8004384 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004374:	4b0b      	ldr	r3, [pc, #44]	; (80043a4 <prvAddNewTaskToReadyList+0xd0>)
 8004376:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800437a:	601a      	str	r2, [r3, #0]
 800437c:	f3bf 8f4f 	dsb	sy
 8004380:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004384:	bf00      	nop
 8004386:	3708      	adds	r7, #8
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}
 800438c:	20000614 	.word	0x20000614
 8004390:	20000514 	.word	0x20000514
 8004394:	20000620 	.word	0x20000620
 8004398:	20000630 	.word	0x20000630
 800439c:	2000061c 	.word	0x2000061c
 80043a0:	20000518 	.word	0x20000518
 80043a4:	e000ed04 	.word	0xe000ed04

080043a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b084      	sub	sp, #16
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80043b0:	2300      	movs	r3, #0
 80043b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d017      	beq.n	80043ea <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80043ba:	4b13      	ldr	r3, [pc, #76]	; (8004408 <vTaskDelay+0x60>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d00a      	beq.n	80043d8 <vTaskDelay+0x30>
	__asm volatile
 80043c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c6:	f383 8811 	msr	BASEPRI, r3
 80043ca:	f3bf 8f6f 	isb	sy
 80043ce:	f3bf 8f4f 	dsb	sy
 80043d2:	60bb      	str	r3, [r7, #8]
}
 80043d4:	bf00      	nop
 80043d6:	e7fe      	b.n	80043d6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80043d8:	f000 f884 	bl	80044e4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80043dc:	2100      	movs	r1, #0
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f000 fb1e 	bl	8004a20 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80043e4:	f000 f88c 	bl	8004500 <xTaskResumeAll>
 80043e8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d107      	bne.n	8004400 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80043f0:	4b06      	ldr	r3, [pc, #24]	; (800440c <vTaskDelay+0x64>)
 80043f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043f6:	601a      	str	r2, [r3, #0]
 80043f8:	f3bf 8f4f 	dsb	sy
 80043fc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004400:	bf00      	nop
 8004402:	3710      	adds	r7, #16
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}
 8004408:	2000063c 	.word	0x2000063c
 800440c:	e000ed04 	.word	0xe000ed04

08004410 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b08a      	sub	sp, #40	; 0x28
 8004414:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004416:	2300      	movs	r3, #0
 8004418:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800441a:	2300      	movs	r3, #0
 800441c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800441e:	463a      	mov	r2, r7
 8004420:	1d39      	adds	r1, r7, #4
 8004422:	f107 0308 	add.w	r3, r7, #8
 8004426:	4618      	mov	r0, r3
 8004428:	f7fc f950 	bl	80006cc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800442c:	6839      	ldr	r1, [r7, #0]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	68ba      	ldr	r2, [r7, #8]
 8004432:	9202      	str	r2, [sp, #8]
 8004434:	9301      	str	r3, [sp, #4]
 8004436:	2300      	movs	r3, #0
 8004438:	9300      	str	r3, [sp, #0]
 800443a:	2300      	movs	r3, #0
 800443c:	460a      	mov	r2, r1
 800443e:	4921      	ldr	r1, [pc, #132]	; (80044c4 <vTaskStartScheduler+0xb4>)
 8004440:	4821      	ldr	r0, [pc, #132]	; (80044c8 <vTaskStartScheduler+0xb8>)
 8004442:	f7ff fe06 	bl	8004052 <xTaskCreateStatic>
 8004446:	4603      	mov	r3, r0
 8004448:	4a20      	ldr	r2, [pc, #128]	; (80044cc <vTaskStartScheduler+0xbc>)
 800444a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800444c:	4b1f      	ldr	r3, [pc, #124]	; (80044cc <vTaskStartScheduler+0xbc>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d002      	beq.n	800445a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004454:	2301      	movs	r3, #1
 8004456:	617b      	str	r3, [r7, #20]
 8004458:	e001      	b.n	800445e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800445a:	2300      	movs	r3, #0
 800445c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	2b01      	cmp	r3, #1
 8004462:	d11b      	bne.n	800449c <vTaskStartScheduler+0x8c>
	__asm volatile
 8004464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004468:	f383 8811 	msr	BASEPRI, r3
 800446c:	f3bf 8f6f 	isb	sy
 8004470:	f3bf 8f4f 	dsb	sy
 8004474:	613b      	str	r3, [r7, #16]
}
 8004476:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004478:	4b15      	ldr	r3, [pc, #84]	; (80044d0 <vTaskStartScheduler+0xc0>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	334c      	adds	r3, #76	; 0x4c
 800447e:	4a15      	ldr	r2, [pc, #84]	; (80044d4 <vTaskStartScheduler+0xc4>)
 8004480:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004482:	4b15      	ldr	r3, [pc, #84]	; (80044d8 <vTaskStartScheduler+0xc8>)
 8004484:	f04f 32ff 	mov.w	r2, #4294967295
 8004488:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800448a:	4b14      	ldr	r3, [pc, #80]	; (80044dc <vTaskStartScheduler+0xcc>)
 800448c:	2201      	movs	r2, #1
 800448e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004490:	4b13      	ldr	r3, [pc, #76]	; (80044e0 <vTaskStartScheduler+0xd0>)
 8004492:	2200      	movs	r2, #0
 8004494:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004496:	f000 fbb3 	bl	8004c00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800449a:	e00e      	b.n	80044ba <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044a2:	d10a      	bne.n	80044ba <vTaskStartScheduler+0xaa>
	__asm volatile
 80044a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a8:	f383 8811 	msr	BASEPRI, r3
 80044ac:	f3bf 8f6f 	isb	sy
 80044b0:	f3bf 8f4f 	dsb	sy
 80044b4:	60fb      	str	r3, [r7, #12]
}
 80044b6:	bf00      	nop
 80044b8:	e7fe      	b.n	80044b8 <vTaskStartScheduler+0xa8>
}
 80044ba:	bf00      	nop
 80044bc:	3718      	adds	r7, #24
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	08005de0 	.word	0x08005de0
 80044c8:	0800486d 	.word	0x0800486d
 80044cc:	20000638 	.word	0x20000638
 80044d0:	20000514 	.word	0x20000514
 80044d4:	2000011c 	.word	0x2000011c
 80044d8:	20000634 	.word	0x20000634
 80044dc:	20000620 	.word	0x20000620
 80044e0:	20000618 	.word	0x20000618

080044e4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80044e4:	b480      	push	{r7}
 80044e6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80044e8:	4b04      	ldr	r3, [pc, #16]	; (80044fc <vTaskSuspendAll+0x18>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	3301      	adds	r3, #1
 80044ee:	4a03      	ldr	r2, [pc, #12]	; (80044fc <vTaskSuspendAll+0x18>)
 80044f0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80044f2:	bf00      	nop
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr
 80044fc:	2000063c 	.word	0x2000063c

08004500 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004506:	2300      	movs	r3, #0
 8004508:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800450a:	2300      	movs	r3, #0
 800450c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800450e:	4b41      	ldr	r3, [pc, #260]	; (8004614 <xTaskResumeAll+0x114>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d10a      	bne.n	800452c <xTaskResumeAll+0x2c>
	__asm volatile
 8004516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800451a:	f383 8811 	msr	BASEPRI, r3
 800451e:	f3bf 8f6f 	isb	sy
 8004522:	f3bf 8f4f 	dsb	sy
 8004526:	603b      	str	r3, [r7, #0]
}
 8004528:	bf00      	nop
 800452a:	e7fe      	b.n	800452a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800452c:	f000 fc0a 	bl	8004d44 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004530:	4b38      	ldr	r3, [pc, #224]	; (8004614 <xTaskResumeAll+0x114>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	3b01      	subs	r3, #1
 8004536:	4a37      	ldr	r2, [pc, #220]	; (8004614 <xTaskResumeAll+0x114>)
 8004538:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800453a:	4b36      	ldr	r3, [pc, #216]	; (8004614 <xTaskResumeAll+0x114>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d161      	bne.n	8004606 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004542:	4b35      	ldr	r3, [pc, #212]	; (8004618 <xTaskResumeAll+0x118>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d05d      	beq.n	8004606 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800454a:	e02e      	b.n	80045aa <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800454c:	4b33      	ldr	r3, [pc, #204]	; (800461c <xTaskResumeAll+0x11c>)
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	3318      	adds	r3, #24
 8004558:	4618      	mov	r0, r3
 800455a:	f7ff fd50 	bl	8003ffe <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	3304      	adds	r3, #4
 8004562:	4618      	mov	r0, r3
 8004564:	f7ff fd4b 	bl	8003ffe <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800456c:	2201      	movs	r2, #1
 800456e:	409a      	lsls	r2, r3
 8004570:	4b2b      	ldr	r3, [pc, #172]	; (8004620 <xTaskResumeAll+0x120>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4313      	orrs	r3, r2
 8004576:	4a2a      	ldr	r2, [pc, #168]	; (8004620 <xTaskResumeAll+0x120>)
 8004578:	6013      	str	r3, [r2, #0]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800457e:	4613      	mov	r3, r2
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	4413      	add	r3, r2
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	4a27      	ldr	r2, [pc, #156]	; (8004624 <xTaskResumeAll+0x124>)
 8004588:	441a      	add	r2, r3
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	3304      	adds	r3, #4
 800458e:	4619      	mov	r1, r3
 8004590:	4610      	mov	r0, r2
 8004592:	f7ff fcd7 	bl	8003f44 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800459a:	4b23      	ldr	r3, [pc, #140]	; (8004628 <xTaskResumeAll+0x128>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d302      	bcc.n	80045aa <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80045a4:	4b21      	ldr	r3, [pc, #132]	; (800462c <xTaskResumeAll+0x12c>)
 80045a6:	2201      	movs	r2, #1
 80045a8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80045aa:	4b1c      	ldr	r3, [pc, #112]	; (800461c <xTaskResumeAll+0x11c>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d1cc      	bne.n	800454c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d001      	beq.n	80045bc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80045b8:	f000 fa12 	bl	80049e0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80045bc:	4b1c      	ldr	r3, [pc, #112]	; (8004630 <xTaskResumeAll+0x130>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d010      	beq.n	80045ea <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80045c8:	f000 f836 	bl	8004638 <xTaskIncrementTick>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d002      	beq.n	80045d8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80045d2:	4b16      	ldr	r3, [pc, #88]	; (800462c <xTaskResumeAll+0x12c>)
 80045d4:	2201      	movs	r2, #1
 80045d6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	3b01      	subs	r3, #1
 80045dc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d1f1      	bne.n	80045c8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80045e4:	4b12      	ldr	r3, [pc, #72]	; (8004630 <xTaskResumeAll+0x130>)
 80045e6:	2200      	movs	r2, #0
 80045e8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80045ea:	4b10      	ldr	r3, [pc, #64]	; (800462c <xTaskResumeAll+0x12c>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d009      	beq.n	8004606 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80045f2:	2301      	movs	r3, #1
 80045f4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80045f6:	4b0f      	ldr	r3, [pc, #60]	; (8004634 <xTaskResumeAll+0x134>)
 80045f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045fc:	601a      	str	r2, [r3, #0]
 80045fe:	f3bf 8f4f 	dsb	sy
 8004602:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004606:	f000 fbcd 	bl	8004da4 <vPortExitCritical>

	return xAlreadyYielded;
 800460a:	68bb      	ldr	r3, [r7, #8]
}
 800460c:	4618      	mov	r0, r3
 800460e:	3710      	adds	r7, #16
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}
 8004614:	2000063c 	.word	0x2000063c
 8004618:	20000614 	.word	0x20000614
 800461c:	200005d4 	.word	0x200005d4
 8004620:	2000061c 	.word	0x2000061c
 8004624:	20000518 	.word	0x20000518
 8004628:	20000514 	.word	0x20000514
 800462c:	20000628 	.word	0x20000628
 8004630:	20000624 	.word	0x20000624
 8004634:	e000ed04 	.word	0xe000ed04

08004638 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b086      	sub	sp, #24
 800463c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800463e:	2300      	movs	r3, #0
 8004640:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004642:	4b4e      	ldr	r3, [pc, #312]	; (800477c <xTaskIncrementTick+0x144>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2b00      	cmp	r3, #0
 8004648:	f040 808e 	bne.w	8004768 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800464c:	4b4c      	ldr	r3, [pc, #304]	; (8004780 <xTaskIncrementTick+0x148>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	3301      	adds	r3, #1
 8004652:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004654:	4a4a      	ldr	r2, [pc, #296]	; (8004780 <xTaskIncrementTick+0x148>)
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d120      	bne.n	80046a2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004660:	4b48      	ldr	r3, [pc, #288]	; (8004784 <xTaskIncrementTick+0x14c>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d00a      	beq.n	8004680 <xTaskIncrementTick+0x48>
	__asm volatile
 800466a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800466e:	f383 8811 	msr	BASEPRI, r3
 8004672:	f3bf 8f6f 	isb	sy
 8004676:	f3bf 8f4f 	dsb	sy
 800467a:	603b      	str	r3, [r7, #0]
}
 800467c:	bf00      	nop
 800467e:	e7fe      	b.n	800467e <xTaskIncrementTick+0x46>
 8004680:	4b40      	ldr	r3, [pc, #256]	; (8004784 <xTaskIncrementTick+0x14c>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	60fb      	str	r3, [r7, #12]
 8004686:	4b40      	ldr	r3, [pc, #256]	; (8004788 <xTaskIncrementTick+0x150>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a3e      	ldr	r2, [pc, #248]	; (8004784 <xTaskIncrementTick+0x14c>)
 800468c:	6013      	str	r3, [r2, #0]
 800468e:	4a3e      	ldr	r2, [pc, #248]	; (8004788 <xTaskIncrementTick+0x150>)
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6013      	str	r3, [r2, #0]
 8004694:	4b3d      	ldr	r3, [pc, #244]	; (800478c <xTaskIncrementTick+0x154>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	3301      	adds	r3, #1
 800469a:	4a3c      	ldr	r2, [pc, #240]	; (800478c <xTaskIncrementTick+0x154>)
 800469c:	6013      	str	r3, [r2, #0]
 800469e:	f000 f99f 	bl	80049e0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80046a2:	4b3b      	ldr	r3, [pc, #236]	; (8004790 <xTaskIncrementTick+0x158>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	693a      	ldr	r2, [r7, #16]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d348      	bcc.n	800473e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046ac:	4b35      	ldr	r3, [pc, #212]	; (8004784 <xTaskIncrementTick+0x14c>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d104      	bne.n	80046c0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046b6:	4b36      	ldr	r3, [pc, #216]	; (8004790 <xTaskIncrementTick+0x158>)
 80046b8:	f04f 32ff 	mov.w	r2, #4294967295
 80046bc:	601a      	str	r2, [r3, #0]
					break;
 80046be:	e03e      	b.n	800473e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046c0:	4b30      	ldr	r3, [pc, #192]	; (8004784 <xTaskIncrementTick+0x14c>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80046d0:	693a      	ldr	r2, [r7, #16]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d203      	bcs.n	80046e0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80046d8:	4a2d      	ldr	r2, [pc, #180]	; (8004790 <xTaskIncrementTick+0x158>)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80046de:	e02e      	b.n	800473e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	3304      	adds	r3, #4
 80046e4:	4618      	mov	r0, r3
 80046e6:	f7ff fc8a 	bl	8003ffe <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d004      	beq.n	80046fc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	3318      	adds	r3, #24
 80046f6:	4618      	mov	r0, r3
 80046f8:	f7ff fc81 	bl	8003ffe <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004700:	2201      	movs	r2, #1
 8004702:	409a      	lsls	r2, r3
 8004704:	4b23      	ldr	r3, [pc, #140]	; (8004794 <xTaskIncrementTick+0x15c>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4313      	orrs	r3, r2
 800470a:	4a22      	ldr	r2, [pc, #136]	; (8004794 <xTaskIncrementTick+0x15c>)
 800470c:	6013      	str	r3, [r2, #0]
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004712:	4613      	mov	r3, r2
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	4413      	add	r3, r2
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	4a1f      	ldr	r2, [pc, #124]	; (8004798 <xTaskIncrementTick+0x160>)
 800471c:	441a      	add	r2, r3
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	3304      	adds	r3, #4
 8004722:	4619      	mov	r1, r3
 8004724:	4610      	mov	r0, r2
 8004726:	f7ff fc0d 	bl	8003f44 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800472e:	4b1b      	ldr	r3, [pc, #108]	; (800479c <xTaskIncrementTick+0x164>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004734:	429a      	cmp	r2, r3
 8004736:	d3b9      	bcc.n	80046ac <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004738:	2301      	movs	r3, #1
 800473a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800473c:	e7b6      	b.n	80046ac <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800473e:	4b17      	ldr	r3, [pc, #92]	; (800479c <xTaskIncrementTick+0x164>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004744:	4914      	ldr	r1, [pc, #80]	; (8004798 <xTaskIncrementTick+0x160>)
 8004746:	4613      	mov	r3, r2
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	4413      	add	r3, r2
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	440b      	add	r3, r1
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	2b01      	cmp	r3, #1
 8004754:	d901      	bls.n	800475a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8004756:	2301      	movs	r3, #1
 8004758:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800475a:	4b11      	ldr	r3, [pc, #68]	; (80047a0 <xTaskIncrementTick+0x168>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d007      	beq.n	8004772 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004762:	2301      	movs	r3, #1
 8004764:	617b      	str	r3, [r7, #20]
 8004766:	e004      	b.n	8004772 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004768:	4b0e      	ldr	r3, [pc, #56]	; (80047a4 <xTaskIncrementTick+0x16c>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	3301      	adds	r3, #1
 800476e:	4a0d      	ldr	r2, [pc, #52]	; (80047a4 <xTaskIncrementTick+0x16c>)
 8004770:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004772:	697b      	ldr	r3, [r7, #20]
}
 8004774:	4618      	mov	r0, r3
 8004776:	3718      	adds	r7, #24
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}
 800477c:	2000063c 	.word	0x2000063c
 8004780:	20000618 	.word	0x20000618
 8004784:	200005cc 	.word	0x200005cc
 8004788:	200005d0 	.word	0x200005d0
 800478c:	2000062c 	.word	0x2000062c
 8004790:	20000634 	.word	0x20000634
 8004794:	2000061c 	.word	0x2000061c
 8004798:	20000518 	.word	0x20000518
 800479c:	20000514 	.word	0x20000514
 80047a0:	20000628 	.word	0x20000628
 80047a4:	20000624 	.word	0x20000624

080047a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80047a8:	b480      	push	{r7}
 80047aa:	b087      	sub	sp, #28
 80047ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80047ae:	4b29      	ldr	r3, [pc, #164]	; (8004854 <vTaskSwitchContext+0xac>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d003      	beq.n	80047be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80047b6:	4b28      	ldr	r3, [pc, #160]	; (8004858 <vTaskSwitchContext+0xb0>)
 80047b8:	2201      	movs	r2, #1
 80047ba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80047bc:	e044      	b.n	8004848 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80047be:	4b26      	ldr	r3, [pc, #152]	; (8004858 <vTaskSwitchContext+0xb0>)
 80047c0:	2200      	movs	r2, #0
 80047c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047c4:	4b25      	ldr	r3, [pc, #148]	; (800485c <vTaskSwitchContext+0xb4>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	fab3 f383 	clz	r3, r3
 80047d0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80047d2:	7afb      	ldrb	r3, [r7, #11]
 80047d4:	f1c3 031f 	rsb	r3, r3, #31
 80047d8:	617b      	str	r3, [r7, #20]
 80047da:	4921      	ldr	r1, [pc, #132]	; (8004860 <vTaskSwitchContext+0xb8>)
 80047dc:	697a      	ldr	r2, [r7, #20]
 80047de:	4613      	mov	r3, r2
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	4413      	add	r3, r2
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	440b      	add	r3, r1
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d10a      	bne.n	8004804 <vTaskSwitchContext+0x5c>
	__asm volatile
 80047ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f2:	f383 8811 	msr	BASEPRI, r3
 80047f6:	f3bf 8f6f 	isb	sy
 80047fa:	f3bf 8f4f 	dsb	sy
 80047fe:	607b      	str	r3, [r7, #4]
}
 8004800:	bf00      	nop
 8004802:	e7fe      	b.n	8004802 <vTaskSwitchContext+0x5a>
 8004804:	697a      	ldr	r2, [r7, #20]
 8004806:	4613      	mov	r3, r2
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	4413      	add	r3, r2
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	4a14      	ldr	r2, [pc, #80]	; (8004860 <vTaskSwitchContext+0xb8>)
 8004810:	4413      	add	r3, r2
 8004812:	613b      	str	r3, [r7, #16]
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	685a      	ldr	r2, [r3, #4]
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	605a      	str	r2, [r3, #4]
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	685a      	ldr	r2, [r3, #4]
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	3308      	adds	r3, #8
 8004826:	429a      	cmp	r2, r3
 8004828:	d104      	bne.n	8004834 <vTaskSwitchContext+0x8c>
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	685a      	ldr	r2, [r3, #4]
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	605a      	str	r2, [r3, #4]
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	4a0a      	ldr	r2, [pc, #40]	; (8004864 <vTaskSwitchContext+0xbc>)
 800483c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800483e:	4b09      	ldr	r3, [pc, #36]	; (8004864 <vTaskSwitchContext+0xbc>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	334c      	adds	r3, #76	; 0x4c
 8004844:	4a08      	ldr	r2, [pc, #32]	; (8004868 <vTaskSwitchContext+0xc0>)
 8004846:	6013      	str	r3, [r2, #0]
}
 8004848:	bf00      	nop
 800484a:	371c      	adds	r7, #28
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr
 8004854:	2000063c 	.word	0x2000063c
 8004858:	20000628 	.word	0x20000628
 800485c:	2000061c 	.word	0x2000061c
 8004860:	20000518 	.word	0x20000518
 8004864:	20000514 	.word	0x20000514
 8004868:	2000011c 	.word	0x2000011c

0800486c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b082      	sub	sp, #8
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004874:	f000 f852 	bl	800491c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004878:	4b06      	ldr	r3, [pc, #24]	; (8004894 <prvIdleTask+0x28>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2b01      	cmp	r3, #1
 800487e:	d9f9      	bls.n	8004874 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004880:	4b05      	ldr	r3, [pc, #20]	; (8004898 <prvIdleTask+0x2c>)
 8004882:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004886:	601a      	str	r2, [r3, #0]
 8004888:	f3bf 8f4f 	dsb	sy
 800488c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004890:	e7f0      	b.n	8004874 <prvIdleTask+0x8>
 8004892:	bf00      	nop
 8004894:	20000518 	.word	0x20000518
 8004898:	e000ed04 	.word	0xe000ed04

0800489c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b082      	sub	sp, #8
 80048a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80048a2:	2300      	movs	r3, #0
 80048a4:	607b      	str	r3, [r7, #4]
 80048a6:	e00c      	b.n	80048c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80048a8:	687a      	ldr	r2, [r7, #4]
 80048aa:	4613      	mov	r3, r2
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	4413      	add	r3, r2
 80048b0:	009b      	lsls	r3, r3, #2
 80048b2:	4a12      	ldr	r2, [pc, #72]	; (80048fc <prvInitialiseTaskLists+0x60>)
 80048b4:	4413      	add	r3, r2
 80048b6:	4618      	mov	r0, r3
 80048b8:	f7ff fb17 	bl	8003eea <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	3301      	adds	r3, #1
 80048c0:	607b      	str	r3, [r7, #4]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2b06      	cmp	r3, #6
 80048c6:	d9ef      	bls.n	80048a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80048c8:	480d      	ldr	r0, [pc, #52]	; (8004900 <prvInitialiseTaskLists+0x64>)
 80048ca:	f7ff fb0e 	bl	8003eea <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80048ce:	480d      	ldr	r0, [pc, #52]	; (8004904 <prvInitialiseTaskLists+0x68>)
 80048d0:	f7ff fb0b 	bl	8003eea <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80048d4:	480c      	ldr	r0, [pc, #48]	; (8004908 <prvInitialiseTaskLists+0x6c>)
 80048d6:	f7ff fb08 	bl	8003eea <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80048da:	480c      	ldr	r0, [pc, #48]	; (800490c <prvInitialiseTaskLists+0x70>)
 80048dc:	f7ff fb05 	bl	8003eea <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80048e0:	480b      	ldr	r0, [pc, #44]	; (8004910 <prvInitialiseTaskLists+0x74>)
 80048e2:	f7ff fb02 	bl	8003eea <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80048e6:	4b0b      	ldr	r3, [pc, #44]	; (8004914 <prvInitialiseTaskLists+0x78>)
 80048e8:	4a05      	ldr	r2, [pc, #20]	; (8004900 <prvInitialiseTaskLists+0x64>)
 80048ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80048ec:	4b0a      	ldr	r3, [pc, #40]	; (8004918 <prvInitialiseTaskLists+0x7c>)
 80048ee:	4a05      	ldr	r2, [pc, #20]	; (8004904 <prvInitialiseTaskLists+0x68>)
 80048f0:	601a      	str	r2, [r3, #0]
}
 80048f2:	bf00      	nop
 80048f4:	3708      	adds	r7, #8
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	20000518 	.word	0x20000518
 8004900:	200005a4 	.word	0x200005a4
 8004904:	200005b8 	.word	0x200005b8
 8004908:	200005d4 	.word	0x200005d4
 800490c:	200005e8 	.word	0x200005e8
 8004910:	20000600 	.word	0x20000600
 8004914:	200005cc 	.word	0x200005cc
 8004918:	200005d0 	.word	0x200005d0

0800491c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b082      	sub	sp, #8
 8004920:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004922:	e019      	b.n	8004958 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004924:	f000 fa0e 	bl	8004d44 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004928:	4b10      	ldr	r3, [pc, #64]	; (800496c <prvCheckTasksWaitingTermination+0x50>)
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	3304      	adds	r3, #4
 8004934:	4618      	mov	r0, r3
 8004936:	f7ff fb62 	bl	8003ffe <uxListRemove>
				--uxCurrentNumberOfTasks;
 800493a:	4b0d      	ldr	r3, [pc, #52]	; (8004970 <prvCheckTasksWaitingTermination+0x54>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	3b01      	subs	r3, #1
 8004940:	4a0b      	ldr	r2, [pc, #44]	; (8004970 <prvCheckTasksWaitingTermination+0x54>)
 8004942:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004944:	4b0b      	ldr	r3, [pc, #44]	; (8004974 <prvCheckTasksWaitingTermination+0x58>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	3b01      	subs	r3, #1
 800494a:	4a0a      	ldr	r2, [pc, #40]	; (8004974 <prvCheckTasksWaitingTermination+0x58>)
 800494c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800494e:	f000 fa29 	bl	8004da4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 f810 	bl	8004978 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004958:	4b06      	ldr	r3, [pc, #24]	; (8004974 <prvCheckTasksWaitingTermination+0x58>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d1e1      	bne.n	8004924 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004960:	bf00      	nop
 8004962:	bf00      	nop
 8004964:	3708      	adds	r7, #8
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop
 800496c:	200005e8 	.word	0x200005e8
 8004970:	20000614 	.word	0x20000614
 8004974:	200005fc 	.word	0x200005fc

08004978 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004978:	b580      	push	{r7, lr}
 800497a:	b084      	sub	sp, #16
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	334c      	adds	r3, #76	; 0x4c
 8004984:	4618      	mov	r0, r3
 8004986:	f000 fcd1 	bl	800532c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8004990:	2b00      	cmp	r3, #0
 8004992:	d108      	bne.n	80049a6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004998:	4618      	mov	r0, r3
 800499a:	f000 fb81 	bl	80050a0 <vPortFree>
				vPortFree( pxTCB );
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f000 fb7e 	bl	80050a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80049a4:	e018      	b.n	80049d8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d103      	bne.n	80049b8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f000 fb75 	bl	80050a0 <vPortFree>
	}
 80049b6:	e00f      	b.n	80049d8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80049be:	2b02      	cmp	r3, #2
 80049c0:	d00a      	beq.n	80049d8 <prvDeleteTCB+0x60>
	__asm volatile
 80049c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c6:	f383 8811 	msr	BASEPRI, r3
 80049ca:	f3bf 8f6f 	isb	sy
 80049ce:	f3bf 8f4f 	dsb	sy
 80049d2:	60fb      	str	r3, [r7, #12]
}
 80049d4:	bf00      	nop
 80049d6:	e7fe      	b.n	80049d6 <prvDeleteTCB+0x5e>
	}
 80049d8:	bf00      	nop
 80049da:	3710      	adds	r7, #16
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}

080049e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80049e0:	b480      	push	{r7}
 80049e2:	b083      	sub	sp, #12
 80049e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049e6:	4b0c      	ldr	r3, [pc, #48]	; (8004a18 <prvResetNextTaskUnblockTime+0x38>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d104      	bne.n	80049fa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80049f0:	4b0a      	ldr	r3, [pc, #40]	; (8004a1c <prvResetNextTaskUnblockTime+0x3c>)
 80049f2:	f04f 32ff 	mov.w	r2, #4294967295
 80049f6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80049f8:	e008      	b.n	8004a0c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049fa:	4b07      	ldr	r3, [pc, #28]	; (8004a18 <prvResetNextTaskUnblockTime+0x38>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	4a04      	ldr	r2, [pc, #16]	; (8004a1c <prvResetNextTaskUnblockTime+0x3c>)
 8004a0a:	6013      	str	r3, [r2, #0]
}
 8004a0c:	bf00      	nop
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr
 8004a18:	200005cc 	.word	0x200005cc
 8004a1c:	20000634 	.word	0x20000634

08004a20 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004a2a:	4b29      	ldr	r3, [pc, #164]	; (8004ad0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a30:	4b28      	ldr	r3, [pc, #160]	; (8004ad4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	3304      	adds	r3, #4
 8004a36:	4618      	mov	r0, r3
 8004a38:	f7ff fae1 	bl	8003ffe <uxListRemove>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d10b      	bne.n	8004a5a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004a42:	4b24      	ldr	r3, [pc, #144]	; (8004ad4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a48:	2201      	movs	r2, #1
 8004a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a4e:	43da      	mvns	r2, r3
 8004a50:	4b21      	ldr	r3, [pc, #132]	; (8004ad8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4013      	ands	r3, r2
 8004a56:	4a20      	ldr	r2, [pc, #128]	; (8004ad8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004a58:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a60:	d10a      	bne.n	8004a78 <prvAddCurrentTaskToDelayedList+0x58>
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d007      	beq.n	8004a78 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a68:	4b1a      	ldr	r3, [pc, #104]	; (8004ad4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	3304      	adds	r3, #4
 8004a6e:	4619      	mov	r1, r3
 8004a70:	481a      	ldr	r0, [pc, #104]	; (8004adc <prvAddCurrentTaskToDelayedList+0xbc>)
 8004a72:	f7ff fa67 	bl	8003f44 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004a76:	e026      	b.n	8004ac6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004a78:	68fa      	ldr	r2, [r7, #12]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4413      	add	r3, r2
 8004a7e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004a80:	4b14      	ldr	r3, [pc, #80]	; (8004ad4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	68ba      	ldr	r2, [r7, #8]
 8004a86:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004a88:	68ba      	ldr	r2, [r7, #8]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d209      	bcs.n	8004aa4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a90:	4b13      	ldr	r3, [pc, #76]	; (8004ae0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	4b0f      	ldr	r3, [pc, #60]	; (8004ad4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	3304      	adds	r3, #4
 8004a9a:	4619      	mov	r1, r3
 8004a9c:	4610      	mov	r0, r2
 8004a9e:	f7ff fa75 	bl	8003f8c <vListInsert>
}
 8004aa2:	e010      	b.n	8004ac6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004aa4:	4b0f      	ldr	r3, [pc, #60]	; (8004ae4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	4b0a      	ldr	r3, [pc, #40]	; (8004ad4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	3304      	adds	r3, #4
 8004aae:	4619      	mov	r1, r3
 8004ab0:	4610      	mov	r0, r2
 8004ab2:	f7ff fa6b 	bl	8003f8c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004ab6:	4b0c      	ldr	r3, [pc, #48]	; (8004ae8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	68ba      	ldr	r2, [r7, #8]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d202      	bcs.n	8004ac6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004ac0:	4a09      	ldr	r2, [pc, #36]	; (8004ae8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	6013      	str	r3, [r2, #0]
}
 8004ac6:	bf00      	nop
 8004ac8:	3710      	adds	r7, #16
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	bf00      	nop
 8004ad0:	20000618 	.word	0x20000618
 8004ad4:	20000514 	.word	0x20000514
 8004ad8:	2000061c 	.word	0x2000061c
 8004adc:	20000600 	.word	0x20000600
 8004ae0:	200005d0 	.word	0x200005d0
 8004ae4:	200005cc 	.word	0x200005cc
 8004ae8:	20000634 	.word	0x20000634

08004aec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004aec:	b480      	push	{r7}
 8004aee:	b085      	sub	sp, #20
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	60f8      	str	r0, [r7, #12]
 8004af4:	60b9      	str	r1, [r7, #8]
 8004af6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	3b04      	subs	r3, #4
 8004afc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004b04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	3b04      	subs	r3, #4
 8004b0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	f023 0201 	bic.w	r2, r3, #1
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	3b04      	subs	r3, #4
 8004b1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004b1c:	4a0c      	ldr	r2, [pc, #48]	; (8004b50 <pxPortInitialiseStack+0x64>)
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	3b14      	subs	r3, #20
 8004b26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	3b04      	subs	r3, #4
 8004b32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f06f 0202 	mvn.w	r2, #2
 8004b3a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	3b20      	subs	r3, #32
 8004b40:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004b42:	68fb      	ldr	r3, [r7, #12]
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3714      	adds	r7, #20
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr
 8004b50:	08004b55 	.word	0x08004b55

08004b54 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004b54:	b480      	push	{r7}
 8004b56:	b085      	sub	sp, #20
 8004b58:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004b5e:	4b12      	ldr	r3, [pc, #72]	; (8004ba8 <prvTaskExitError+0x54>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b66:	d00a      	beq.n	8004b7e <prvTaskExitError+0x2a>
	__asm volatile
 8004b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b6c:	f383 8811 	msr	BASEPRI, r3
 8004b70:	f3bf 8f6f 	isb	sy
 8004b74:	f3bf 8f4f 	dsb	sy
 8004b78:	60fb      	str	r3, [r7, #12]
}
 8004b7a:	bf00      	nop
 8004b7c:	e7fe      	b.n	8004b7c <prvTaskExitError+0x28>
	__asm volatile
 8004b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b82:	f383 8811 	msr	BASEPRI, r3
 8004b86:	f3bf 8f6f 	isb	sy
 8004b8a:	f3bf 8f4f 	dsb	sy
 8004b8e:	60bb      	str	r3, [r7, #8]
}
 8004b90:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004b92:	bf00      	nop
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d0fc      	beq.n	8004b94 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004b9a:	bf00      	nop
 8004b9c:	bf00      	nop
 8004b9e:	3714      	adds	r7, #20
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr
 8004ba8:	200000cc 	.word	0x200000cc
 8004bac:	00000000 	.word	0x00000000

08004bb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004bb0:	4b07      	ldr	r3, [pc, #28]	; (8004bd0 <pxCurrentTCBConst2>)
 8004bb2:	6819      	ldr	r1, [r3, #0]
 8004bb4:	6808      	ldr	r0, [r1, #0]
 8004bb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bba:	f380 8809 	msr	PSP, r0
 8004bbe:	f3bf 8f6f 	isb	sy
 8004bc2:	f04f 0000 	mov.w	r0, #0
 8004bc6:	f380 8811 	msr	BASEPRI, r0
 8004bca:	4770      	bx	lr
 8004bcc:	f3af 8000 	nop.w

08004bd0 <pxCurrentTCBConst2>:
 8004bd0:	20000514 	.word	0x20000514
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004bd4:	bf00      	nop
 8004bd6:	bf00      	nop

08004bd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004bd8:	4808      	ldr	r0, [pc, #32]	; (8004bfc <prvPortStartFirstTask+0x24>)
 8004bda:	6800      	ldr	r0, [r0, #0]
 8004bdc:	6800      	ldr	r0, [r0, #0]
 8004bde:	f380 8808 	msr	MSP, r0
 8004be2:	f04f 0000 	mov.w	r0, #0
 8004be6:	f380 8814 	msr	CONTROL, r0
 8004bea:	b662      	cpsie	i
 8004bec:	b661      	cpsie	f
 8004bee:	f3bf 8f4f 	dsb	sy
 8004bf2:	f3bf 8f6f 	isb	sy
 8004bf6:	df00      	svc	0
 8004bf8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004bfa:	bf00      	nop
 8004bfc:	e000ed08 	.word	0xe000ed08

08004c00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b086      	sub	sp, #24
 8004c04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004c06:	4b46      	ldr	r3, [pc, #280]	; (8004d20 <xPortStartScheduler+0x120>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a46      	ldr	r2, [pc, #280]	; (8004d24 <xPortStartScheduler+0x124>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d10a      	bne.n	8004c26 <xPortStartScheduler+0x26>
	__asm volatile
 8004c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c14:	f383 8811 	msr	BASEPRI, r3
 8004c18:	f3bf 8f6f 	isb	sy
 8004c1c:	f3bf 8f4f 	dsb	sy
 8004c20:	613b      	str	r3, [r7, #16]
}
 8004c22:	bf00      	nop
 8004c24:	e7fe      	b.n	8004c24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004c26:	4b3e      	ldr	r3, [pc, #248]	; (8004d20 <xPortStartScheduler+0x120>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a3f      	ldr	r2, [pc, #252]	; (8004d28 <xPortStartScheduler+0x128>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d10a      	bne.n	8004c46 <xPortStartScheduler+0x46>
	__asm volatile
 8004c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c34:	f383 8811 	msr	BASEPRI, r3
 8004c38:	f3bf 8f6f 	isb	sy
 8004c3c:	f3bf 8f4f 	dsb	sy
 8004c40:	60fb      	str	r3, [r7, #12]
}
 8004c42:	bf00      	nop
 8004c44:	e7fe      	b.n	8004c44 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004c46:	4b39      	ldr	r3, [pc, #228]	; (8004d2c <xPortStartScheduler+0x12c>)
 8004c48:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	22ff      	movs	r2, #255	; 0xff
 8004c56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004c60:	78fb      	ldrb	r3, [r7, #3]
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004c68:	b2da      	uxtb	r2, r3
 8004c6a:	4b31      	ldr	r3, [pc, #196]	; (8004d30 <xPortStartScheduler+0x130>)
 8004c6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004c6e:	4b31      	ldr	r3, [pc, #196]	; (8004d34 <xPortStartScheduler+0x134>)
 8004c70:	2207      	movs	r2, #7
 8004c72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c74:	e009      	b.n	8004c8a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004c76:	4b2f      	ldr	r3, [pc, #188]	; (8004d34 <xPortStartScheduler+0x134>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	3b01      	subs	r3, #1
 8004c7c:	4a2d      	ldr	r2, [pc, #180]	; (8004d34 <xPortStartScheduler+0x134>)
 8004c7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004c80:	78fb      	ldrb	r3, [r7, #3]
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	005b      	lsls	r3, r3, #1
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c8a:	78fb      	ldrb	r3, [r7, #3]
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c92:	2b80      	cmp	r3, #128	; 0x80
 8004c94:	d0ef      	beq.n	8004c76 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004c96:	4b27      	ldr	r3, [pc, #156]	; (8004d34 <xPortStartScheduler+0x134>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f1c3 0307 	rsb	r3, r3, #7
 8004c9e:	2b04      	cmp	r3, #4
 8004ca0:	d00a      	beq.n	8004cb8 <xPortStartScheduler+0xb8>
	__asm volatile
 8004ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca6:	f383 8811 	msr	BASEPRI, r3
 8004caa:	f3bf 8f6f 	isb	sy
 8004cae:	f3bf 8f4f 	dsb	sy
 8004cb2:	60bb      	str	r3, [r7, #8]
}
 8004cb4:	bf00      	nop
 8004cb6:	e7fe      	b.n	8004cb6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004cb8:	4b1e      	ldr	r3, [pc, #120]	; (8004d34 <xPortStartScheduler+0x134>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	021b      	lsls	r3, r3, #8
 8004cbe:	4a1d      	ldr	r2, [pc, #116]	; (8004d34 <xPortStartScheduler+0x134>)
 8004cc0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004cc2:	4b1c      	ldr	r3, [pc, #112]	; (8004d34 <xPortStartScheduler+0x134>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004cca:	4a1a      	ldr	r2, [pc, #104]	; (8004d34 <xPortStartScheduler+0x134>)
 8004ccc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	b2da      	uxtb	r2, r3
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004cd6:	4b18      	ldr	r3, [pc, #96]	; (8004d38 <xPortStartScheduler+0x138>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a17      	ldr	r2, [pc, #92]	; (8004d38 <xPortStartScheduler+0x138>)
 8004cdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004ce0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004ce2:	4b15      	ldr	r3, [pc, #84]	; (8004d38 <xPortStartScheduler+0x138>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a14      	ldr	r2, [pc, #80]	; (8004d38 <xPortStartScheduler+0x138>)
 8004ce8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004cec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004cee:	f000 f8dd 	bl	8004eac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004cf2:	4b12      	ldr	r3, [pc, #72]	; (8004d3c <xPortStartScheduler+0x13c>)
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004cf8:	f000 f8fc 	bl	8004ef4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004cfc:	4b10      	ldr	r3, [pc, #64]	; (8004d40 <xPortStartScheduler+0x140>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a0f      	ldr	r2, [pc, #60]	; (8004d40 <xPortStartScheduler+0x140>)
 8004d02:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004d06:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004d08:	f7ff ff66 	bl	8004bd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004d0c:	f7ff fd4c 	bl	80047a8 <vTaskSwitchContext>
	prvTaskExitError();
 8004d10:	f7ff ff20 	bl	8004b54 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004d14:	2300      	movs	r3, #0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3718      	adds	r7, #24
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	e000ed00 	.word	0xe000ed00
 8004d24:	410fc271 	.word	0x410fc271
 8004d28:	410fc270 	.word	0x410fc270
 8004d2c:	e000e400 	.word	0xe000e400
 8004d30:	20000640 	.word	0x20000640
 8004d34:	20000644 	.word	0x20000644
 8004d38:	e000ed20 	.word	0xe000ed20
 8004d3c:	200000cc 	.word	0x200000cc
 8004d40:	e000ef34 	.word	0xe000ef34

08004d44 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
	__asm volatile
 8004d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d4e:	f383 8811 	msr	BASEPRI, r3
 8004d52:	f3bf 8f6f 	isb	sy
 8004d56:	f3bf 8f4f 	dsb	sy
 8004d5a:	607b      	str	r3, [r7, #4]
}
 8004d5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004d5e:	4b0f      	ldr	r3, [pc, #60]	; (8004d9c <vPortEnterCritical+0x58>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	3301      	adds	r3, #1
 8004d64:	4a0d      	ldr	r2, [pc, #52]	; (8004d9c <vPortEnterCritical+0x58>)
 8004d66:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004d68:	4b0c      	ldr	r3, [pc, #48]	; (8004d9c <vPortEnterCritical+0x58>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d10f      	bne.n	8004d90 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004d70:	4b0b      	ldr	r3, [pc, #44]	; (8004da0 <vPortEnterCritical+0x5c>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d00a      	beq.n	8004d90 <vPortEnterCritical+0x4c>
	__asm volatile
 8004d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d7e:	f383 8811 	msr	BASEPRI, r3
 8004d82:	f3bf 8f6f 	isb	sy
 8004d86:	f3bf 8f4f 	dsb	sy
 8004d8a:	603b      	str	r3, [r7, #0]
}
 8004d8c:	bf00      	nop
 8004d8e:	e7fe      	b.n	8004d8e <vPortEnterCritical+0x4a>
	}
}
 8004d90:	bf00      	nop
 8004d92:	370c      	adds	r7, #12
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr
 8004d9c:	200000cc 	.word	0x200000cc
 8004da0:	e000ed04 	.word	0xe000ed04

08004da4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004daa:	4b12      	ldr	r3, [pc, #72]	; (8004df4 <vPortExitCritical+0x50>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d10a      	bne.n	8004dc8 <vPortExitCritical+0x24>
	__asm volatile
 8004db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db6:	f383 8811 	msr	BASEPRI, r3
 8004dba:	f3bf 8f6f 	isb	sy
 8004dbe:	f3bf 8f4f 	dsb	sy
 8004dc2:	607b      	str	r3, [r7, #4]
}
 8004dc4:	bf00      	nop
 8004dc6:	e7fe      	b.n	8004dc6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004dc8:	4b0a      	ldr	r3, [pc, #40]	; (8004df4 <vPortExitCritical+0x50>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	3b01      	subs	r3, #1
 8004dce:	4a09      	ldr	r2, [pc, #36]	; (8004df4 <vPortExitCritical+0x50>)
 8004dd0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004dd2:	4b08      	ldr	r3, [pc, #32]	; (8004df4 <vPortExitCritical+0x50>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d105      	bne.n	8004de6 <vPortExitCritical+0x42>
 8004dda:	2300      	movs	r3, #0
 8004ddc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004de4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004de6:	bf00      	nop
 8004de8:	370c      	adds	r7, #12
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr
 8004df2:	bf00      	nop
 8004df4:	200000cc 	.word	0x200000cc
	...

08004e00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004e00:	f3ef 8009 	mrs	r0, PSP
 8004e04:	f3bf 8f6f 	isb	sy
 8004e08:	4b15      	ldr	r3, [pc, #84]	; (8004e60 <pxCurrentTCBConst>)
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	f01e 0f10 	tst.w	lr, #16
 8004e10:	bf08      	it	eq
 8004e12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004e16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e1a:	6010      	str	r0, [r2, #0]
 8004e1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004e20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004e24:	f380 8811 	msr	BASEPRI, r0
 8004e28:	f3bf 8f4f 	dsb	sy
 8004e2c:	f3bf 8f6f 	isb	sy
 8004e30:	f7ff fcba 	bl	80047a8 <vTaskSwitchContext>
 8004e34:	f04f 0000 	mov.w	r0, #0
 8004e38:	f380 8811 	msr	BASEPRI, r0
 8004e3c:	bc09      	pop	{r0, r3}
 8004e3e:	6819      	ldr	r1, [r3, #0]
 8004e40:	6808      	ldr	r0, [r1, #0]
 8004e42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e46:	f01e 0f10 	tst.w	lr, #16
 8004e4a:	bf08      	it	eq
 8004e4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004e50:	f380 8809 	msr	PSP, r0
 8004e54:	f3bf 8f6f 	isb	sy
 8004e58:	4770      	bx	lr
 8004e5a:	bf00      	nop
 8004e5c:	f3af 8000 	nop.w

08004e60 <pxCurrentTCBConst>:
 8004e60:	20000514 	.word	0x20000514
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004e64:	bf00      	nop
 8004e66:	bf00      	nop

08004e68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b082      	sub	sp, #8
 8004e6c:	af00      	add	r7, sp, #0
	__asm volatile
 8004e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e72:	f383 8811 	msr	BASEPRI, r3
 8004e76:	f3bf 8f6f 	isb	sy
 8004e7a:	f3bf 8f4f 	dsb	sy
 8004e7e:	607b      	str	r3, [r7, #4]
}
 8004e80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004e82:	f7ff fbd9 	bl	8004638 <xTaskIncrementTick>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d003      	beq.n	8004e94 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004e8c:	4b06      	ldr	r3, [pc, #24]	; (8004ea8 <SysTick_Handler+0x40>)
 8004e8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e92:	601a      	str	r2, [r3, #0]
 8004e94:	2300      	movs	r3, #0
 8004e96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	f383 8811 	msr	BASEPRI, r3
}
 8004e9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004ea0:	bf00      	nop
 8004ea2:	3708      	adds	r7, #8
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	e000ed04 	.word	0xe000ed04

08004eac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004eac:	b480      	push	{r7}
 8004eae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004eb0:	4b0b      	ldr	r3, [pc, #44]	; (8004ee0 <vPortSetupTimerInterrupt+0x34>)
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004eb6:	4b0b      	ldr	r3, [pc, #44]	; (8004ee4 <vPortSetupTimerInterrupt+0x38>)
 8004eb8:	2200      	movs	r2, #0
 8004eba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004ebc:	4b0a      	ldr	r3, [pc, #40]	; (8004ee8 <vPortSetupTimerInterrupt+0x3c>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a0a      	ldr	r2, [pc, #40]	; (8004eec <vPortSetupTimerInterrupt+0x40>)
 8004ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ec6:	099b      	lsrs	r3, r3, #6
 8004ec8:	4a09      	ldr	r2, [pc, #36]	; (8004ef0 <vPortSetupTimerInterrupt+0x44>)
 8004eca:	3b01      	subs	r3, #1
 8004ecc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004ece:	4b04      	ldr	r3, [pc, #16]	; (8004ee0 <vPortSetupTimerInterrupt+0x34>)
 8004ed0:	2207      	movs	r2, #7
 8004ed2:	601a      	str	r2, [r3, #0]
}
 8004ed4:	bf00      	nop
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr
 8004ede:	bf00      	nop
 8004ee0:	e000e010 	.word	0xe000e010
 8004ee4:	e000e018 	.word	0xe000e018
 8004ee8:	200000c0 	.word	0x200000c0
 8004eec:	10624dd3 	.word	0x10624dd3
 8004ef0:	e000e014 	.word	0xe000e014

08004ef4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004ef4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004f04 <vPortEnableVFP+0x10>
 8004ef8:	6801      	ldr	r1, [r0, #0]
 8004efa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004efe:	6001      	str	r1, [r0, #0]
 8004f00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004f02:	bf00      	nop
 8004f04:	e000ed88 	.word	0xe000ed88

08004f08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b08a      	sub	sp, #40	; 0x28
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004f10:	2300      	movs	r3, #0
 8004f12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004f14:	f7ff fae6 	bl	80044e4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004f18:	4b5b      	ldr	r3, [pc, #364]	; (8005088 <pvPortMalloc+0x180>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d101      	bne.n	8004f24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004f20:	f000 f920 	bl	8005164 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004f24:	4b59      	ldr	r3, [pc, #356]	; (800508c <pvPortMalloc+0x184>)
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	f040 8093 	bne.w	8005058 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d01d      	beq.n	8004f74 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004f38:	2208      	movs	r2, #8
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4413      	add	r3, r2
 8004f3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f003 0307 	and.w	r3, r3, #7
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d014      	beq.n	8004f74 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f023 0307 	bic.w	r3, r3, #7
 8004f50:	3308      	adds	r3, #8
 8004f52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f003 0307 	and.w	r3, r3, #7
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d00a      	beq.n	8004f74 <pvPortMalloc+0x6c>
	__asm volatile
 8004f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f62:	f383 8811 	msr	BASEPRI, r3
 8004f66:	f3bf 8f6f 	isb	sy
 8004f6a:	f3bf 8f4f 	dsb	sy
 8004f6e:	617b      	str	r3, [r7, #20]
}
 8004f70:	bf00      	nop
 8004f72:	e7fe      	b.n	8004f72 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d06e      	beq.n	8005058 <pvPortMalloc+0x150>
 8004f7a:	4b45      	ldr	r3, [pc, #276]	; (8005090 <pvPortMalloc+0x188>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d869      	bhi.n	8005058 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004f84:	4b43      	ldr	r3, [pc, #268]	; (8005094 <pvPortMalloc+0x18c>)
 8004f86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004f88:	4b42      	ldr	r3, [pc, #264]	; (8005094 <pvPortMalloc+0x18c>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004f8e:	e004      	b.n	8004f9a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d903      	bls.n	8004fac <pvPortMalloc+0xa4>
 8004fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d1f1      	bne.n	8004f90 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004fac:	4b36      	ldr	r3, [pc, #216]	; (8005088 <pvPortMalloc+0x180>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d050      	beq.n	8005058 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004fb6:	6a3b      	ldr	r3, [r7, #32]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	2208      	movs	r2, #8
 8004fbc:	4413      	add	r3, r2
 8004fbe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	6a3b      	ldr	r3, [r7, #32]
 8004fc6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fca:	685a      	ldr	r2, [r3, #4]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	1ad2      	subs	r2, r2, r3
 8004fd0:	2308      	movs	r3, #8
 8004fd2:	005b      	lsls	r3, r3, #1
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d91f      	bls.n	8005018 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004fd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4413      	add	r3, r2
 8004fde:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004fe0:	69bb      	ldr	r3, [r7, #24]
 8004fe2:	f003 0307 	and.w	r3, r3, #7
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d00a      	beq.n	8005000 <pvPortMalloc+0xf8>
	__asm volatile
 8004fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fee:	f383 8811 	msr	BASEPRI, r3
 8004ff2:	f3bf 8f6f 	isb	sy
 8004ff6:	f3bf 8f4f 	dsb	sy
 8004ffa:	613b      	str	r3, [r7, #16]
}
 8004ffc:	bf00      	nop
 8004ffe:	e7fe      	b.n	8004ffe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005002:	685a      	ldr	r2, [r3, #4]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	1ad2      	subs	r2, r2, r3
 8005008:	69bb      	ldr	r3, [r7, #24]
 800500a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800500c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005012:	69b8      	ldr	r0, [r7, #24]
 8005014:	f000 f908 	bl	8005228 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005018:	4b1d      	ldr	r3, [pc, #116]	; (8005090 <pvPortMalloc+0x188>)
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	4a1b      	ldr	r2, [pc, #108]	; (8005090 <pvPortMalloc+0x188>)
 8005024:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005026:	4b1a      	ldr	r3, [pc, #104]	; (8005090 <pvPortMalloc+0x188>)
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	4b1b      	ldr	r3, [pc, #108]	; (8005098 <pvPortMalloc+0x190>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	429a      	cmp	r2, r3
 8005030:	d203      	bcs.n	800503a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005032:	4b17      	ldr	r3, [pc, #92]	; (8005090 <pvPortMalloc+0x188>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a18      	ldr	r2, [pc, #96]	; (8005098 <pvPortMalloc+0x190>)
 8005038:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800503a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503c:	685a      	ldr	r2, [r3, #4]
 800503e:	4b13      	ldr	r3, [pc, #76]	; (800508c <pvPortMalloc+0x184>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	431a      	orrs	r2, r3
 8005044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005046:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504a:	2200      	movs	r2, #0
 800504c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800504e:	4b13      	ldr	r3, [pc, #76]	; (800509c <pvPortMalloc+0x194>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	3301      	adds	r3, #1
 8005054:	4a11      	ldr	r2, [pc, #68]	; (800509c <pvPortMalloc+0x194>)
 8005056:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005058:	f7ff fa52 	bl	8004500 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	f003 0307 	and.w	r3, r3, #7
 8005062:	2b00      	cmp	r3, #0
 8005064:	d00a      	beq.n	800507c <pvPortMalloc+0x174>
	__asm volatile
 8005066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800506a:	f383 8811 	msr	BASEPRI, r3
 800506e:	f3bf 8f6f 	isb	sy
 8005072:	f3bf 8f4f 	dsb	sy
 8005076:	60fb      	str	r3, [r7, #12]
}
 8005078:	bf00      	nop
 800507a:	e7fe      	b.n	800507a <pvPortMalloc+0x172>
	return pvReturn;
 800507c:	69fb      	ldr	r3, [r7, #28]
}
 800507e:	4618      	mov	r0, r3
 8005080:	3728      	adds	r7, #40	; 0x28
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}
 8005086:	bf00      	nop
 8005088:	20004250 	.word	0x20004250
 800508c:	20004264 	.word	0x20004264
 8005090:	20004254 	.word	0x20004254
 8005094:	20004248 	.word	0x20004248
 8005098:	20004258 	.word	0x20004258
 800509c:	2000425c 	.word	0x2000425c

080050a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b086      	sub	sp, #24
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d04d      	beq.n	800514e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80050b2:	2308      	movs	r3, #8
 80050b4:	425b      	negs	r3, r3
 80050b6:	697a      	ldr	r2, [r7, #20]
 80050b8:	4413      	add	r3, r2
 80050ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	685a      	ldr	r2, [r3, #4]
 80050c4:	4b24      	ldr	r3, [pc, #144]	; (8005158 <vPortFree+0xb8>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4013      	ands	r3, r2
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d10a      	bne.n	80050e4 <vPortFree+0x44>
	__asm volatile
 80050ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d2:	f383 8811 	msr	BASEPRI, r3
 80050d6:	f3bf 8f6f 	isb	sy
 80050da:	f3bf 8f4f 	dsb	sy
 80050de:	60fb      	str	r3, [r7, #12]
}
 80050e0:	bf00      	nop
 80050e2:	e7fe      	b.n	80050e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d00a      	beq.n	8005102 <vPortFree+0x62>
	__asm volatile
 80050ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f0:	f383 8811 	msr	BASEPRI, r3
 80050f4:	f3bf 8f6f 	isb	sy
 80050f8:	f3bf 8f4f 	dsb	sy
 80050fc:	60bb      	str	r3, [r7, #8]
}
 80050fe:	bf00      	nop
 8005100:	e7fe      	b.n	8005100 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	685a      	ldr	r2, [r3, #4]
 8005106:	4b14      	ldr	r3, [pc, #80]	; (8005158 <vPortFree+0xb8>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4013      	ands	r3, r2
 800510c:	2b00      	cmp	r3, #0
 800510e:	d01e      	beq.n	800514e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d11a      	bne.n	800514e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	685a      	ldr	r2, [r3, #4]
 800511c:	4b0e      	ldr	r3, [pc, #56]	; (8005158 <vPortFree+0xb8>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	43db      	mvns	r3, r3
 8005122:	401a      	ands	r2, r3
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005128:	f7ff f9dc 	bl	80044e4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	685a      	ldr	r2, [r3, #4]
 8005130:	4b0a      	ldr	r3, [pc, #40]	; (800515c <vPortFree+0xbc>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4413      	add	r3, r2
 8005136:	4a09      	ldr	r2, [pc, #36]	; (800515c <vPortFree+0xbc>)
 8005138:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800513a:	6938      	ldr	r0, [r7, #16]
 800513c:	f000 f874 	bl	8005228 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005140:	4b07      	ldr	r3, [pc, #28]	; (8005160 <vPortFree+0xc0>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	3301      	adds	r3, #1
 8005146:	4a06      	ldr	r2, [pc, #24]	; (8005160 <vPortFree+0xc0>)
 8005148:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800514a:	f7ff f9d9 	bl	8004500 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800514e:	bf00      	nop
 8005150:	3718      	adds	r7, #24
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop
 8005158:	20004264 	.word	0x20004264
 800515c:	20004254 	.word	0x20004254
 8005160:	20004260 	.word	0x20004260

08005164 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005164:	b480      	push	{r7}
 8005166:	b085      	sub	sp, #20
 8005168:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800516a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800516e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005170:	4b27      	ldr	r3, [pc, #156]	; (8005210 <prvHeapInit+0xac>)
 8005172:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f003 0307 	and.w	r3, r3, #7
 800517a:	2b00      	cmp	r3, #0
 800517c:	d00c      	beq.n	8005198 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	3307      	adds	r3, #7
 8005182:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f023 0307 	bic.w	r3, r3, #7
 800518a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800518c:	68ba      	ldr	r2, [r7, #8]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	4a1f      	ldr	r2, [pc, #124]	; (8005210 <prvHeapInit+0xac>)
 8005194:	4413      	add	r3, r2
 8005196:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800519c:	4a1d      	ldr	r2, [pc, #116]	; (8005214 <prvHeapInit+0xb0>)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80051a2:	4b1c      	ldr	r3, [pc, #112]	; (8005214 <prvHeapInit+0xb0>)
 80051a4:	2200      	movs	r2, #0
 80051a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	68ba      	ldr	r2, [r7, #8]
 80051ac:	4413      	add	r3, r2
 80051ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80051b0:	2208      	movs	r2, #8
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	1a9b      	subs	r3, r3, r2
 80051b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f023 0307 	bic.w	r3, r3, #7
 80051be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	4a15      	ldr	r2, [pc, #84]	; (8005218 <prvHeapInit+0xb4>)
 80051c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80051c6:	4b14      	ldr	r3, [pc, #80]	; (8005218 <prvHeapInit+0xb4>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	2200      	movs	r2, #0
 80051cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80051ce:	4b12      	ldr	r3, [pc, #72]	; (8005218 <prvHeapInit+0xb4>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	2200      	movs	r2, #0
 80051d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	68fa      	ldr	r2, [r7, #12]
 80051de:	1ad2      	subs	r2, r2, r3
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80051e4:	4b0c      	ldr	r3, [pc, #48]	; (8005218 <prvHeapInit+0xb4>)
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	4a0a      	ldr	r2, [pc, #40]	; (800521c <prvHeapInit+0xb8>)
 80051f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	4a09      	ldr	r2, [pc, #36]	; (8005220 <prvHeapInit+0xbc>)
 80051fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80051fc:	4b09      	ldr	r3, [pc, #36]	; (8005224 <prvHeapInit+0xc0>)
 80051fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005202:	601a      	str	r2, [r3, #0]
}
 8005204:	bf00      	nop
 8005206:	3714      	adds	r7, #20
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr
 8005210:	20000648 	.word	0x20000648
 8005214:	20004248 	.word	0x20004248
 8005218:	20004250 	.word	0x20004250
 800521c:	20004258 	.word	0x20004258
 8005220:	20004254 	.word	0x20004254
 8005224:	20004264 	.word	0x20004264

08005228 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005228:	b480      	push	{r7}
 800522a:	b085      	sub	sp, #20
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005230:	4b28      	ldr	r3, [pc, #160]	; (80052d4 <prvInsertBlockIntoFreeList+0xac>)
 8005232:	60fb      	str	r3, [r7, #12]
 8005234:	e002      	b.n	800523c <prvInsertBlockIntoFreeList+0x14>
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	60fb      	str	r3, [r7, #12]
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	429a      	cmp	r2, r3
 8005244:	d8f7      	bhi.n	8005236 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	68ba      	ldr	r2, [r7, #8]
 8005250:	4413      	add	r3, r2
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	429a      	cmp	r2, r3
 8005256:	d108      	bne.n	800526a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	685a      	ldr	r2, [r3, #4]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	441a      	add	r2, r3
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	68ba      	ldr	r2, [r7, #8]
 8005274:	441a      	add	r2, r3
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	429a      	cmp	r2, r3
 800527c:	d118      	bne.n	80052b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	4b15      	ldr	r3, [pc, #84]	; (80052d8 <prvInsertBlockIntoFreeList+0xb0>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	429a      	cmp	r2, r3
 8005288:	d00d      	beq.n	80052a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	685a      	ldr	r2, [r3, #4]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	441a      	add	r2, r3
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	601a      	str	r2, [r3, #0]
 80052a4:	e008      	b.n	80052b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80052a6:	4b0c      	ldr	r3, [pc, #48]	; (80052d8 <prvInsertBlockIntoFreeList+0xb0>)
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	601a      	str	r2, [r3, #0]
 80052ae:	e003      	b.n	80052b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80052b8:	68fa      	ldr	r2, [r7, #12]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	429a      	cmp	r2, r3
 80052be:	d002      	beq.n	80052c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80052c6:	bf00      	nop
 80052c8:	3714      	adds	r7, #20
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr
 80052d2:	bf00      	nop
 80052d4:	20004248 	.word	0x20004248
 80052d8:	20004250 	.word	0x20004250

080052dc <siprintf>:
 80052dc:	b40e      	push	{r1, r2, r3}
 80052de:	b500      	push	{lr}
 80052e0:	b09c      	sub	sp, #112	; 0x70
 80052e2:	ab1d      	add	r3, sp, #116	; 0x74
 80052e4:	9002      	str	r0, [sp, #8]
 80052e6:	9006      	str	r0, [sp, #24]
 80052e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80052ec:	4809      	ldr	r0, [pc, #36]	; (8005314 <siprintf+0x38>)
 80052ee:	9107      	str	r1, [sp, #28]
 80052f0:	9104      	str	r1, [sp, #16]
 80052f2:	4909      	ldr	r1, [pc, #36]	; (8005318 <siprintf+0x3c>)
 80052f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80052f8:	9105      	str	r1, [sp, #20]
 80052fa:	6800      	ldr	r0, [r0, #0]
 80052fc:	9301      	str	r3, [sp, #4]
 80052fe:	a902      	add	r1, sp, #8
 8005300:	f000 f9f6 	bl	80056f0 <_svfiprintf_r>
 8005304:	9b02      	ldr	r3, [sp, #8]
 8005306:	2200      	movs	r2, #0
 8005308:	701a      	strb	r2, [r3, #0]
 800530a:	b01c      	add	sp, #112	; 0x70
 800530c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005310:	b003      	add	sp, #12
 8005312:	4770      	bx	lr
 8005314:	2000011c 	.word	0x2000011c
 8005318:	ffff0208 	.word	0xffff0208

0800531c <memset>:
 800531c:	4402      	add	r2, r0
 800531e:	4603      	mov	r3, r0
 8005320:	4293      	cmp	r3, r2
 8005322:	d100      	bne.n	8005326 <memset+0xa>
 8005324:	4770      	bx	lr
 8005326:	f803 1b01 	strb.w	r1, [r3], #1
 800532a:	e7f9      	b.n	8005320 <memset+0x4>

0800532c <_reclaim_reent>:
 800532c:	4b29      	ldr	r3, [pc, #164]	; (80053d4 <_reclaim_reent+0xa8>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4283      	cmp	r3, r0
 8005332:	b570      	push	{r4, r5, r6, lr}
 8005334:	4604      	mov	r4, r0
 8005336:	d04b      	beq.n	80053d0 <_reclaim_reent+0xa4>
 8005338:	69c3      	ldr	r3, [r0, #28]
 800533a:	b143      	cbz	r3, 800534e <_reclaim_reent+0x22>
 800533c:	68db      	ldr	r3, [r3, #12]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d144      	bne.n	80053cc <_reclaim_reent+0xa0>
 8005342:	69e3      	ldr	r3, [r4, #28]
 8005344:	6819      	ldr	r1, [r3, #0]
 8005346:	b111      	cbz	r1, 800534e <_reclaim_reent+0x22>
 8005348:	4620      	mov	r0, r4
 800534a:	f000 f87f 	bl	800544c <_free_r>
 800534e:	6961      	ldr	r1, [r4, #20]
 8005350:	b111      	cbz	r1, 8005358 <_reclaim_reent+0x2c>
 8005352:	4620      	mov	r0, r4
 8005354:	f000 f87a 	bl	800544c <_free_r>
 8005358:	69e1      	ldr	r1, [r4, #28]
 800535a:	b111      	cbz	r1, 8005362 <_reclaim_reent+0x36>
 800535c:	4620      	mov	r0, r4
 800535e:	f000 f875 	bl	800544c <_free_r>
 8005362:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005364:	b111      	cbz	r1, 800536c <_reclaim_reent+0x40>
 8005366:	4620      	mov	r0, r4
 8005368:	f000 f870 	bl	800544c <_free_r>
 800536c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800536e:	b111      	cbz	r1, 8005376 <_reclaim_reent+0x4a>
 8005370:	4620      	mov	r0, r4
 8005372:	f000 f86b 	bl	800544c <_free_r>
 8005376:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005378:	b111      	cbz	r1, 8005380 <_reclaim_reent+0x54>
 800537a:	4620      	mov	r0, r4
 800537c:	f000 f866 	bl	800544c <_free_r>
 8005380:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005382:	b111      	cbz	r1, 800538a <_reclaim_reent+0x5e>
 8005384:	4620      	mov	r0, r4
 8005386:	f000 f861 	bl	800544c <_free_r>
 800538a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800538c:	b111      	cbz	r1, 8005394 <_reclaim_reent+0x68>
 800538e:	4620      	mov	r0, r4
 8005390:	f000 f85c 	bl	800544c <_free_r>
 8005394:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005396:	b111      	cbz	r1, 800539e <_reclaim_reent+0x72>
 8005398:	4620      	mov	r0, r4
 800539a:	f000 f857 	bl	800544c <_free_r>
 800539e:	6a23      	ldr	r3, [r4, #32]
 80053a0:	b1b3      	cbz	r3, 80053d0 <_reclaim_reent+0xa4>
 80053a2:	4620      	mov	r0, r4
 80053a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80053a8:	4718      	bx	r3
 80053aa:	5949      	ldr	r1, [r1, r5]
 80053ac:	b941      	cbnz	r1, 80053c0 <_reclaim_reent+0x94>
 80053ae:	3504      	adds	r5, #4
 80053b0:	69e3      	ldr	r3, [r4, #28]
 80053b2:	2d80      	cmp	r5, #128	; 0x80
 80053b4:	68d9      	ldr	r1, [r3, #12]
 80053b6:	d1f8      	bne.n	80053aa <_reclaim_reent+0x7e>
 80053b8:	4620      	mov	r0, r4
 80053ba:	f000 f847 	bl	800544c <_free_r>
 80053be:	e7c0      	b.n	8005342 <_reclaim_reent+0x16>
 80053c0:	680e      	ldr	r6, [r1, #0]
 80053c2:	4620      	mov	r0, r4
 80053c4:	f000 f842 	bl	800544c <_free_r>
 80053c8:	4631      	mov	r1, r6
 80053ca:	e7ef      	b.n	80053ac <_reclaim_reent+0x80>
 80053cc:	2500      	movs	r5, #0
 80053ce:	e7ef      	b.n	80053b0 <_reclaim_reent+0x84>
 80053d0:	bd70      	pop	{r4, r5, r6, pc}
 80053d2:	bf00      	nop
 80053d4:	2000011c 	.word	0x2000011c

080053d8 <__errno>:
 80053d8:	4b01      	ldr	r3, [pc, #4]	; (80053e0 <__errno+0x8>)
 80053da:	6818      	ldr	r0, [r3, #0]
 80053dc:	4770      	bx	lr
 80053de:	bf00      	nop
 80053e0:	2000011c 	.word	0x2000011c

080053e4 <__libc_init_array>:
 80053e4:	b570      	push	{r4, r5, r6, lr}
 80053e6:	4d0d      	ldr	r5, [pc, #52]	; (800541c <__libc_init_array+0x38>)
 80053e8:	4c0d      	ldr	r4, [pc, #52]	; (8005420 <__libc_init_array+0x3c>)
 80053ea:	1b64      	subs	r4, r4, r5
 80053ec:	10a4      	asrs	r4, r4, #2
 80053ee:	2600      	movs	r6, #0
 80053f0:	42a6      	cmp	r6, r4
 80053f2:	d109      	bne.n	8005408 <__libc_init_array+0x24>
 80053f4:	4d0b      	ldr	r5, [pc, #44]	; (8005424 <__libc_init_array+0x40>)
 80053f6:	4c0c      	ldr	r4, [pc, #48]	; (8005428 <__libc_init_array+0x44>)
 80053f8:	f000 fc6a 	bl	8005cd0 <_init>
 80053fc:	1b64      	subs	r4, r4, r5
 80053fe:	10a4      	asrs	r4, r4, #2
 8005400:	2600      	movs	r6, #0
 8005402:	42a6      	cmp	r6, r4
 8005404:	d105      	bne.n	8005412 <__libc_init_array+0x2e>
 8005406:	bd70      	pop	{r4, r5, r6, pc}
 8005408:	f855 3b04 	ldr.w	r3, [r5], #4
 800540c:	4798      	blx	r3
 800540e:	3601      	adds	r6, #1
 8005410:	e7ee      	b.n	80053f0 <__libc_init_array+0xc>
 8005412:	f855 3b04 	ldr.w	r3, [r5], #4
 8005416:	4798      	blx	r3
 8005418:	3601      	adds	r6, #1
 800541a:	e7f2      	b.n	8005402 <__libc_init_array+0x1e>
 800541c:	08005e3c 	.word	0x08005e3c
 8005420:	08005e3c 	.word	0x08005e3c
 8005424:	08005e3c 	.word	0x08005e3c
 8005428:	08005e40 	.word	0x08005e40

0800542c <__retarget_lock_acquire_recursive>:
 800542c:	4770      	bx	lr

0800542e <__retarget_lock_release_recursive>:
 800542e:	4770      	bx	lr

08005430 <memcpy>:
 8005430:	440a      	add	r2, r1
 8005432:	4291      	cmp	r1, r2
 8005434:	f100 33ff 	add.w	r3, r0, #4294967295
 8005438:	d100      	bne.n	800543c <memcpy+0xc>
 800543a:	4770      	bx	lr
 800543c:	b510      	push	{r4, lr}
 800543e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005442:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005446:	4291      	cmp	r1, r2
 8005448:	d1f9      	bne.n	800543e <memcpy+0xe>
 800544a:	bd10      	pop	{r4, pc}

0800544c <_free_r>:
 800544c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800544e:	2900      	cmp	r1, #0
 8005450:	d044      	beq.n	80054dc <_free_r+0x90>
 8005452:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005456:	9001      	str	r0, [sp, #4]
 8005458:	2b00      	cmp	r3, #0
 800545a:	f1a1 0404 	sub.w	r4, r1, #4
 800545e:	bfb8      	it	lt
 8005460:	18e4      	addlt	r4, r4, r3
 8005462:	f000 f8df 	bl	8005624 <__malloc_lock>
 8005466:	4a1e      	ldr	r2, [pc, #120]	; (80054e0 <_free_r+0x94>)
 8005468:	9801      	ldr	r0, [sp, #4]
 800546a:	6813      	ldr	r3, [r2, #0]
 800546c:	b933      	cbnz	r3, 800547c <_free_r+0x30>
 800546e:	6063      	str	r3, [r4, #4]
 8005470:	6014      	str	r4, [r2, #0]
 8005472:	b003      	add	sp, #12
 8005474:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005478:	f000 b8da 	b.w	8005630 <__malloc_unlock>
 800547c:	42a3      	cmp	r3, r4
 800547e:	d908      	bls.n	8005492 <_free_r+0x46>
 8005480:	6825      	ldr	r5, [r4, #0]
 8005482:	1961      	adds	r1, r4, r5
 8005484:	428b      	cmp	r3, r1
 8005486:	bf01      	itttt	eq
 8005488:	6819      	ldreq	r1, [r3, #0]
 800548a:	685b      	ldreq	r3, [r3, #4]
 800548c:	1949      	addeq	r1, r1, r5
 800548e:	6021      	streq	r1, [r4, #0]
 8005490:	e7ed      	b.n	800546e <_free_r+0x22>
 8005492:	461a      	mov	r2, r3
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	b10b      	cbz	r3, 800549c <_free_r+0x50>
 8005498:	42a3      	cmp	r3, r4
 800549a:	d9fa      	bls.n	8005492 <_free_r+0x46>
 800549c:	6811      	ldr	r1, [r2, #0]
 800549e:	1855      	adds	r5, r2, r1
 80054a0:	42a5      	cmp	r5, r4
 80054a2:	d10b      	bne.n	80054bc <_free_r+0x70>
 80054a4:	6824      	ldr	r4, [r4, #0]
 80054a6:	4421      	add	r1, r4
 80054a8:	1854      	adds	r4, r2, r1
 80054aa:	42a3      	cmp	r3, r4
 80054ac:	6011      	str	r1, [r2, #0]
 80054ae:	d1e0      	bne.n	8005472 <_free_r+0x26>
 80054b0:	681c      	ldr	r4, [r3, #0]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	6053      	str	r3, [r2, #4]
 80054b6:	440c      	add	r4, r1
 80054b8:	6014      	str	r4, [r2, #0]
 80054ba:	e7da      	b.n	8005472 <_free_r+0x26>
 80054bc:	d902      	bls.n	80054c4 <_free_r+0x78>
 80054be:	230c      	movs	r3, #12
 80054c0:	6003      	str	r3, [r0, #0]
 80054c2:	e7d6      	b.n	8005472 <_free_r+0x26>
 80054c4:	6825      	ldr	r5, [r4, #0]
 80054c6:	1961      	adds	r1, r4, r5
 80054c8:	428b      	cmp	r3, r1
 80054ca:	bf04      	itt	eq
 80054cc:	6819      	ldreq	r1, [r3, #0]
 80054ce:	685b      	ldreq	r3, [r3, #4]
 80054d0:	6063      	str	r3, [r4, #4]
 80054d2:	bf04      	itt	eq
 80054d4:	1949      	addeq	r1, r1, r5
 80054d6:	6021      	streq	r1, [r4, #0]
 80054d8:	6054      	str	r4, [r2, #4]
 80054da:	e7ca      	b.n	8005472 <_free_r+0x26>
 80054dc:	b003      	add	sp, #12
 80054de:	bd30      	pop	{r4, r5, pc}
 80054e0:	200043a8 	.word	0x200043a8

080054e4 <sbrk_aligned>:
 80054e4:	b570      	push	{r4, r5, r6, lr}
 80054e6:	4e0e      	ldr	r6, [pc, #56]	; (8005520 <sbrk_aligned+0x3c>)
 80054e8:	460c      	mov	r4, r1
 80054ea:	6831      	ldr	r1, [r6, #0]
 80054ec:	4605      	mov	r5, r0
 80054ee:	b911      	cbnz	r1, 80054f6 <sbrk_aligned+0x12>
 80054f0:	f000 fba6 	bl	8005c40 <_sbrk_r>
 80054f4:	6030      	str	r0, [r6, #0]
 80054f6:	4621      	mov	r1, r4
 80054f8:	4628      	mov	r0, r5
 80054fa:	f000 fba1 	bl	8005c40 <_sbrk_r>
 80054fe:	1c43      	adds	r3, r0, #1
 8005500:	d00a      	beq.n	8005518 <sbrk_aligned+0x34>
 8005502:	1cc4      	adds	r4, r0, #3
 8005504:	f024 0403 	bic.w	r4, r4, #3
 8005508:	42a0      	cmp	r0, r4
 800550a:	d007      	beq.n	800551c <sbrk_aligned+0x38>
 800550c:	1a21      	subs	r1, r4, r0
 800550e:	4628      	mov	r0, r5
 8005510:	f000 fb96 	bl	8005c40 <_sbrk_r>
 8005514:	3001      	adds	r0, #1
 8005516:	d101      	bne.n	800551c <sbrk_aligned+0x38>
 8005518:	f04f 34ff 	mov.w	r4, #4294967295
 800551c:	4620      	mov	r0, r4
 800551e:	bd70      	pop	{r4, r5, r6, pc}
 8005520:	200043ac 	.word	0x200043ac

08005524 <_malloc_r>:
 8005524:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005528:	1ccd      	adds	r5, r1, #3
 800552a:	f025 0503 	bic.w	r5, r5, #3
 800552e:	3508      	adds	r5, #8
 8005530:	2d0c      	cmp	r5, #12
 8005532:	bf38      	it	cc
 8005534:	250c      	movcc	r5, #12
 8005536:	2d00      	cmp	r5, #0
 8005538:	4607      	mov	r7, r0
 800553a:	db01      	blt.n	8005540 <_malloc_r+0x1c>
 800553c:	42a9      	cmp	r1, r5
 800553e:	d905      	bls.n	800554c <_malloc_r+0x28>
 8005540:	230c      	movs	r3, #12
 8005542:	603b      	str	r3, [r7, #0]
 8005544:	2600      	movs	r6, #0
 8005546:	4630      	mov	r0, r6
 8005548:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800554c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005620 <_malloc_r+0xfc>
 8005550:	f000 f868 	bl	8005624 <__malloc_lock>
 8005554:	f8d8 3000 	ldr.w	r3, [r8]
 8005558:	461c      	mov	r4, r3
 800555a:	bb5c      	cbnz	r4, 80055b4 <_malloc_r+0x90>
 800555c:	4629      	mov	r1, r5
 800555e:	4638      	mov	r0, r7
 8005560:	f7ff ffc0 	bl	80054e4 <sbrk_aligned>
 8005564:	1c43      	adds	r3, r0, #1
 8005566:	4604      	mov	r4, r0
 8005568:	d155      	bne.n	8005616 <_malloc_r+0xf2>
 800556a:	f8d8 4000 	ldr.w	r4, [r8]
 800556e:	4626      	mov	r6, r4
 8005570:	2e00      	cmp	r6, #0
 8005572:	d145      	bne.n	8005600 <_malloc_r+0xdc>
 8005574:	2c00      	cmp	r4, #0
 8005576:	d048      	beq.n	800560a <_malloc_r+0xe6>
 8005578:	6823      	ldr	r3, [r4, #0]
 800557a:	4631      	mov	r1, r6
 800557c:	4638      	mov	r0, r7
 800557e:	eb04 0903 	add.w	r9, r4, r3
 8005582:	f000 fb5d 	bl	8005c40 <_sbrk_r>
 8005586:	4581      	cmp	r9, r0
 8005588:	d13f      	bne.n	800560a <_malloc_r+0xe6>
 800558a:	6821      	ldr	r1, [r4, #0]
 800558c:	1a6d      	subs	r5, r5, r1
 800558e:	4629      	mov	r1, r5
 8005590:	4638      	mov	r0, r7
 8005592:	f7ff ffa7 	bl	80054e4 <sbrk_aligned>
 8005596:	3001      	adds	r0, #1
 8005598:	d037      	beq.n	800560a <_malloc_r+0xe6>
 800559a:	6823      	ldr	r3, [r4, #0]
 800559c:	442b      	add	r3, r5
 800559e:	6023      	str	r3, [r4, #0]
 80055a0:	f8d8 3000 	ldr.w	r3, [r8]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d038      	beq.n	800561a <_malloc_r+0xf6>
 80055a8:	685a      	ldr	r2, [r3, #4]
 80055aa:	42a2      	cmp	r2, r4
 80055ac:	d12b      	bne.n	8005606 <_malloc_r+0xe2>
 80055ae:	2200      	movs	r2, #0
 80055b0:	605a      	str	r2, [r3, #4]
 80055b2:	e00f      	b.n	80055d4 <_malloc_r+0xb0>
 80055b4:	6822      	ldr	r2, [r4, #0]
 80055b6:	1b52      	subs	r2, r2, r5
 80055b8:	d41f      	bmi.n	80055fa <_malloc_r+0xd6>
 80055ba:	2a0b      	cmp	r2, #11
 80055bc:	d917      	bls.n	80055ee <_malloc_r+0xca>
 80055be:	1961      	adds	r1, r4, r5
 80055c0:	42a3      	cmp	r3, r4
 80055c2:	6025      	str	r5, [r4, #0]
 80055c4:	bf18      	it	ne
 80055c6:	6059      	strne	r1, [r3, #4]
 80055c8:	6863      	ldr	r3, [r4, #4]
 80055ca:	bf08      	it	eq
 80055cc:	f8c8 1000 	streq.w	r1, [r8]
 80055d0:	5162      	str	r2, [r4, r5]
 80055d2:	604b      	str	r3, [r1, #4]
 80055d4:	4638      	mov	r0, r7
 80055d6:	f104 060b 	add.w	r6, r4, #11
 80055da:	f000 f829 	bl	8005630 <__malloc_unlock>
 80055de:	f026 0607 	bic.w	r6, r6, #7
 80055e2:	1d23      	adds	r3, r4, #4
 80055e4:	1af2      	subs	r2, r6, r3
 80055e6:	d0ae      	beq.n	8005546 <_malloc_r+0x22>
 80055e8:	1b9b      	subs	r3, r3, r6
 80055ea:	50a3      	str	r3, [r4, r2]
 80055ec:	e7ab      	b.n	8005546 <_malloc_r+0x22>
 80055ee:	42a3      	cmp	r3, r4
 80055f0:	6862      	ldr	r2, [r4, #4]
 80055f2:	d1dd      	bne.n	80055b0 <_malloc_r+0x8c>
 80055f4:	f8c8 2000 	str.w	r2, [r8]
 80055f8:	e7ec      	b.n	80055d4 <_malloc_r+0xb0>
 80055fa:	4623      	mov	r3, r4
 80055fc:	6864      	ldr	r4, [r4, #4]
 80055fe:	e7ac      	b.n	800555a <_malloc_r+0x36>
 8005600:	4634      	mov	r4, r6
 8005602:	6876      	ldr	r6, [r6, #4]
 8005604:	e7b4      	b.n	8005570 <_malloc_r+0x4c>
 8005606:	4613      	mov	r3, r2
 8005608:	e7cc      	b.n	80055a4 <_malloc_r+0x80>
 800560a:	230c      	movs	r3, #12
 800560c:	603b      	str	r3, [r7, #0]
 800560e:	4638      	mov	r0, r7
 8005610:	f000 f80e 	bl	8005630 <__malloc_unlock>
 8005614:	e797      	b.n	8005546 <_malloc_r+0x22>
 8005616:	6025      	str	r5, [r4, #0]
 8005618:	e7dc      	b.n	80055d4 <_malloc_r+0xb0>
 800561a:	605b      	str	r3, [r3, #4]
 800561c:	deff      	udf	#255	; 0xff
 800561e:	bf00      	nop
 8005620:	200043a8 	.word	0x200043a8

08005624 <__malloc_lock>:
 8005624:	4801      	ldr	r0, [pc, #4]	; (800562c <__malloc_lock+0x8>)
 8005626:	f7ff bf01 	b.w	800542c <__retarget_lock_acquire_recursive>
 800562a:	bf00      	nop
 800562c:	200043a4 	.word	0x200043a4

08005630 <__malloc_unlock>:
 8005630:	4801      	ldr	r0, [pc, #4]	; (8005638 <__malloc_unlock+0x8>)
 8005632:	f7ff befc 	b.w	800542e <__retarget_lock_release_recursive>
 8005636:	bf00      	nop
 8005638:	200043a4 	.word	0x200043a4

0800563c <__ssputs_r>:
 800563c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005640:	688e      	ldr	r6, [r1, #8]
 8005642:	461f      	mov	r7, r3
 8005644:	42be      	cmp	r6, r7
 8005646:	680b      	ldr	r3, [r1, #0]
 8005648:	4682      	mov	sl, r0
 800564a:	460c      	mov	r4, r1
 800564c:	4690      	mov	r8, r2
 800564e:	d82c      	bhi.n	80056aa <__ssputs_r+0x6e>
 8005650:	898a      	ldrh	r2, [r1, #12]
 8005652:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005656:	d026      	beq.n	80056a6 <__ssputs_r+0x6a>
 8005658:	6965      	ldr	r5, [r4, #20]
 800565a:	6909      	ldr	r1, [r1, #16]
 800565c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005660:	eba3 0901 	sub.w	r9, r3, r1
 8005664:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005668:	1c7b      	adds	r3, r7, #1
 800566a:	444b      	add	r3, r9
 800566c:	106d      	asrs	r5, r5, #1
 800566e:	429d      	cmp	r5, r3
 8005670:	bf38      	it	cc
 8005672:	461d      	movcc	r5, r3
 8005674:	0553      	lsls	r3, r2, #21
 8005676:	d527      	bpl.n	80056c8 <__ssputs_r+0x8c>
 8005678:	4629      	mov	r1, r5
 800567a:	f7ff ff53 	bl	8005524 <_malloc_r>
 800567e:	4606      	mov	r6, r0
 8005680:	b360      	cbz	r0, 80056dc <__ssputs_r+0xa0>
 8005682:	6921      	ldr	r1, [r4, #16]
 8005684:	464a      	mov	r2, r9
 8005686:	f7ff fed3 	bl	8005430 <memcpy>
 800568a:	89a3      	ldrh	r3, [r4, #12]
 800568c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005694:	81a3      	strh	r3, [r4, #12]
 8005696:	6126      	str	r6, [r4, #16]
 8005698:	6165      	str	r5, [r4, #20]
 800569a:	444e      	add	r6, r9
 800569c:	eba5 0509 	sub.w	r5, r5, r9
 80056a0:	6026      	str	r6, [r4, #0]
 80056a2:	60a5      	str	r5, [r4, #8]
 80056a4:	463e      	mov	r6, r7
 80056a6:	42be      	cmp	r6, r7
 80056a8:	d900      	bls.n	80056ac <__ssputs_r+0x70>
 80056aa:	463e      	mov	r6, r7
 80056ac:	6820      	ldr	r0, [r4, #0]
 80056ae:	4632      	mov	r2, r6
 80056b0:	4641      	mov	r1, r8
 80056b2:	f000 faab 	bl	8005c0c <memmove>
 80056b6:	68a3      	ldr	r3, [r4, #8]
 80056b8:	1b9b      	subs	r3, r3, r6
 80056ba:	60a3      	str	r3, [r4, #8]
 80056bc:	6823      	ldr	r3, [r4, #0]
 80056be:	4433      	add	r3, r6
 80056c0:	6023      	str	r3, [r4, #0]
 80056c2:	2000      	movs	r0, #0
 80056c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056c8:	462a      	mov	r2, r5
 80056ca:	f000 fac9 	bl	8005c60 <_realloc_r>
 80056ce:	4606      	mov	r6, r0
 80056d0:	2800      	cmp	r0, #0
 80056d2:	d1e0      	bne.n	8005696 <__ssputs_r+0x5a>
 80056d4:	6921      	ldr	r1, [r4, #16]
 80056d6:	4650      	mov	r0, sl
 80056d8:	f7ff feb8 	bl	800544c <_free_r>
 80056dc:	230c      	movs	r3, #12
 80056de:	f8ca 3000 	str.w	r3, [sl]
 80056e2:	89a3      	ldrh	r3, [r4, #12]
 80056e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056e8:	81a3      	strh	r3, [r4, #12]
 80056ea:	f04f 30ff 	mov.w	r0, #4294967295
 80056ee:	e7e9      	b.n	80056c4 <__ssputs_r+0x88>

080056f0 <_svfiprintf_r>:
 80056f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056f4:	4698      	mov	r8, r3
 80056f6:	898b      	ldrh	r3, [r1, #12]
 80056f8:	061b      	lsls	r3, r3, #24
 80056fa:	b09d      	sub	sp, #116	; 0x74
 80056fc:	4607      	mov	r7, r0
 80056fe:	460d      	mov	r5, r1
 8005700:	4614      	mov	r4, r2
 8005702:	d50e      	bpl.n	8005722 <_svfiprintf_r+0x32>
 8005704:	690b      	ldr	r3, [r1, #16]
 8005706:	b963      	cbnz	r3, 8005722 <_svfiprintf_r+0x32>
 8005708:	2140      	movs	r1, #64	; 0x40
 800570a:	f7ff ff0b 	bl	8005524 <_malloc_r>
 800570e:	6028      	str	r0, [r5, #0]
 8005710:	6128      	str	r0, [r5, #16]
 8005712:	b920      	cbnz	r0, 800571e <_svfiprintf_r+0x2e>
 8005714:	230c      	movs	r3, #12
 8005716:	603b      	str	r3, [r7, #0]
 8005718:	f04f 30ff 	mov.w	r0, #4294967295
 800571c:	e0d0      	b.n	80058c0 <_svfiprintf_r+0x1d0>
 800571e:	2340      	movs	r3, #64	; 0x40
 8005720:	616b      	str	r3, [r5, #20]
 8005722:	2300      	movs	r3, #0
 8005724:	9309      	str	r3, [sp, #36]	; 0x24
 8005726:	2320      	movs	r3, #32
 8005728:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800572c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005730:	2330      	movs	r3, #48	; 0x30
 8005732:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80058d8 <_svfiprintf_r+0x1e8>
 8005736:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800573a:	f04f 0901 	mov.w	r9, #1
 800573e:	4623      	mov	r3, r4
 8005740:	469a      	mov	sl, r3
 8005742:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005746:	b10a      	cbz	r2, 800574c <_svfiprintf_r+0x5c>
 8005748:	2a25      	cmp	r2, #37	; 0x25
 800574a:	d1f9      	bne.n	8005740 <_svfiprintf_r+0x50>
 800574c:	ebba 0b04 	subs.w	fp, sl, r4
 8005750:	d00b      	beq.n	800576a <_svfiprintf_r+0x7a>
 8005752:	465b      	mov	r3, fp
 8005754:	4622      	mov	r2, r4
 8005756:	4629      	mov	r1, r5
 8005758:	4638      	mov	r0, r7
 800575a:	f7ff ff6f 	bl	800563c <__ssputs_r>
 800575e:	3001      	adds	r0, #1
 8005760:	f000 80a9 	beq.w	80058b6 <_svfiprintf_r+0x1c6>
 8005764:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005766:	445a      	add	r2, fp
 8005768:	9209      	str	r2, [sp, #36]	; 0x24
 800576a:	f89a 3000 	ldrb.w	r3, [sl]
 800576e:	2b00      	cmp	r3, #0
 8005770:	f000 80a1 	beq.w	80058b6 <_svfiprintf_r+0x1c6>
 8005774:	2300      	movs	r3, #0
 8005776:	f04f 32ff 	mov.w	r2, #4294967295
 800577a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800577e:	f10a 0a01 	add.w	sl, sl, #1
 8005782:	9304      	str	r3, [sp, #16]
 8005784:	9307      	str	r3, [sp, #28]
 8005786:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800578a:	931a      	str	r3, [sp, #104]	; 0x68
 800578c:	4654      	mov	r4, sl
 800578e:	2205      	movs	r2, #5
 8005790:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005794:	4850      	ldr	r0, [pc, #320]	; (80058d8 <_svfiprintf_r+0x1e8>)
 8005796:	f7fa fd23 	bl	80001e0 <memchr>
 800579a:	9a04      	ldr	r2, [sp, #16]
 800579c:	b9d8      	cbnz	r0, 80057d6 <_svfiprintf_r+0xe6>
 800579e:	06d0      	lsls	r0, r2, #27
 80057a0:	bf44      	itt	mi
 80057a2:	2320      	movmi	r3, #32
 80057a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80057a8:	0711      	lsls	r1, r2, #28
 80057aa:	bf44      	itt	mi
 80057ac:	232b      	movmi	r3, #43	; 0x2b
 80057ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80057b2:	f89a 3000 	ldrb.w	r3, [sl]
 80057b6:	2b2a      	cmp	r3, #42	; 0x2a
 80057b8:	d015      	beq.n	80057e6 <_svfiprintf_r+0xf6>
 80057ba:	9a07      	ldr	r2, [sp, #28]
 80057bc:	4654      	mov	r4, sl
 80057be:	2000      	movs	r0, #0
 80057c0:	f04f 0c0a 	mov.w	ip, #10
 80057c4:	4621      	mov	r1, r4
 80057c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80057ca:	3b30      	subs	r3, #48	; 0x30
 80057cc:	2b09      	cmp	r3, #9
 80057ce:	d94d      	bls.n	800586c <_svfiprintf_r+0x17c>
 80057d0:	b1b0      	cbz	r0, 8005800 <_svfiprintf_r+0x110>
 80057d2:	9207      	str	r2, [sp, #28]
 80057d4:	e014      	b.n	8005800 <_svfiprintf_r+0x110>
 80057d6:	eba0 0308 	sub.w	r3, r0, r8
 80057da:	fa09 f303 	lsl.w	r3, r9, r3
 80057de:	4313      	orrs	r3, r2
 80057e0:	9304      	str	r3, [sp, #16]
 80057e2:	46a2      	mov	sl, r4
 80057e4:	e7d2      	b.n	800578c <_svfiprintf_r+0x9c>
 80057e6:	9b03      	ldr	r3, [sp, #12]
 80057e8:	1d19      	adds	r1, r3, #4
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	9103      	str	r1, [sp, #12]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	bfbb      	ittet	lt
 80057f2:	425b      	neglt	r3, r3
 80057f4:	f042 0202 	orrlt.w	r2, r2, #2
 80057f8:	9307      	strge	r3, [sp, #28]
 80057fa:	9307      	strlt	r3, [sp, #28]
 80057fc:	bfb8      	it	lt
 80057fe:	9204      	strlt	r2, [sp, #16]
 8005800:	7823      	ldrb	r3, [r4, #0]
 8005802:	2b2e      	cmp	r3, #46	; 0x2e
 8005804:	d10c      	bne.n	8005820 <_svfiprintf_r+0x130>
 8005806:	7863      	ldrb	r3, [r4, #1]
 8005808:	2b2a      	cmp	r3, #42	; 0x2a
 800580a:	d134      	bne.n	8005876 <_svfiprintf_r+0x186>
 800580c:	9b03      	ldr	r3, [sp, #12]
 800580e:	1d1a      	adds	r2, r3, #4
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	9203      	str	r2, [sp, #12]
 8005814:	2b00      	cmp	r3, #0
 8005816:	bfb8      	it	lt
 8005818:	f04f 33ff 	movlt.w	r3, #4294967295
 800581c:	3402      	adds	r4, #2
 800581e:	9305      	str	r3, [sp, #20]
 8005820:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80058e8 <_svfiprintf_r+0x1f8>
 8005824:	7821      	ldrb	r1, [r4, #0]
 8005826:	2203      	movs	r2, #3
 8005828:	4650      	mov	r0, sl
 800582a:	f7fa fcd9 	bl	80001e0 <memchr>
 800582e:	b138      	cbz	r0, 8005840 <_svfiprintf_r+0x150>
 8005830:	9b04      	ldr	r3, [sp, #16]
 8005832:	eba0 000a 	sub.w	r0, r0, sl
 8005836:	2240      	movs	r2, #64	; 0x40
 8005838:	4082      	lsls	r2, r0
 800583a:	4313      	orrs	r3, r2
 800583c:	3401      	adds	r4, #1
 800583e:	9304      	str	r3, [sp, #16]
 8005840:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005844:	4825      	ldr	r0, [pc, #148]	; (80058dc <_svfiprintf_r+0x1ec>)
 8005846:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800584a:	2206      	movs	r2, #6
 800584c:	f7fa fcc8 	bl	80001e0 <memchr>
 8005850:	2800      	cmp	r0, #0
 8005852:	d038      	beq.n	80058c6 <_svfiprintf_r+0x1d6>
 8005854:	4b22      	ldr	r3, [pc, #136]	; (80058e0 <_svfiprintf_r+0x1f0>)
 8005856:	bb1b      	cbnz	r3, 80058a0 <_svfiprintf_r+0x1b0>
 8005858:	9b03      	ldr	r3, [sp, #12]
 800585a:	3307      	adds	r3, #7
 800585c:	f023 0307 	bic.w	r3, r3, #7
 8005860:	3308      	adds	r3, #8
 8005862:	9303      	str	r3, [sp, #12]
 8005864:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005866:	4433      	add	r3, r6
 8005868:	9309      	str	r3, [sp, #36]	; 0x24
 800586a:	e768      	b.n	800573e <_svfiprintf_r+0x4e>
 800586c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005870:	460c      	mov	r4, r1
 8005872:	2001      	movs	r0, #1
 8005874:	e7a6      	b.n	80057c4 <_svfiprintf_r+0xd4>
 8005876:	2300      	movs	r3, #0
 8005878:	3401      	adds	r4, #1
 800587a:	9305      	str	r3, [sp, #20]
 800587c:	4619      	mov	r1, r3
 800587e:	f04f 0c0a 	mov.w	ip, #10
 8005882:	4620      	mov	r0, r4
 8005884:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005888:	3a30      	subs	r2, #48	; 0x30
 800588a:	2a09      	cmp	r2, #9
 800588c:	d903      	bls.n	8005896 <_svfiprintf_r+0x1a6>
 800588e:	2b00      	cmp	r3, #0
 8005890:	d0c6      	beq.n	8005820 <_svfiprintf_r+0x130>
 8005892:	9105      	str	r1, [sp, #20]
 8005894:	e7c4      	b.n	8005820 <_svfiprintf_r+0x130>
 8005896:	fb0c 2101 	mla	r1, ip, r1, r2
 800589a:	4604      	mov	r4, r0
 800589c:	2301      	movs	r3, #1
 800589e:	e7f0      	b.n	8005882 <_svfiprintf_r+0x192>
 80058a0:	ab03      	add	r3, sp, #12
 80058a2:	9300      	str	r3, [sp, #0]
 80058a4:	462a      	mov	r2, r5
 80058a6:	4b0f      	ldr	r3, [pc, #60]	; (80058e4 <_svfiprintf_r+0x1f4>)
 80058a8:	a904      	add	r1, sp, #16
 80058aa:	4638      	mov	r0, r7
 80058ac:	f3af 8000 	nop.w
 80058b0:	1c42      	adds	r2, r0, #1
 80058b2:	4606      	mov	r6, r0
 80058b4:	d1d6      	bne.n	8005864 <_svfiprintf_r+0x174>
 80058b6:	89ab      	ldrh	r3, [r5, #12]
 80058b8:	065b      	lsls	r3, r3, #25
 80058ba:	f53f af2d 	bmi.w	8005718 <_svfiprintf_r+0x28>
 80058be:	9809      	ldr	r0, [sp, #36]	; 0x24
 80058c0:	b01d      	add	sp, #116	; 0x74
 80058c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058c6:	ab03      	add	r3, sp, #12
 80058c8:	9300      	str	r3, [sp, #0]
 80058ca:	462a      	mov	r2, r5
 80058cc:	4b05      	ldr	r3, [pc, #20]	; (80058e4 <_svfiprintf_r+0x1f4>)
 80058ce:	a904      	add	r1, sp, #16
 80058d0:	4638      	mov	r0, r7
 80058d2:	f000 f879 	bl	80059c8 <_printf_i>
 80058d6:	e7eb      	b.n	80058b0 <_svfiprintf_r+0x1c0>
 80058d8:	08005e00 	.word	0x08005e00
 80058dc:	08005e0a 	.word	0x08005e0a
 80058e0:	00000000 	.word	0x00000000
 80058e4:	0800563d 	.word	0x0800563d
 80058e8:	08005e06 	.word	0x08005e06

080058ec <_printf_common>:
 80058ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058f0:	4616      	mov	r6, r2
 80058f2:	4699      	mov	r9, r3
 80058f4:	688a      	ldr	r2, [r1, #8]
 80058f6:	690b      	ldr	r3, [r1, #16]
 80058f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80058fc:	4293      	cmp	r3, r2
 80058fe:	bfb8      	it	lt
 8005900:	4613      	movlt	r3, r2
 8005902:	6033      	str	r3, [r6, #0]
 8005904:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005908:	4607      	mov	r7, r0
 800590a:	460c      	mov	r4, r1
 800590c:	b10a      	cbz	r2, 8005912 <_printf_common+0x26>
 800590e:	3301      	adds	r3, #1
 8005910:	6033      	str	r3, [r6, #0]
 8005912:	6823      	ldr	r3, [r4, #0]
 8005914:	0699      	lsls	r1, r3, #26
 8005916:	bf42      	ittt	mi
 8005918:	6833      	ldrmi	r3, [r6, #0]
 800591a:	3302      	addmi	r3, #2
 800591c:	6033      	strmi	r3, [r6, #0]
 800591e:	6825      	ldr	r5, [r4, #0]
 8005920:	f015 0506 	ands.w	r5, r5, #6
 8005924:	d106      	bne.n	8005934 <_printf_common+0x48>
 8005926:	f104 0a19 	add.w	sl, r4, #25
 800592a:	68e3      	ldr	r3, [r4, #12]
 800592c:	6832      	ldr	r2, [r6, #0]
 800592e:	1a9b      	subs	r3, r3, r2
 8005930:	42ab      	cmp	r3, r5
 8005932:	dc26      	bgt.n	8005982 <_printf_common+0x96>
 8005934:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005938:	1e13      	subs	r3, r2, #0
 800593a:	6822      	ldr	r2, [r4, #0]
 800593c:	bf18      	it	ne
 800593e:	2301      	movne	r3, #1
 8005940:	0692      	lsls	r2, r2, #26
 8005942:	d42b      	bmi.n	800599c <_printf_common+0xb0>
 8005944:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005948:	4649      	mov	r1, r9
 800594a:	4638      	mov	r0, r7
 800594c:	47c0      	blx	r8
 800594e:	3001      	adds	r0, #1
 8005950:	d01e      	beq.n	8005990 <_printf_common+0xa4>
 8005952:	6823      	ldr	r3, [r4, #0]
 8005954:	6922      	ldr	r2, [r4, #16]
 8005956:	f003 0306 	and.w	r3, r3, #6
 800595a:	2b04      	cmp	r3, #4
 800595c:	bf02      	ittt	eq
 800595e:	68e5      	ldreq	r5, [r4, #12]
 8005960:	6833      	ldreq	r3, [r6, #0]
 8005962:	1aed      	subeq	r5, r5, r3
 8005964:	68a3      	ldr	r3, [r4, #8]
 8005966:	bf0c      	ite	eq
 8005968:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800596c:	2500      	movne	r5, #0
 800596e:	4293      	cmp	r3, r2
 8005970:	bfc4      	itt	gt
 8005972:	1a9b      	subgt	r3, r3, r2
 8005974:	18ed      	addgt	r5, r5, r3
 8005976:	2600      	movs	r6, #0
 8005978:	341a      	adds	r4, #26
 800597a:	42b5      	cmp	r5, r6
 800597c:	d11a      	bne.n	80059b4 <_printf_common+0xc8>
 800597e:	2000      	movs	r0, #0
 8005980:	e008      	b.n	8005994 <_printf_common+0xa8>
 8005982:	2301      	movs	r3, #1
 8005984:	4652      	mov	r2, sl
 8005986:	4649      	mov	r1, r9
 8005988:	4638      	mov	r0, r7
 800598a:	47c0      	blx	r8
 800598c:	3001      	adds	r0, #1
 800598e:	d103      	bne.n	8005998 <_printf_common+0xac>
 8005990:	f04f 30ff 	mov.w	r0, #4294967295
 8005994:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005998:	3501      	adds	r5, #1
 800599a:	e7c6      	b.n	800592a <_printf_common+0x3e>
 800599c:	18e1      	adds	r1, r4, r3
 800599e:	1c5a      	adds	r2, r3, #1
 80059a0:	2030      	movs	r0, #48	; 0x30
 80059a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80059a6:	4422      	add	r2, r4
 80059a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80059ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80059b0:	3302      	adds	r3, #2
 80059b2:	e7c7      	b.n	8005944 <_printf_common+0x58>
 80059b4:	2301      	movs	r3, #1
 80059b6:	4622      	mov	r2, r4
 80059b8:	4649      	mov	r1, r9
 80059ba:	4638      	mov	r0, r7
 80059bc:	47c0      	blx	r8
 80059be:	3001      	adds	r0, #1
 80059c0:	d0e6      	beq.n	8005990 <_printf_common+0xa4>
 80059c2:	3601      	adds	r6, #1
 80059c4:	e7d9      	b.n	800597a <_printf_common+0x8e>
	...

080059c8 <_printf_i>:
 80059c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80059cc:	7e0f      	ldrb	r7, [r1, #24]
 80059ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80059d0:	2f78      	cmp	r7, #120	; 0x78
 80059d2:	4691      	mov	r9, r2
 80059d4:	4680      	mov	r8, r0
 80059d6:	460c      	mov	r4, r1
 80059d8:	469a      	mov	sl, r3
 80059da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80059de:	d807      	bhi.n	80059f0 <_printf_i+0x28>
 80059e0:	2f62      	cmp	r7, #98	; 0x62
 80059e2:	d80a      	bhi.n	80059fa <_printf_i+0x32>
 80059e4:	2f00      	cmp	r7, #0
 80059e6:	f000 80d4 	beq.w	8005b92 <_printf_i+0x1ca>
 80059ea:	2f58      	cmp	r7, #88	; 0x58
 80059ec:	f000 80c0 	beq.w	8005b70 <_printf_i+0x1a8>
 80059f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80059f8:	e03a      	b.n	8005a70 <_printf_i+0xa8>
 80059fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80059fe:	2b15      	cmp	r3, #21
 8005a00:	d8f6      	bhi.n	80059f0 <_printf_i+0x28>
 8005a02:	a101      	add	r1, pc, #4	; (adr r1, 8005a08 <_printf_i+0x40>)
 8005a04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a08:	08005a61 	.word	0x08005a61
 8005a0c:	08005a75 	.word	0x08005a75
 8005a10:	080059f1 	.word	0x080059f1
 8005a14:	080059f1 	.word	0x080059f1
 8005a18:	080059f1 	.word	0x080059f1
 8005a1c:	080059f1 	.word	0x080059f1
 8005a20:	08005a75 	.word	0x08005a75
 8005a24:	080059f1 	.word	0x080059f1
 8005a28:	080059f1 	.word	0x080059f1
 8005a2c:	080059f1 	.word	0x080059f1
 8005a30:	080059f1 	.word	0x080059f1
 8005a34:	08005b79 	.word	0x08005b79
 8005a38:	08005aa1 	.word	0x08005aa1
 8005a3c:	08005b33 	.word	0x08005b33
 8005a40:	080059f1 	.word	0x080059f1
 8005a44:	080059f1 	.word	0x080059f1
 8005a48:	08005b9b 	.word	0x08005b9b
 8005a4c:	080059f1 	.word	0x080059f1
 8005a50:	08005aa1 	.word	0x08005aa1
 8005a54:	080059f1 	.word	0x080059f1
 8005a58:	080059f1 	.word	0x080059f1
 8005a5c:	08005b3b 	.word	0x08005b3b
 8005a60:	682b      	ldr	r3, [r5, #0]
 8005a62:	1d1a      	adds	r2, r3, #4
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	602a      	str	r2, [r5, #0]
 8005a68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a70:	2301      	movs	r3, #1
 8005a72:	e09f      	b.n	8005bb4 <_printf_i+0x1ec>
 8005a74:	6820      	ldr	r0, [r4, #0]
 8005a76:	682b      	ldr	r3, [r5, #0]
 8005a78:	0607      	lsls	r7, r0, #24
 8005a7a:	f103 0104 	add.w	r1, r3, #4
 8005a7e:	6029      	str	r1, [r5, #0]
 8005a80:	d501      	bpl.n	8005a86 <_printf_i+0xbe>
 8005a82:	681e      	ldr	r6, [r3, #0]
 8005a84:	e003      	b.n	8005a8e <_printf_i+0xc6>
 8005a86:	0646      	lsls	r6, r0, #25
 8005a88:	d5fb      	bpl.n	8005a82 <_printf_i+0xba>
 8005a8a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005a8e:	2e00      	cmp	r6, #0
 8005a90:	da03      	bge.n	8005a9a <_printf_i+0xd2>
 8005a92:	232d      	movs	r3, #45	; 0x2d
 8005a94:	4276      	negs	r6, r6
 8005a96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a9a:	485a      	ldr	r0, [pc, #360]	; (8005c04 <_printf_i+0x23c>)
 8005a9c:	230a      	movs	r3, #10
 8005a9e:	e012      	b.n	8005ac6 <_printf_i+0xfe>
 8005aa0:	682b      	ldr	r3, [r5, #0]
 8005aa2:	6820      	ldr	r0, [r4, #0]
 8005aa4:	1d19      	adds	r1, r3, #4
 8005aa6:	6029      	str	r1, [r5, #0]
 8005aa8:	0605      	lsls	r5, r0, #24
 8005aaa:	d501      	bpl.n	8005ab0 <_printf_i+0xe8>
 8005aac:	681e      	ldr	r6, [r3, #0]
 8005aae:	e002      	b.n	8005ab6 <_printf_i+0xee>
 8005ab0:	0641      	lsls	r1, r0, #25
 8005ab2:	d5fb      	bpl.n	8005aac <_printf_i+0xe4>
 8005ab4:	881e      	ldrh	r6, [r3, #0]
 8005ab6:	4853      	ldr	r0, [pc, #332]	; (8005c04 <_printf_i+0x23c>)
 8005ab8:	2f6f      	cmp	r7, #111	; 0x6f
 8005aba:	bf0c      	ite	eq
 8005abc:	2308      	moveq	r3, #8
 8005abe:	230a      	movne	r3, #10
 8005ac0:	2100      	movs	r1, #0
 8005ac2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005ac6:	6865      	ldr	r5, [r4, #4]
 8005ac8:	60a5      	str	r5, [r4, #8]
 8005aca:	2d00      	cmp	r5, #0
 8005acc:	bfa2      	ittt	ge
 8005ace:	6821      	ldrge	r1, [r4, #0]
 8005ad0:	f021 0104 	bicge.w	r1, r1, #4
 8005ad4:	6021      	strge	r1, [r4, #0]
 8005ad6:	b90e      	cbnz	r6, 8005adc <_printf_i+0x114>
 8005ad8:	2d00      	cmp	r5, #0
 8005ada:	d04b      	beq.n	8005b74 <_printf_i+0x1ac>
 8005adc:	4615      	mov	r5, r2
 8005ade:	fbb6 f1f3 	udiv	r1, r6, r3
 8005ae2:	fb03 6711 	mls	r7, r3, r1, r6
 8005ae6:	5dc7      	ldrb	r7, [r0, r7]
 8005ae8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005aec:	4637      	mov	r7, r6
 8005aee:	42bb      	cmp	r3, r7
 8005af0:	460e      	mov	r6, r1
 8005af2:	d9f4      	bls.n	8005ade <_printf_i+0x116>
 8005af4:	2b08      	cmp	r3, #8
 8005af6:	d10b      	bne.n	8005b10 <_printf_i+0x148>
 8005af8:	6823      	ldr	r3, [r4, #0]
 8005afa:	07de      	lsls	r6, r3, #31
 8005afc:	d508      	bpl.n	8005b10 <_printf_i+0x148>
 8005afe:	6923      	ldr	r3, [r4, #16]
 8005b00:	6861      	ldr	r1, [r4, #4]
 8005b02:	4299      	cmp	r1, r3
 8005b04:	bfde      	ittt	le
 8005b06:	2330      	movle	r3, #48	; 0x30
 8005b08:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005b0c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005b10:	1b52      	subs	r2, r2, r5
 8005b12:	6122      	str	r2, [r4, #16]
 8005b14:	f8cd a000 	str.w	sl, [sp]
 8005b18:	464b      	mov	r3, r9
 8005b1a:	aa03      	add	r2, sp, #12
 8005b1c:	4621      	mov	r1, r4
 8005b1e:	4640      	mov	r0, r8
 8005b20:	f7ff fee4 	bl	80058ec <_printf_common>
 8005b24:	3001      	adds	r0, #1
 8005b26:	d14a      	bne.n	8005bbe <_printf_i+0x1f6>
 8005b28:	f04f 30ff 	mov.w	r0, #4294967295
 8005b2c:	b004      	add	sp, #16
 8005b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b32:	6823      	ldr	r3, [r4, #0]
 8005b34:	f043 0320 	orr.w	r3, r3, #32
 8005b38:	6023      	str	r3, [r4, #0]
 8005b3a:	4833      	ldr	r0, [pc, #204]	; (8005c08 <_printf_i+0x240>)
 8005b3c:	2778      	movs	r7, #120	; 0x78
 8005b3e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005b42:	6823      	ldr	r3, [r4, #0]
 8005b44:	6829      	ldr	r1, [r5, #0]
 8005b46:	061f      	lsls	r7, r3, #24
 8005b48:	f851 6b04 	ldr.w	r6, [r1], #4
 8005b4c:	d402      	bmi.n	8005b54 <_printf_i+0x18c>
 8005b4e:	065f      	lsls	r7, r3, #25
 8005b50:	bf48      	it	mi
 8005b52:	b2b6      	uxthmi	r6, r6
 8005b54:	07df      	lsls	r7, r3, #31
 8005b56:	bf48      	it	mi
 8005b58:	f043 0320 	orrmi.w	r3, r3, #32
 8005b5c:	6029      	str	r1, [r5, #0]
 8005b5e:	bf48      	it	mi
 8005b60:	6023      	strmi	r3, [r4, #0]
 8005b62:	b91e      	cbnz	r6, 8005b6c <_printf_i+0x1a4>
 8005b64:	6823      	ldr	r3, [r4, #0]
 8005b66:	f023 0320 	bic.w	r3, r3, #32
 8005b6a:	6023      	str	r3, [r4, #0]
 8005b6c:	2310      	movs	r3, #16
 8005b6e:	e7a7      	b.n	8005ac0 <_printf_i+0xf8>
 8005b70:	4824      	ldr	r0, [pc, #144]	; (8005c04 <_printf_i+0x23c>)
 8005b72:	e7e4      	b.n	8005b3e <_printf_i+0x176>
 8005b74:	4615      	mov	r5, r2
 8005b76:	e7bd      	b.n	8005af4 <_printf_i+0x12c>
 8005b78:	682b      	ldr	r3, [r5, #0]
 8005b7a:	6826      	ldr	r6, [r4, #0]
 8005b7c:	6961      	ldr	r1, [r4, #20]
 8005b7e:	1d18      	adds	r0, r3, #4
 8005b80:	6028      	str	r0, [r5, #0]
 8005b82:	0635      	lsls	r5, r6, #24
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	d501      	bpl.n	8005b8c <_printf_i+0x1c4>
 8005b88:	6019      	str	r1, [r3, #0]
 8005b8a:	e002      	b.n	8005b92 <_printf_i+0x1ca>
 8005b8c:	0670      	lsls	r0, r6, #25
 8005b8e:	d5fb      	bpl.n	8005b88 <_printf_i+0x1c0>
 8005b90:	8019      	strh	r1, [r3, #0]
 8005b92:	2300      	movs	r3, #0
 8005b94:	6123      	str	r3, [r4, #16]
 8005b96:	4615      	mov	r5, r2
 8005b98:	e7bc      	b.n	8005b14 <_printf_i+0x14c>
 8005b9a:	682b      	ldr	r3, [r5, #0]
 8005b9c:	1d1a      	adds	r2, r3, #4
 8005b9e:	602a      	str	r2, [r5, #0]
 8005ba0:	681d      	ldr	r5, [r3, #0]
 8005ba2:	6862      	ldr	r2, [r4, #4]
 8005ba4:	2100      	movs	r1, #0
 8005ba6:	4628      	mov	r0, r5
 8005ba8:	f7fa fb1a 	bl	80001e0 <memchr>
 8005bac:	b108      	cbz	r0, 8005bb2 <_printf_i+0x1ea>
 8005bae:	1b40      	subs	r0, r0, r5
 8005bb0:	6060      	str	r0, [r4, #4]
 8005bb2:	6863      	ldr	r3, [r4, #4]
 8005bb4:	6123      	str	r3, [r4, #16]
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bbc:	e7aa      	b.n	8005b14 <_printf_i+0x14c>
 8005bbe:	6923      	ldr	r3, [r4, #16]
 8005bc0:	462a      	mov	r2, r5
 8005bc2:	4649      	mov	r1, r9
 8005bc4:	4640      	mov	r0, r8
 8005bc6:	47d0      	blx	sl
 8005bc8:	3001      	adds	r0, #1
 8005bca:	d0ad      	beq.n	8005b28 <_printf_i+0x160>
 8005bcc:	6823      	ldr	r3, [r4, #0]
 8005bce:	079b      	lsls	r3, r3, #30
 8005bd0:	d413      	bmi.n	8005bfa <_printf_i+0x232>
 8005bd2:	68e0      	ldr	r0, [r4, #12]
 8005bd4:	9b03      	ldr	r3, [sp, #12]
 8005bd6:	4298      	cmp	r0, r3
 8005bd8:	bfb8      	it	lt
 8005bda:	4618      	movlt	r0, r3
 8005bdc:	e7a6      	b.n	8005b2c <_printf_i+0x164>
 8005bde:	2301      	movs	r3, #1
 8005be0:	4632      	mov	r2, r6
 8005be2:	4649      	mov	r1, r9
 8005be4:	4640      	mov	r0, r8
 8005be6:	47d0      	blx	sl
 8005be8:	3001      	adds	r0, #1
 8005bea:	d09d      	beq.n	8005b28 <_printf_i+0x160>
 8005bec:	3501      	adds	r5, #1
 8005bee:	68e3      	ldr	r3, [r4, #12]
 8005bf0:	9903      	ldr	r1, [sp, #12]
 8005bf2:	1a5b      	subs	r3, r3, r1
 8005bf4:	42ab      	cmp	r3, r5
 8005bf6:	dcf2      	bgt.n	8005bde <_printf_i+0x216>
 8005bf8:	e7eb      	b.n	8005bd2 <_printf_i+0x20a>
 8005bfa:	2500      	movs	r5, #0
 8005bfc:	f104 0619 	add.w	r6, r4, #25
 8005c00:	e7f5      	b.n	8005bee <_printf_i+0x226>
 8005c02:	bf00      	nop
 8005c04:	08005e11 	.word	0x08005e11
 8005c08:	08005e22 	.word	0x08005e22

08005c0c <memmove>:
 8005c0c:	4288      	cmp	r0, r1
 8005c0e:	b510      	push	{r4, lr}
 8005c10:	eb01 0402 	add.w	r4, r1, r2
 8005c14:	d902      	bls.n	8005c1c <memmove+0x10>
 8005c16:	4284      	cmp	r4, r0
 8005c18:	4623      	mov	r3, r4
 8005c1a:	d807      	bhi.n	8005c2c <memmove+0x20>
 8005c1c:	1e43      	subs	r3, r0, #1
 8005c1e:	42a1      	cmp	r1, r4
 8005c20:	d008      	beq.n	8005c34 <memmove+0x28>
 8005c22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c26:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005c2a:	e7f8      	b.n	8005c1e <memmove+0x12>
 8005c2c:	4402      	add	r2, r0
 8005c2e:	4601      	mov	r1, r0
 8005c30:	428a      	cmp	r2, r1
 8005c32:	d100      	bne.n	8005c36 <memmove+0x2a>
 8005c34:	bd10      	pop	{r4, pc}
 8005c36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005c3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005c3e:	e7f7      	b.n	8005c30 <memmove+0x24>

08005c40 <_sbrk_r>:
 8005c40:	b538      	push	{r3, r4, r5, lr}
 8005c42:	4d06      	ldr	r5, [pc, #24]	; (8005c5c <_sbrk_r+0x1c>)
 8005c44:	2300      	movs	r3, #0
 8005c46:	4604      	mov	r4, r0
 8005c48:	4608      	mov	r0, r1
 8005c4a:	602b      	str	r3, [r5, #0]
 8005c4c:	f7fb ffe0 	bl	8001c10 <_sbrk>
 8005c50:	1c43      	adds	r3, r0, #1
 8005c52:	d102      	bne.n	8005c5a <_sbrk_r+0x1a>
 8005c54:	682b      	ldr	r3, [r5, #0]
 8005c56:	b103      	cbz	r3, 8005c5a <_sbrk_r+0x1a>
 8005c58:	6023      	str	r3, [r4, #0]
 8005c5a:	bd38      	pop	{r3, r4, r5, pc}
 8005c5c:	200043a0 	.word	0x200043a0

08005c60 <_realloc_r>:
 8005c60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c64:	4680      	mov	r8, r0
 8005c66:	4614      	mov	r4, r2
 8005c68:	460e      	mov	r6, r1
 8005c6a:	b921      	cbnz	r1, 8005c76 <_realloc_r+0x16>
 8005c6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c70:	4611      	mov	r1, r2
 8005c72:	f7ff bc57 	b.w	8005524 <_malloc_r>
 8005c76:	b92a      	cbnz	r2, 8005c84 <_realloc_r+0x24>
 8005c78:	f7ff fbe8 	bl	800544c <_free_r>
 8005c7c:	4625      	mov	r5, r4
 8005c7e:	4628      	mov	r0, r5
 8005c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c84:	f000 f81b 	bl	8005cbe <_malloc_usable_size_r>
 8005c88:	4284      	cmp	r4, r0
 8005c8a:	4607      	mov	r7, r0
 8005c8c:	d802      	bhi.n	8005c94 <_realloc_r+0x34>
 8005c8e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005c92:	d812      	bhi.n	8005cba <_realloc_r+0x5a>
 8005c94:	4621      	mov	r1, r4
 8005c96:	4640      	mov	r0, r8
 8005c98:	f7ff fc44 	bl	8005524 <_malloc_r>
 8005c9c:	4605      	mov	r5, r0
 8005c9e:	2800      	cmp	r0, #0
 8005ca0:	d0ed      	beq.n	8005c7e <_realloc_r+0x1e>
 8005ca2:	42bc      	cmp	r4, r7
 8005ca4:	4622      	mov	r2, r4
 8005ca6:	4631      	mov	r1, r6
 8005ca8:	bf28      	it	cs
 8005caa:	463a      	movcs	r2, r7
 8005cac:	f7ff fbc0 	bl	8005430 <memcpy>
 8005cb0:	4631      	mov	r1, r6
 8005cb2:	4640      	mov	r0, r8
 8005cb4:	f7ff fbca 	bl	800544c <_free_r>
 8005cb8:	e7e1      	b.n	8005c7e <_realloc_r+0x1e>
 8005cba:	4635      	mov	r5, r6
 8005cbc:	e7df      	b.n	8005c7e <_realloc_r+0x1e>

08005cbe <_malloc_usable_size_r>:
 8005cbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005cc2:	1f18      	subs	r0, r3, #4
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	bfbc      	itt	lt
 8005cc8:	580b      	ldrlt	r3, [r1, r0]
 8005cca:	18c0      	addlt	r0, r0, r3
 8005ccc:	4770      	bx	lr
	...

08005cd0 <_init>:
 8005cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cd2:	bf00      	nop
 8005cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cd6:	bc08      	pop	{r3}
 8005cd8:	469e      	mov	lr, r3
 8005cda:	4770      	bx	lr

08005cdc <_fini>:
 8005cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cde:	bf00      	nop
 8005ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ce2:	bc08      	pop	{r3}
 8005ce4:	469e      	mov	lr, r3
 8005ce6:	4770      	bx	lr
