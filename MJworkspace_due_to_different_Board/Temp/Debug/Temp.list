
Temp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000461c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  080047bc  080047bc  000147bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048b8  080048b8  000200f8  2**0
                  CONTENTS
  4 .ARM          00000008  080048b8  080048b8  000148b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080048c0  080048c0  000200f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048c0  080048c0  000148c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048c4  080048c4  000148c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f8  20000000  080048c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000420c  200000f8  080049c0  000200f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004304  080049c0  00024304  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY
 13 .debug_info   000132a6  00000000  00000000  0002016b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ec3  00000000  00000000  00033411  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001288  00000000  00000000  000362d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e5c  00000000  00000000  00037560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000180e3  00000000  00000000  000383bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014c89  00000000  00000000  0005049f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009724c  00000000  00000000  00065128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004fb8  00000000  00000000  000fc374  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  0010132c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000f8 	.word	0x200000f8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080047a4 	.word	0x080047a4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000fc 	.word	0x200000fc
 80001dc:	080047a4 	.word	0x080047a4

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004dc:	b480      	push	{r7}
 80004de:	b085      	sub	sp, #20
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	60f8      	str	r0, [r7, #12]
 80004e4:	60b9      	str	r1, [r7, #8]
 80004e6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	4a07      	ldr	r2, [pc, #28]	; (8000508 <vApplicationGetIdleTaskMemory+0x2c>)
 80004ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004ee:	68bb      	ldr	r3, [r7, #8]
 80004f0:	4a06      	ldr	r2, [pc, #24]	; (800050c <vApplicationGetIdleTaskMemory+0x30>)
 80004f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	2280      	movs	r2, #128	; 0x80
 80004f8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004fa:	bf00      	nop
 80004fc:	3714      	adds	r7, #20
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	20000114 	.word	0x20000114
 800050c:	200001b4 	.word	0x200001b4

08000510 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
 8000516:	4603      	mov	r3, r0
 8000518:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 800051a:	4a38      	ldr	r2, [pc, #224]	; (80005fc <HD44780_Init+0xec>)
 800051c:	79fb      	ldrb	r3, [r7, #7]
 800051e:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8000520:	4b37      	ldr	r3, [pc, #220]	; (8000600 <HD44780_Init+0xf0>)
 8000522:	2208      	movs	r2, #8
 8000524:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000526:	4b37      	ldr	r3, [pc, #220]	; (8000604 <HD44780_Init+0xf4>)
 8000528:	2200      	movs	r2, #0
 800052a:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 800052c:	4b33      	ldr	r3, [pc, #204]	; (80005fc <HD44780_Init+0xec>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	2b01      	cmp	r3, #1
 8000532:	d907      	bls.n	8000544 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000534:	4b33      	ldr	r3, [pc, #204]	; (8000604 <HD44780_Init+0xf4>)
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	f043 0308 	orr.w	r3, r3, #8
 800053c:	b2da      	uxtb	r2, r3
 800053e:	4b31      	ldr	r3, [pc, #196]	; (8000604 <HD44780_Init+0xf4>)
 8000540:	701a      	strb	r2, [r3, #0]
 8000542:	e006      	b.n	8000552 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000544:	4b2f      	ldr	r3, [pc, #188]	; (8000604 <HD44780_Init+0xf4>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	f043 0304 	orr.w	r3, r3, #4
 800054c:	b2da      	uxtb	r2, r3
 800054e:	4b2d      	ldr	r3, [pc, #180]	; (8000604 <HD44780_Init+0xf4>)
 8000550:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8000552:	f000 f985 	bl	8000860 <DelayInit>
  osDelay(50);
 8000556:	2032      	movs	r0, #50	; 0x32
 8000558:	f000 f9ac 	bl	80008b4 <osDelay>

  ExpanderWrite(dpBacklight);
 800055c:	4b28      	ldr	r3, [pc, #160]	; (8000600 <HD44780_Init+0xf0>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	4618      	mov	r0, r3
 8000562:	f000 f943 	bl	80007ec <ExpanderWrite>
  osDelay(1000);
 8000566:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800056a:	f000 f9a3 	bl	80008b4 <osDelay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 800056e:	2030      	movs	r0, #48	; 0x30
 8000570:	f000 f92b 	bl	80007ca <Write4Bits>
  osDelay(4500);
 8000574:	f241 1094 	movw	r0, #4500	; 0x1194
 8000578:	f000 f99c 	bl	80008b4 <osDelay>

  Write4Bits(0x03 << 4);
 800057c:	2030      	movs	r0, #48	; 0x30
 800057e:	f000 f924 	bl	80007ca <Write4Bits>
  osDelay(4500);
 8000582:	f241 1094 	movw	r0, #4500	; 0x1194
 8000586:	f000 f995 	bl	80008b4 <osDelay>

  Write4Bits(0x03 << 4);
 800058a:	2030      	movs	r0, #48	; 0x30
 800058c:	f000 f91d 	bl	80007ca <Write4Bits>
  osDelay(4500);
 8000590:	f241 1094 	movw	r0, #4500	; 0x1194
 8000594:	f000 f98e 	bl	80008b4 <osDelay>

  Write4Bits(0x02 << 4);
 8000598:	2020      	movs	r0, #32
 800059a:	f000 f916 	bl	80007ca <Write4Bits>
  osDelay(100);
 800059e:	2064      	movs	r0, #100	; 0x64
 80005a0:	f000 f988 	bl	80008b4 <osDelay>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 80005a4:	4b17      	ldr	r3, [pc, #92]	; (8000604 <HD44780_Init+0xf4>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	f043 0320 	orr.w	r3, r3, #32
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	4618      	mov	r0, r3
 80005b0:	f000 f8ce 	bl	8000750 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80005b4:	4b14      	ldr	r3, [pc, #80]	; (8000608 <HD44780_Init+0xf8>)
 80005b6:	2204      	movs	r2, #4
 80005b8:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 80005ba:	f000 f875 	bl	80006a8 <HD44780_Display>
  HD44780_Clear();
 80005be:	f000 f82b 	bl	8000618 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80005c2:	4b12      	ldr	r3, [pc, #72]	; (800060c <HD44780_Init+0xfc>)
 80005c4:	2202      	movs	r2, #2
 80005c6:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 80005c8:	4b10      	ldr	r3, [pc, #64]	; (800060c <HD44780_Init+0xfc>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	f043 0304 	orr.w	r3, r3, #4
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	4618      	mov	r0, r3
 80005d4:	f000 f8bc 	bl	8000750 <SendCommand>
  osDelay(4500);
 80005d8:	f241 1094 	movw	r0, #4500	; 0x1194
 80005dc:	f000 f96a 	bl	80008b4 <osDelay>

  HD44780_CreateSpecialChar(0, special1);
 80005e0:	490b      	ldr	r1, [pc, #44]	; (8000610 <HD44780_Init+0x100>)
 80005e2:	2000      	movs	r0, #0
 80005e4:	f000 f876 	bl	80006d4 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 80005e8:	490a      	ldr	r1, [pc, #40]	; (8000614 <HD44780_Init+0x104>)
 80005ea:	2001      	movs	r0, #1
 80005ec:	f000 f872 	bl	80006d4 <HD44780_CreateSpecialChar>

  HD44780_Home();
 80005f0:	f000 f81d 	bl	800062e <HD44780_Home>
}
 80005f4:	bf00      	nop
 80005f6:	3708      	adds	r7, #8
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	200003b7 	.word	0x200003b7
 8000600:	200003b8 	.word	0x200003b8
 8000604:	200003b4 	.word	0x200003b4
 8000608:	200003b5 	.word	0x200003b5
 800060c:	200003b6 	.word	0x200003b6
 8000610:	20000000 	.word	0x20000000
 8000614:	20000008 	.word	0x20000008

08000618 <HD44780_Clear>:

void HD44780_Clear()
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 800061c:	2001      	movs	r0, #1
 800061e:	f000 f897 	bl	8000750 <SendCommand>
  osDelay(2000);
 8000622:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000626:	f000 f945 	bl	80008b4 <osDelay>
}
 800062a:	bf00      	nop
 800062c:	bd80      	pop	{r7, pc}

0800062e <HD44780_Home>:

void HD44780_Home()
{
 800062e:	b580      	push	{r7, lr}
 8000630:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8000632:	2002      	movs	r0, #2
 8000634:	f000 f88c 	bl	8000750 <SendCommand>
  osDelay(2000);
 8000638:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800063c:	f000 f93a 	bl	80008b4 <osDelay>
}
 8000640:	bf00      	nop
 8000642:	bd80      	pop	{r7, pc}

08000644 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8000644:	b590      	push	{r4, r7, lr}
 8000646:	b087      	sub	sp, #28
 8000648:	af00      	add	r7, sp, #0
 800064a:	4603      	mov	r3, r0
 800064c:	460a      	mov	r2, r1
 800064e:	71fb      	strb	r3, [r7, #7]
 8000650:	4613      	mov	r3, r2
 8000652:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000654:	4b12      	ldr	r3, [pc, #72]	; (80006a0 <HD44780_SetCursor+0x5c>)
 8000656:	f107 0408 	add.w	r4, r7, #8
 800065a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800065c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8000660:	4b10      	ldr	r3, [pc, #64]	; (80006a4 <HD44780_SetCursor+0x60>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	79ba      	ldrb	r2, [r7, #6]
 8000666:	429a      	cmp	r2, r3
 8000668:	d303      	bcc.n	8000672 <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 800066a:	4b0e      	ldr	r3, [pc, #56]	; (80006a4 <HD44780_SetCursor+0x60>)
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	3b01      	subs	r3, #1
 8000670:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8000672:	79bb      	ldrb	r3, [r7, #6]
 8000674:	009b      	lsls	r3, r3, #2
 8000676:	3318      	adds	r3, #24
 8000678:	443b      	add	r3, r7
 800067a:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800067e:	b2da      	uxtb	r2, r3
 8000680:	79fb      	ldrb	r3, [r7, #7]
 8000682:	4413      	add	r3, r2
 8000684:	b2db      	uxtb	r3, r3
 8000686:	b25b      	sxtb	r3, r3
 8000688:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800068c:	b25b      	sxtb	r3, r3
 800068e:	b2db      	uxtb	r3, r3
 8000690:	4618      	mov	r0, r3
 8000692:	f000 f85d 	bl	8000750 <SendCommand>
}
 8000696:	bf00      	nop
 8000698:	371c      	adds	r7, #28
 800069a:	46bd      	mov	sp, r7
 800069c:	bd90      	pop	{r4, r7, pc}
 800069e:	bf00      	nop
 80006a0:	080047bc 	.word	0x080047bc
 80006a4:	200003b7 	.word	0x200003b7

080006a8 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 80006ac:	4b08      	ldr	r3, [pc, #32]	; (80006d0 <HD44780_Display+0x28>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	f043 0304 	orr.w	r3, r3, #4
 80006b4:	b2da      	uxtb	r2, r3
 80006b6:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <HD44780_Display+0x28>)
 80006b8:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80006ba:	4b05      	ldr	r3, [pc, #20]	; (80006d0 <HD44780_Display+0x28>)
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	f043 0308 	orr.w	r3, r3, #8
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	4618      	mov	r0, r3
 80006c6:	f000 f843 	bl	8000750 <SendCommand>
}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	200003b5 	.word	0x200003b5

080006d4 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b084      	sub	sp, #16
 80006d8:	af00      	add	r7, sp, #0
 80006da:	4603      	mov	r3, r0
 80006dc:	6039      	str	r1, [r7, #0]
 80006de:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 80006e0:	79fb      	ldrb	r3, [r7, #7]
 80006e2:	f003 0307 	and.w	r3, r3, #7
 80006e6:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 80006e8:	79fb      	ldrb	r3, [r7, #7]
 80006ea:	00db      	lsls	r3, r3, #3
 80006ec:	b25b      	sxtb	r3, r3
 80006ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006f2:	b25b      	sxtb	r3, r3
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	4618      	mov	r0, r3
 80006f8:	f000 f82a 	bl	8000750 <SendCommand>
  for (int i=0; i<8; i++)
 80006fc:	2300      	movs	r3, #0
 80006fe:	60fb      	str	r3, [r7, #12]
 8000700:	e009      	b.n	8000716 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	683a      	ldr	r2, [r7, #0]
 8000706:	4413      	add	r3, r2
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	4618      	mov	r0, r3
 800070c:	f000 f82e 	bl	800076c <SendChar>
  for (int i=0; i<8; i++)
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	3301      	adds	r3, #1
 8000714:	60fb      	str	r3, [r7, #12]
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	2b07      	cmp	r3, #7
 800071a:	ddf2      	ble.n	8000702 <HD44780_CreateSpecialChar+0x2e>
  }
}
 800071c:	bf00      	nop
 800071e:	bf00      	nop
 8000720:	3710      	adds	r7, #16
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}

08000726 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8000726:	b580      	push	{r7, lr}
 8000728:	b082      	sub	sp, #8
 800072a:	af00      	add	r7, sp, #0
 800072c:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 800072e:	e006      	b.n	800073e <HD44780_PrintStr+0x18>
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	1c5a      	adds	r2, r3, #1
 8000734:	607a      	str	r2, [r7, #4]
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	4618      	mov	r0, r3
 800073a:	f000 f817 	bl	800076c <SendChar>
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d1f4      	bne.n	8000730 <HD44780_PrintStr+0xa>
}
 8000746:	bf00      	nop
 8000748:	bf00      	nop
 800074a:	3708      	adds	r7, #8
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}

08000750 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 800075a:	79fb      	ldrb	r3, [r7, #7]
 800075c:	2100      	movs	r1, #0
 800075e:	4618      	mov	r0, r3
 8000760:	f000 f812 	bl	8000788 <Send>
}
 8000764:	bf00      	nop
 8000766:	3708      	adds	r7, #8
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}

0800076c <SendChar>:

static void SendChar(uint8_t ch)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	4603      	mov	r3, r0
 8000774:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	2101      	movs	r1, #1
 800077a:	4618      	mov	r0, r3
 800077c:	f000 f804 	bl	8000788 <Send>
}
 8000780:	bf00      	nop
 8000782:	3708      	adds	r7, #8
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}

08000788 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
 800078e:	4603      	mov	r3, r0
 8000790:	460a      	mov	r2, r1
 8000792:	71fb      	strb	r3, [r7, #7]
 8000794:	4613      	mov	r3, r2
 8000796:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8000798:	79fb      	ldrb	r3, [r7, #7]
 800079a:	f023 030f 	bic.w	r3, r3, #15
 800079e:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 80007a0:	79fb      	ldrb	r3, [r7, #7]
 80007a2:	011b      	lsls	r3, r3, #4
 80007a4:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 80007a6:	7bfa      	ldrb	r2, [r7, #15]
 80007a8:	79bb      	ldrb	r3, [r7, #6]
 80007aa:	4313      	orrs	r3, r2
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	4618      	mov	r0, r3
 80007b0:	f000 f80b 	bl	80007ca <Write4Bits>
  Write4Bits((lownib)|mode);
 80007b4:	7bba      	ldrb	r2, [r7, #14]
 80007b6:	79bb      	ldrb	r3, [r7, #6]
 80007b8:	4313      	orrs	r3, r2
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	4618      	mov	r0, r3
 80007be:	f000 f804 	bl	80007ca <Write4Bits>
}
 80007c2:	bf00      	nop
 80007c4:	3710      	adds	r7, #16
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}

080007ca <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 80007ca:	b580      	push	{r7, lr}
 80007cc:	b082      	sub	sp, #8
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	4603      	mov	r3, r0
 80007d2:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 80007d4:	79fb      	ldrb	r3, [r7, #7]
 80007d6:	4618      	mov	r0, r3
 80007d8:	f000 f808 	bl	80007ec <ExpanderWrite>
  PulseEnable(value);
 80007dc:	79fb      	ldrb	r3, [r7, #7]
 80007de:	4618      	mov	r0, r3
 80007e0:	f000 f820 	bl	8000824 <PulseEnable>
}
 80007e4:	bf00      	nop
 80007e6:	3708      	adds	r7, #8
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}

080007ec <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b086      	sub	sp, #24
 80007f0:	af02      	add	r7, sp, #8
 80007f2:	4603      	mov	r3, r0
 80007f4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 80007f6:	4b09      	ldr	r3, [pc, #36]	; (800081c <ExpanderWrite+0x30>)
 80007f8:	781a      	ldrb	r2, [r3, #0]
 80007fa:	79fb      	ldrb	r3, [r7, #7]
 80007fc:	4313      	orrs	r3, r2
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8000802:	f107 020f 	add.w	r2, r7, #15
 8000806:	230a      	movs	r3, #10
 8000808:	9300      	str	r3, [sp, #0]
 800080a:	2301      	movs	r3, #1
 800080c:	214e      	movs	r1, #78	; 0x4e
 800080e:	4804      	ldr	r0, [pc, #16]	; (8000820 <ExpanderWrite+0x34>)
 8000810:	f001 f9da 	bl	8001bc8 <HAL_I2C_Master_Transmit>
}
 8000814:	bf00      	nop
 8000816:	3710      	adds	r7, #16
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	200003b8 	.word	0x200003b8
 8000820:	200003bc 	.word	0x200003bc

08000824 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 800082e:	79fb      	ldrb	r3, [r7, #7]
 8000830:	f043 0304 	orr.w	r3, r3, #4
 8000834:	b2db      	uxtb	r3, r3
 8000836:	4618      	mov	r0, r3
 8000838:	f7ff ffd8 	bl	80007ec <ExpanderWrite>
  osDelay(20);
 800083c:	2014      	movs	r0, #20
 800083e:	f000 f839 	bl	80008b4 <osDelay>

  ExpanderWrite(_data & ~ENABLE);
 8000842:	79fb      	ldrb	r3, [r7, #7]
 8000844:	f023 0304 	bic.w	r3, r3, #4
 8000848:	b2db      	uxtb	r3, r3
 800084a:	4618      	mov	r0, r3
 800084c:	f7ff ffce 	bl	80007ec <ExpanderWrite>
  osDelay(20);
 8000850:	2014      	movs	r0, #20
 8000852:	f000 f82f 	bl	80008b4 <osDelay>
}
 8000856:	bf00      	nop
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
	...

08000860 <DelayInit>:

static void DelayInit(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8000864:	4b11      	ldr	r3, [pc, #68]	; (80008ac <DelayInit+0x4c>)
 8000866:	68db      	ldr	r3, [r3, #12]
 8000868:	4a10      	ldr	r2, [pc, #64]	; (80008ac <DelayInit+0x4c>)
 800086a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800086e:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8000870:	4b0e      	ldr	r3, [pc, #56]	; (80008ac <DelayInit+0x4c>)
 8000872:	68db      	ldr	r3, [r3, #12]
 8000874:	4a0d      	ldr	r2, [pc, #52]	; (80008ac <DelayInit+0x4c>)
 8000876:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800087a:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800087c:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <DelayInit+0x50>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a0b      	ldr	r2, [pc, #44]	; (80008b0 <DelayInit+0x50>)
 8000882:	f023 0301 	bic.w	r3, r3, #1
 8000886:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000888:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <DelayInit+0x50>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a08      	ldr	r2, [pc, #32]	; (80008b0 <DelayInit+0x50>)
 800088e:	f043 0301 	orr.w	r3, r3, #1
 8000892:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8000894:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <DelayInit+0x50>)
 8000896:	2200      	movs	r2, #0
 8000898:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 800089a:	bf00      	nop
  __ASM volatile ("NOP");
 800089c:	bf00      	nop
  __ASM volatile ("NOP");
 800089e:	bf00      	nop
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	e000edf0 	.word	0xe000edf0
 80008b0:	e0001000 	.word	0xe0001000

080008b4 <osDelay>:

static void osDelay(uint32_t us) {
 80008b4:	b480      	push	{r7}
 80008b6:	b087      	sub	sp, #28
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 80008bc:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <osDelay+0x44>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a0e      	ldr	r2, [pc, #56]	; (80008fc <osDelay+0x48>)
 80008c2:	fba2 2303 	umull	r2, r3, r2, r3
 80008c6:	0c9a      	lsrs	r2, r3, #18
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	fb02 f303 	mul.w	r3, r2, r3
 80008ce:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 80008d0:	4b0b      	ldr	r3, [pc, #44]	; (8000900 <osDelay+0x4c>)
 80008d2:	685b      	ldr	r3, [r3, #4]
 80008d4:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 80008d6:	4b0a      	ldr	r3, [pc, #40]	; (8000900 <osDelay+0x4c>)
 80008d8:	685a      	ldr	r2, [r3, #4]
 80008da:	693b      	ldr	r3, [r7, #16]
 80008dc:	1ad3      	subs	r3, r2, r3
 80008de:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	697a      	ldr	r2, [r7, #20]
 80008e4:	429a      	cmp	r2, r3
 80008e6:	d8f6      	bhi.n	80008d6 <osDelay+0x22>
}
 80008e8:	bf00      	nop
 80008ea:	bf00      	nop
 80008ec:	371c      	adds	r7, #28
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	20000098 	.word	0x20000098
 80008fc:	431bde83 	.word	0x431bde83
 8000900:	e0001000 	.word	0xe0001000

08000904 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000904:	b5b0      	push	{r4, r5, r7, lr}
 8000906:	b09c      	sub	sp, #112	; 0x70
 8000908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  SUB1.last = &SUB3;
 800090a:	4b35      	ldr	r3, [pc, #212]	; (80009e0 <main+0xdc>)
 800090c:	4a35      	ldr	r2, [pc, #212]	; (80009e4 <main+0xe0>)
 800090e:	615a      	str	r2, [r3, #20]
  SUB1.next = &SUB2;
 8000910:	4b33      	ldr	r3, [pc, #204]	; (80009e0 <main+0xdc>)
 8000912:	4a35      	ldr	r2, [pc, #212]	; (80009e8 <main+0xe4>)
 8000914:	611a      	str	r2, [r3, #16]
  SUB2.last = &SUB1;
 8000916:	4b34      	ldr	r3, [pc, #208]	; (80009e8 <main+0xe4>)
 8000918:	4a31      	ldr	r2, [pc, #196]	; (80009e0 <main+0xdc>)
 800091a:	615a      	str	r2, [r3, #20]
  SUB2.next = &SUB3;
 800091c:	4b32      	ldr	r3, [pc, #200]	; (80009e8 <main+0xe4>)
 800091e:	4a31      	ldr	r2, [pc, #196]	; (80009e4 <main+0xe0>)
 8000920:	611a      	str	r2, [r3, #16]
  SUB3.last = &SUB2;
 8000922:	4b30      	ldr	r3, [pc, #192]	; (80009e4 <main+0xe0>)
 8000924:	4a30      	ldr	r2, [pc, #192]	; (80009e8 <main+0xe4>)
 8000926:	615a      	str	r2, [r3, #20]
  SUB3.next = &SUB1;
 8000928:	4b2e      	ldr	r3, [pc, #184]	; (80009e4 <main+0xe0>)
 800092a:	4a2d      	ldr	r2, [pc, #180]	; (80009e0 <main+0xdc>)
 800092c:	611a      	str	r2, [r3, #16]
  menu.currentMenu = &SUB1;
 800092e:	4b2f      	ldr	r3, [pc, #188]	; (80009ec <main+0xe8>)
 8000930:	4a2b      	ldr	r2, [pc, #172]	; (80009e0 <main+0xdc>)
 8000932:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000934:	f000 fd2a 	bl	800138c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000938:	f000 f86a 	bl	8000a10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800093c:	f000 f900 	bl	8000b40 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000940:	f000 f8d0 	bl	8000ae4 <MX_I2C1_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityAboveNormal, 0, 128);
 8000944:	4b2a      	ldr	r3, [pc, #168]	; (80009f0 <main+0xec>)
 8000946:	f107 0454 	add.w	r4, r7, #84	; 0x54
 800094a:	461d      	mov	r5, r3
 800094c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800094e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000950:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000954:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000958:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800095c:	2100      	movs	r1, #0
 800095e:	4618      	mov	r0, r3
 8000960:	f002 fbe9 	bl	8003136 <osThreadCreate>
 8000964:	4603      	mov	r3, r0
 8000966:	4a23      	ldr	r2, [pc, #140]	; (80009f4 <main+0xf0>)
 8000968:	6013      	str	r3, [r2, #0]

  /* definition and creation of diodeDetector */
  osThreadDef(diodeDetector, diodeDetector_Init, osPriorityIdle, 0, 128);
 800096a:	4b23      	ldr	r3, [pc, #140]	; (80009f8 <main+0xf4>)
 800096c:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000970:	461d      	mov	r5, r3
 8000972:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000974:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000976:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800097a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  diodeDetectorHandle = osThreadCreate(osThread(diodeDetector), NULL);
 800097e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000982:	2100      	movs	r1, #0
 8000984:	4618      	mov	r0, r3
 8000986:	f002 fbd6 	bl	8003136 <osThreadCreate>
 800098a:	4603      	mov	r3, r0
 800098c:	4a1b      	ldr	r2, [pc, #108]	; (80009fc <main+0xf8>)
 800098e:	6013      	str	r3, [r2, #0]

  /* definition and creation of holeState */
  osThreadDef(holeState, holeState_Init, osPriorityNormal, 0, 128);
 8000990:	4b1b      	ldr	r3, [pc, #108]	; (8000a00 <main+0xfc>)
 8000992:	f107 041c 	add.w	r4, r7, #28
 8000996:	461d      	mov	r5, r3
 8000998:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800099a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800099c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  holeStateHandle = osThreadCreate(osThread(holeState), NULL);
 80009a4:	f107 031c 	add.w	r3, r7, #28
 80009a8:	2100      	movs	r1, #0
 80009aa:	4618      	mov	r0, r3
 80009ac:	f002 fbc3 	bl	8003136 <osThreadCreate>
 80009b0:	4603      	mov	r3, r0
 80009b2:	4a14      	ldr	r2, [pc, #80]	; (8000a04 <main+0x100>)
 80009b4:	6013      	str	r3, [r2, #0]

  /* definition and creation of displayMenu */
  osThreadDef(displayMenu, displayMenu_Init, osPriorityIdle, 0, 128);
 80009b6:	4b14      	ldr	r3, [pc, #80]	; (8000a08 <main+0x104>)
 80009b8:	463c      	mov	r4, r7
 80009ba:	461d      	mov	r5, r3
 80009bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009c0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  displayMenuHandle = osThreadCreate(osThread(displayMenu), NULL);
 80009c8:	463b      	mov	r3, r7
 80009ca:	2100      	movs	r1, #0
 80009cc:	4618      	mov	r0, r3
 80009ce:	f002 fbb2 	bl	8003136 <osThreadCreate>
 80009d2:	4603      	mov	r3, r0
 80009d4:	4a0d      	ldr	r2, [pc, #52]	; (8000a0c <main+0x108>)
 80009d6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80009d8:	f002 fba6 	bl	8003128 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009dc:	e7fe      	b.n	80009dc <main+0xd8>
 80009de:	bf00      	nop
 80009e0:	20000010 	.word	0x20000010
 80009e4:	20000040 	.word	0x20000040
 80009e8:	20000028 	.word	0x20000028
 80009ec:	20000058 	.word	0x20000058
 80009f0:	080047d8 	.word	0x080047d8
 80009f4:	20000410 	.word	0x20000410
 80009f8:	08004804 	.word	0x08004804
 80009fc:	20000414 	.word	0x20000414
 8000a00:	0800482c 	.word	0x0800482c
 8000a04:	20000418 	.word	0x20000418
 8000a08:	08004854 	.word	0x08004854
 8000a0c:	2000041c 	.word	0x2000041c

08000a10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b094      	sub	sp, #80	; 0x50
 8000a14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a16:	f107 0320 	add.w	r3, r7, #32
 8000a1a:	2230      	movs	r2, #48	; 0x30
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f003 fde4 	bl	80045ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a24:	f107 030c 	add.w	r3, r7, #12
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	605a      	str	r2, [r3, #4]
 8000a2e:	609a      	str	r2, [r3, #8]
 8000a30:	60da      	str	r2, [r3, #12]
 8000a32:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a34:	2300      	movs	r3, #0
 8000a36:	60bb      	str	r3, [r7, #8]
 8000a38:	4b28      	ldr	r3, [pc, #160]	; (8000adc <SystemClock_Config+0xcc>)
 8000a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3c:	4a27      	ldr	r2, [pc, #156]	; (8000adc <SystemClock_Config+0xcc>)
 8000a3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a42:	6413      	str	r3, [r2, #64]	; 0x40
 8000a44:	4b25      	ldr	r3, [pc, #148]	; (8000adc <SystemClock_Config+0xcc>)
 8000a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a4c:	60bb      	str	r3, [r7, #8]
 8000a4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a50:	2300      	movs	r3, #0
 8000a52:	607b      	str	r3, [r7, #4]
 8000a54:	4b22      	ldr	r3, [pc, #136]	; (8000ae0 <SystemClock_Config+0xd0>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a21      	ldr	r2, [pc, #132]	; (8000ae0 <SystemClock_Config+0xd0>)
 8000a5a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a5e:	6013      	str	r3, [r2, #0]
 8000a60:	4b1f      	ldr	r3, [pc, #124]	; (8000ae0 <SystemClock_Config+0xd0>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a68:	607b      	str	r3, [r7, #4]
 8000a6a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a70:	2301      	movs	r3, #1
 8000a72:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a74:	2310      	movs	r3, #16
 8000a76:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a80:	2308      	movs	r3, #8
 8000a82:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000a84:	23c0      	movs	r3, #192	; 0xc0
 8000a86:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a88:	2304      	movs	r3, #4
 8000a8a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000a8c:	2308      	movs	r3, #8
 8000a8e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a90:	f107 0320 	add.w	r3, r7, #32
 8000a94:	4618      	mov	r0, r3
 8000a96:	f001 fbf1 	bl	800227c <HAL_RCC_OscConfig>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000aa0:	f000 fa38 	bl	8000f14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aa4:	230f      	movs	r3, #15
 8000aa6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aac:	2300      	movs	r3, #0
 8000aae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ab0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ab4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ab6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000abc:	f107 030c 	add.w	r3, r7, #12
 8000ac0:	2103      	movs	r1, #3
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f001 fe52 	bl	800276c <HAL_RCC_ClockConfig>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000ace:	f000 fa21 	bl	8000f14 <Error_Handler>
  }
}
 8000ad2:	bf00      	nop
 8000ad4:	3750      	adds	r7, #80	; 0x50
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40023800 	.word	0x40023800
 8000ae0:	40007000 	.word	0x40007000

08000ae4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ae8:	4b13      	ldr	r3, [pc, #76]	; (8000b38 <MX_I2C1_Init+0x54>)
 8000aea:	4a14      	ldr	r2, [pc, #80]	; (8000b3c <MX_I2C1_Init+0x58>)
 8000aec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 25000;
 8000aee:	4b12      	ldr	r3, [pc, #72]	; (8000b38 <MX_I2C1_Init+0x54>)
 8000af0:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8000af4:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000af6:	4b10      	ldr	r3, [pc, #64]	; (8000b38 <MX_I2C1_Init+0x54>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000afc:	4b0e      	ldr	r3, [pc, #56]	; (8000b38 <MX_I2C1_Init+0x54>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b02:	4b0d      	ldr	r3, [pc, #52]	; (8000b38 <MX_I2C1_Init+0x54>)
 8000b04:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b08:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b0a:	4b0b      	ldr	r3, [pc, #44]	; (8000b38 <MX_I2C1_Init+0x54>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b10:	4b09      	ldr	r3, [pc, #36]	; (8000b38 <MX_I2C1_Init+0x54>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b16:	4b08      	ldr	r3, [pc, #32]	; (8000b38 <MX_I2C1_Init+0x54>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b1c:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <MX_I2C1_Init+0x54>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b22:	4805      	ldr	r0, [pc, #20]	; (8000b38 <MX_I2C1_Init+0x54>)
 8000b24:	f000 ff0c 	bl	8001940 <HAL_I2C_Init>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8000b2e:	f000 f9f1 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	200003bc 	.word	0x200003bc
 8000b3c:	40005400 	.word	0x40005400

08000b40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b08c      	sub	sp, #48	; 0x30
 8000b44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b46:	f107 031c 	add.w	r3, r7, #28
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]
 8000b4e:	605a      	str	r2, [r3, #4]
 8000b50:	609a      	str	r2, [r3, #8]
 8000b52:	60da      	str	r2, [r3, #12]
 8000b54:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	61bb      	str	r3, [r7, #24]
 8000b5a:	4ba2      	ldr	r3, [pc, #648]	; (8000de4 <MX_GPIO_Init+0x2a4>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	4aa1      	ldr	r2, [pc, #644]	; (8000de4 <MX_GPIO_Init+0x2a4>)
 8000b60:	f043 0310 	orr.w	r3, r3, #16
 8000b64:	6313      	str	r3, [r2, #48]	; 0x30
 8000b66:	4b9f      	ldr	r3, [pc, #636]	; (8000de4 <MX_GPIO_Init+0x2a4>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	f003 0310 	and.w	r3, r3, #16
 8000b6e:	61bb      	str	r3, [r7, #24]
 8000b70:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	617b      	str	r3, [r7, #20]
 8000b76:	4b9b      	ldr	r3, [pc, #620]	; (8000de4 <MX_GPIO_Init+0x2a4>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	4a9a      	ldr	r2, [pc, #616]	; (8000de4 <MX_GPIO_Init+0x2a4>)
 8000b7c:	f043 0304 	orr.w	r3, r3, #4
 8000b80:	6313      	str	r3, [r2, #48]	; 0x30
 8000b82:	4b98      	ldr	r3, [pc, #608]	; (8000de4 <MX_GPIO_Init+0x2a4>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	f003 0304 	and.w	r3, r3, #4
 8000b8a:	617b      	str	r3, [r7, #20]
 8000b8c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	613b      	str	r3, [r7, #16]
 8000b92:	4b94      	ldr	r3, [pc, #592]	; (8000de4 <MX_GPIO_Init+0x2a4>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	4a93      	ldr	r2, [pc, #588]	; (8000de4 <MX_GPIO_Init+0x2a4>)
 8000b98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9e:	4b91      	ldr	r3, [pc, #580]	; (8000de4 <MX_GPIO_Init+0x2a4>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ba6:	613b      	str	r3, [r7, #16]
 8000ba8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	60fb      	str	r3, [r7, #12]
 8000bae:	4b8d      	ldr	r3, [pc, #564]	; (8000de4 <MX_GPIO_Init+0x2a4>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	4a8c      	ldr	r2, [pc, #560]	; (8000de4 <MX_GPIO_Init+0x2a4>)
 8000bb4:	f043 0301 	orr.w	r3, r3, #1
 8000bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bba:	4b8a      	ldr	r3, [pc, #552]	; (8000de4 <MX_GPIO_Init+0x2a4>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	f003 0301 	and.w	r3, r3, #1
 8000bc2:	60fb      	str	r3, [r7, #12]
 8000bc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	60bb      	str	r3, [r7, #8]
 8000bca:	4b86      	ldr	r3, [pc, #536]	; (8000de4 <MX_GPIO_Init+0x2a4>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	4a85      	ldr	r2, [pc, #532]	; (8000de4 <MX_GPIO_Init+0x2a4>)
 8000bd0:	f043 0302 	orr.w	r3, r3, #2
 8000bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd6:	4b83      	ldr	r3, [pc, #524]	; (8000de4 <MX_GPIO_Init+0x2a4>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	f003 0302 	and.w	r3, r3, #2
 8000bde:	60bb      	str	r3, [r7, #8]
 8000be0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	607b      	str	r3, [r7, #4]
 8000be6:	4b7f      	ldr	r3, [pc, #508]	; (8000de4 <MX_GPIO_Init+0x2a4>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	4a7e      	ldr	r2, [pc, #504]	; (8000de4 <MX_GPIO_Init+0x2a4>)
 8000bec:	f043 0308 	orr.w	r3, r3, #8
 8000bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf2:	4b7c      	ldr	r3, [pc, #496]	; (8000de4 <MX_GPIO_Init+0x2a4>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	f003 0308 	and.w	r3, r3, #8
 8000bfa:	607b      	str	r3, [r7, #4]
 8000bfc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	2108      	movs	r1, #8
 8000c02:	4879      	ldr	r0, [pc, #484]	; (8000de8 <MX_GPIO_Init+0x2a8>)
 8000c04:	f000 fe82 	bl	800190c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000c08:	2201      	movs	r2, #1
 8000c0a:	2101      	movs	r1, #1
 8000c0c:	4877      	ldr	r0, [pc, #476]	; (8000dec <MX_GPIO_Init+0x2ac>)
 8000c0e:	f000 fe7d 	bl	800190c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(diode1_GPIO_Port, diode1_Pin, GPIO_PIN_RESET);
 8000c12:	2200      	movs	r2, #0
 8000c14:	2104      	movs	r1, #4
 8000c16:	4875      	ldr	r0, [pc, #468]	; (8000dec <MX_GPIO_Init+0x2ac>)
 8000c18:	f000 fe78 	bl	800190c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000c22:	4873      	ldr	r0, [pc, #460]	; (8000df0 <MX_GPIO_Init+0x2b0>)
 8000c24:	f000 fe72 	bl	800190c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c28:	2304      	movs	r3, #4
 8000c2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c34:	f107 031c 	add.w	r3, r7, #28
 8000c38:	4619      	mov	r1, r3
 8000c3a:	486b      	ldr	r0, [pc, #428]	; (8000de8 <MX_GPIO_Init+0x2a8>)
 8000c3c:	f000 fcca 	bl	80015d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000c40:	2308      	movs	r3, #8
 8000c42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c44:	2301      	movs	r3, #1
 8000c46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000c50:	f107 031c 	add.w	r3, r7, #28
 8000c54:	4619      	mov	r1, r3
 8000c56:	4864      	ldr	r0, [pc, #400]	; (8000de8 <MX_GPIO_Init+0x2a8>)
 8000c58:	f000 fcbc 	bl	80015d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|MEMS_INT2_Pin;
 8000c5c:	2332      	movs	r3, #50	; 0x32
 8000c5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c60:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000c64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c6a:	f107 031c 	add.w	r3, r7, #28
 8000c6e:	4619      	mov	r1, r3
 8000c70:	485d      	ldr	r0, [pc, #372]	; (8000de8 <MX_GPIO_Init+0x2a8>)
 8000c72:	f000 fcaf 	bl	80015d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin diode1_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|diode1_Pin;
 8000c76:	2305      	movs	r3, #5
 8000c78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c82:	2300      	movs	r3, #0
 8000c84:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c86:	f107 031c 	add.w	r3, r7, #28
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4857      	ldr	r0, [pc, #348]	; (8000dec <MX_GPIO_Init+0x2ac>)
 8000c8e:	f000 fca1 	bl	80015d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : holeStatePin1_Pin */
  GPIO_InitStruct.Pin = holeStatePin1_Pin;
 8000c92:	2302      	movs	r3, #2
 8000c94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c96:	2300      	movs	r3, #0
 8000c98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(holeStatePin1_GPIO_Port, &GPIO_InitStruct);
 8000c9e:	f107 031c 	add.w	r3, r7, #28
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4851      	ldr	r0, [pc, #324]	; (8000dec <MX_GPIO_Init+0x2ac>)
 8000ca6:	f000 fc95 	bl	80015d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000caa:	2308      	movs	r3, #8
 8000cac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cba:	2305      	movs	r3, #5
 8000cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000cbe:	f107 031c 	add.w	r3, r7, #28
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4849      	ldr	r0, [pc, #292]	; (8000dec <MX_GPIO_Init+0x2ac>)
 8000cc6:	f000 fc85 	bl	80015d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000cce:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000cd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd8:	f107 031c 	add.w	r3, r7, #28
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4845      	ldr	r0, [pc, #276]	; (8000df4 <MX_GPIO_Init+0x2b4>)
 8000ce0:	f000 fc78 	bl	80015d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000ce4:	2310      	movs	r3, #16
 8000ce6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000cf4:	2306      	movs	r3, #6
 8000cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000cf8:	f107 031c 	add.w	r3, r7, #28
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	483d      	ldr	r0, [pc, #244]	; (8000df4 <MX_GPIO_Init+0x2b4>)
 8000d00:	f000 fc68 	bl	80015d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000d04:	23e0      	movs	r3, #224	; 0xe0
 8000d06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d10:	2303      	movs	r3, #3
 8000d12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d14:	2305      	movs	r3, #5
 8000d16:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d18:	f107 031c 	add.w	r3, r7, #28
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4835      	ldr	r0, [pc, #212]	; (8000df4 <MX_GPIO_Init+0x2b4>)
 8000d20:	f000 fc58 	bl	80015d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_IN_Pin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000d24:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d32:	2300      	movs	r3, #0
 8000d34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d36:	2305      	movs	r3, #5
 8000d38:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d3a:	f107 031c 	add.w	r3, r7, #28
 8000d3e:	4619      	mov	r1, r3
 8000d40:	482d      	ldr	r0, [pc, #180]	; (8000df8 <MX_GPIO_Init+0x2b8>)
 8000d42:	f000 fc47 	bl	80015d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000d46:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000d4a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d54:	2300      	movs	r3, #0
 8000d56:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d58:	f107 031c 	add.w	r3, r7, #28
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4824      	ldr	r0, [pc, #144]	; (8000df0 <MX_GPIO_Init+0x2b0>)
 8000d60:	f000 fc38 	bl	80015d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000d64:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000d68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d72:	2300      	movs	r3, #0
 8000d74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d76:	2306      	movs	r3, #6
 8000d78:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d7a:	f107 031c 	add.w	r3, r7, #28
 8000d7e:	4619      	mov	r1, r3
 8000d80:	481a      	ldr	r0, [pc, #104]	; (8000dec <MX_GPIO_Init+0x2ac>)
 8000d82:	f000 fc27 	bl	80015d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000d86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	2300      	movs	r3, #0
 8000d92:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000d94:	f107 031c 	add.w	r3, r7, #28
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4816      	ldr	r0, [pc, #88]	; (8000df4 <MX_GPIO_Init+0x2b4>)
 8000d9c:	f000 fc1a 	bl	80015d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000da0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000da4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da6:	2302      	movs	r3, #2
 8000da8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dae:	2303      	movs	r3, #3
 8000db0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000db2:	230a      	movs	r3, #10
 8000db4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db6:	f107 031c 	add.w	r3, r7, #28
 8000dba:	4619      	mov	r1, r3
 8000dbc:	480d      	ldr	r0, [pc, #52]	; (8000df4 <MX_GPIO_Init+0x2b4>)
 8000dbe:	f000 fc09 	bl	80015d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000dc2:	2320      	movs	r3, #32
 8000dc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000dce:	f107 031c 	add.w	r3, r7, #28
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4806      	ldr	r0, [pc, #24]	; (8000df0 <MX_GPIO_Init+0x2b0>)
 8000dd6:	f000 fbfd 	bl	80015d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dda:	bf00      	nop
 8000ddc:	3730      	adds	r7, #48	; 0x30
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40023800 	.word	0x40023800
 8000de8:	40021000 	.word	0x40021000
 8000dec:	40020800 	.word	0x40020800
 8000df0:	40020c00 	.word	0x40020c00
 8000df4:	40020000 	.word	0x40020000
 8000df8:	40020400 	.word	0x40020400

08000dfc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	HD44780_Init(2);
 8000e04:	2002      	movs	r0, #2
 8000e06:	f7ff fb83 	bl	8000510 <HD44780_Init>
	sub3Menu();
 8000e0a:	f000 f8a1 	bl	8000f50 <sub3Menu>
  /* Infinite loop */
  for(;;)
  {
	  menuCursor = 0;
 8000e0e:	4b15      	ldr	r3, [pc, #84]	; (8000e64 <StartDefaultTask+0x68>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	701a      	strb	r2, [r3, #0]
	  osDelay(2000);
 8000e14:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000e18:	f002 f9d9 	bl	80031ce <osDelay>
	  menuCursor = 1;
 8000e1c:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <StartDefaultTask+0x68>)
 8000e1e:	2201      	movs	r2, #1
 8000e20:	701a      	strb	r2, [r3, #0]
	  osDelay(2000);
 8000e22:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000e26:	f002 f9d2 	bl	80031ce <osDelay>
	  sub3Menu();
 8000e2a:	f000 f891 	bl	8000f50 <sub3Menu>
	  menu.currentMenu = &SUB3;
 8000e2e:	4b0e      	ldr	r3, [pc, #56]	; (8000e68 <StartDefaultTask+0x6c>)
 8000e30:	4a0e      	ldr	r2, [pc, #56]	; (8000e6c <StartDefaultTask+0x70>)
 8000e32:	601a      	str	r2, [r3, #0]
	  osDelay(10);
 8000e34:	200a      	movs	r0, #10
 8000e36:	f002 f9ca 	bl	80031ce <osDelay>
	  menuCursor = 0;
 8000e3a:	4b0a      	ldr	r3, [pc, #40]	; (8000e64 <StartDefaultTask+0x68>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	701a      	strb	r2, [r3, #0]
	  osDelay(2000);
 8000e40:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000e44:	f002 f9c3 	bl	80031ce <osDelay>
	  menuCursor = 1;
 8000e48:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <StartDefaultTask+0x68>)
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	701a      	strb	r2, [r3, #0]
	  osDelay(2000);
 8000e4e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000e52:	f002 f9bc 	bl	80031ce <osDelay>
	  defaultMenu();
 8000e56:	f000 f863 	bl	8000f20 <defaultMenu>
	  menu.currentMenu = &SUB1;
 8000e5a:	4b03      	ldr	r3, [pc, #12]	; (8000e68 <StartDefaultTask+0x6c>)
 8000e5c:	4a04      	ldr	r2, [pc, #16]	; (8000e70 <StartDefaultTask+0x74>)
 8000e5e:	601a      	str	r2, [r3, #0]
	  menuCursor = 0;
 8000e60:	e7d5      	b.n	8000e0e <StartDefaultTask+0x12>
 8000e62:	bf00      	nop
 8000e64:	20000421 	.word	0x20000421
 8000e68:	20000058 	.word	0x20000058
 8000e6c:	20000040 	.word	0x20000040
 8000e70:	20000010 	.word	0x20000010

08000e74 <diodeDetector_Init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_diodeDetector_Init */
void diodeDetector_Init(void const * argument)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN diodeDetector_Init */
  /* Infinite loop */
  for(;;)
  {
	if (holeState1 == 1){
 8000e7c:	4b09      	ldr	r3, [pc, #36]	; (8000ea4 <diodeDetector_Init+0x30>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	d105      	bne.n	8000e90 <diodeDetector_Init+0x1c>
		HAL_GPIO_WritePin(diode1_GPIO_Port, diode1_Pin, 1);
 8000e84:	2201      	movs	r2, #1
 8000e86:	2104      	movs	r1, #4
 8000e88:	4807      	ldr	r0, [pc, #28]	; (8000ea8 <diodeDetector_Init+0x34>)
 8000e8a:	f000 fd3f 	bl	800190c <HAL_GPIO_WritePin>
 8000e8e:	e004      	b.n	8000e9a <diodeDetector_Init+0x26>
	}
	else{
		HAL_GPIO_WritePin(diode1_GPIO_Port, diode1_Pin, 0);
 8000e90:	2200      	movs	r2, #0
 8000e92:	2104      	movs	r1, #4
 8000e94:	4804      	ldr	r0, [pc, #16]	; (8000ea8 <diodeDetector_Init+0x34>)
 8000e96:	f000 fd39 	bl	800190c <HAL_GPIO_WritePin>
	}
	else{
		HAL_GPIO_WritePin(diode4_GPIO_Port, diode4_Pin, 0);
	}
	*/
    osDelay(10000);
 8000e9a:	f242 7010 	movw	r0, #10000	; 0x2710
 8000e9e:	f002 f996 	bl	80031ce <osDelay>
	if (holeState1 == 1){
 8000ea2:	e7eb      	b.n	8000e7c <diodeDetector_Init+0x8>
 8000ea4:	20000420 	.word	0x20000420
 8000ea8:	40020800 	.word	0x40020800

08000eac <holeState_Init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_holeState_Init */
void holeState_Init(void const * argument)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN holeState_Init */
  /* Infinite loop */
  for(;;)
  {
	if (HAL_GPIO_ReadPin(holeStatePin1_GPIO_Port, holeStatePin1_Pin) == 1){
 8000eb4:	2102      	movs	r1, #2
 8000eb6:	4809      	ldr	r0, [pc, #36]	; (8000edc <holeState_Init+0x30>)
 8000eb8:	f000 fd10 	bl	80018dc <HAL_GPIO_ReadPin>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d103      	bne.n	8000eca <holeState_Init+0x1e>
		holeState1 = 1;
 8000ec2:	4b07      	ldr	r3, [pc, #28]	; (8000ee0 <holeState_Init+0x34>)
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	701a      	strb	r2, [r3, #0]
 8000ec8:	e002      	b.n	8000ed0 <holeState_Init+0x24>
	}
	else{
		holeState1 = 0;
 8000eca:	4b05      	ldr	r3, [pc, #20]	; (8000ee0 <holeState_Init+0x34>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	701a      	strb	r2, [r3, #0]
	}
	else{
		holeState4 = 0;
	}
	*/
    osDelay(10000);
 8000ed0:	f242 7010 	movw	r0, #10000	; 0x2710
 8000ed4:	f002 f97b 	bl	80031ce <osDelay>
	if (HAL_GPIO_ReadPin(holeStatePin1_GPIO_Port, holeStatePin1_Pin) == 1){
 8000ed8:	e7ec      	b.n	8000eb4 <holeState_Init+0x8>
 8000eda:	bf00      	nop
 8000edc:	40020800 	.word	0x40020800
 8000ee0:	20000420 	.word	0x20000420

08000ee4 <displayMenu_Init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_displayMenu_Init */
void displayMenu_Init(void const * argument)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN displayMenu_Init */
  /* Infinite loop */
  for(;;)
 8000eec:	e7fe      	b.n	8000eec <displayMenu_Init+0x8>
	...

08000ef0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a04      	ldr	r2, [pc, #16]	; (8000f10 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d101      	bne.n	8000f06 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f02:	f000 fa65 	bl	80013d0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f06:	bf00      	nop
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40010000 	.word	0x40010000

08000f14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f18:	b672      	cpsid	i
}
 8000f1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f1c:	e7fe      	b.n	8000f1c <Error_Handler+0x8>
	...

08000f20 <defaultMenu>:
char FirstOptsub3[] = "Reset";
char SecondOptsub3[] = "Back";
uint8_t XD = 0;
uint8_t volatile cursorPos;

void defaultMenu(){
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
	  HD44780_Clear();
 8000f24:	f7ff fb78 	bl	8000618 <HD44780_Clear>
	  HD44780_SetCursor(0,0);
 8000f28:	2100      	movs	r1, #0
 8000f2a:	2000      	movs	r0, #0
 8000f2c:	f7ff fb8a 	bl	8000644 <HD44780_SetCursor>
	  HD44780_PrintStr(FirstOpt);
 8000f30:	4805      	ldr	r0, [pc, #20]	; (8000f48 <defaultMenu+0x28>)
 8000f32:	f7ff fbf8 	bl	8000726 <HD44780_PrintStr>
	  HD44780_SetCursor(0,1);
 8000f36:	2101      	movs	r1, #1
 8000f38:	2000      	movs	r0, #0
 8000f3a:	f7ff fb83 	bl	8000644 <HD44780_SetCursor>
	  HD44780_PrintStr(SecondOpt);
 8000f3e:	4803      	ldr	r0, [pc, #12]	; (8000f4c <defaultMenu+0x2c>)
 8000f40:	f7ff fbf1 	bl	8000726 <HD44780_PrintStr>
}
 8000f44:	bf00      	nop
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	2000006c 	.word	0x2000006c
 8000f4c:	20000078 	.word	0x20000078

08000f50 <sub3Menu>:

void sub3Menu(){
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
	  HD44780_Clear();
 8000f54:	f7ff fb60 	bl	8000618 <HD44780_Clear>
	  HD44780_SetCursor(0,0);
 8000f58:	2100      	movs	r1, #0
 8000f5a:	2000      	movs	r0, #0
 8000f5c:	f7ff fb72 	bl	8000644 <HD44780_SetCursor>
	  HD44780_PrintStr(FirstOptsub3);
 8000f60:	4813      	ldr	r0, [pc, #76]	; (8000fb0 <sub3Menu+0x60>)
 8000f62:	f7ff fbe0 	bl	8000726 <HD44780_PrintStr>
	  HD44780_SetCursor(0,1);
 8000f66:	2101      	movs	r1, #1
 8000f68:	2000      	movs	r0, #0
 8000f6a:	f7ff fb6b 	bl	8000644 <HD44780_SetCursor>
	  HD44780_PrintStr(SecondOptsub3);
 8000f6e:	4811      	ldr	r0, [pc, #68]	; (8000fb4 <sub3Menu+0x64>)
 8000f70:	f7ff fbd9 	bl	8000726 <HD44780_PrintStr>
	  HD44780_SetCursor(8,0);
 8000f74:	2100      	movs	r1, #0
 8000f76:	2008      	movs	r0, #8
 8000f78:	f7ff fb64 	bl	8000644 <HD44780_SetCursor>
	  HD44780_PrintStr("1st:");
 8000f7c:	480e      	ldr	r0, [pc, #56]	; (8000fb8 <sub3Menu+0x68>)
 8000f7e:	f7ff fbd2 	bl	8000726 <HD44780_PrintStr>
	  HD44780_SetCursor(14,0);
 8000f82:	2100      	movs	r1, #0
 8000f84:	200e      	movs	r0, #14
 8000f86:	f7ff fb5d 	bl	8000644 <HD44780_SetCursor>
	  HD44780_PrintStr("2nd:");
 8000f8a:	480c      	ldr	r0, [pc, #48]	; (8000fbc <sub3Menu+0x6c>)
 8000f8c:	f7ff fbcb 	bl	8000726 <HD44780_PrintStr>
	  HD44780_SetCursor(8,1);
 8000f90:	2101      	movs	r1, #1
 8000f92:	2008      	movs	r0, #8
 8000f94:	f7ff fb56 	bl	8000644 <HD44780_SetCursor>
	  HD44780_PrintStr("3rd:");
 8000f98:	4809      	ldr	r0, [pc, #36]	; (8000fc0 <sub3Menu+0x70>)
 8000f9a:	f7ff fbc4 	bl	8000726 <HD44780_PrintStr>
	  HD44780_SetCursor(14,1);
 8000f9e:	2101      	movs	r1, #1
 8000fa0:	200e      	movs	r0, #14
 8000fa2:	f7ff fb4f 	bl	8000644 <HD44780_SetCursor>
	  HD44780_PrintStr("4th:");
 8000fa6:	4807      	ldr	r0, [pc, #28]	; (8000fc4 <sub3Menu+0x74>)
 8000fa8:	f7ff fbbd 	bl	8000726 <HD44780_PrintStr>
}
 8000fac:	bf00      	nop
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	20000088 	.word	0x20000088
 8000fb4:	20000090 	.word	0x20000090
 8000fb8:	08004870 	.word	0x08004870
 8000fbc:	08004878 	.word	0x08004878
 8000fc0:	08004880 	.word	0x08004880
 8000fc4:	08004888 	.word	0x08004888

08000fc8 <leftReact1>:

void leftReact1(){
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
	HD44780_SetCursor(sizeof(SecondOpt),1);
 8000fcc:	2101      	movs	r1, #1
 8000fce:	200e      	movs	r0, #14
 8000fd0:	f7ff fb38 	bl	8000644 <HD44780_SetCursor>
	HD44780_PrintStr("  ");
 8000fd4:	4805      	ldr	r0, [pc, #20]	; (8000fec <leftReact1+0x24>)
 8000fd6:	f7ff fba6 	bl	8000726 <HD44780_PrintStr>
	HD44780_SetCursor(sizeof(FirstOpt),0);
 8000fda:	2100      	movs	r1, #0
 8000fdc:	2009      	movs	r0, #9
 8000fde:	f7ff fb31 	bl	8000644 <HD44780_SetCursor>
	HD44780_PrintStr("<-");
 8000fe2:	4803      	ldr	r0, [pc, #12]	; (8000ff0 <leftReact1+0x28>)
 8000fe4:	f7ff fb9f 	bl	8000726 <HD44780_PrintStr>
}
 8000fe8:	bf00      	nop
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	08004890 	.word	0x08004890
 8000ff0:	08004894 	.word	0x08004894

08000ff4 <rightReact1>:

void rightReact1(){
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
	HD44780_SetCursor(sizeof(FirstOpt),0);
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	2009      	movs	r0, #9
 8000ffc:	f7ff fb22 	bl	8000644 <HD44780_SetCursor>
	HD44780_PrintStr("  ");
 8001000:	4805      	ldr	r0, [pc, #20]	; (8001018 <rightReact1+0x24>)
 8001002:	f7ff fb90 	bl	8000726 <HD44780_PrintStr>
	HD44780_SetCursor(sizeof(SecondOpt),1);
 8001006:	2101      	movs	r1, #1
 8001008:	200e      	movs	r0, #14
 800100a:	f7ff fb1b 	bl	8000644 <HD44780_SetCursor>
	HD44780_PrintStr("<-");
 800100e:	4803      	ldr	r0, [pc, #12]	; (800101c <rightReact1+0x28>)
 8001010:	f7ff fb89 	bl	8000726 <HD44780_PrintStr>
}
 8001014:	bf00      	nop
 8001016:	bd80      	pop	{r7, pc}
 8001018:	08004890 	.word	0x08004890
 800101c:	08004894 	.word	0x08004894

08001020 <leftReact2>:
void leftReact2(){
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
	XD = 3;
 8001024:	4b03      	ldr	r3, [pc, #12]	; (8001034 <leftReact2+0x14>)
 8001026:	2203      	movs	r2, #3
 8001028:	701a      	strb	r2, [r3, #0]
}
 800102a:	bf00      	nop
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	20000422 	.word	0x20000422

08001038 <rightReact2>:

void rightReact2(){
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
	XD = 4;
 800103c:	4b03      	ldr	r3, [pc, #12]	; (800104c <rightReact2+0x14>)
 800103e:	2204      	movs	r2, #4
 8001040:	701a      	strb	r2, [r3, #0]
}
 8001042:	bf00      	nop
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	20000422 	.word	0x20000422

08001050 <leftReact3>:

void leftReact3(){
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
	HD44780_SetCursor(sizeof(SecondOptsub3),1);
 8001054:	2101      	movs	r1, #1
 8001056:	2005      	movs	r0, #5
 8001058:	f7ff faf4 	bl	8000644 <HD44780_SetCursor>
	HD44780_PrintStr("  ");
 800105c:	4805      	ldr	r0, [pc, #20]	; (8001074 <leftReact3+0x24>)
 800105e:	f7ff fb62 	bl	8000726 <HD44780_PrintStr>
	HD44780_SetCursor(sizeof(FirstOptsub3),0);
 8001062:	2100      	movs	r1, #0
 8001064:	2006      	movs	r0, #6
 8001066:	f7ff faed 	bl	8000644 <HD44780_SetCursor>
	HD44780_PrintStr("<-");
 800106a:	4803      	ldr	r0, [pc, #12]	; (8001078 <leftReact3+0x28>)
 800106c:	f7ff fb5b 	bl	8000726 <HD44780_PrintStr>
	//  cursorPos--
}
 8001070:	bf00      	nop
 8001072:	bd80      	pop	{r7, pc}
 8001074:	08004890 	.word	0x08004890
 8001078:	08004894 	.word	0x08004894

0800107c <rightReact3>:

void rightReact3(){
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
	HD44780_SetCursor(sizeof(FirstOptsub3),0);
 8001080:	2100      	movs	r1, #0
 8001082:	2006      	movs	r0, #6
 8001084:	f7ff fade 	bl	8000644 <HD44780_SetCursor>
	HD44780_PrintStr("  ");
 8001088:	4805      	ldr	r0, [pc, #20]	; (80010a0 <rightReact3+0x24>)
 800108a:	f7ff fb4c 	bl	8000726 <HD44780_PrintStr>
	HD44780_SetCursor(sizeof(SecondOptsub3),1);
 800108e:	2101      	movs	r1, #1
 8001090:	2005      	movs	r0, #5
 8001092:	f7ff fad7 	bl	8000644 <HD44780_SetCursor>
	HD44780_PrintStr("<-");
 8001096:	4803      	ldr	r0, [pc, #12]	; (80010a4 <rightReact3+0x28>)
 8001098:	f7ff fb45 	bl	8000726 <HD44780_PrintStr>
	// cursorPos++
}
 800109c:	bf00      	nop
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	08004890 	.word	0x08004890
 80010a4:	08004894 	.word	0x08004894

080010a8 <clickedReact1>:

void clickedReact1(menu_t* self){
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
	//Do stuff
	//self->currentMenu->
	// cursorPos++
}
 80010b0:	bf00      	nop
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <handleLeft>:


void handleLeft(menu_t* self){
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
    self->currentMenu->leftReact();
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	4798      	blx	r3
    //self->currentMenu = self->currentMenu->last;
}
 80010cc:	bf00      	nop
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <handleRight>:

void handleRight(menu_t* self){
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
    self->currentMenu->rightReact();
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	689b      	ldr	r3, [r3, #8]
 80010e2:	4798      	blx	r3
    //self->currentMenu = self->currentMenu->next;
}
 80010e4:	bf00      	nop
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}

080010ec <handleClicked>:

void handleClicked(menu_t* self){
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
    self->clickedReact(self);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	691b      	ldr	r3, [r3, #16]
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	4798      	blx	r3
}
 80010fc:	bf00      	nop
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	607b      	str	r3, [r7, #4]
 800110e:	4b12      	ldr	r3, [pc, #72]	; (8001158 <HAL_MspInit+0x54>)
 8001110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001112:	4a11      	ldr	r2, [pc, #68]	; (8001158 <HAL_MspInit+0x54>)
 8001114:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001118:	6453      	str	r3, [r2, #68]	; 0x44
 800111a:	4b0f      	ldr	r3, [pc, #60]	; (8001158 <HAL_MspInit+0x54>)
 800111c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001122:	607b      	str	r3, [r7, #4]
 8001124:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	603b      	str	r3, [r7, #0]
 800112a:	4b0b      	ldr	r3, [pc, #44]	; (8001158 <HAL_MspInit+0x54>)
 800112c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112e:	4a0a      	ldr	r2, [pc, #40]	; (8001158 <HAL_MspInit+0x54>)
 8001130:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001134:	6413      	str	r3, [r2, #64]	; 0x40
 8001136:	4b08      	ldr	r3, [pc, #32]	; (8001158 <HAL_MspInit+0x54>)
 8001138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800113e:	603b      	str	r3, [r7, #0]
 8001140:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001142:	2200      	movs	r2, #0
 8001144:	210f      	movs	r1, #15
 8001146:	f06f 0001 	mvn.w	r0, #1
 800114a:	f000 fa19 	bl	8001580 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800114e:	bf00      	nop
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40023800 	.word	0x40023800

0800115c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b08a      	sub	sp, #40	; 0x28
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001164:	f107 0314 	add.w	r3, r7, #20
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a19      	ldr	r2, [pc, #100]	; (80011e0 <HAL_I2C_MspInit+0x84>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d12c      	bne.n	80011d8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	613b      	str	r3, [r7, #16]
 8001182:	4b18      	ldr	r3, [pc, #96]	; (80011e4 <HAL_I2C_MspInit+0x88>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	4a17      	ldr	r2, [pc, #92]	; (80011e4 <HAL_I2C_MspInit+0x88>)
 8001188:	f043 0302 	orr.w	r3, r3, #2
 800118c:	6313      	str	r3, [r2, #48]	; 0x30
 800118e:	4b15      	ldr	r3, [pc, #84]	; (80011e4 <HAL_I2C_MspInit+0x88>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	f003 0302 	and.w	r3, r3, #2
 8001196:	613b      	str	r3, [r7, #16]
 8001198:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800119a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800119e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011a0:	2312      	movs	r3, #18
 80011a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a8:	2303      	movs	r3, #3
 80011aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011ac:	2304      	movs	r3, #4
 80011ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b0:	f107 0314 	add.w	r3, r7, #20
 80011b4:	4619      	mov	r1, r3
 80011b6:	480c      	ldr	r0, [pc, #48]	; (80011e8 <HAL_I2C_MspInit+0x8c>)
 80011b8:	f000 fa0c 	bl	80015d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011bc:	2300      	movs	r3, #0
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	4b08      	ldr	r3, [pc, #32]	; (80011e4 <HAL_I2C_MspInit+0x88>)
 80011c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c4:	4a07      	ldr	r2, [pc, #28]	; (80011e4 <HAL_I2C_MspInit+0x88>)
 80011c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011ca:	6413      	str	r3, [r2, #64]	; 0x40
 80011cc:	4b05      	ldr	r3, [pc, #20]	; (80011e4 <HAL_I2C_MspInit+0x88>)
 80011ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011d4:	60fb      	str	r3, [r7, #12]
 80011d6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80011d8:	bf00      	nop
 80011da:	3728      	adds	r7, #40	; 0x28
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	40005400 	.word	0x40005400
 80011e4:	40023800 	.word	0x40023800
 80011e8:	40020400 	.word	0x40020400

080011ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b08c      	sub	sp, #48	; 0x30
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80011f4:	2300      	movs	r3, #0
 80011f6:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80011f8:	2300      	movs	r3, #0
 80011fa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80011fc:	2300      	movs	r3, #0
 80011fe:	60bb      	str	r3, [r7, #8]
 8001200:	4b2f      	ldr	r3, [pc, #188]	; (80012c0 <HAL_InitTick+0xd4>)
 8001202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001204:	4a2e      	ldr	r2, [pc, #184]	; (80012c0 <HAL_InitTick+0xd4>)
 8001206:	f043 0301 	orr.w	r3, r3, #1
 800120a:	6453      	str	r3, [r2, #68]	; 0x44
 800120c:	4b2c      	ldr	r3, [pc, #176]	; (80012c0 <HAL_InitTick+0xd4>)
 800120e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001210:	f003 0301 	and.w	r3, r3, #1
 8001214:	60bb      	str	r3, [r7, #8]
 8001216:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001218:	f107 020c 	add.w	r2, r7, #12
 800121c:	f107 0310 	add.w	r3, r7, #16
 8001220:	4611      	mov	r1, r2
 8001222:	4618      	mov	r0, r3
 8001224:	f001 fcc2 	bl	8002bac <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001228:	f001 fcac 	bl	8002b84 <HAL_RCC_GetPCLK2Freq>
 800122c:	4603      	mov	r3, r0
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001234:	4a23      	ldr	r2, [pc, #140]	; (80012c4 <HAL_InitTick+0xd8>)
 8001236:	fba2 2303 	umull	r2, r3, r2, r3
 800123a:	0c9b      	lsrs	r3, r3, #18
 800123c:	3b01      	subs	r3, #1
 800123e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001240:	4b21      	ldr	r3, [pc, #132]	; (80012c8 <HAL_InitTick+0xdc>)
 8001242:	4a22      	ldr	r2, [pc, #136]	; (80012cc <HAL_InitTick+0xe0>)
 8001244:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001246:	4b20      	ldr	r3, [pc, #128]	; (80012c8 <HAL_InitTick+0xdc>)
 8001248:	f240 32e7 	movw	r2, #999	; 0x3e7
 800124c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800124e:	4a1e      	ldr	r2, [pc, #120]	; (80012c8 <HAL_InitTick+0xdc>)
 8001250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001252:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001254:	4b1c      	ldr	r3, [pc, #112]	; (80012c8 <HAL_InitTick+0xdc>)
 8001256:	2200      	movs	r2, #0
 8001258:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800125a:	4b1b      	ldr	r3, [pc, #108]	; (80012c8 <HAL_InitTick+0xdc>)
 800125c:	2200      	movs	r2, #0
 800125e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001260:	4b19      	ldr	r3, [pc, #100]	; (80012c8 <HAL_InitTick+0xdc>)
 8001262:	2200      	movs	r2, #0
 8001264:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001266:	4818      	ldr	r0, [pc, #96]	; (80012c8 <HAL_InitTick+0xdc>)
 8001268:	f001 fcd2 	bl	8002c10 <HAL_TIM_Base_Init>
 800126c:	4603      	mov	r3, r0
 800126e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001272:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001276:	2b00      	cmp	r3, #0
 8001278:	d11b      	bne.n	80012b2 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800127a:	4813      	ldr	r0, [pc, #76]	; (80012c8 <HAL_InitTick+0xdc>)
 800127c:	f001 fd22 	bl	8002cc4 <HAL_TIM_Base_Start_IT>
 8001280:	4603      	mov	r3, r0
 8001282:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001286:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800128a:	2b00      	cmp	r3, #0
 800128c:	d111      	bne.n	80012b2 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800128e:	2019      	movs	r0, #25
 8001290:	f000 f992 	bl	80015b8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2b0f      	cmp	r3, #15
 8001298:	d808      	bhi.n	80012ac <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800129a:	2200      	movs	r2, #0
 800129c:	6879      	ldr	r1, [r7, #4]
 800129e:	2019      	movs	r0, #25
 80012a0:	f000 f96e 	bl	8001580 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012a4:	4a0a      	ldr	r2, [pc, #40]	; (80012d0 <HAL_InitTick+0xe4>)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6013      	str	r3, [r2, #0]
 80012aa:	e002      	b.n	80012b2 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 80012ac:	2301      	movs	r3, #1
 80012ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80012b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3730      	adds	r7, #48	; 0x30
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	40023800 	.word	0x40023800
 80012c4:	431bde83 	.word	0x431bde83
 80012c8:	20000424 	.word	0x20000424
 80012cc:	40010000 	.word	0x40010000
 80012d0:	2000009c 	.word	0x2000009c

080012d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012d8:	e7fe      	b.n	80012d8 <NMI_Handler+0x4>

080012da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012da:	b480      	push	{r7}
 80012dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012de:	e7fe      	b.n	80012de <HardFault_Handler+0x4>

080012e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012e4:	e7fe      	b.n	80012e4 <MemManage_Handler+0x4>

080012e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012e6:	b480      	push	{r7}
 80012e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012ea:	e7fe      	b.n	80012ea <BusFault_Handler+0x4>

080012ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012f0:	e7fe      	b.n	80012f0 <UsageFault_Handler+0x4>

080012f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012f2:	b480      	push	{r7}
 80012f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012f6:	bf00      	nop
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001304:	4802      	ldr	r0, [pc, #8]	; (8001310 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001306:	f001 fd3f 	bl	8002d88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	20000424 	.word	0x20000424

08001314 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001318:	4b06      	ldr	r3, [pc, #24]	; (8001334 <SystemInit+0x20>)
 800131a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800131e:	4a05      	ldr	r2, [pc, #20]	; (8001334 <SystemInit+0x20>)
 8001320:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001324:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	e000ed00 	.word	0xe000ed00

08001338 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001338:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001370 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800133c:	f7ff ffea 	bl	8001314 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001340:	480c      	ldr	r0, [pc, #48]	; (8001374 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001342:	490d      	ldr	r1, [pc, #52]	; (8001378 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001344:	4a0d      	ldr	r2, [pc, #52]	; (800137c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001346:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001348:	e002      	b.n	8001350 <LoopCopyDataInit>

0800134a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800134a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800134c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800134e:	3304      	adds	r3, #4

08001350 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001350:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001352:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001354:	d3f9      	bcc.n	800134a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001356:	4a0a      	ldr	r2, [pc, #40]	; (8001380 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001358:	4c0a      	ldr	r4, [pc, #40]	; (8001384 <LoopFillZerobss+0x22>)
  movs r3, #0
 800135a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800135c:	e001      	b.n	8001362 <LoopFillZerobss>

0800135e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800135e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001360:	3204      	adds	r2, #4

08001362 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001362:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001364:	d3fb      	bcc.n	800135e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001366:	f003 f99f 	bl	80046a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800136a:	f7ff facb 	bl	8000904 <main>
  bx  lr    
 800136e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001370:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001374:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001378:	200000f8 	.word	0x200000f8
  ldr r2, =_sidata
 800137c:	080048c8 	.word	0x080048c8
  ldr r2, =_sbss
 8001380:	200000f8 	.word	0x200000f8
  ldr r4, =_ebss
 8001384:	20004304 	.word	0x20004304

08001388 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001388:	e7fe      	b.n	8001388 <ADC_IRQHandler>
	...

0800138c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001390:	4b0e      	ldr	r3, [pc, #56]	; (80013cc <HAL_Init+0x40>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a0d      	ldr	r2, [pc, #52]	; (80013cc <HAL_Init+0x40>)
 8001396:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800139a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800139c:	4b0b      	ldr	r3, [pc, #44]	; (80013cc <HAL_Init+0x40>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a0a      	ldr	r2, [pc, #40]	; (80013cc <HAL_Init+0x40>)
 80013a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013a8:	4b08      	ldr	r3, [pc, #32]	; (80013cc <HAL_Init+0x40>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a07      	ldr	r2, [pc, #28]	; (80013cc <HAL_Init+0x40>)
 80013ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013b4:	2003      	movs	r0, #3
 80013b6:	f000 f8d8 	bl	800156a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013ba:	200f      	movs	r0, #15
 80013bc:	f7ff ff16 	bl	80011ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013c0:	f7ff fea0 	bl	8001104 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40023c00 	.word	0x40023c00

080013d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013d4:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <HAL_IncTick+0x20>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	461a      	mov	r2, r3
 80013da:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <HAL_IncTick+0x24>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4413      	add	r3, r2
 80013e0:	4a04      	ldr	r2, [pc, #16]	; (80013f4 <HAL_IncTick+0x24>)
 80013e2:	6013      	str	r3, [r2, #0]
}
 80013e4:	bf00      	nop
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	200000a0 	.word	0x200000a0
 80013f4:	2000046c 	.word	0x2000046c

080013f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  return uwTick;
 80013fc:	4b03      	ldr	r3, [pc, #12]	; (800140c <HAL_GetTick+0x14>)
 80013fe:	681b      	ldr	r3, [r3, #0]
}
 8001400:	4618      	mov	r0, r3
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	2000046c 	.word	0x2000046c

08001410 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001410:	b480      	push	{r7}
 8001412:	b085      	sub	sp, #20
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	f003 0307 	and.w	r3, r3, #7
 800141e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001420:	4b0c      	ldr	r3, [pc, #48]	; (8001454 <__NVIC_SetPriorityGrouping+0x44>)
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001426:	68ba      	ldr	r2, [r7, #8]
 8001428:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800142c:	4013      	ands	r3, r2
 800142e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001438:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800143c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001440:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001442:	4a04      	ldr	r2, [pc, #16]	; (8001454 <__NVIC_SetPriorityGrouping+0x44>)
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	60d3      	str	r3, [r2, #12]
}
 8001448:	bf00      	nop
 800144a:	3714      	adds	r7, #20
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr
 8001454:	e000ed00 	.word	0xe000ed00

08001458 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800145c:	4b04      	ldr	r3, [pc, #16]	; (8001470 <__NVIC_GetPriorityGrouping+0x18>)
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	0a1b      	lsrs	r3, r3, #8
 8001462:	f003 0307 	and.w	r3, r3, #7
}
 8001466:	4618      	mov	r0, r3
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr
 8001470:	e000ed00 	.word	0xe000ed00

08001474 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	4603      	mov	r3, r0
 800147c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800147e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001482:	2b00      	cmp	r3, #0
 8001484:	db0b      	blt.n	800149e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001486:	79fb      	ldrb	r3, [r7, #7]
 8001488:	f003 021f 	and.w	r2, r3, #31
 800148c:	4907      	ldr	r1, [pc, #28]	; (80014ac <__NVIC_EnableIRQ+0x38>)
 800148e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001492:	095b      	lsrs	r3, r3, #5
 8001494:	2001      	movs	r0, #1
 8001496:	fa00 f202 	lsl.w	r2, r0, r2
 800149a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800149e:	bf00      	nop
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	e000e100 	.word	0xe000e100

080014b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	6039      	str	r1, [r7, #0]
 80014ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	db0a      	blt.n	80014da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	b2da      	uxtb	r2, r3
 80014c8:	490c      	ldr	r1, [pc, #48]	; (80014fc <__NVIC_SetPriority+0x4c>)
 80014ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ce:	0112      	lsls	r2, r2, #4
 80014d0:	b2d2      	uxtb	r2, r2
 80014d2:	440b      	add	r3, r1
 80014d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014d8:	e00a      	b.n	80014f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	b2da      	uxtb	r2, r3
 80014de:	4908      	ldr	r1, [pc, #32]	; (8001500 <__NVIC_SetPriority+0x50>)
 80014e0:	79fb      	ldrb	r3, [r7, #7]
 80014e2:	f003 030f 	and.w	r3, r3, #15
 80014e6:	3b04      	subs	r3, #4
 80014e8:	0112      	lsls	r2, r2, #4
 80014ea:	b2d2      	uxtb	r2, r2
 80014ec:	440b      	add	r3, r1
 80014ee:	761a      	strb	r2, [r3, #24]
}
 80014f0:	bf00      	nop
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr
 80014fc:	e000e100 	.word	0xe000e100
 8001500:	e000ed00 	.word	0xe000ed00

08001504 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001504:	b480      	push	{r7}
 8001506:	b089      	sub	sp, #36	; 0x24
 8001508:	af00      	add	r7, sp, #0
 800150a:	60f8      	str	r0, [r7, #12]
 800150c:	60b9      	str	r1, [r7, #8]
 800150e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	f003 0307 	and.w	r3, r3, #7
 8001516:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	f1c3 0307 	rsb	r3, r3, #7
 800151e:	2b04      	cmp	r3, #4
 8001520:	bf28      	it	cs
 8001522:	2304      	movcs	r3, #4
 8001524:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	3304      	adds	r3, #4
 800152a:	2b06      	cmp	r3, #6
 800152c:	d902      	bls.n	8001534 <NVIC_EncodePriority+0x30>
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	3b03      	subs	r3, #3
 8001532:	e000      	b.n	8001536 <NVIC_EncodePriority+0x32>
 8001534:	2300      	movs	r3, #0
 8001536:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001538:	f04f 32ff 	mov.w	r2, #4294967295
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	fa02 f303 	lsl.w	r3, r2, r3
 8001542:	43da      	mvns	r2, r3
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	401a      	ands	r2, r3
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800154c:	f04f 31ff 	mov.w	r1, #4294967295
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	fa01 f303 	lsl.w	r3, r1, r3
 8001556:	43d9      	mvns	r1, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800155c:	4313      	orrs	r3, r2
         );
}
 800155e:	4618      	mov	r0, r3
 8001560:	3724      	adds	r7, #36	; 0x24
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr

0800156a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800156a:	b580      	push	{r7, lr}
 800156c:	b082      	sub	sp, #8
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f7ff ff4c 	bl	8001410 <__NVIC_SetPriorityGrouping>
}
 8001578:	bf00      	nop
 800157a:	3708      	adds	r7, #8
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001580:	b580      	push	{r7, lr}
 8001582:	b086      	sub	sp, #24
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	60b9      	str	r1, [r7, #8]
 800158a:	607a      	str	r2, [r7, #4]
 800158c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800158e:	2300      	movs	r3, #0
 8001590:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001592:	f7ff ff61 	bl	8001458 <__NVIC_GetPriorityGrouping>
 8001596:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	68b9      	ldr	r1, [r7, #8]
 800159c:	6978      	ldr	r0, [r7, #20]
 800159e:	f7ff ffb1 	bl	8001504 <NVIC_EncodePriority>
 80015a2:	4602      	mov	r2, r0
 80015a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015a8:	4611      	mov	r1, r2
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7ff ff80 	bl	80014b0 <__NVIC_SetPriority>
}
 80015b0:	bf00      	nop
 80015b2:	3718      	adds	r7, #24
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	4603      	mov	r3, r0
 80015c0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7ff ff54 	bl	8001474 <__NVIC_EnableIRQ>
}
 80015cc:	bf00      	nop
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b089      	sub	sp, #36	; 0x24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015de:	2300      	movs	r3, #0
 80015e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015e2:	2300      	movs	r3, #0
 80015e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015e6:	2300      	movs	r3, #0
 80015e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015ea:	2300      	movs	r3, #0
 80015ec:	61fb      	str	r3, [r7, #28]
 80015ee:	e159      	b.n	80018a4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015f0:	2201      	movs	r2, #1
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	697a      	ldr	r2, [r7, #20]
 8001600:	4013      	ands	r3, r2
 8001602:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001604:	693a      	ldr	r2, [r7, #16]
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	429a      	cmp	r2, r3
 800160a:	f040 8148 	bne.w	800189e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f003 0303 	and.w	r3, r3, #3
 8001616:	2b01      	cmp	r3, #1
 8001618:	d005      	beq.n	8001626 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001622:	2b02      	cmp	r3, #2
 8001624:	d130      	bne.n	8001688 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	2203      	movs	r2, #3
 8001632:	fa02 f303 	lsl.w	r3, r2, r3
 8001636:	43db      	mvns	r3, r3
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	4013      	ands	r3, r2
 800163c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	68da      	ldr	r2, [r3, #12]
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	fa02 f303 	lsl.w	r3, r2, r3
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	4313      	orrs	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800165c:	2201      	movs	r2, #1
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	43db      	mvns	r3, r3
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	4013      	ands	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	091b      	lsrs	r3, r3, #4
 8001672:	f003 0201 	and.w	r2, r3, #1
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	4313      	orrs	r3, r2
 8001680:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f003 0303 	and.w	r3, r3, #3
 8001690:	2b03      	cmp	r3, #3
 8001692:	d017      	beq.n	80016c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	2203      	movs	r2, #3
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	43db      	mvns	r3, r3
 80016a6:	69ba      	ldr	r2, [r7, #24]
 80016a8:	4013      	ands	r3, r2
 80016aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	689a      	ldr	r2, [r3, #8]
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f003 0303 	and.w	r3, r3, #3
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d123      	bne.n	8001718 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	08da      	lsrs	r2, r3, #3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	3208      	adds	r2, #8
 80016d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	f003 0307 	and.w	r3, r3, #7
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	220f      	movs	r2, #15
 80016e8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ec:	43db      	mvns	r3, r3
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	4013      	ands	r3, r2
 80016f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	691a      	ldr	r2, [r3, #16]
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	f003 0307 	and.w	r3, r3, #7
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	4313      	orrs	r3, r2
 8001708:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	08da      	lsrs	r2, r3, #3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	3208      	adds	r2, #8
 8001712:	69b9      	ldr	r1, [r7, #24]
 8001714:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	2203      	movs	r2, #3
 8001724:	fa02 f303 	lsl.w	r3, r2, r3
 8001728:	43db      	mvns	r3, r3
 800172a:	69ba      	ldr	r2, [r7, #24]
 800172c:	4013      	ands	r3, r2
 800172e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f003 0203 	and.w	r2, r3, #3
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	4313      	orrs	r3, r2
 8001744:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001754:	2b00      	cmp	r3, #0
 8001756:	f000 80a2 	beq.w	800189e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	60fb      	str	r3, [r7, #12]
 800175e:	4b57      	ldr	r3, [pc, #348]	; (80018bc <HAL_GPIO_Init+0x2e8>)
 8001760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001762:	4a56      	ldr	r2, [pc, #344]	; (80018bc <HAL_GPIO_Init+0x2e8>)
 8001764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001768:	6453      	str	r3, [r2, #68]	; 0x44
 800176a:	4b54      	ldr	r3, [pc, #336]	; (80018bc <HAL_GPIO_Init+0x2e8>)
 800176c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001772:	60fb      	str	r3, [r7, #12]
 8001774:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001776:	4a52      	ldr	r2, [pc, #328]	; (80018c0 <HAL_GPIO_Init+0x2ec>)
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	089b      	lsrs	r3, r3, #2
 800177c:	3302      	adds	r3, #2
 800177e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001782:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	f003 0303 	and.w	r3, r3, #3
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	220f      	movs	r2, #15
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	43db      	mvns	r3, r3
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	4013      	ands	r3, r2
 8001798:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a49      	ldr	r2, [pc, #292]	; (80018c4 <HAL_GPIO_Init+0x2f0>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d019      	beq.n	80017d6 <HAL_GPIO_Init+0x202>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a48      	ldr	r2, [pc, #288]	; (80018c8 <HAL_GPIO_Init+0x2f4>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d013      	beq.n	80017d2 <HAL_GPIO_Init+0x1fe>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a47      	ldr	r2, [pc, #284]	; (80018cc <HAL_GPIO_Init+0x2f8>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d00d      	beq.n	80017ce <HAL_GPIO_Init+0x1fa>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a46      	ldr	r2, [pc, #280]	; (80018d0 <HAL_GPIO_Init+0x2fc>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d007      	beq.n	80017ca <HAL_GPIO_Init+0x1f6>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a45      	ldr	r2, [pc, #276]	; (80018d4 <HAL_GPIO_Init+0x300>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d101      	bne.n	80017c6 <HAL_GPIO_Init+0x1f2>
 80017c2:	2304      	movs	r3, #4
 80017c4:	e008      	b.n	80017d8 <HAL_GPIO_Init+0x204>
 80017c6:	2307      	movs	r3, #7
 80017c8:	e006      	b.n	80017d8 <HAL_GPIO_Init+0x204>
 80017ca:	2303      	movs	r3, #3
 80017cc:	e004      	b.n	80017d8 <HAL_GPIO_Init+0x204>
 80017ce:	2302      	movs	r3, #2
 80017d0:	e002      	b.n	80017d8 <HAL_GPIO_Init+0x204>
 80017d2:	2301      	movs	r3, #1
 80017d4:	e000      	b.n	80017d8 <HAL_GPIO_Init+0x204>
 80017d6:	2300      	movs	r3, #0
 80017d8:	69fa      	ldr	r2, [r7, #28]
 80017da:	f002 0203 	and.w	r2, r2, #3
 80017de:	0092      	lsls	r2, r2, #2
 80017e0:	4093      	lsls	r3, r2
 80017e2:	69ba      	ldr	r2, [r7, #24]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017e8:	4935      	ldr	r1, [pc, #212]	; (80018c0 <HAL_GPIO_Init+0x2ec>)
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	089b      	lsrs	r3, r3, #2
 80017ee:	3302      	adds	r3, #2
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017f6:	4b38      	ldr	r3, [pc, #224]	; (80018d8 <HAL_GPIO_Init+0x304>)
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	43db      	mvns	r3, r3
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	4013      	ands	r3, r2
 8001804:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d003      	beq.n	800181a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001812:	69ba      	ldr	r2, [r7, #24]
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	4313      	orrs	r3, r2
 8001818:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800181a:	4a2f      	ldr	r2, [pc, #188]	; (80018d8 <HAL_GPIO_Init+0x304>)
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001820:	4b2d      	ldr	r3, [pc, #180]	; (80018d8 <HAL_GPIO_Init+0x304>)
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	43db      	mvns	r3, r3
 800182a:	69ba      	ldr	r2, [r7, #24]
 800182c:	4013      	ands	r3, r2
 800182e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001838:	2b00      	cmp	r3, #0
 800183a:	d003      	beq.n	8001844 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	4313      	orrs	r3, r2
 8001842:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001844:	4a24      	ldr	r2, [pc, #144]	; (80018d8 <HAL_GPIO_Init+0x304>)
 8001846:	69bb      	ldr	r3, [r7, #24]
 8001848:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800184a:	4b23      	ldr	r3, [pc, #140]	; (80018d8 <HAL_GPIO_Init+0x304>)
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	43db      	mvns	r3, r3
 8001854:	69ba      	ldr	r2, [r7, #24]
 8001856:	4013      	ands	r3, r2
 8001858:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d003      	beq.n	800186e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001866:	69ba      	ldr	r2, [r7, #24]
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	4313      	orrs	r3, r2
 800186c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800186e:	4a1a      	ldr	r2, [pc, #104]	; (80018d8 <HAL_GPIO_Init+0x304>)
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001874:	4b18      	ldr	r3, [pc, #96]	; (80018d8 <HAL_GPIO_Init+0x304>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	43db      	mvns	r3, r3
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	4013      	ands	r3, r2
 8001882:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d003      	beq.n	8001898 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	4313      	orrs	r3, r2
 8001896:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001898:	4a0f      	ldr	r2, [pc, #60]	; (80018d8 <HAL_GPIO_Init+0x304>)
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	3301      	adds	r3, #1
 80018a2:	61fb      	str	r3, [r7, #28]
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	2b0f      	cmp	r3, #15
 80018a8:	f67f aea2 	bls.w	80015f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018ac:	bf00      	nop
 80018ae:	bf00      	nop
 80018b0:	3724      	adds	r7, #36	; 0x24
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	40023800 	.word	0x40023800
 80018c0:	40013800 	.word	0x40013800
 80018c4:	40020000 	.word	0x40020000
 80018c8:	40020400 	.word	0x40020400
 80018cc:	40020800 	.word	0x40020800
 80018d0:	40020c00 	.word	0x40020c00
 80018d4:	40021000 	.word	0x40021000
 80018d8:	40013c00 	.word	0x40013c00

080018dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	460b      	mov	r3, r1
 80018e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	691a      	ldr	r2, [r3, #16]
 80018ec:	887b      	ldrh	r3, [r7, #2]
 80018ee:	4013      	ands	r3, r2
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d002      	beq.n	80018fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80018f4:	2301      	movs	r3, #1
 80018f6:	73fb      	strb	r3, [r7, #15]
 80018f8:	e001      	b.n	80018fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80018fa:	2300      	movs	r3, #0
 80018fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80018fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001900:	4618      	mov	r0, r3
 8001902:	3714      	adds	r7, #20
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	460b      	mov	r3, r1
 8001916:	807b      	strh	r3, [r7, #2]
 8001918:	4613      	mov	r3, r2
 800191a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800191c:	787b      	ldrb	r3, [r7, #1]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d003      	beq.n	800192a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001922:	887a      	ldrh	r2, [r7, #2]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001928:	e003      	b.n	8001932 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800192a:	887b      	ldrh	r3, [r7, #2]
 800192c:	041a      	lsls	r2, r3, #16
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	619a      	str	r2, [r3, #24]
}
 8001932:	bf00      	nop
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
	...

08001940 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d101      	bne.n	8001952 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e12b      	b.n	8001baa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001958:	b2db      	uxtb	r3, r3
 800195a:	2b00      	cmp	r3, #0
 800195c:	d106      	bne.n	800196c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2200      	movs	r2, #0
 8001962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f7ff fbf8 	bl	800115c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2224      	movs	r2, #36	; 0x24
 8001970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f022 0201 	bic.w	r2, r2, #1
 8001982:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001992:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80019a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80019a4:	f001 f8da 	bl	8002b5c <HAL_RCC_GetPCLK1Freq>
 80019a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	4a81      	ldr	r2, [pc, #516]	; (8001bb4 <HAL_I2C_Init+0x274>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d807      	bhi.n	80019c4 <HAL_I2C_Init+0x84>
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	4a80      	ldr	r2, [pc, #512]	; (8001bb8 <HAL_I2C_Init+0x278>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	bf94      	ite	ls
 80019bc:	2301      	movls	r3, #1
 80019be:	2300      	movhi	r3, #0
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	e006      	b.n	80019d2 <HAL_I2C_Init+0x92>
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	4a7d      	ldr	r2, [pc, #500]	; (8001bbc <HAL_I2C_Init+0x27c>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	bf94      	ite	ls
 80019cc:	2301      	movls	r3, #1
 80019ce:	2300      	movhi	r3, #0
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e0e7      	b.n	8001baa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	4a78      	ldr	r2, [pc, #480]	; (8001bc0 <HAL_I2C_Init+0x280>)
 80019de:	fba2 2303 	umull	r2, r3, r2, r3
 80019e2:	0c9b      	lsrs	r3, r3, #18
 80019e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	68ba      	ldr	r2, [r7, #8]
 80019f6:	430a      	orrs	r2, r1
 80019f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	6a1b      	ldr	r3, [r3, #32]
 8001a00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	4a6a      	ldr	r2, [pc, #424]	; (8001bb4 <HAL_I2C_Init+0x274>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d802      	bhi.n	8001a14 <HAL_I2C_Init+0xd4>
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	3301      	adds	r3, #1
 8001a12:	e009      	b.n	8001a28 <HAL_I2C_Init+0xe8>
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001a1a:	fb02 f303 	mul.w	r3, r2, r3
 8001a1e:	4a69      	ldr	r2, [pc, #420]	; (8001bc4 <HAL_I2C_Init+0x284>)
 8001a20:	fba2 2303 	umull	r2, r3, r2, r3
 8001a24:	099b      	lsrs	r3, r3, #6
 8001a26:	3301      	adds	r3, #1
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	6812      	ldr	r2, [r2, #0]
 8001a2c:	430b      	orrs	r3, r1
 8001a2e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	69db      	ldr	r3, [r3, #28]
 8001a36:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001a3a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	495c      	ldr	r1, [pc, #368]	; (8001bb4 <HAL_I2C_Init+0x274>)
 8001a44:	428b      	cmp	r3, r1
 8001a46:	d819      	bhi.n	8001a7c <HAL_I2C_Init+0x13c>
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	1e59      	subs	r1, r3, #1
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a56:	1c59      	adds	r1, r3, #1
 8001a58:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001a5c:	400b      	ands	r3, r1
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d00a      	beq.n	8001a78 <HAL_I2C_Init+0x138>
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	1e59      	subs	r1, r3, #1
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a70:	3301      	adds	r3, #1
 8001a72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a76:	e051      	b.n	8001b1c <HAL_I2C_Init+0x1dc>
 8001a78:	2304      	movs	r3, #4
 8001a7a:	e04f      	b.n	8001b1c <HAL_I2C_Init+0x1dc>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d111      	bne.n	8001aa8 <HAL_I2C_Init+0x168>
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	1e58      	subs	r0, r3, #1
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6859      	ldr	r1, [r3, #4]
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	440b      	add	r3, r1
 8001a92:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a96:	3301      	adds	r3, #1
 8001a98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	bf0c      	ite	eq
 8001aa0:	2301      	moveq	r3, #1
 8001aa2:	2300      	movne	r3, #0
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	e012      	b.n	8001ace <HAL_I2C_Init+0x18e>
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	1e58      	subs	r0, r3, #1
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6859      	ldr	r1, [r3, #4]
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	440b      	add	r3, r1
 8001ab6:	0099      	lsls	r1, r3, #2
 8001ab8:	440b      	add	r3, r1
 8001aba:	fbb0 f3f3 	udiv	r3, r0, r3
 8001abe:	3301      	adds	r3, #1
 8001ac0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	bf0c      	ite	eq
 8001ac8:	2301      	moveq	r3, #1
 8001aca:	2300      	movne	r3, #0
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <HAL_I2C_Init+0x196>
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e022      	b.n	8001b1c <HAL_I2C_Init+0x1dc>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d10e      	bne.n	8001afc <HAL_I2C_Init+0x1bc>
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	1e58      	subs	r0, r3, #1
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6859      	ldr	r1, [r3, #4]
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	440b      	add	r3, r1
 8001aec:	fbb0 f3f3 	udiv	r3, r0, r3
 8001af0:	3301      	adds	r3, #1
 8001af2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001af6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001afa:	e00f      	b.n	8001b1c <HAL_I2C_Init+0x1dc>
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	1e58      	subs	r0, r3, #1
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6859      	ldr	r1, [r3, #4]
 8001b04:	460b      	mov	r3, r1
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	440b      	add	r3, r1
 8001b0a:	0099      	lsls	r1, r3, #2
 8001b0c:	440b      	add	r3, r1
 8001b0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b12:	3301      	adds	r3, #1
 8001b14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b1c:	6879      	ldr	r1, [r7, #4]
 8001b1e:	6809      	ldr	r1, [r1, #0]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	69da      	ldr	r2, [r3, #28]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6a1b      	ldr	r3, [r3, #32]
 8001b36:	431a      	orrs	r2, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	430a      	orrs	r2, r1
 8001b3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001b4a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	6911      	ldr	r1, [r2, #16]
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	68d2      	ldr	r2, [r2, #12]
 8001b56:	4311      	orrs	r1, r2
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	6812      	ldr	r2, [r2, #0]
 8001b5c:	430b      	orrs	r3, r1
 8001b5e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	695a      	ldr	r2, [r3, #20]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	699b      	ldr	r3, [r3, #24]
 8001b72:	431a      	orrs	r2, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	430a      	orrs	r2, r1
 8001b7a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f042 0201 	orr.w	r2, r2, #1
 8001b8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2220      	movs	r2, #32
 8001b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3710      	adds	r7, #16
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	000186a0 	.word	0x000186a0
 8001bb8:	001e847f 	.word	0x001e847f
 8001bbc:	003d08ff 	.word	0x003d08ff
 8001bc0:	431bde83 	.word	0x431bde83
 8001bc4:	10624dd3 	.word	0x10624dd3

08001bc8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b088      	sub	sp, #32
 8001bcc:	af02      	add	r7, sp, #8
 8001bce:	60f8      	str	r0, [r7, #12]
 8001bd0:	607a      	str	r2, [r7, #4]
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	817b      	strh	r3, [r7, #10]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001bdc:	f7ff fc0c 	bl	80013f8 <HAL_GetTick>
 8001be0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	2b20      	cmp	r3, #32
 8001bec:	f040 80e0 	bne.w	8001db0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	9300      	str	r3, [sp, #0]
 8001bf4:	2319      	movs	r3, #25
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	4970      	ldr	r1, [pc, #448]	; (8001dbc <HAL_I2C_Master_Transmit+0x1f4>)
 8001bfa:	68f8      	ldr	r0, [r7, #12]
 8001bfc:	f000 f964 	bl	8001ec8 <I2C_WaitOnFlagUntilTimeout>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001c06:	2302      	movs	r3, #2
 8001c08:	e0d3      	b.n	8001db2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d101      	bne.n	8001c18 <HAL_I2C_Master_Transmit+0x50>
 8001c14:	2302      	movs	r3, #2
 8001c16:	e0cc      	b.n	8001db2 <HAL_I2C_Master_Transmit+0x1ea>
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d007      	beq.n	8001c3e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f042 0201 	orr.w	r2, r2, #1
 8001c3c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c4c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2221      	movs	r2, #33	; 0x21
 8001c52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2210      	movs	r2, #16
 8001c5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2200      	movs	r2, #0
 8001c62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	893a      	ldrh	r2, [r7, #8]
 8001c6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c74:	b29a      	uxth	r2, r3
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	4a50      	ldr	r2, [pc, #320]	; (8001dc0 <HAL_I2C_Master_Transmit+0x1f8>)
 8001c7e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001c80:	8979      	ldrh	r1, [r7, #10]
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	6a3a      	ldr	r2, [r7, #32]
 8001c86:	68f8      	ldr	r0, [r7, #12]
 8001c88:	f000 f89c 	bl	8001dc4 <I2C_MasterRequestWrite>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e08d      	b.n	8001db2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c96:	2300      	movs	r3, #0
 8001c98:	613b      	str	r3, [r7, #16]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	695b      	ldr	r3, [r3, #20]
 8001ca0:	613b      	str	r3, [r7, #16]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	613b      	str	r3, [r7, #16]
 8001caa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001cac:	e066      	b.n	8001d7c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cae:	697a      	ldr	r2, [r7, #20]
 8001cb0:	6a39      	ldr	r1, [r7, #32]
 8001cb2:	68f8      	ldr	r0, [r7, #12]
 8001cb4:	f000 fa22 	bl	80020fc <I2C_WaitOnTXEFlagUntilTimeout>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d00d      	beq.n	8001cda <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc2:	2b04      	cmp	r3, #4
 8001cc4:	d107      	bne.n	8001cd6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cd4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e06b      	b.n	8001db2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cde:	781a      	ldrb	r2, [r3, #0]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cea:	1c5a      	adds	r2, r3, #1
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cf4:	b29b      	uxth	r3, r3
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	b29a      	uxth	r2, r3
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d02:	3b01      	subs	r3, #1
 8001d04:	b29a      	uxth	r2, r3
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	695b      	ldr	r3, [r3, #20]
 8001d10:	f003 0304 	and.w	r3, r3, #4
 8001d14:	2b04      	cmp	r3, #4
 8001d16:	d11b      	bne.n	8001d50 <HAL_I2C_Master_Transmit+0x188>
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d017      	beq.n	8001d50 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d24:	781a      	ldrb	r2, [r3, #0]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d30:	1c5a      	adds	r2, r3, #1
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	3b01      	subs	r3, #1
 8001d3e:	b29a      	uxth	r2, r3
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d48:	3b01      	subs	r3, #1
 8001d4a:	b29a      	uxth	r2, r3
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d50:	697a      	ldr	r2, [r7, #20]
 8001d52:	6a39      	ldr	r1, [r7, #32]
 8001d54:	68f8      	ldr	r0, [r7, #12]
 8001d56:	f000 fa19 	bl	800218c <I2C_WaitOnBTFFlagUntilTimeout>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d00d      	beq.n	8001d7c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d64:	2b04      	cmp	r3, #4
 8001d66:	d107      	bne.n	8001d78 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d76:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e01a      	b.n	8001db2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d194      	bne.n	8001cae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2220      	movs	r2, #32
 8001d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2200      	movs	r2, #0
 8001da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001dac:	2300      	movs	r3, #0
 8001dae:	e000      	b.n	8001db2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001db0:	2302      	movs	r3, #2
  }
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3718      	adds	r7, #24
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	00100002 	.word	0x00100002
 8001dc0:	ffff0000 	.word	0xffff0000

08001dc4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b088      	sub	sp, #32
 8001dc8:	af02      	add	r7, sp, #8
 8001dca:	60f8      	str	r0, [r7, #12]
 8001dcc:	607a      	str	r2, [r7, #4]
 8001dce:	603b      	str	r3, [r7, #0]
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	2b08      	cmp	r3, #8
 8001dde:	d006      	beq.n	8001dee <I2C_MasterRequestWrite+0x2a>
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d003      	beq.n	8001dee <I2C_MasterRequestWrite+0x2a>
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001dec:	d108      	bne.n	8001e00 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001dfc:	601a      	str	r2, [r3, #0]
 8001dfe:	e00b      	b.n	8001e18 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e04:	2b12      	cmp	r3, #18
 8001e06:	d107      	bne.n	8001e18 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e16:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	9300      	str	r3, [sp, #0]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e24:	68f8      	ldr	r0, [r7, #12]
 8001e26:	f000 f84f 	bl	8001ec8 <I2C_WaitOnFlagUntilTimeout>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d00d      	beq.n	8001e4c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e3e:	d103      	bne.n	8001e48 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e46:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	e035      	b.n	8001eb8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	691b      	ldr	r3, [r3, #16]
 8001e50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e54:	d108      	bne.n	8001e68 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001e56:	897b      	ldrh	r3, [r7, #10]
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001e64:	611a      	str	r2, [r3, #16]
 8001e66:	e01b      	b.n	8001ea0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001e68:	897b      	ldrh	r3, [r7, #10]
 8001e6a:	11db      	asrs	r3, r3, #7
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	f003 0306 	and.w	r3, r3, #6
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	f063 030f 	orn	r3, r3, #15
 8001e78:	b2da      	uxtb	r2, r3
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	490e      	ldr	r1, [pc, #56]	; (8001ec0 <I2C_MasterRequestWrite+0xfc>)
 8001e86:	68f8      	ldr	r0, [r7, #12]
 8001e88:	f000 f898 	bl	8001fbc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e010      	b.n	8001eb8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001e96:	897b      	ldrh	r3, [r7, #10]
 8001e98:	b2da      	uxtb	r2, r3
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	4907      	ldr	r1, [pc, #28]	; (8001ec4 <I2C_MasterRequestWrite+0x100>)
 8001ea6:	68f8      	ldr	r0, [r7, #12]
 8001ea8:	f000 f888 	bl	8001fbc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e000      	b.n	8001eb8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001eb6:	2300      	movs	r3, #0
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3718      	adds	r7, #24
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	00010008 	.word	0x00010008
 8001ec4:	00010002 	.word	0x00010002

08001ec8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	60b9      	str	r1, [r7, #8]
 8001ed2:	603b      	str	r3, [r7, #0]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ed8:	e048      	b.n	8001f6c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ee0:	d044      	beq.n	8001f6c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ee2:	f7ff fa89 	bl	80013f8 <HAL_GetTick>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	683a      	ldr	r2, [r7, #0]
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d302      	bcc.n	8001ef8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d139      	bne.n	8001f6c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	0c1b      	lsrs	r3, r3, #16
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d10d      	bne.n	8001f1e <I2C_WaitOnFlagUntilTimeout+0x56>
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	695b      	ldr	r3, [r3, #20]
 8001f08:	43da      	mvns	r2, r3
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	bf0c      	ite	eq
 8001f14:	2301      	moveq	r3, #1
 8001f16:	2300      	movne	r3, #0
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	e00c      	b.n	8001f38 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	43da      	mvns	r2, r3
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	bf0c      	ite	eq
 8001f30:	2301      	moveq	r3, #1
 8001f32:	2300      	movne	r3, #0
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	461a      	mov	r2, r3
 8001f38:	79fb      	ldrb	r3, [r7, #7]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d116      	bne.n	8001f6c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2200      	movs	r2, #0
 8001f42:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2220      	movs	r2, #32
 8001f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f58:	f043 0220 	orr.w	r2, r3, #32
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2200      	movs	r2, #0
 8001f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e023      	b.n	8001fb4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	0c1b      	lsrs	r3, r3, #16
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d10d      	bne.n	8001f92 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	695b      	ldr	r3, [r3, #20]
 8001f7c:	43da      	mvns	r2, r3
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	4013      	ands	r3, r2
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	bf0c      	ite	eq
 8001f88:	2301      	moveq	r3, #1
 8001f8a:	2300      	movne	r3, #0
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	461a      	mov	r2, r3
 8001f90:	e00c      	b.n	8001fac <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	699b      	ldr	r3, [r3, #24]
 8001f98:	43da      	mvns	r2, r3
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	bf0c      	ite	eq
 8001fa4:	2301      	moveq	r3, #1
 8001fa6:	2300      	movne	r3, #0
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	461a      	mov	r2, r3
 8001fac:	79fb      	ldrb	r3, [r7, #7]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d093      	beq.n	8001eda <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001fb2:	2300      	movs	r3, #0
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3710      	adds	r7, #16
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
 8001fc8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001fca:	e071      	b.n	80020b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	695b      	ldr	r3, [r3, #20]
 8001fd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fda:	d123      	bne.n	8002024 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fea:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001ff4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2220      	movs	r2, #32
 8002000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2200      	movs	r2, #0
 8002008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002010:	f043 0204 	orr.w	r2, r3, #4
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2200      	movs	r2, #0
 800201c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e067      	b.n	80020f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800202a:	d041      	beq.n	80020b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800202c:	f7ff f9e4 	bl	80013f8 <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	429a      	cmp	r2, r3
 800203a:	d302      	bcc.n	8002042 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d136      	bne.n	80020b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	0c1b      	lsrs	r3, r3, #16
 8002046:	b2db      	uxtb	r3, r3
 8002048:	2b01      	cmp	r3, #1
 800204a:	d10c      	bne.n	8002066 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	695b      	ldr	r3, [r3, #20]
 8002052:	43da      	mvns	r2, r3
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	4013      	ands	r3, r2
 8002058:	b29b      	uxth	r3, r3
 800205a:	2b00      	cmp	r3, #0
 800205c:	bf14      	ite	ne
 800205e:	2301      	movne	r3, #1
 8002060:	2300      	moveq	r3, #0
 8002062:	b2db      	uxtb	r3, r3
 8002064:	e00b      	b.n	800207e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	699b      	ldr	r3, [r3, #24]
 800206c:	43da      	mvns	r2, r3
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	4013      	ands	r3, r2
 8002072:	b29b      	uxth	r3, r3
 8002074:	2b00      	cmp	r3, #0
 8002076:	bf14      	ite	ne
 8002078:	2301      	movne	r3, #1
 800207a:	2300      	moveq	r3, #0
 800207c:	b2db      	uxtb	r3, r3
 800207e:	2b00      	cmp	r3, #0
 8002080:	d016      	beq.n	80020b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2200      	movs	r2, #0
 8002086:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2220      	movs	r2, #32
 800208c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2200      	movs	r2, #0
 8002094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209c:	f043 0220 	orr.w	r2, r3, #32
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2200      	movs	r2, #0
 80020a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e021      	b.n	80020f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	0c1b      	lsrs	r3, r3, #16
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d10c      	bne.n	80020d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	695b      	ldr	r3, [r3, #20]
 80020c0:	43da      	mvns	r2, r3
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	4013      	ands	r3, r2
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	bf14      	ite	ne
 80020cc:	2301      	movne	r3, #1
 80020ce:	2300      	moveq	r3, #0
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	e00b      	b.n	80020ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	699b      	ldr	r3, [r3, #24]
 80020da:	43da      	mvns	r2, r3
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	4013      	ands	r3, r2
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	bf14      	ite	ne
 80020e6:	2301      	movne	r3, #1
 80020e8:	2300      	moveq	r3, #0
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	f47f af6d 	bne.w	8001fcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80020f2:	2300      	movs	r3, #0
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3710      	adds	r7, #16
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}

080020fc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002108:	e034      	b.n	8002174 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800210a:	68f8      	ldr	r0, [r7, #12]
 800210c:	f000 f886 	bl	800221c <I2C_IsAcknowledgeFailed>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e034      	b.n	8002184 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002120:	d028      	beq.n	8002174 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002122:	f7ff f969 	bl	80013f8 <HAL_GetTick>
 8002126:	4602      	mov	r2, r0
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	68ba      	ldr	r2, [r7, #8]
 800212e:	429a      	cmp	r2, r3
 8002130:	d302      	bcc.n	8002138 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d11d      	bne.n	8002174 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	695b      	ldr	r3, [r3, #20]
 800213e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002142:	2b80      	cmp	r3, #128	; 0x80
 8002144:	d016      	beq.n	8002174 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2200      	movs	r2, #0
 800214a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2220      	movs	r2, #32
 8002150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2200      	movs	r2, #0
 8002158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002160:	f043 0220 	orr.w	r2, r3, #32
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2200      	movs	r2, #0
 800216c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e007      	b.n	8002184 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	695b      	ldr	r3, [r3, #20]
 800217a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800217e:	2b80      	cmp	r3, #128	; 0x80
 8002180:	d1c3      	bne.n	800210a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002182:	2300      	movs	r3, #0
}
 8002184:	4618      	mov	r0, r3
 8002186:	3710      	adds	r7, #16
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002198:	e034      	b.n	8002204 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800219a:	68f8      	ldr	r0, [r7, #12]
 800219c:	f000 f83e 	bl	800221c <I2C_IsAcknowledgeFailed>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e034      	b.n	8002214 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021b0:	d028      	beq.n	8002204 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021b2:	f7ff f921 	bl	80013f8 <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	68ba      	ldr	r2, [r7, #8]
 80021be:	429a      	cmp	r2, r3
 80021c0:	d302      	bcc.n	80021c8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d11d      	bne.n	8002204 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	695b      	ldr	r3, [r3, #20]
 80021ce:	f003 0304 	and.w	r3, r3, #4
 80021d2:	2b04      	cmp	r3, #4
 80021d4:	d016      	beq.n	8002204 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2200      	movs	r2, #0
 80021da:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2220      	movs	r2, #32
 80021e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2200      	movs	r2, #0
 80021e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f0:	f043 0220 	orr.w	r2, r3, #32
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2200      	movs	r2, #0
 80021fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e007      	b.n	8002214 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	695b      	ldr	r3, [r3, #20]
 800220a:	f003 0304 	and.w	r3, r3, #4
 800220e:	2b04      	cmp	r3, #4
 8002210:	d1c3      	bne.n	800219a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002212:	2300      	movs	r3, #0
}
 8002214:	4618      	mov	r0, r3
 8002216:	3710      	adds	r7, #16
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800222e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002232:	d11b      	bne.n	800226c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800223c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2200      	movs	r2, #0
 8002242:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2220      	movs	r2, #32
 8002248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002258:	f043 0204 	orr.w	r2, r3, #4
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e000      	b.n	800226e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	370c      	adds	r7, #12
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
	...

0800227c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b086      	sub	sp, #24
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d101      	bne.n	800228e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e267      	b.n	800275e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	2b00      	cmp	r3, #0
 8002298:	d075      	beq.n	8002386 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800229a:	4b88      	ldr	r3, [pc, #544]	; (80024bc <HAL_RCC_OscConfig+0x240>)
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	f003 030c 	and.w	r3, r3, #12
 80022a2:	2b04      	cmp	r3, #4
 80022a4:	d00c      	beq.n	80022c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022a6:	4b85      	ldr	r3, [pc, #532]	; (80024bc <HAL_RCC_OscConfig+0x240>)
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022ae:	2b08      	cmp	r3, #8
 80022b0:	d112      	bne.n	80022d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022b2:	4b82      	ldr	r3, [pc, #520]	; (80024bc <HAL_RCC_OscConfig+0x240>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022be:	d10b      	bne.n	80022d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022c0:	4b7e      	ldr	r3, [pc, #504]	; (80024bc <HAL_RCC_OscConfig+0x240>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d05b      	beq.n	8002384 <HAL_RCC_OscConfig+0x108>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d157      	bne.n	8002384 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e242      	b.n	800275e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022e0:	d106      	bne.n	80022f0 <HAL_RCC_OscConfig+0x74>
 80022e2:	4b76      	ldr	r3, [pc, #472]	; (80024bc <HAL_RCC_OscConfig+0x240>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a75      	ldr	r2, [pc, #468]	; (80024bc <HAL_RCC_OscConfig+0x240>)
 80022e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022ec:	6013      	str	r3, [r2, #0]
 80022ee:	e01d      	b.n	800232c <HAL_RCC_OscConfig+0xb0>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022f8:	d10c      	bne.n	8002314 <HAL_RCC_OscConfig+0x98>
 80022fa:	4b70      	ldr	r3, [pc, #448]	; (80024bc <HAL_RCC_OscConfig+0x240>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a6f      	ldr	r2, [pc, #444]	; (80024bc <HAL_RCC_OscConfig+0x240>)
 8002300:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002304:	6013      	str	r3, [r2, #0]
 8002306:	4b6d      	ldr	r3, [pc, #436]	; (80024bc <HAL_RCC_OscConfig+0x240>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a6c      	ldr	r2, [pc, #432]	; (80024bc <HAL_RCC_OscConfig+0x240>)
 800230c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002310:	6013      	str	r3, [r2, #0]
 8002312:	e00b      	b.n	800232c <HAL_RCC_OscConfig+0xb0>
 8002314:	4b69      	ldr	r3, [pc, #420]	; (80024bc <HAL_RCC_OscConfig+0x240>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a68      	ldr	r2, [pc, #416]	; (80024bc <HAL_RCC_OscConfig+0x240>)
 800231a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800231e:	6013      	str	r3, [r2, #0]
 8002320:	4b66      	ldr	r3, [pc, #408]	; (80024bc <HAL_RCC_OscConfig+0x240>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a65      	ldr	r2, [pc, #404]	; (80024bc <HAL_RCC_OscConfig+0x240>)
 8002326:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800232a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d013      	beq.n	800235c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002334:	f7ff f860 	bl	80013f8 <HAL_GetTick>
 8002338:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800233a:	e008      	b.n	800234e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800233c:	f7ff f85c 	bl	80013f8 <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b64      	cmp	r3, #100	; 0x64
 8002348:	d901      	bls.n	800234e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e207      	b.n	800275e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800234e:	4b5b      	ldr	r3, [pc, #364]	; (80024bc <HAL_RCC_OscConfig+0x240>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d0f0      	beq.n	800233c <HAL_RCC_OscConfig+0xc0>
 800235a:	e014      	b.n	8002386 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800235c:	f7ff f84c 	bl	80013f8 <HAL_GetTick>
 8002360:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002362:	e008      	b.n	8002376 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002364:	f7ff f848 	bl	80013f8 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b64      	cmp	r3, #100	; 0x64
 8002370:	d901      	bls.n	8002376 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e1f3      	b.n	800275e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002376:	4b51      	ldr	r3, [pc, #324]	; (80024bc <HAL_RCC_OscConfig+0x240>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d1f0      	bne.n	8002364 <HAL_RCC_OscConfig+0xe8>
 8002382:	e000      	b.n	8002386 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002384:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d063      	beq.n	800245a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002392:	4b4a      	ldr	r3, [pc, #296]	; (80024bc <HAL_RCC_OscConfig+0x240>)
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	f003 030c 	and.w	r3, r3, #12
 800239a:	2b00      	cmp	r3, #0
 800239c:	d00b      	beq.n	80023b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800239e:	4b47      	ldr	r3, [pc, #284]	; (80024bc <HAL_RCC_OscConfig+0x240>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023a6:	2b08      	cmp	r3, #8
 80023a8:	d11c      	bne.n	80023e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023aa:	4b44      	ldr	r3, [pc, #272]	; (80024bc <HAL_RCC_OscConfig+0x240>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d116      	bne.n	80023e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023b6:	4b41      	ldr	r3, [pc, #260]	; (80024bc <HAL_RCC_OscConfig+0x240>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d005      	beq.n	80023ce <HAL_RCC_OscConfig+0x152>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d001      	beq.n	80023ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e1c7      	b.n	800275e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ce:	4b3b      	ldr	r3, [pc, #236]	; (80024bc <HAL_RCC_OscConfig+0x240>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	691b      	ldr	r3, [r3, #16]
 80023da:	00db      	lsls	r3, r3, #3
 80023dc:	4937      	ldr	r1, [pc, #220]	; (80024bc <HAL_RCC_OscConfig+0x240>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023e2:	e03a      	b.n	800245a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d020      	beq.n	800242e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023ec:	4b34      	ldr	r3, [pc, #208]	; (80024c0 <HAL_RCC_OscConfig+0x244>)
 80023ee:	2201      	movs	r2, #1
 80023f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f2:	f7ff f801 	bl	80013f8 <HAL_GetTick>
 80023f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023f8:	e008      	b.n	800240c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023fa:	f7fe fffd 	bl	80013f8 <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	2b02      	cmp	r3, #2
 8002406:	d901      	bls.n	800240c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e1a8      	b.n	800275e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800240c:	4b2b      	ldr	r3, [pc, #172]	; (80024bc <HAL_RCC_OscConfig+0x240>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0302 	and.w	r3, r3, #2
 8002414:	2b00      	cmp	r3, #0
 8002416:	d0f0      	beq.n	80023fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002418:	4b28      	ldr	r3, [pc, #160]	; (80024bc <HAL_RCC_OscConfig+0x240>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	691b      	ldr	r3, [r3, #16]
 8002424:	00db      	lsls	r3, r3, #3
 8002426:	4925      	ldr	r1, [pc, #148]	; (80024bc <HAL_RCC_OscConfig+0x240>)
 8002428:	4313      	orrs	r3, r2
 800242a:	600b      	str	r3, [r1, #0]
 800242c:	e015      	b.n	800245a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800242e:	4b24      	ldr	r3, [pc, #144]	; (80024c0 <HAL_RCC_OscConfig+0x244>)
 8002430:	2200      	movs	r2, #0
 8002432:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002434:	f7fe ffe0 	bl	80013f8 <HAL_GetTick>
 8002438:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800243a:	e008      	b.n	800244e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800243c:	f7fe ffdc 	bl	80013f8 <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	2b02      	cmp	r3, #2
 8002448:	d901      	bls.n	800244e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e187      	b.n	800275e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800244e:	4b1b      	ldr	r3, [pc, #108]	; (80024bc <HAL_RCC_OscConfig+0x240>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0302 	and.w	r3, r3, #2
 8002456:	2b00      	cmp	r3, #0
 8002458:	d1f0      	bne.n	800243c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0308 	and.w	r3, r3, #8
 8002462:	2b00      	cmp	r3, #0
 8002464:	d036      	beq.n	80024d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	695b      	ldr	r3, [r3, #20]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d016      	beq.n	800249c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800246e:	4b15      	ldr	r3, [pc, #84]	; (80024c4 <HAL_RCC_OscConfig+0x248>)
 8002470:	2201      	movs	r2, #1
 8002472:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002474:	f7fe ffc0 	bl	80013f8 <HAL_GetTick>
 8002478:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800247a:	e008      	b.n	800248e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800247c:	f7fe ffbc 	bl	80013f8 <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	2b02      	cmp	r3, #2
 8002488:	d901      	bls.n	800248e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e167      	b.n	800275e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800248e:	4b0b      	ldr	r3, [pc, #44]	; (80024bc <HAL_RCC_OscConfig+0x240>)
 8002490:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	2b00      	cmp	r3, #0
 8002498:	d0f0      	beq.n	800247c <HAL_RCC_OscConfig+0x200>
 800249a:	e01b      	b.n	80024d4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800249c:	4b09      	ldr	r3, [pc, #36]	; (80024c4 <HAL_RCC_OscConfig+0x248>)
 800249e:	2200      	movs	r2, #0
 80024a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024a2:	f7fe ffa9 	bl	80013f8 <HAL_GetTick>
 80024a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024a8:	e00e      	b.n	80024c8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024aa:	f7fe ffa5 	bl	80013f8 <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d907      	bls.n	80024c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e150      	b.n	800275e <HAL_RCC_OscConfig+0x4e2>
 80024bc:	40023800 	.word	0x40023800
 80024c0:	42470000 	.word	0x42470000
 80024c4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024c8:	4b88      	ldr	r3, [pc, #544]	; (80026ec <HAL_RCC_OscConfig+0x470>)
 80024ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024cc:	f003 0302 	and.w	r3, r3, #2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d1ea      	bne.n	80024aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0304 	and.w	r3, r3, #4
 80024dc:	2b00      	cmp	r3, #0
 80024de:	f000 8097 	beq.w	8002610 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024e2:	2300      	movs	r3, #0
 80024e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024e6:	4b81      	ldr	r3, [pc, #516]	; (80026ec <HAL_RCC_OscConfig+0x470>)
 80024e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d10f      	bne.n	8002512 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024f2:	2300      	movs	r3, #0
 80024f4:	60bb      	str	r3, [r7, #8]
 80024f6:	4b7d      	ldr	r3, [pc, #500]	; (80026ec <HAL_RCC_OscConfig+0x470>)
 80024f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fa:	4a7c      	ldr	r2, [pc, #496]	; (80026ec <HAL_RCC_OscConfig+0x470>)
 80024fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002500:	6413      	str	r3, [r2, #64]	; 0x40
 8002502:	4b7a      	ldr	r3, [pc, #488]	; (80026ec <HAL_RCC_OscConfig+0x470>)
 8002504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800250a:	60bb      	str	r3, [r7, #8]
 800250c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800250e:	2301      	movs	r3, #1
 8002510:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002512:	4b77      	ldr	r3, [pc, #476]	; (80026f0 <HAL_RCC_OscConfig+0x474>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800251a:	2b00      	cmp	r3, #0
 800251c:	d118      	bne.n	8002550 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800251e:	4b74      	ldr	r3, [pc, #464]	; (80026f0 <HAL_RCC_OscConfig+0x474>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a73      	ldr	r2, [pc, #460]	; (80026f0 <HAL_RCC_OscConfig+0x474>)
 8002524:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002528:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800252a:	f7fe ff65 	bl	80013f8 <HAL_GetTick>
 800252e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002530:	e008      	b.n	8002544 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002532:	f7fe ff61 	bl	80013f8 <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	2b02      	cmp	r3, #2
 800253e:	d901      	bls.n	8002544 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002540:	2303      	movs	r3, #3
 8002542:	e10c      	b.n	800275e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002544:	4b6a      	ldr	r3, [pc, #424]	; (80026f0 <HAL_RCC_OscConfig+0x474>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800254c:	2b00      	cmp	r3, #0
 800254e:	d0f0      	beq.n	8002532 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	2b01      	cmp	r3, #1
 8002556:	d106      	bne.n	8002566 <HAL_RCC_OscConfig+0x2ea>
 8002558:	4b64      	ldr	r3, [pc, #400]	; (80026ec <HAL_RCC_OscConfig+0x470>)
 800255a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800255c:	4a63      	ldr	r2, [pc, #396]	; (80026ec <HAL_RCC_OscConfig+0x470>)
 800255e:	f043 0301 	orr.w	r3, r3, #1
 8002562:	6713      	str	r3, [r2, #112]	; 0x70
 8002564:	e01c      	b.n	80025a0 <HAL_RCC_OscConfig+0x324>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	2b05      	cmp	r3, #5
 800256c:	d10c      	bne.n	8002588 <HAL_RCC_OscConfig+0x30c>
 800256e:	4b5f      	ldr	r3, [pc, #380]	; (80026ec <HAL_RCC_OscConfig+0x470>)
 8002570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002572:	4a5e      	ldr	r2, [pc, #376]	; (80026ec <HAL_RCC_OscConfig+0x470>)
 8002574:	f043 0304 	orr.w	r3, r3, #4
 8002578:	6713      	str	r3, [r2, #112]	; 0x70
 800257a:	4b5c      	ldr	r3, [pc, #368]	; (80026ec <HAL_RCC_OscConfig+0x470>)
 800257c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800257e:	4a5b      	ldr	r2, [pc, #364]	; (80026ec <HAL_RCC_OscConfig+0x470>)
 8002580:	f043 0301 	orr.w	r3, r3, #1
 8002584:	6713      	str	r3, [r2, #112]	; 0x70
 8002586:	e00b      	b.n	80025a0 <HAL_RCC_OscConfig+0x324>
 8002588:	4b58      	ldr	r3, [pc, #352]	; (80026ec <HAL_RCC_OscConfig+0x470>)
 800258a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800258c:	4a57      	ldr	r2, [pc, #348]	; (80026ec <HAL_RCC_OscConfig+0x470>)
 800258e:	f023 0301 	bic.w	r3, r3, #1
 8002592:	6713      	str	r3, [r2, #112]	; 0x70
 8002594:	4b55      	ldr	r3, [pc, #340]	; (80026ec <HAL_RCC_OscConfig+0x470>)
 8002596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002598:	4a54      	ldr	r2, [pc, #336]	; (80026ec <HAL_RCC_OscConfig+0x470>)
 800259a:	f023 0304 	bic.w	r3, r3, #4
 800259e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d015      	beq.n	80025d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025a8:	f7fe ff26 	bl	80013f8 <HAL_GetTick>
 80025ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025ae:	e00a      	b.n	80025c6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025b0:	f7fe ff22 	bl	80013f8 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80025be:	4293      	cmp	r3, r2
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e0cb      	b.n	800275e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025c6:	4b49      	ldr	r3, [pc, #292]	; (80026ec <HAL_RCC_OscConfig+0x470>)
 80025c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d0ee      	beq.n	80025b0 <HAL_RCC_OscConfig+0x334>
 80025d2:	e014      	b.n	80025fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025d4:	f7fe ff10 	bl	80013f8 <HAL_GetTick>
 80025d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025da:	e00a      	b.n	80025f2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025dc:	f7fe ff0c 	bl	80013f8 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e0b5      	b.n	800275e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025f2:	4b3e      	ldr	r3, [pc, #248]	; (80026ec <HAL_RCC_OscConfig+0x470>)
 80025f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d1ee      	bne.n	80025dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025fe:	7dfb      	ldrb	r3, [r7, #23]
 8002600:	2b01      	cmp	r3, #1
 8002602:	d105      	bne.n	8002610 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002604:	4b39      	ldr	r3, [pc, #228]	; (80026ec <HAL_RCC_OscConfig+0x470>)
 8002606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002608:	4a38      	ldr	r2, [pc, #224]	; (80026ec <HAL_RCC_OscConfig+0x470>)
 800260a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800260e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	699b      	ldr	r3, [r3, #24]
 8002614:	2b00      	cmp	r3, #0
 8002616:	f000 80a1 	beq.w	800275c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800261a:	4b34      	ldr	r3, [pc, #208]	; (80026ec <HAL_RCC_OscConfig+0x470>)
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f003 030c 	and.w	r3, r3, #12
 8002622:	2b08      	cmp	r3, #8
 8002624:	d05c      	beq.n	80026e0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	699b      	ldr	r3, [r3, #24]
 800262a:	2b02      	cmp	r3, #2
 800262c:	d141      	bne.n	80026b2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800262e:	4b31      	ldr	r3, [pc, #196]	; (80026f4 <HAL_RCC_OscConfig+0x478>)
 8002630:	2200      	movs	r2, #0
 8002632:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002634:	f7fe fee0 	bl	80013f8 <HAL_GetTick>
 8002638:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800263a:	e008      	b.n	800264e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800263c:	f7fe fedc 	bl	80013f8 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b02      	cmp	r3, #2
 8002648:	d901      	bls.n	800264e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e087      	b.n	800275e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800264e:	4b27      	ldr	r3, [pc, #156]	; (80026ec <HAL_RCC_OscConfig+0x470>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d1f0      	bne.n	800263c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	69da      	ldr	r2, [r3, #28]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6a1b      	ldr	r3, [r3, #32]
 8002662:	431a      	orrs	r2, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002668:	019b      	lsls	r3, r3, #6
 800266a:	431a      	orrs	r2, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002670:	085b      	lsrs	r3, r3, #1
 8002672:	3b01      	subs	r3, #1
 8002674:	041b      	lsls	r3, r3, #16
 8002676:	431a      	orrs	r2, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800267c:	061b      	lsls	r3, r3, #24
 800267e:	491b      	ldr	r1, [pc, #108]	; (80026ec <HAL_RCC_OscConfig+0x470>)
 8002680:	4313      	orrs	r3, r2
 8002682:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002684:	4b1b      	ldr	r3, [pc, #108]	; (80026f4 <HAL_RCC_OscConfig+0x478>)
 8002686:	2201      	movs	r2, #1
 8002688:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800268a:	f7fe feb5 	bl	80013f8 <HAL_GetTick>
 800268e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002690:	e008      	b.n	80026a4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002692:	f7fe feb1 	bl	80013f8 <HAL_GetTick>
 8002696:	4602      	mov	r2, r0
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	2b02      	cmp	r3, #2
 800269e:	d901      	bls.n	80026a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	e05c      	b.n	800275e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026a4:	4b11      	ldr	r3, [pc, #68]	; (80026ec <HAL_RCC_OscConfig+0x470>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d0f0      	beq.n	8002692 <HAL_RCC_OscConfig+0x416>
 80026b0:	e054      	b.n	800275c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026b2:	4b10      	ldr	r3, [pc, #64]	; (80026f4 <HAL_RCC_OscConfig+0x478>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b8:	f7fe fe9e 	bl	80013f8 <HAL_GetTick>
 80026bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026be:	e008      	b.n	80026d2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026c0:	f7fe fe9a 	bl	80013f8 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e045      	b.n	800275e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026d2:	4b06      	ldr	r3, [pc, #24]	; (80026ec <HAL_RCC_OscConfig+0x470>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d1f0      	bne.n	80026c0 <HAL_RCC_OscConfig+0x444>
 80026de:	e03d      	b.n	800275c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	699b      	ldr	r3, [r3, #24]
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d107      	bne.n	80026f8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e038      	b.n	800275e <HAL_RCC_OscConfig+0x4e2>
 80026ec:	40023800 	.word	0x40023800
 80026f0:	40007000 	.word	0x40007000
 80026f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80026f8:	4b1b      	ldr	r3, [pc, #108]	; (8002768 <HAL_RCC_OscConfig+0x4ec>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	699b      	ldr	r3, [r3, #24]
 8002702:	2b01      	cmp	r3, #1
 8002704:	d028      	beq.n	8002758 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002710:	429a      	cmp	r2, r3
 8002712:	d121      	bne.n	8002758 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800271e:	429a      	cmp	r2, r3
 8002720:	d11a      	bne.n	8002758 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002722:	68fa      	ldr	r2, [r7, #12]
 8002724:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002728:	4013      	ands	r3, r2
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800272e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002730:	4293      	cmp	r3, r2
 8002732:	d111      	bne.n	8002758 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800273e:	085b      	lsrs	r3, r3, #1
 8002740:	3b01      	subs	r3, #1
 8002742:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002744:	429a      	cmp	r2, r3
 8002746:	d107      	bne.n	8002758 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002752:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002754:	429a      	cmp	r2, r3
 8002756:	d001      	beq.n	800275c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e000      	b.n	800275e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	3718      	adds	r7, #24
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	40023800 	.word	0x40023800

0800276c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d101      	bne.n	8002780 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e0cc      	b.n	800291a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002780:	4b68      	ldr	r3, [pc, #416]	; (8002924 <HAL_RCC_ClockConfig+0x1b8>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0307 	and.w	r3, r3, #7
 8002788:	683a      	ldr	r2, [r7, #0]
 800278a:	429a      	cmp	r2, r3
 800278c:	d90c      	bls.n	80027a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800278e:	4b65      	ldr	r3, [pc, #404]	; (8002924 <HAL_RCC_ClockConfig+0x1b8>)
 8002790:	683a      	ldr	r2, [r7, #0]
 8002792:	b2d2      	uxtb	r2, r2
 8002794:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002796:	4b63      	ldr	r3, [pc, #396]	; (8002924 <HAL_RCC_ClockConfig+0x1b8>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0307 	and.w	r3, r3, #7
 800279e:	683a      	ldr	r2, [r7, #0]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d001      	beq.n	80027a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e0b8      	b.n	800291a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0302 	and.w	r3, r3, #2
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d020      	beq.n	80027f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0304 	and.w	r3, r3, #4
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d005      	beq.n	80027cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027c0:	4b59      	ldr	r3, [pc, #356]	; (8002928 <HAL_RCC_ClockConfig+0x1bc>)
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	4a58      	ldr	r2, [pc, #352]	; (8002928 <HAL_RCC_ClockConfig+0x1bc>)
 80027c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80027ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0308 	and.w	r3, r3, #8
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d005      	beq.n	80027e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027d8:	4b53      	ldr	r3, [pc, #332]	; (8002928 <HAL_RCC_ClockConfig+0x1bc>)
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	4a52      	ldr	r2, [pc, #328]	; (8002928 <HAL_RCC_ClockConfig+0x1bc>)
 80027de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80027e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027e4:	4b50      	ldr	r3, [pc, #320]	; (8002928 <HAL_RCC_ClockConfig+0x1bc>)
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	494d      	ldr	r1, [pc, #308]	; (8002928 <HAL_RCC_ClockConfig+0x1bc>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d044      	beq.n	800288c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	2b01      	cmp	r3, #1
 8002808:	d107      	bne.n	800281a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800280a:	4b47      	ldr	r3, [pc, #284]	; (8002928 <HAL_RCC_ClockConfig+0x1bc>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d119      	bne.n	800284a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e07f      	b.n	800291a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	2b02      	cmp	r3, #2
 8002820:	d003      	beq.n	800282a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002826:	2b03      	cmp	r3, #3
 8002828:	d107      	bne.n	800283a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800282a:	4b3f      	ldr	r3, [pc, #252]	; (8002928 <HAL_RCC_ClockConfig+0x1bc>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d109      	bne.n	800284a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e06f      	b.n	800291a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800283a:	4b3b      	ldr	r3, [pc, #236]	; (8002928 <HAL_RCC_ClockConfig+0x1bc>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0302 	and.w	r3, r3, #2
 8002842:	2b00      	cmp	r3, #0
 8002844:	d101      	bne.n	800284a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e067      	b.n	800291a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800284a:	4b37      	ldr	r3, [pc, #220]	; (8002928 <HAL_RCC_ClockConfig+0x1bc>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f023 0203 	bic.w	r2, r3, #3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	4934      	ldr	r1, [pc, #208]	; (8002928 <HAL_RCC_ClockConfig+0x1bc>)
 8002858:	4313      	orrs	r3, r2
 800285a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800285c:	f7fe fdcc 	bl	80013f8 <HAL_GetTick>
 8002860:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002862:	e00a      	b.n	800287a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002864:	f7fe fdc8 	bl	80013f8 <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002872:	4293      	cmp	r3, r2
 8002874:	d901      	bls.n	800287a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e04f      	b.n	800291a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800287a:	4b2b      	ldr	r3, [pc, #172]	; (8002928 <HAL_RCC_ClockConfig+0x1bc>)
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f003 020c 	and.w	r2, r3, #12
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	429a      	cmp	r2, r3
 800288a:	d1eb      	bne.n	8002864 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800288c:	4b25      	ldr	r3, [pc, #148]	; (8002924 <HAL_RCC_ClockConfig+0x1b8>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0307 	and.w	r3, r3, #7
 8002894:	683a      	ldr	r2, [r7, #0]
 8002896:	429a      	cmp	r2, r3
 8002898:	d20c      	bcs.n	80028b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800289a:	4b22      	ldr	r3, [pc, #136]	; (8002924 <HAL_RCC_ClockConfig+0x1b8>)
 800289c:	683a      	ldr	r2, [r7, #0]
 800289e:	b2d2      	uxtb	r2, r2
 80028a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028a2:	4b20      	ldr	r3, [pc, #128]	; (8002924 <HAL_RCC_ClockConfig+0x1b8>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0307 	and.w	r3, r3, #7
 80028aa:	683a      	ldr	r2, [r7, #0]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d001      	beq.n	80028b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e032      	b.n	800291a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0304 	and.w	r3, r3, #4
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d008      	beq.n	80028d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028c0:	4b19      	ldr	r3, [pc, #100]	; (8002928 <HAL_RCC_ClockConfig+0x1bc>)
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	4916      	ldr	r1, [pc, #88]	; (8002928 <HAL_RCC_ClockConfig+0x1bc>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0308 	and.w	r3, r3, #8
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d009      	beq.n	80028f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028de:	4b12      	ldr	r3, [pc, #72]	; (8002928 <HAL_RCC_ClockConfig+0x1bc>)
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	691b      	ldr	r3, [r3, #16]
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	490e      	ldr	r1, [pc, #56]	; (8002928 <HAL_RCC_ClockConfig+0x1bc>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028f2:	f000 f821 	bl	8002938 <HAL_RCC_GetSysClockFreq>
 80028f6:	4602      	mov	r2, r0
 80028f8:	4b0b      	ldr	r3, [pc, #44]	; (8002928 <HAL_RCC_ClockConfig+0x1bc>)
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	091b      	lsrs	r3, r3, #4
 80028fe:	f003 030f 	and.w	r3, r3, #15
 8002902:	490a      	ldr	r1, [pc, #40]	; (800292c <HAL_RCC_ClockConfig+0x1c0>)
 8002904:	5ccb      	ldrb	r3, [r1, r3]
 8002906:	fa22 f303 	lsr.w	r3, r2, r3
 800290a:	4a09      	ldr	r2, [pc, #36]	; (8002930 <HAL_RCC_ClockConfig+0x1c4>)
 800290c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800290e:	4b09      	ldr	r3, [pc, #36]	; (8002934 <HAL_RCC_ClockConfig+0x1c8>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4618      	mov	r0, r3
 8002914:	f7fe fc6a 	bl	80011ec <HAL_InitTick>

  return HAL_OK;
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	3710      	adds	r7, #16
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	40023c00 	.word	0x40023c00
 8002928:	40023800 	.word	0x40023800
 800292c:	080048a0 	.word	0x080048a0
 8002930:	20000098 	.word	0x20000098
 8002934:	2000009c 	.word	0x2000009c

08002938 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002938:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800293c:	b094      	sub	sp, #80	; 0x50
 800293e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002940:	2300      	movs	r3, #0
 8002942:	647b      	str	r3, [r7, #68]	; 0x44
 8002944:	2300      	movs	r3, #0
 8002946:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002948:	2300      	movs	r3, #0
 800294a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800294c:	2300      	movs	r3, #0
 800294e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002950:	4b79      	ldr	r3, [pc, #484]	; (8002b38 <HAL_RCC_GetSysClockFreq+0x200>)
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f003 030c 	and.w	r3, r3, #12
 8002958:	2b08      	cmp	r3, #8
 800295a:	d00d      	beq.n	8002978 <HAL_RCC_GetSysClockFreq+0x40>
 800295c:	2b08      	cmp	r3, #8
 800295e:	f200 80e1 	bhi.w	8002b24 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002962:	2b00      	cmp	r3, #0
 8002964:	d002      	beq.n	800296c <HAL_RCC_GetSysClockFreq+0x34>
 8002966:	2b04      	cmp	r3, #4
 8002968:	d003      	beq.n	8002972 <HAL_RCC_GetSysClockFreq+0x3a>
 800296a:	e0db      	b.n	8002b24 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800296c:	4b73      	ldr	r3, [pc, #460]	; (8002b3c <HAL_RCC_GetSysClockFreq+0x204>)
 800296e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002970:	e0db      	b.n	8002b2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002972:	4b73      	ldr	r3, [pc, #460]	; (8002b40 <HAL_RCC_GetSysClockFreq+0x208>)
 8002974:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002976:	e0d8      	b.n	8002b2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002978:	4b6f      	ldr	r3, [pc, #444]	; (8002b38 <HAL_RCC_GetSysClockFreq+0x200>)
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002980:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002982:	4b6d      	ldr	r3, [pc, #436]	; (8002b38 <HAL_RCC_GetSysClockFreq+0x200>)
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d063      	beq.n	8002a56 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800298e:	4b6a      	ldr	r3, [pc, #424]	; (8002b38 <HAL_RCC_GetSysClockFreq+0x200>)
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	099b      	lsrs	r3, r3, #6
 8002994:	2200      	movs	r2, #0
 8002996:	63bb      	str	r3, [r7, #56]	; 0x38
 8002998:	63fa      	str	r2, [r7, #60]	; 0x3c
 800299a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800299c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029a0:	633b      	str	r3, [r7, #48]	; 0x30
 80029a2:	2300      	movs	r3, #0
 80029a4:	637b      	str	r3, [r7, #52]	; 0x34
 80029a6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80029aa:	4622      	mov	r2, r4
 80029ac:	462b      	mov	r3, r5
 80029ae:	f04f 0000 	mov.w	r0, #0
 80029b2:	f04f 0100 	mov.w	r1, #0
 80029b6:	0159      	lsls	r1, r3, #5
 80029b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029bc:	0150      	lsls	r0, r2, #5
 80029be:	4602      	mov	r2, r0
 80029c0:	460b      	mov	r3, r1
 80029c2:	4621      	mov	r1, r4
 80029c4:	1a51      	subs	r1, r2, r1
 80029c6:	6139      	str	r1, [r7, #16]
 80029c8:	4629      	mov	r1, r5
 80029ca:	eb63 0301 	sbc.w	r3, r3, r1
 80029ce:	617b      	str	r3, [r7, #20]
 80029d0:	f04f 0200 	mov.w	r2, #0
 80029d4:	f04f 0300 	mov.w	r3, #0
 80029d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80029dc:	4659      	mov	r1, fp
 80029de:	018b      	lsls	r3, r1, #6
 80029e0:	4651      	mov	r1, sl
 80029e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80029e6:	4651      	mov	r1, sl
 80029e8:	018a      	lsls	r2, r1, #6
 80029ea:	4651      	mov	r1, sl
 80029ec:	ebb2 0801 	subs.w	r8, r2, r1
 80029f0:	4659      	mov	r1, fp
 80029f2:	eb63 0901 	sbc.w	r9, r3, r1
 80029f6:	f04f 0200 	mov.w	r2, #0
 80029fa:	f04f 0300 	mov.w	r3, #0
 80029fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a0a:	4690      	mov	r8, r2
 8002a0c:	4699      	mov	r9, r3
 8002a0e:	4623      	mov	r3, r4
 8002a10:	eb18 0303 	adds.w	r3, r8, r3
 8002a14:	60bb      	str	r3, [r7, #8]
 8002a16:	462b      	mov	r3, r5
 8002a18:	eb49 0303 	adc.w	r3, r9, r3
 8002a1c:	60fb      	str	r3, [r7, #12]
 8002a1e:	f04f 0200 	mov.w	r2, #0
 8002a22:	f04f 0300 	mov.w	r3, #0
 8002a26:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002a2a:	4629      	mov	r1, r5
 8002a2c:	024b      	lsls	r3, r1, #9
 8002a2e:	4621      	mov	r1, r4
 8002a30:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002a34:	4621      	mov	r1, r4
 8002a36:	024a      	lsls	r2, r1, #9
 8002a38:	4610      	mov	r0, r2
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a3e:	2200      	movs	r2, #0
 8002a40:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a42:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a44:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002a48:	f7fd fbca 	bl	80001e0 <__aeabi_uldivmod>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	460b      	mov	r3, r1
 8002a50:	4613      	mov	r3, r2
 8002a52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a54:	e058      	b.n	8002b08 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a56:	4b38      	ldr	r3, [pc, #224]	; (8002b38 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	099b      	lsrs	r3, r3, #6
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	4618      	mov	r0, r3
 8002a60:	4611      	mov	r1, r2
 8002a62:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002a66:	623b      	str	r3, [r7, #32]
 8002a68:	2300      	movs	r3, #0
 8002a6a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a6c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002a70:	4642      	mov	r2, r8
 8002a72:	464b      	mov	r3, r9
 8002a74:	f04f 0000 	mov.w	r0, #0
 8002a78:	f04f 0100 	mov.w	r1, #0
 8002a7c:	0159      	lsls	r1, r3, #5
 8002a7e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a82:	0150      	lsls	r0, r2, #5
 8002a84:	4602      	mov	r2, r0
 8002a86:	460b      	mov	r3, r1
 8002a88:	4641      	mov	r1, r8
 8002a8a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002a8e:	4649      	mov	r1, r9
 8002a90:	eb63 0b01 	sbc.w	fp, r3, r1
 8002a94:	f04f 0200 	mov.w	r2, #0
 8002a98:	f04f 0300 	mov.w	r3, #0
 8002a9c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002aa0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002aa4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002aa8:	ebb2 040a 	subs.w	r4, r2, sl
 8002aac:	eb63 050b 	sbc.w	r5, r3, fp
 8002ab0:	f04f 0200 	mov.w	r2, #0
 8002ab4:	f04f 0300 	mov.w	r3, #0
 8002ab8:	00eb      	lsls	r3, r5, #3
 8002aba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002abe:	00e2      	lsls	r2, r4, #3
 8002ac0:	4614      	mov	r4, r2
 8002ac2:	461d      	mov	r5, r3
 8002ac4:	4643      	mov	r3, r8
 8002ac6:	18e3      	adds	r3, r4, r3
 8002ac8:	603b      	str	r3, [r7, #0]
 8002aca:	464b      	mov	r3, r9
 8002acc:	eb45 0303 	adc.w	r3, r5, r3
 8002ad0:	607b      	str	r3, [r7, #4]
 8002ad2:	f04f 0200 	mov.w	r2, #0
 8002ad6:	f04f 0300 	mov.w	r3, #0
 8002ada:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ade:	4629      	mov	r1, r5
 8002ae0:	028b      	lsls	r3, r1, #10
 8002ae2:	4621      	mov	r1, r4
 8002ae4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ae8:	4621      	mov	r1, r4
 8002aea:	028a      	lsls	r2, r1, #10
 8002aec:	4610      	mov	r0, r2
 8002aee:	4619      	mov	r1, r3
 8002af0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002af2:	2200      	movs	r2, #0
 8002af4:	61bb      	str	r3, [r7, #24]
 8002af6:	61fa      	str	r2, [r7, #28]
 8002af8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002afc:	f7fd fb70 	bl	80001e0 <__aeabi_uldivmod>
 8002b00:	4602      	mov	r2, r0
 8002b02:	460b      	mov	r3, r1
 8002b04:	4613      	mov	r3, r2
 8002b06:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b08:	4b0b      	ldr	r3, [pc, #44]	; (8002b38 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	0c1b      	lsrs	r3, r3, #16
 8002b0e:	f003 0303 	and.w	r3, r3, #3
 8002b12:	3301      	adds	r3, #1
 8002b14:	005b      	lsls	r3, r3, #1
 8002b16:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002b18:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b20:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b22:	e002      	b.n	8002b2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b24:	4b05      	ldr	r3, [pc, #20]	; (8002b3c <HAL_RCC_GetSysClockFreq+0x204>)
 8002b26:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3750      	adds	r7, #80	; 0x50
 8002b30:	46bd      	mov	sp, r7
 8002b32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b36:	bf00      	nop
 8002b38:	40023800 	.word	0x40023800
 8002b3c:	00f42400 	.word	0x00f42400
 8002b40:	007a1200 	.word	0x007a1200

08002b44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b48:	4b03      	ldr	r3, [pc, #12]	; (8002b58 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	20000098 	.word	0x20000098

08002b5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b60:	f7ff fff0 	bl	8002b44 <HAL_RCC_GetHCLKFreq>
 8002b64:	4602      	mov	r2, r0
 8002b66:	4b05      	ldr	r3, [pc, #20]	; (8002b7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	0a9b      	lsrs	r3, r3, #10
 8002b6c:	f003 0307 	and.w	r3, r3, #7
 8002b70:	4903      	ldr	r1, [pc, #12]	; (8002b80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b72:	5ccb      	ldrb	r3, [r1, r3]
 8002b74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	40023800 	.word	0x40023800
 8002b80:	080048b0 	.word	0x080048b0

08002b84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b88:	f7ff ffdc 	bl	8002b44 <HAL_RCC_GetHCLKFreq>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	4b05      	ldr	r3, [pc, #20]	; (8002ba4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	0b5b      	lsrs	r3, r3, #13
 8002b94:	f003 0307 	and.w	r3, r3, #7
 8002b98:	4903      	ldr	r1, [pc, #12]	; (8002ba8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b9a:	5ccb      	ldrb	r3, [r1, r3]
 8002b9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	40023800 	.word	0x40023800
 8002ba8:	080048b0 	.word	0x080048b0

08002bac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	220f      	movs	r2, #15
 8002bba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002bbc:	4b12      	ldr	r3, [pc, #72]	; (8002c08 <HAL_RCC_GetClockConfig+0x5c>)
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	f003 0203 	and.w	r2, r3, #3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002bc8:	4b0f      	ldr	r3, [pc, #60]	; (8002c08 <HAL_RCC_GetClockConfig+0x5c>)
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002bd4:	4b0c      	ldr	r3, [pc, #48]	; (8002c08 <HAL_RCC_GetClockConfig+0x5c>)
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002be0:	4b09      	ldr	r3, [pc, #36]	; (8002c08 <HAL_RCC_GetClockConfig+0x5c>)
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	08db      	lsrs	r3, r3, #3
 8002be6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002bee:	4b07      	ldr	r3, [pc, #28]	; (8002c0c <HAL_RCC_GetClockConfig+0x60>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0207 	and.w	r2, r3, #7
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	601a      	str	r2, [r3, #0]
}
 8002bfa:	bf00      	nop
 8002bfc:	370c      	adds	r7, #12
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	40023800 	.word	0x40023800
 8002c0c:	40023c00 	.word	0x40023c00

08002c10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d101      	bne.n	8002c22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e041      	b.n	8002ca6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d106      	bne.n	8002c3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 f839 	bl	8002cae <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2202      	movs	r2, #2
 8002c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	3304      	adds	r3, #4
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	4610      	mov	r0, r2
 8002c50:	f000 f9b2 	bl	8002fb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3708      	adds	r7, #8
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}

08002cae <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002cae:	b480      	push	{r7}
 8002cb0:	b083      	sub	sp, #12
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002cb6:	bf00      	nop
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
	...

08002cc4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b085      	sub	sp, #20
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d001      	beq.n	8002cdc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e044      	b.n	8002d66 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2202      	movs	r2, #2
 8002ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	68da      	ldr	r2, [r3, #12]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f042 0201 	orr.w	r2, r2, #1
 8002cf2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a1e      	ldr	r2, [pc, #120]	; (8002d74 <HAL_TIM_Base_Start_IT+0xb0>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d018      	beq.n	8002d30 <HAL_TIM_Base_Start_IT+0x6c>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d06:	d013      	beq.n	8002d30 <HAL_TIM_Base_Start_IT+0x6c>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a1a      	ldr	r2, [pc, #104]	; (8002d78 <HAL_TIM_Base_Start_IT+0xb4>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d00e      	beq.n	8002d30 <HAL_TIM_Base_Start_IT+0x6c>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a19      	ldr	r2, [pc, #100]	; (8002d7c <HAL_TIM_Base_Start_IT+0xb8>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d009      	beq.n	8002d30 <HAL_TIM_Base_Start_IT+0x6c>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a17      	ldr	r2, [pc, #92]	; (8002d80 <HAL_TIM_Base_Start_IT+0xbc>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d004      	beq.n	8002d30 <HAL_TIM_Base_Start_IT+0x6c>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a16      	ldr	r2, [pc, #88]	; (8002d84 <HAL_TIM_Base_Start_IT+0xc0>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d111      	bne.n	8002d54 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f003 0307 	and.w	r3, r3, #7
 8002d3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2b06      	cmp	r3, #6
 8002d40:	d010      	beq.n	8002d64 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f042 0201 	orr.w	r2, r2, #1
 8002d50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d52:	e007      	b.n	8002d64 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f042 0201 	orr.w	r2, r2, #1
 8002d62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3714      	adds	r7, #20
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	40010000 	.word	0x40010000
 8002d78:	40000400 	.word	0x40000400
 8002d7c:	40000800 	.word	0x40000800
 8002d80:	40000c00 	.word	0x40000c00
 8002d84:	40014000 	.word	0x40014000

08002d88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d020      	beq.n	8002dec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f003 0302 	and.w	r3, r3, #2
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d01b      	beq.n	8002dec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f06f 0202 	mvn.w	r2, #2
 8002dbc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	699b      	ldr	r3, [r3, #24]
 8002dca:	f003 0303 	and.w	r3, r3, #3
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d003      	beq.n	8002dda <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 f8d2 	bl	8002f7c <HAL_TIM_IC_CaptureCallback>
 8002dd8:	e005      	b.n	8002de6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f000 f8c4 	bl	8002f68 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f000 f8d5 	bl	8002f90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	f003 0304 	and.w	r3, r3, #4
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d020      	beq.n	8002e38 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	f003 0304 	and.w	r3, r3, #4
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d01b      	beq.n	8002e38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f06f 0204 	mvn.w	r2, #4
 8002e08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2202      	movs	r2, #2
 8002e0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	699b      	ldr	r3, [r3, #24]
 8002e16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d003      	beq.n	8002e26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f000 f8ac 	bl	8002f7c <HAL_TIM_IC_CaptureCallback>
 8002e24:	e005      	b.n	8002e32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f000 f89e 	bl	8002f68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f000 f8af 	bl	8002f90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	f003 0308 	and.w	r3, r3, #8
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d020      	beq.n	8002e84 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f003 0308 	and.w	r3, r3, #8
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d01b      	beq.n	8002e84 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f06f 0208 	mvn.w	r2, #8
 8002e54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2204      	movs	r2, #4
 8002e5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	69db      	ldr	r3, [r3, #28]
 8002e62:	f003 0303 	and.w	r3, r3, #3
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d003      	beq.n	8002e72 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f000 f886 	bl	8002f7c <HAL_TIM_IC_CaptureCallback>
 8002e70:	e005      	b.n	8002e7e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f000 f878 	bl	8002f68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f000 f889 	bl	8002f90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	f003 0310 	and.w	r3, r3, #16
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d020      	beq.n	8002ed0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f003 0310 	and.w	r3, r3, #16
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d01b      	beq.n	8002ed0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f06f 0210 	mvn.w	r2, #16
 8002ea0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2208      	movs	r2, #8
 8002ea6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	69db      	ldr	r3, [r3, #28]
 8002eae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d003      	beq.n	8002ebe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 f860 	bl	8002f7c <HAL_TIM_IC_CaptureCallback>
 8002ebc:	e005      	b.n	8002eca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 f852 	bl	8002f68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f000 f863 	bl	8002f90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	f003 0301 	and.w	r3, r3, #1
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d00c      	beq.n	8002ef4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f003 0301 	and.w	r3, r3, #1
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d007      	beq.n	8002ef4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f06f 0201 	mvn.w	r2, #1
 8002eec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f7fd fffe 	bl	8000ef0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d00c      	beq.n	8002f18 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d007      	beq.n	8002f18 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f000 f8e6 	bl	80030e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00c      	beq.n	8002f3c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d007      	beq.n	8002f3c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f000 f834 	bl	8002fa4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	f003 0320 	and.w	r3, r3, #32
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d00c      	beq.n	8002f60 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	f003 0320 	and.w	r3, r3, #32
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d007      	beq.n	8002f60 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f06f 0220 	mvn.w	r2, #32
 8002f58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 f8b8 	bl	80030d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f60:	bf00      	nop
 8002f62:	3710      	adds	r7, #16
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f70:	bf00      	nop
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f84:	bf00      	nop
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f98:	bf00      	nop
 8002f9a:	370c      	adds	r7, #12
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr

08002fa4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002fac:	bf00      	nop
 8002fae:	370c      	adds	r7, #12
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b085      	sub	sp, #20
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	4a3a      	ldr	r2, [pc, #232]	; (80030b4 <TIM_Base_SetConfig+0xfc>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d00f      	beq.n	8002ff0 <TIM_Base_SetConfig+0x38>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fd6:	d00b      	beq.n	8002ff0 <TIM_Base_SetConfig+0x38>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	4a37      	ldr	r2, [pc, #220]	; (80030b8 <TIM_Base_SetConfig+0x100>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d007      	beq.n	8002ff0 <TIM_Base_SetConfig+0x38>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	4a36      	ldr	r2, [pc, #216]	; (80030bc <TIM_Base_SetConfig+0x104>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d003      	beq.n	8002ff0 <TIM_Base_SetConfig+0x38>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	4a35      	ldr	r2, [pc, #212]	; (80030c0 <TIM_Base_SetConfig+0x108>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d108      	bne.n	8003002 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ff6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	68fa      	ldr	r2, [r7, #12]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a2b      	ldr	r2, [pc, #172]	; (80030b4 <TIM_Base_SetConfig+0xfc>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d01b      	beq.n	8003042 <TIM_Base_SetConfig+0x8a>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003010:	d017      	beq.n	8003042 <TIM_Base_SetConfig+0x8a>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a28      	ldr	r2, [pc, #160]	; (80030b8 <TIM_Base_SetConfig+0x100>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d013      	beq.n	8003042 <TIM_Base_SetConfig+0x8a>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a27      	ldr	r2, [pc, #156]	; (80030bc <TIM_Base_SetConfig+0x104>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d00f      	beq.n	8003042 <TIM_Base_SetConfig+0x8a>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a26      	ldr	r2, [pc, #152]	; (80030c0 <TIM_Base_SetConfig+0x108>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d00b      	beq.n	8003042 <TIM_Base_SetConfig+0x8a>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a25      	ldr	r2, [pc, #148]	; (80030c4 <TIM_Base_SetConfig+0x10c>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d007      	beq.n	8003042 <TIM_Base_SetConfig+0x8a>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a24      	ldr	r2, [pc, #144]	; (80030c8 <TIM_Base_SetConfig+0x110>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d003      	beq.n	8003042 <TIM_Base_SetConfig+0x8a>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a23      	ldr	r2, [pc, #140]	; (80030cc <TIM_Base_SetConfig+0x114>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d108      	bne.n	8003054 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003048:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	68fa      	ldr	r2, [r7, #12]
 8003050:	4313      	orrs	r3, r2
 8003052:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	695b      	ldr	r3, [r3, #20]
 800305e:	4313      	orrs	r3, r2
 8003060:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	68fa      	ldr	r2, [r7, #12]
 8003066:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	689a      	ldr	r2, [r3, #8]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4a0e      	ldr	r2, [pc, #56]	; (80030b4 <TIM_Base_SetConfig+0xfc>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d103      	bne.n	8003088 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	691a      	ldr	r2, [r3, #16]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	f003 0301 	and.w	r3, r3, #1
 8003096:	2b01      	cmp	r3, #1
 8003098:	d105      	bne.n	80030a6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	691b      	ldr	r3, [r3, #16]
 800309e:	f023 0201 	bic.w	r2, r3, #1
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	611a      	str	r2, [r3, #16]
  }
}
 80030a6:	bf00      	nop
 80030a8:	3714      	adds	r7, #20
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	40010000 	.word	0x40010000
 80030b8:	40000400 	.word	0x40000400
 80030bc:	40000800 	.word	0x40000800
 80030c0:	40000c00 	.word	0x40000c00
 80030c4:	40014000 	.word	0x40014000
 80030c8:	40014400 	.word	0x40014400
 80030cc:	40014800 	.word	0x40014800

080030d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80030d8:	bf00      	nop
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr

080030e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80030ec:	bf00      	nop
 80030ee:	370c      	adds	r7, #12
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b085      	sub	sp, #20
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	4603      	mov	r3, r0
 8003100:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003102:	2300      	movs	r3, #0
 8003104:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003106:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800310a:	2b84      	cmp	r3, #132	; 0x84
 800310c:	d005      	beq.n	800311a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800310e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	4413      	add	r3, r2
 8003116:	3303      	adds	r3, #3
 8003118:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800311a:	68fb      	ldr	r3, [r7, #12]
}
 800311c:	4618      	mov	r0, r3
 800311e:	3714      	adds	r7, #20
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr

08003128 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800312c:	f000 faf6 	bl	800371c <vTaskStartScheduler>
  
  return osOK;
 8003130:	2300      	movs	r3, #0
}
 8003132:	4618      	mov	r0, r3
 8003134:	bd80      	pop	{r7, pc}

08003136 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003136:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003138:	b089      	sub	sp, #36	; 0x24
 800313a:	af04      	add	r7, sp, #16
 800313c:	6078      	str	r0, [r7, #4]
 800313e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	695b      	ldr	r3, [r3, #20]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d020      	beq.n	800318a <osThreadCreate+0x54>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	699b      	ldr	r3, [r3, #24]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d01c      	beq.n	800318a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685c      	ldr	r4, [r3, #4]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	691e      	ldr	r6, [r3, #16]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003162:	4618      	mov	r0, r3
 8003164:	f7ff ffc8 	bl	80030f8 <makeFreeRtosPriority>
 8003168:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	695b      	ldr	r3, [r3, #20]
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003172:	9202      	str	r2, [sp, #8]
 8003174:	9301      	str	r3, [sp, #4]
 8003176:	9100      	str	r1, [sp, #0]
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	4632      	mov	r2, r6
 800317c:	4629      	mov	r1, r5
 800317e:	4620      	mov	r0, r4
 8003180:	f000 f8ed 	bl	800335e <xTaskCreateStatic>
 8003184:	4603      	mov	r3, r0
 8003186:	60fb      	str	r3, [r7, #12]
 8003188:	e01c      	b.n	80031c4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685c      	ldr	r4, [r3, #4]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003196:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800319e:	4618      	mov	r0, r3
 80031a0:	f7ff ffaa 	bl	80030f8 <makeFreeRtosPriority>
 80031a4:	4602      	mov	r2, r0
 80031a6:	f107 030c 	add.w	r3, r7, #12
 80031aa:	9301      	str	r3, [sp, #4]
 80031ac:	9200      	str	r2, [sp, #0]
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	4632      	mov	r2, r6
 80031b2:	4629      	mov	r1, r5
 80031b4:	4620      	mov	r0, r4
 80031b6:	f000 f92f 	bl	8003418 <xTaskCreate>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d001      	beq.n	80031c4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80031c0:	2300      	movs	r3, #0
 80031c2:	e000      	b.n	80031c6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80031c4:	68fb      	ldr	r3, [r7, #12]
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3714      	adds	r7, #20
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080031ce <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80031ce:	b580      	push	{r7, lr}
 80031d0:	b084      	sub	sp, #16
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d001      	beq.n	80031e4 <osDelay+0x16>
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	e000      	b.n	80031e6 <osDelay+0x18>
 80031e4:	2301      	movs	r3, #1
 80031e6:	4618      	mov	r0, r3
 80031e8:	f000 fa64 	bl	80036b4 <vTaskDelay>
  
  return osOK;
 80031ec:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3710      	adds	r7, #16
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}

080031f6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80031f6:	b480      	push	{r7}
 80031f8:	b083      	sub	sp, #12
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f103 0208 	add.w	r2, r3, #8
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f04f 32ff 	mov.w	r2, #4294967295
 800320e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f103 0208 	add.w	r2, r3, #8
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f103 0208 	add.w	r2, r3, #8
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800322a:	bf00      	nop
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr

08003236 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003236:	b480      	push	{r7}
 8003238:	b083      	sub	sp, #12
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003244:	bf00      	nop
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr

08003250 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003250:	b480      	push	{r7}
 8003252:	b085      	sub	sp, #20
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	68fa      	ldr	r2, [r7, #12]
 8003264:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	689a      	ldr	r2, [r3, #8]
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	683a      	ldr	r2, [r7, #0]
 8003274:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	683a      	ldr	r2, [r7, #0]
 800327a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	1c5a      	adds	r2, r3, #1
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	601a      	str	r2, [r3, #0]
}
 800328c:	bf00      	nop
 800328e:	3714      	adds	r7, #20
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr

08003298 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003298:	b480      	push	{r7}
 800329a:	b085      	sub	sp, #20
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ae:	d103      	bne.n	80032b8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	691b      	ldr	r3, [r3, #16]
 80032b4:	60fb      	str	r3, [r7, #12]
 80032b6:	e00c      	b.n	80032d2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	3308      	adds	r3, #8
 80032bc:	60fb      	str	r3, [r7, #12]
 80032be:	e002      	b.n	80032c6 <vListInsert+0x2e>
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	60fb      	str	r3, [r7, #12]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	68ba      	ldr	r2, [r7, #8]
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d2f6      	bcs.n	80032c0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	685a      	ldr	r2, [r3, #4]
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	683a      	ldr	r2, [r7, #0]
 80032e0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	68fa      	ldr	r2, [r7, #12]
 80032e6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	683a      	ldr	r2, [r7, #0]
 80032ec:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	1c5a      	adds	r2, r3, #1
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	601a      	str	r2, [r3, #0]
}
 80032fe:	bf00      	nop
 8003300:	3714      	adds	r7, #20
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr

0800330a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800330a:	b480      	push	{r7}
 800330c:	b085      	sub	sp, #20
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	6892      	ldr	r2, [r2, #8]
 8003320:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	6852      	ldr	r2, [r2, #4]
 800332a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	429a      	cmp	r2, r3
 8003334:	d103      	bne.n	800333e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	689a      	ldr	r2, [r3, #8]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	1e5a      	subs	r2, r3, #1
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
}
 8003352:	4618      	mov	r0, r3
 8003354:	3714      	adds	r7, #20
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr

0800335e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800335e:	b580      	push	{r7, lr}
 8003360:	b08e      	sub	sp, #56	; 0x38
 8003362:	af04      	add	r7, sp, #16
 8003364:	60f8      	str	r0, [r7, #12]
 8003366:	60b9      	str	r1, [r7, #8]
 8003368:	607a      	str	r2, [r7, #4]
 800336a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800336c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800336e:	2b00      	cmp	r3, #0
 8003370:	d10a      	bne.n	8003388 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003376:	f383 8811 	msr	BASEPRI, r3
 800337a:	f3bf 8f6f 	isb	sy
 800337e:	f3bf 8f4f 	dsb	sy
 8003382:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003384:	bf00      	nop
 8003386:	e7fe      	b.n	8003386 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800338a:	2b00      	cmp	r3, #0
 800338c:	d10a      	bne.n	80033a4 <xTaskCreateStatic+0x46>
	__asm volatile
 800338e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003392:	f383 8811 	msr	BASEPRI, r3
 8003396:	f3bf 8f6f 	isb	sy
 800339a:	f3bf 8f4f 	dsb	sy
 800339e:	61fb      	str	r3, [r7, #28]
}
 80033a0:	bf00      	nop
 80033a2:	e7fe      	b.n	80033a2 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80033a4:	23a0      	movs	r3, #160	; 0xa0
 80033a6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	2ba0      	cmp	r3, #160	; 0xa0
 80033ac:	d00a      	beq.n	80033c4 <xTaskCreateStatic+0x66>
	__asm volatile
 80033ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033b2:	f383 8811 	msr	BASEPRI, r3
 80033b6:	f3bf 8f6f 	isb	sy
 80033ba:	f3bf 8f4f 	dsb	sy
 80033be:	61bb      	str	r3, [r7, #24]
}
 80033c0:	bf00      	nop
 80033c2:	e7fe      	b.n	80033c2 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80033c4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80033c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d01e      	beq.n	800340a <xTaskCreateStatic+0xac>
 80033cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d01b      	beq.n	800340a <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80033d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033d4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80033d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033da:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80033dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033de:	2202      	movs	r2, #2
 80033e0:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80033e4:	2300      	movs	r3, #0
 80033e6:	9303      	str	r3, [sp, #12]
 80033e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ea:	9302      	str	r3, [sp, #8]
 80033ec:	f107 0314 	add.w	r3, r7, #20
 80033f0:	9301      	str	r3, [sp, #4]
 80033f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f4:	9300      	str	r3, [sp, #0]
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	68b9      	ldr	r1, [r7, #8]
 80033fc:	68f8      	ldr	r0, [r7, #12]
 80033fe:	f000 f851 	bl	80034a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003402:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003404:	f000 f8ec 	bl	80035e0 <prvAddNewTaskToReadyList>
 8003408:	e001      	b.n	800340e <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800340a:	2300      	movs	r3, #0
 800340c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800340e:	697b      	ldr	r3, [r7, #20]
	}
 8003410:	4618      	mov	r0, r3
 8003412:	3728      	adds	r7, #40	; 0x28
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003418:	b580      	push	{r7, lr}
 800341a:	b08c      	sub	sp, #48	; 0x30
 800341c:	af04      	add	r7, sp, #16
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	60b9      	str	r1, [r7, #8]
 8003422:	603b      	str	r3, [r7, #0]
 8003424:	4613      	mov	r3, r2
 8003426:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003428:	88fb      	ldrh	r3, [r7, #6]
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	4618      	mov	r0, r3
 800342e:	f000 fef3 	bl	8004218 <pvPortMalloc>
 8003432:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00e      	beq.n	8003458 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800343a:	20a0      	movs	r0, #160	; 0xa0
 800343c:	f000 feec 	bl	8004218 <pvPortMalloc>
 8003440:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d003      	beq.n	8003450 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	697a      	ldr	r2, [r7, #20]
 800344c:	631a      	str	r2, [r3, #48]	; 0x30
 800344e:	e005      	b.n	800345c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003450:	6978      	ldr	r0, [r7, #20]
 8003452:	f000 ffad 	bl	80043b0 <vPortFree>
 8003456:	e001      	b.n	800345c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003458:	2300      	movs	r3, #0
 800345a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d017      	beq.n	8003492 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	2200      	movs	r2, #0
 8003466:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800346a:	88fa      	ldrh	r2, [r7, #6]
 800346c:	2300      	movs	r3, #0
 800346e:	9303      	str	r3, [sp, #12]
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	9302      	str	r3, [sp, #8]
 8003474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003476:	9301      	str	r3, [sp, #4]
 8003478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800347a:	9300      	str	r3, [sp, #0]
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	68b9      	ldr	r1, [r7, #8]
 8003480:	68f8      	ldr	r0, [r7, #12]
 8003482:	f000 f80f 	bl	80034a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003486:	69f8      	ldr	r0, [r7, #28]
 8003488:	f000 f8aa 	bl	80035e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800348c:	2301      	movs	r3, #1
 800348e:	61bb      	str	r3, [r7, #24]
 8003490:	e002      	b.n	8003498 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003492:	f04f 33ff 	mov.w	r3, #4294967295
 8003496:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003498:	69bb      	ldr	r3, [r7, #24]
	}
 800349a:	4618      	mov	r0, r3
 800349c:	3720      	adds	r7, #32
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
	...

080034a4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b088      	sub	sp, #32
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	60b9      	str	r1, [r7, #8]
 80034ae:	607a      	str	r2, [r7, #4]
 80034b0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80034b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80034bc:	3b01      	subs	r3, #1
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	4413      	add	r3, r2
 80034c2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	f023 0307 	bic.w	r3, r3, #7
 80034ca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	f003 0307 	and.w	r3, r3, #7
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d00a      	beq.n	80034ec <prvInitialiseNewTask+0x48>
	__asm volatile
 80034d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034da:	f383 8811 	msr	BASEPRI, r3
 80034de:	f3bf 8f6f 	isb	sy
 80034e2:	f3bf 8f4f 	dsb	sy
 80034e6:	617b      	str	r3, [r7, #20]
}
 80034e8:	bf00      	nop
 80034ea:	e7fe      	b.n	80034ea <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d01f      	beq.n	8003532 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80034f2:	2300      	movs	r3, #0
 80034f4:	61fb      	str	r3, [r7, #28]
 80034f6:	e012      	b.n	800351e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80034f8:	68ba      	ldr	r2, [r7, #8]
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	4413      	add	r3, r2
 80034fe:	7819      	ldrb	r1, [r3, #0]
 8003500:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	4413      	add	r3, r2
 8003506:	3334      	adds	r3, #52	; 0x34
 8003508:	460a      	mov	r2, r1
 800350a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800350c:	68ba      	ldr	r2, [r7, #8]
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	4413      	add	r3, r2
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d006      	beq.n	8003526 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	3301      	adds	r3, #1
 800351c:	61fb      	str	r3, [r7, #28]
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	2b0f      	cmp	r3, #15
 8003522:	d9e9      	bls.n	80034f8 <prvInitialiseNewTask+0x54>
 8003524:	e000      	b.n	8003528 <prvInitialiseNewTask+0x84>
			{
				break;
 8003526:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800352a:	2200      	movs	r2, #0
 800352c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003530:	e003      	b.n	800353a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003534:	2200      	movs	r2, #0
 8003536:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800353a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800353c:	2b06      	cmp	r3, #6
 800353e:	d901      	bls.n	8003544 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003540:	2306      	movs	r3, #6
 8003542:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003546:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003548:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800354a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800354c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800354e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003552:	2200      	movs	r2, #0
 8003554:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003558:	3304      	adds	r3, #4
 800355a:	4618      	mov	r0, r3
 800355c:	f7ff fe6b 	bl	8003236 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003562:	3318      	adds	r3, #24
 8003564:	4618      	mov	r0, r3
 8003566:	f7ff fe66 	bl	8003236 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800356a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800356c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800356e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003572:	f1c3 0207 	rsb	r2, r3, #7
 8003576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003578:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800357a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800357c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800357e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003582:	2200      	movs	r2, #0
 8003584:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800358a:	2200      	movs	r2, #0
 800358c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003592:	334c      	adds	r3, #76	; 0x4c
 8003594:	224c      	movs	r2, #76	; 0x4c
 8003596:	2100      	movs	r1, #0
 8003598:	4618      	mov	r0, r3
 800359a:	f001 f827 	bl	80045ec <memset>
 800359e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a0:	4a0c      	ldr	r2, [pc, #48]	; (80035d4 <prvInitialiseNewTask+0x130>)
 80035a2:	651a      	str	r2, [r3, #80]	; 0x50
 80035a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a6:	4a0c      	ldr	r2, [pc, #48]	; (80035d8 <prvInitialiseNewTask+0x134>)
 80035a8:	655a      	str	r2, [r3, #84]	; 0x54
 80035aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ac:	4a0b      	ldr	r2, [pc, #44]	; (80035dc <prvInitialiseNewTask+0x138>)
 80035ae:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80035b0:	683a      	ldr	r2, [r7, #0]
 80035b2:	68f9      	ldr	r1, [r7, #12]
 80035b4:	69b8      	ldr	r0, [r7, #24]
 80035b6:	f000 fc1f 	bl	8003df8 <pxPortInitialiseStack>
 80035ba:	4602      	mov	r2, r0
 80035bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035be:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80035c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d002      	beq.n	80035cc <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80035c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035ca:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80035cc:	bf00      	nop
 80035ce:	3720      	adds	r7, #32
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	200041c4 	.word	0x200041c4
 80035d8:	2000422c 	.word	0x2000422c
 80035dc:	20004294 	.word	0x20004294

080035e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80035e8:	f000 fd34 	bl	8004054 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80035ec:	4b2a      	ldr	r3, [pc, #168]	; (8003698 <prvAddNewTaskToReadyList+0xb8>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	3301      	adds	r3, #1
 80035f2:	4a29      	ldr	r2, [pc, #164]	; (8003698 <prvAddNewTaskToReadyList+0xb8>)
 80035f4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80035f6:	4b29      	ldr	r3, [pc, #164]	; (800369c <prvAddNewTaskToReadyList+0xbc>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d109      	bne.n	8003612 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80035fe:	4a27      	ldr	r2, [pc, #156]	; (800369c <prvAddNewTaskToReadyList+0xbc>)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003604:	4b24      	ldr	r3, [pc, #144]	; (8003698 <prvAddNewTaskToReadyList+0xb8>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2b01      	cmp	r3, #1
 800360a:	d110      	bne.n	800362e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800360c:	f000 facc 	bl	8003ba8 <prvInitialiseTaskLists>
 8003610:	e00d      	b.n	800362e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003612:	4b23      	ldr	r3, [pc, #140]	; (80036a0 <prvAddNewTaskToReadyList+0xc0>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d109      	bne.n	800362e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800361a:	4b20      	ldr	r3, [pc, #128]	; (800369c <prvAddNewTaskToReadyList+0xbc>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003624:	429a      	cmp	r2, r3
 8003626:	d802      	bhi.n	800362e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003628:	4a1c      	ldr	r2, [pc, #112]	; (800369c <prvAddNewTaskToReadyList+0xbc>)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800362e:	4b1d      	ldr	r3, [pc, #116]	; (80036a4 <prvAddNewTaskToReadyList+0xc4>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	3301      	adds	r3, #1
 8003634:	4a1b      	ldr	r2, [pc, #108]	; (80036a4 <prvAddNewTaskToReadyList+0xc4>)
 8003636:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800363c:	2201      	movs	r2, #1
 800363e:	409a      	lsls	r2, r3
 8003640:	4b19      	ldr	r3, [pc, #100]	; (80036a8 <prvAddNewTaskToReadyList+0xc8>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4313      	orrs	r3, r2
 8003646:	4a18      	ldr	r2, [pc, #96]	; (80036a8 <prvAddNewTaskToReadyList+0xc8>)
 8003648:	6013      	str	r3, [r2, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800364e:	4613      	mov	r3, r2
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	4413      	add	r3, r2
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	4a15      	ldr	r2, [pc, #84]	; (80036ac <prvAddNewTaskToReadyList+0xcc>)
 8003658:	441a      	add	r2, r3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	3304      	adds	r3, #4
 800365e:	4619      	mov	r1, r3
 8003660:	4610      	mov	r0, r2
 8003662:	f7ff fdf5 	bl	8003250 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003666:	f000 fd25 	bl	80040b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800366a:	4b0d      	ldr	r3, [pc, #52]	; (80036a0 <prvAddNewTaskToReadyList+0xc0>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d00e      	beq.n	8003690 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003672:	4b0a      	ldr	r3, [pc, #40]	; (800369c <prvAddNewTaskToReadyList+0xbc>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800367c:	429a      	cmp	r2, r3
 800367e:	d207      	bcs.n	8003690 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003680:	4b0b      	ldr	r3, [pc, #44]	; (80036b0 <prvAddNewTaskToReadyList+0xd0>)
 8003682:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003686:	601a      	str	r2, [r3, #0]
 8003688:	f3bf 8f4f 	dsb	sy
 800368c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003690:	bf00      	nop
 8003692:	3708      	adds	r7, #8
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	20000570 	.word	0x20000570
 800369c:	20000470 	.word	0x20000470
 80036a0:	2000057c 	.word	0x2000057c
 80036a4:	2000058c 	.word	0x2000058c
 80036a8:	20000578 	.word	0x20000578
 80036ac:	20000474 	.word	0x20000474
 80036b0:	e000ed04 	.word	0xe000ed04

080036b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80036bc:	2300      	movs	r3, #0
 80036be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d017      	beq.n	80036f6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80036c6:	4b13      	ldr	r3, [pc, #76]	; (8003714 <vTaskDelay+0x60>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00a      	beq.n	80036e4 <vTaskDelay+0x30>
	__asm volatile
 80036ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036d2:	f383 8811 	msr	BASEPRI, r3
 80036d6:	f3bf 8f6f 	isb	sy
 80036da:	f3bf 8f4f 	dsb	sy
 80036de:	60bb      	str	r3, [r7, #8]
}
 80036e0:	bf00      	nop
 80036e2:	e7fe      	b.n	80036e2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80036e4:	f000 f884 	bl	80037f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80036e8:	2100      	movs	r1, #0
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f000 fb1e 	bl	8003d2c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80036f0:	f000 f88c 	bl	800380c <xTaskResumeAll>
 80036f4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d107      	bne.n	800370c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80036fc:	4b06      	ldr	r3, [pc, #24]	; (8003718 <vTaskDelay+0x64>)
 80036fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003702:	601a      	str	r2, [r3, #0]
 8003704:	f3bf 8f4f 	dsb	sy
 8003708:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800370c:	bf00      	nop
 800370e:	3710      	adds	r7, #16
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}
 8003714:	20000598 	.word	0x20000598
 8003718:	e000ed04 	.word	0xe000ed04

0800371c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b08a      	sub	sp, #40	; 0x28
 8003720:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003722:	2300      	movs	r3, #0
 8003724:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003726:	2300      	movs	r3, #0
 8003728:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800372a:	463a      	mov	r2, r7
 800372c:	1d39      	adds	r1, r7, #4
 800372e:	f107 0308 	add.w	r3, r7, #8
 8003732:	4618      	mov	r0, r3
 8003734:	f7fc fed2 	bl	80004dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003738:	6839      	ldr	r1, [r7, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	68ba      	ldr	r2, [r7, #8]
 800373e:	9202      	str	r2, [sp, #8]
 8003740:	9301      	str	r3, [sp, #4]
 8003742:	2300      	movs	r3, #0
 8003744:	9300      	str	r3, [sp, #0]
 8003746:	2300      	movs	r3, #0
 8003748:	460a      	mov	r2, r1
 800374a:	4921      	ldr	r1, [pc, #132]	; (80037d0 <vTaskStartScheduler+0xb4>)
 800374c:	4821      	ldr	r0, [pc, #132]	; (80037d4 <vTaskStartScheduler+0xb8>)
 800374e:	f7ff fe06 	bl	800335e <xTaskCreateStatic>
 8003752:	4603      	mov	r3, r0
 8003754:	4a20      	ldr	r2, [pc, #128]	; (80037d8 <vTaskStartScheduler+0xbc>)
 8003756:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003758:	4b1f      	ldr	r3, [pc, #124]	; (80037d8 <vTaskStartScheduler+0xbc>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d002      	beq.n	8003766 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003760:	2301      	movs	r3, #1
 8003762:	617b      	str	r3, [r7, #20]
 8003764:	e001      	b.n	800376a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003766:	2300      	movs	r3, #0
 8003768:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	2b01      	cmp	r3, #1
 800376e:	d11b      	bne.n	80037a8 <vTaskStartScheduler+0x8c>
	__asm volatile
 8003770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003774:	f383 8811 	msr	BASEPRI, r3
 8003778:	f3bf 8f6f 	isb	sy
 800377c:	f3bf 8f4f 	dsb	sy
 8003780:	613b      	str	r3, [r7, #16]
}
 8003782:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003784:	4b15      	ldr	r3, [pc, #84]	; (80037dc <vTaskStartScheduler+0xc0>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	334c      	adds	r3, #76	; 0x4c
 800378a:	4a15      	ldr	r2, [pc, #84]	; (80037e0 <vTaskStartScheduler+0xc4>)
 800378c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800378e:	4b15      	ldr	r3, [pc, #84]	; (80037e4 <vTaskStartScheduler+0xc8>)
 8003790:	f04f 32ff 	mov.w	r2, #4294967295
 8003794:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003796:	4b14      	ldr	r3, [pc, #80]	; (80037e8 <vTaskStartScheduler+0xcc>)
 8003798:	2201      	movs	r2, #1
 800379a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800379c:	4b13      	ldr	r3, [pc, #76]	; (80037ec <vTaskStartScheduler+0xd0>)
 800379e:	2200      	movs	r2, #0
 80037a0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80037a2:	f000 fbb5 	bl	8003f10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80037a6:	e00e      	b.n	80037c6 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ae:	d10a      	bne.n	80037c6 <vTaskStartScheduler+0xaa>
	__asm volatile
 80037b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037b4:	f383 8811 	msr	BASEPRI, r3
 80037b8:	f3bf 8f6f 	isb	sy
 80037bc:	f3bf 8f4f 	dsb	sy
 80037c0:	60fb      	str	r3, [r7, #12]
}
 80037c2:	bf00      	nop
 80037c4:	e7fe      	b.n	80037c4 <vTaskStartScheduler+0xa8>
}
 80037c6:	bf00      	nop
 80037c8:	3718      	adds	r7, #24
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	08004898 	.word	0x08004898
 80037d4:	08003b79 	.word	0x08003b79
 80037d8:	20000594 	.word	0x20000594
 80037dc:	20000470 	.word	0x20000470
 80037e0:	200000f4 	.word	0x200000f4
 80037e4:	20000590 	.word	0x20000590
 80037e8:	2000057c 	.word	0x2000057c
 80037ec:	20000574 	.word	0x20000574

080037f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80037f0:	b480      	push	{r7}
 80037f2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80037f4:	4b04      	ldr	r3, [pc, #16]	; (8003808 <vTaskSuspendAll+0x18>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	3301      	adds	r3, #1
 80037fa:	4a03      	ldr	r2, [pc, #12]	; (8003808 <vTaskSuspendAll+0x18>)
 80037fc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80037fe:	bf00      	nop
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr
 8003808:	20000598 	.word	0x20000598

0800380c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003812:	2300      	movs	r3, #0
 8003814:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003816:	2300      	movs	r3, #0
 8003818:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800381a:	4b41      	ldr	r3, [pc, #260]	; (8003920 <xTaskResumeAll+0x114>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d10a      	bne.n	8003838 <xTaskResumeAll+0x2c>
	__asm volatile
 8003822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003826:	f383 8811 	msr	BASEPRI, r3
 800382a:	f3bf 8f6f 	isb	sy
 800382e:	f3bf 8f4f 	dsb	sy
 8003832:	603b      	str	r3, [r7, #0]
}
 8003834:	bf00      	nop
 8003836:	e7fe      	b.n	8003836 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003838:	f000 fc0c 	bl	8004054 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800383c:	4b38      	ldr	r3, [pc, #224]	; (8003920 <xTaskResumeAll+0x114>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	3b01      	subs	r3, #1
 8003842:	4a37      	ldr	r2, [pc, #220]	; (8003920 <xTaskResumeAll+0x114>)
 8003844:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003846:	4b36      	ldr	r3, [pc, #216]	; (8003920 <xTaskResumeAll+0x114>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d161      	bne.n	8003912 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800384e:	4b35      	ldr	r3, [pc, #212]	; (8003924 <xTaskResumeAll+0x118>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d05d      	beq.n	8003912 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003856:	e02e      	b.n	80038b6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003858:	4b33      	ldr	r3, [pc, #204]	; (8003928 <xTaskResumeAll+0x11c>)
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	3318      	adds	r3, #24
 8003864:	4618      	mov	r0, r3
 8003866:	f7ff fd50 	bl	800330a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	3304      	adds	r3, #4
 800386e:	4618      	mov	r0, r3
 8003870:	f7ff fd4b 	bl	800330a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003878:	2201      	movs	r2, #1
 800387a:	409a      	lsls	r2, r3
 800387c:	4b2b      	ldr	r3, [pc, #172]	; (800392c <xTaskResumeAll+0x120>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4313      	orrs	r3, r2
 8003882:	4a2a      	ldr	r2, [pc, #168]	; (800392c <xTaskResumeAll+0x120>)
 8003884:	6013      	str	r3, [r2, #0]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800388a:	4613      	mov	r3, r2
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	4413      	add	r3, r2
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	4a27      	ldr	r2, [pc, #156]	; (8003930 <xTaskResumeAll+0x124>)
 8003894:	441a      	add	r2, r3
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	3304      	adds	r3, #4
 800389a:	4619      	mov	r1, r3
 800389c:	4610      	mov	r0, r2
 800389e:	f7ff fcd7 	bl	8003250 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038a6:	4b23      	ldr	r3, [pc, #140]	; (8003934 <xTaskResumeAll+0x128>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d302      	bcc.n	80038b6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80038b0:	4b21      	ldr	r3, [pc, #132]	; (8003938 <xTaskResumeAll+0x12c>)
 80038b2:	2201      	movs	r2, #1
 80038b4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80038b6:	4b1c      	ldr	r3, [pc, #112]	; (8003928 <xTaskResumeAll+0x11c>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d1cc      	bne.n	8003858 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d001      	beq.n	80038c8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80038c4:	f000 fa12 	bl	8003cec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80038c8:	4b1c      	ldr	r3, [pc, #112]	; (800393c <xTaskResumeAll+0x130>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d010      	beq.n	80038f6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80038d4:	f000 f836 	bl	8003944 <xTaskIncrementTick>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d002      	beq.n	80038e4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80038de:	4b16      	ldr	r3, [pc, #88]	; (8003938 <xTaskResumeAll+0x12c>)
 80038e0:	2201      	movs	r2, #1
 80038e2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	3b01      	subs	r3, #1
 80038e8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d1f1      	bne.n	80038d4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80038f0:	4b12      	ldr	r3, [pc, #72]	; (800393c <xTaskResumeAll+0x130>)
 80038f2:	2200      	movs	r2, #0
 80038f4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80038f6:	4b10      	ldr	r3, [pc, #64]	; (8003938 <xTaskResumeAll+0x12c>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d009      	beq.n	8003912 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80038fe:	2301      	movs	r3, #1
 8003900:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003902:	4b0f      	ldr	r3, [pc, #60]	; (8003940 <xTaskResumeAll+0x134>)
 8003904:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003908:	601a      	str	r2, [r3, #0]
 800390a:	f3bf 8f4f 	dsb	sy
 800390e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003912:	f000 fbcf 	bl	80040b4 <vPortExitCritical>

	return xAlreadyYielded;
 8003916:	68bb      	ldr	r3, [r7, #8]
}
 8003918:	4618      	mov	r0, r3
 800391a:	3710      	adds	r7, #16
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}
 8003920:	20000598 	.word	0x20000598
 8003924:	20000570 	.word	0x20000570
 8003928:	20000530 	.word	0x20000530
 800392c:	20000578 	.word	0x20000578
 8003930:	20000474 	.word	0x20000474
 8003934:	20000470 	.word	0x20000470
 8003938:	20000584 	.word	0x20000584
 800393c:	20000580 	.word	0x20000580
 8003940:	e000ed04 	.word	0xe000ed04

08003944 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b086      	sub	sp, #24
 8003948:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800394a:	2300      	movs	r3, #0
 800394c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800394e:	4b4e      	ldr	r3, [pc, #312]	; (8003a88 <xTaskIncrementTick+0x144>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	2b00      	cmp	r3, #0
 8003954:	f040 808e 	bne.w	8003a74 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003958:	4b4c      	ldr	r3, [pc, #304]	; (8003a8c <xTaskIncrementTick+0x148>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	3301      	adds	r3, #1
 800395e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003960:	4a4a      	ldr	r2, [pc, #296]	; (8003a8c <xTaskIncrementTick+0x148>)
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d120      	bne.n	80039ae <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800396c:	4b48      	ldr	r3, [pc, #288]	; (8003a90 <xTaskIncrementTick+0x14c>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00a      	beq.n	800398c <xTaskIncrementTick+0x48>
	__asm volatile
 8003976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800397a:	f383 8811 	msr	BASEPRI, r3
 800397e:	f3bf 8f6f 	isb	sy
 8003982:	f3bf 8f4f 	dsb	sy
 8003986:	603b      	str	r3, [r7, #0]
}
 8003988:	bf00      	nop
 800398a:	e7fe      	b.n	800398a <xTaskIncrementTick+0x46>
 800398c:	4b40      	ldr	r3, [pc, #256]	; (8003a90 <xTaskIncrementTick+0x14c>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	60fb      	str	r3, [r7, #12]
 8003992:	4b40      	ldr	r3, [pc, #256]	; (8003a94 <xTaskIncrementTick+0x150>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a3e      	ldr	r2, [pc, #248]	; (8003a90 <xTaskIncrementTick+0x14c>)
 8003998:	6013      	str	r3, [r2, #0]
 800399a:	4a3e      	ldr	r2, [pc, #248]	; (8003a94 <xTaskIncrementTick+0x150>)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6013      	str	r3, [r2, #0]
 80039a0:	4b3d      	ldr	r3, [pc, #244]	; (8003a98 <xTaskIncrementTick+0x154>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	3301      	adds	r3, #1
 80039a6:	4a3c      	ldr	r2, [pc, #240]	; (8003a98 <xTaskIncrementTick+0x154>)
 80039a8:	6013      	str	r3, [r2, #0]
 80039aa:	f000 f99f 	bl	8003cec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80039ae:	4b3b      	ldr	r3, [pc, #236]	; (8003a9c <xTaskIncrementTick+0x158>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	693a      	ldr	r2, [r7, #16]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d348      	bcc.n	8003a4a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80039b8:	4b35      	ldr	r3, [pc, #212]	; (8003a90 <xTaskIncrementTick+0x14c>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d104      	bne.n	80039cc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039c2:	4b36      	ldr	r3, [pc, #216]	; (8003a9c <xTaskIncrementTick+0x158>)
 80039c4:	f04f 32ff 	mov.w	r2, #4294967295
 80039c8:	601a      	str	r2, [r3, #0]
					break;
 80039ca:	e03e      	b.n	8003a4a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039cc:	4b30      	ldr	r3, [pc, #192]	; (8003a90 <xTaskIncrementTick+0x14c>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80039dc:	693a      	ldr	r2, [r7, #16]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d203      	bcs.n	80039ec <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80039e4:	4a2d      	ldr	r2, [pc, #180]	; (8003a9c <xTaskIncrementTick+0x158>)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80039ea:	e02e      	b.n	8003a4a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	3304      	adds	r3, #4
 80039f0:	4618      	mov	r0, r3
 80039f2:	f7ff fc8a 	bl	800330a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d004      	beq.n	8003a08 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	3318      	adds	r3, #24
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7ff fc81 	bl	800330a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	409a      	lsls	r2, r3
 8003a10:	4b23      	ldr	r3, [pc, #140]	; (8003aa0 <xTaskIncrementTick+0x15c>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	4a22      	ldr	r2, [pc, #136]	; (8003aa0 <xTaskIncrementTick+0x15c>)
 8003a18:	6013      	str	r3, [r2, #0]
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a1e:	4613      	mov	r3, r2
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	4413      	add	r3, r2
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	4a1f      	ldr	r2, [pc, #124]	; (8003aa4 <xTaskIncrementTick+0x160>)
 8003a28:	441a      	add	r2, r3
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	3304      	adds	r3, #4
 8003a2e:	4619      	mov	r1, r3
 8003a30:	4610      	mov	r0, r2
 8003a32:	f7ff fc0d 	bl	8003250 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a3a:	4b1b      	ldr	r3, [pc, #108]	; (8003aa8 <xTaskIncrementTick+0x164>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d3b9      	bcc.n	80039b8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003a44:	2301      	movs	r3, #1
 8003a46:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a48:	e7b6      	b.n	80039b8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003a4a:	4b17      	ldr	r3, [pc, #92]	; (8003aa8 <xTaskIncrementTick+0x164>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a50:	4914      	ldr	r1, [pc, #80]	; (8003aa4 <xTaskIncrementTick+0x160>)
 8003a52:	4613      	mov	r3, r2
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	4413      	add	r3, r2
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	440b      	add	r3, r1
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d901      	bls.n	8003a66 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8003a62:	2301      	movs	r3, #1
 8003a64:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003a66:	4b11      	ldr	r3, [pc, #68]	; (8003aac <xTaskIncrementTick+0x168>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d007      	beq.n	8003a7e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	617b      	str	r3, [r7, #20]
 8003a72:	e004      	b.n	8003a7e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003a74:	4b0e      	ldr	r3, [pc, #56]	; (8003ab0 <xTaskIncrementTick+0x16c>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	3301      	adds	r3, #1
 8003a7a:	4a0d      	ldr	r2, [pc, #52]	; (8003ab0 <xTaskIncrementTick+0x16c>)
 8003a7c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003a7e:	697b      	ldr	r3, [r7, #20]
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3718      	adds	r7, #24
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	20000598 	.word	0x20000598
 8003a8c:	20000574 	.word	0x20000574
 8003a90:	20000528 	.word	0x20000528
 8003a94:	2000052c 	.word	0x2000052c
 8003a98:	20000588 	.word	0x20000588
 8003a9c:	20000590 	.word	0x20000590
 8003aa0:	20000578 	.word	0x20000578
 8003aa4:	20000474 	.word	0x20000474
 8003aa8:	20000470 	.word	0x20000470
 8003aac:	20000584 	.word	0x20000584
 8003ab0:	20000580 	.word	0x20000580

08003ab4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b087      	sub	sp, #28
 8003ab8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003aba:	4b29      	ldr	r3, [pc, #164]	; (8003b60 <vTaskSwitchContext+0xac>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d003      	beq.n	8003aca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003ac2:	4b28      	ldr	r3, [pc, #160]	; (8003b64 <vTaskSwitchContext+0xb0>)
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003ac8:	e044      	b.n	8003b54 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8003aca:	4b26      	ldr	r3, [pc, #152]	; (8003b64 <vTaskSwitchContext+0xb0>)
 8003acc:	2200      	movs	r2, #0
 8003ace:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ad0:	4b25      	ldr	r3, [pc, #148]	; (8003b68 <vTaskSwitchContext+0xb4>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	fab3 f383 	clz	r3, r3
 8003adc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003ade:	7afb      	ldrb	r3, [r7, #11]
 8003ae0:	f1c3 031f 	rsb	r3, r3, #31
 8003ae4:	617b      	str	r3, [r7, #20]
 8003ae6:	4921      	ldr	r1, [pc, #132]	; (8003b6c <vTaskSwitchContext+0xb8>)
 8003ae8:	697a      	ldr	r2, [r7, #20]
 8003aea:	4613      	mov	r3, r2
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	4413      	add	r3, r2
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	440b      	add	r3, r1
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d10a      	bne.n	8003b10 <vTaskSwitchContext+0x5c>
	__asm volatile
 8003afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003afe:	f383 8811 	msr	BASEPRI, r3
 8003b02:	f3bf 8f6f 	isb	sy
 8003b06:	f3bf 8f4f 	dsb	sy
 8003b0a:	607b      	str	r3, [r7, #4]
}
 8003b0c:	bf00      	nop
 8003b0e:	e7fe      	b.n	8003b0e <vTaskSwitchContext+0x5a>
 8003b10:	697a      	ldr	r2, [r7, #20]
 8003b12:	4613      	mov	r3, r2
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	4413      	add	r3, r2
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	4a14      	ldr	r2, [pc, #80]	; (8003b6c <vTaskSwitchContext+0xb8>)
 8003b1c:	4413      	add	r3, r2
 8003b1e:	613b      	str	r3, [r7, #16]
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	685a      	ldr	r2, [r3, #4]
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	605a      	str	r2, [r3, #4]
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	685a      	ldr	r2, [r3, #4]
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	3308      	adds	r3, #8
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d104      	bne.n	8003b40 <vTaskSwitchContext+0x8c>
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	685a      	ldr	r2, [r3, #4]
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	605a      	str	r2, [r3, #4]
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	4a0a      	ldr	r2, [pc, #40]	; (8003b70 <vTaskSwitchContext+0xbc>)
 8003b48:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003b4a:	4b09      	ldr	r3, [pc, #36]	; (8003b70 <vTaskSwitchContext+0xbc>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	334c      	adds	r3, #76	; 0x4c
 8003b50:	4a08      	ldr	r2, [pc, #32]	; (8003b74 <vTaskSwitchContext+0xc0>)
 8003b52:	6013      	str	r3, [r2, #0]
}
 8003b54:	bf00      	nop
 8003b56:	371c      	adds	r7, #28
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr
 8003b60:	20000598 	.word	0x20000598
 8003b64:	20000584 	.word	0x20000584
 8003b68:	20000578 	.word	0x20000578
 8003b6c:	20000474 	.word	0x20000474
 8003b70:	20000470 	.word	0x20000470
 8003b74:	200000f4 	.word	0x200000f4

08003b78 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003b80:	f000 f852 	bl	8003c28 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003b84:	4b06      	ldr	r3, [pc, #24]	; (8003ba0 <prvIdleTask+0x28>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d9f9      	bls.n	8003b80 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003b8c:	4b05      	ldr	r3, [pc, #20]	; (8003ba4 <prvIdleTask+0x2c>)
 8003b8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b92:	601a      	str	r2, [r3, #0]
 8003b94:	f3bf 8f4f 	dsb	sy
 8003b98:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003b9c:	e7f0      	b.n	8003b80 <prvIdleTask+0x8>
 8003b9e:	bf00      	nop
 8003ba0:	20000474 	.word	0x20000474
 8003ba4:	e000ed04 	.word	0xe000ed04

08003ba8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003bae:	2300      	movs	r3, #0
 8003bb0:	607b      	str	r3, [r7, #4]
 8003bb2:	e00c      	b.n	8003bce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	4613      	mov	r3, r2
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	4413      	add	r3, r2
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	4a12      	ldr	r2, [pc, #72]	; (8003c08 <prvInitialiseTaskLists+0x60>)
 8003bc0:	4413      	add	r3, r2
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f7ff fb17 	bl	80031f6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	3301      	adds	r3, #1
 8003bcc:	607b      	str	r3, [r7, #4]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2b06      	cmp	r3, #6
 8003bd2:	d9ef      	bls.n	8003bb4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003bd4:	480d      	ldr	r0, [pc, #52]	; (8003c0c <prvInitialiseTaskLists+0x64>)
 8003bd6:	f7ff fb0e 	bl	80031f6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003bda:	480d      	ldr	r0, [pc, #52]	; (8003c10 <prvInitialiseTaskLists+0x68>)
 8003bdc:	f7ff fb0b 	bl	80031f6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003be0:	480c      	ldr	r0, [pc, #48]	; (8003c14 <prvInitialiseTaskLists+0x6c>)
 8003be2:	f7ff fb08 	bl	80031f6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003be6:	480c      	ldr	r0, [pc, #48]	; (8003c18 <prvInitialiseTaskLists+0x70>)
 8003be8:	f7ff fb05 	bl	80031f6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003bec:	480b      	ldr	r0, [pc, #44]	; (8003c1c <prvInitialiseTaskLists+0x74>)
 8003bee:	f7ff fb02 	bl	80031f6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003bf2:	4b0b      	ldr	r3, [pc, #44]	; (8003c20 <prvInitialiseTaskLists+0x78>)
 8003bf4:	4a05      	ldr	r2, [pc, #20]	; (8003c0c <prvInitialiseTaskLists+0x64>)
 8003bf6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003bf8:	4b0a      	ldr	r3, [pc, #40]	; (8003c24 <prvInitialiseTaskLists+0x7c>)
 8003bfa:	4a05      	ldr	r2, [pc, #20]	; (8003c10 <prvInitialiseTaskLists+0x68>)
 8003bfc:	601a      	str	r2, [r3, #0]
}
 8003bfe:	bf00      	nop
 8003c00:	3708      	adds	r7, #8
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	20000474 	.word	0x20000474
 8003c0c:	20000500 	.word	0x20000500
 8003c10:	20000514 	.word	0x20000514
 8003c14:	20000530 	.word	0x20000530
 8003c18:	20000544 	.word	0x20000544
 8003c1c:	2000055c 	.word	0x2000055c
 8003c20:	20000528 	.word	0x20000528
 8003c24:	2000052c 	.word	0x2000052c

08003c28 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c2e:	e019      	b.n	8003c64 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003c30:	f000 fa10 	bl	8004054 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c34:	4b10      	ldr	r3, [pc, #64]	; (8003c78 <prvCheckTasksWaitingTermination+0x50>)
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	3304      	adds	r3, #4
 8003c40:	4618      	mov	r0, r3
 8003c42:	f7ff fb62 	bl	800330a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003c46:	4b0d      	ldr	r3, [pc, #52]	; (8003c7c <prvCheckTasksWaitingTermination+0x54>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	4a0b      	ldr	r2, [pc, #44]	; (8003c7c <prvCheckTasksWaitingTermination+0x54>)
 8003c4e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003c50:	4b0b      	ldr	r3, [pc, #44]	; (8003c80 <prvCheckTasksWaitingTermination+0x58>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	3b01      	subs	r3, #1
 8003c56:	4a0a      	ldr	r2, [pc, #40]	; (8003c80 <prvCheckTasksWaitingTermination+0x58>)
 8003c58:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003c5a:	f000 fa2b 	bl	80040b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 f810 	bl	8003c84 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c64:	4b06      	ldr	r3, [pc, #24]	; (8003c80 <prvCheckTasksWaitingTermination+0x58>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d1e1      	bne.n	8003c30 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003c6c:	bf00      	nop
 8003c6e:	bf00      	nop
 8003c70:	3708      	adds	r7, #8
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	20000544 	.word	0x20000544
 8003c7c:	20000570 	.word	0x20000570
 8003c80:	20000558 	.word	0x20000558

08003c84 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	334c      	adds	r3, #76	; 0x4c
 8003c90:	4618      	mov	r0, r3
 8003c92:	f000 fcb3 	bl	80045fc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d108      	bne.n	8003cb2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f000 fb83 	bl	80043b0 <vPortFree>
				vPortFree( pxTCB );
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f000 fb80 	bl	80043b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003cb0:	e018      	b.n	8003ce4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d103      	bne.n	8003cc4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f000 fb77 	bl	80043b0 <vPortFree>
	}
 8003cc2:	e00f      	b.n	8003ce4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d00a      	beq.n	8003ce4 <prvDeleteTCB+0x60>
	__asm volatile
 8003cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd2:	f383 8811 	msr	BASEPRI, r3
 8003cd6:	f3bf 8f6f 	isb	sy
 8003cda:	f3bf 8f4f 	dsb	sy
 8003cde:	60fb      	str	r3, [r7, #12]
}
 8003ce0:	bf00      	nop
 8003ce2:	e7fe      	b.n	8003ce2 <prvDeleteTCB+0x5e>
	}
 8003ce4:	bf00      	nop
 8003ce6:	3710      	adds	r7, #16
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}

08003cec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003cf2:	4b0c      	ldr	r3, [pc, #48]	; (8003d24 <prvResetNextTaskUnblockTime+0x38>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d104      	bne.n	8003d06 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003cfc:	4b0a      	ldr	r3, [pc, #40]	; (8003d28 <prvResetNextTaskUnblockTime+0x3c>)
 8003cfe:	f04f 32ff 	mov.w	r2, #4294967295
 8003d02:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003d04:	e008      	b.n	8003d18 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d06:	4b07      	ldr	r3, [pc, #28]	; (8003d24 <prvResetNextTaskUnblockTime+0x38>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	4a04      	ldr	r2, [pc, #16]	; (8003d28 <prvResetNextTaskUnblockTime+0x3c>)
 8003d16:	6013      	str	r3, [r2, #0]
}
 8003d18:	bf00      	nop
 8003d1a:	370c      	adds	r7, #12
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr
 8003d24:	20000528 	.word	0x20000528
 8003d28:	20000590 	.word	0x20000590

08003d2c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003d36:	4b29      	ldr	r3, [pc, #164]	; (8003ddc <prvAddCurrentTaskToDelayedList+0xb0>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d3c:	4b28      	ldr	r3, [pc, #160]	; (8003de0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	3304      	adds	r3, #4
 8003d42:	4618      	mov	r0, r3
 8003d44:	f7ff fae1 	bl	800330a <uxListRemove>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d10b      	bne.n	8003d66 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003d4e:	4b24      	ldr	r3, [pc, #144]	; (8003de0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d54:	2201      	movs	r2, #1
 8003d56:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5a:	43da      	mvns	r2, r3
 8003d5c:	4b21      	ldr	r3, [pc, #132]	; (8003de4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4013      	ands	r3, r2
 8003d62:	4a20      	ldr	r2, [pc, #128]	; (8003de4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003d64:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d6c:	d10a      	bne.n	8003d84 <prvAddCurrentTaskToDelayedList+0x58>
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d007      	beq.n	8003d84 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d74:	4b1a      	ldr	r3, [pc, #104]	; (8003de0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	3304      	adds	r3, #4
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	481a      	ldr	r0, [pc, #104]	; (8003de8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003d7e:	f7ff fa67 	bl	8003250 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003d82:	e026      	b.n	8003dd2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003d84:	68fa      	ldr	r2, [r7, #12]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4413      	add	r3, r2
 8003d8a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003d8c:	4b14      	ldr	r3, [pc, #80]	; (8003de0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68ba      	ldr	r2, [r7, #8]
 8003d92:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003d94:	68ba      	ldr	r2, [r7, #8]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d209      	bcs.n	8003db0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d9c:	4b13      	ldr	r3, [pc, #76]	; (8003dec <prvAddCurrentTaskToDelayedList+0xc0>)
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	4b0f      	ldr	r3, [pc, #60]	; (8003de0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	3304      	adds	r3, #4
 8003da6:	4619      	mov	r1, r3
 8003da8:	4610      	mov	r0, r2
 8003daa:	f7ff fa75 	bl	8003298 <vListInsert>
}
 8003dae:	e010      	b.n	8003dd2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003db0:	4b0f      	ldr	r3, [pc, #60]	; (8003df0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	4b0a      	ldr	r3, [pc, #40]	; (8003de0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	3304      	adds	r3, #4
 8003dba:	4619      	mov	r1, r3
 8003dbc:	4610      	mov	r0, r2
 8003dbe:	f7ff fa6b 	bl	8003298 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003dc2:	4b0c      	ldr	r3, [pc, #48]	; (8003df4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	68ba      	ldr	r2, [r7, #8]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d202      	bcs.n	8003dd2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003dcc:	4a09      	ldr	r2, [pc, #36]	; (8003df4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	6013      	str	r3, [r2, #0]
}
 8003dd2:	bf00      	nop
 8003dd4:	3710      	adds	r7, #16
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	20000574 	.word	0x20000574
 8003de0:	20000470 	.word	0x20000470
 8003de4:	20000578 	.word	0x20000578
 8003de8:	2000055c 	.word	0x2000055c
 8003dec:	2000052c 	.word	0x2000052c
 8003df0:	20000528 	.word	0x20000528
 8003df4:	20000590 	.word	0x20000590

08003df8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b085      	sub	sp, #20
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	60b9      	str	r1, [r7, #8]
 8003e02:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	3b04      	subs	r3, #4
 8003e08:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003e10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	3b04      	subs	r3, #4
 8003e16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	f023 0201 	bic.w	r2, r3, #1
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	3b04      	subs	r3, #4
 8003e26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003e28:	4a0c      	ldr	r2, [pc, #48]	; (8003e5c <pxPortInitialiseStack+0x64>)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	3b14      	subs	r3, #20
 8003e32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	3b04      	subs	r3, #4
 8003e3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f06f 0202 	mvn.w	r2, #2
 8003e46:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	3b20      	subs	r3, #32
 8003e4c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3714      	adds	r7, #20
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr
 8003e5c:	08003e61 	.word	0x08003e61

08003e60 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003e60:	b480      	push	{r7}
 8003e62:	b085      	sub	sp, #20
 8003e64:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003e66:	2300      	movs	r3, #0
 8003e68:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003e6a:	4b12      	ldr	r3, [pc, #72]	; (8003eb4 <prvTaskExitError+0x54>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e72:	d00a      	beq.n	8003e8a <prvTaskExitError+0x2a>
	__asm volatile
 8003e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e78:	f383 8811 	msr	BASEPRI, r3
 8003e7c:	f3bf 8f6f 	isb	sy
 8003e80:	f3bf 8f4f 	dsb	sy
 8003e84:	60fb      	str	r3, [r7, #12]
}
 8003e86:	bf00      	nop
 8003e88:	e7fe      	b.n	8003e88 <prvTaskExitError+0x28>
	__asm volatile
 8003e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e8e:	f383 8811 	msr	BASEPRI, r3
 8003e92:	f3bf 8f6f 	isb	sy
 8003e96:	f3bf 8f4f 	dsb	sy
 8003e9a:	60bb      	str	r3, [r7, #8]
}
 8003e9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003e9e:	bf00      	nop
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d0fc      	beq.n	8003ea0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003ea6:	bf00      	nop
 8003ea8:	bf00      	nop
 8003eaa:	3714      	adds	r7, #20
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr
 8003eb4:	200000a4 	.word	0x200000a4
	...

08003ec0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003ec0:	4b07      	ldr	r3, [pc, #28]	; (8003ee0 <pxCurrentTCBConst2>)
 8003ec2:	6819      	ldr	r1, [r3, #0]
 8003ec4:	6808      	ldr	r0, [r1, #0]
 8003ec6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003eca:	f380 8809 	msr	PSP, r0
 8003ece:	f3bf 8f6f 	isb	sy
 8003ed2:	f04f 0000 	mov.w	r0, #0
 8003ed6:	f380 8811 	msr	BASEPRI, r0
 8003eda:	4770      	bx	lr
 8003edc:	f3af 8000 	nop.w

08003ee0 <pxCurrentTCBConst2>:
 8003ee0:	20000470 	.word	0x20000470
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003ee4:	bf00      	nop
 8003ee6:	bf00      	nop

08003ee8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003ee8:	4808      	ldr	r0, [pc, #32]	; (8003f0c <prvPortStartFirstTask+0x24>)
 8003eea:	6800      	ldr	r0, [r0, #0]
 8003eec:	6800      	ldr	r0, [r0, #0]
 8003eee:	f380 8808 	msr	MSP, r0
 8003ef2:	f04f 0000 	mov.w	r0, #0
 8003ef6:	f380 8814 	msr	CONTROL, r0
 8003efa:	b662      	cpsie	i
 8003efc:	b661      	cpsie	f
 8003efe:	f3bf 8f4f 	dsb	sy
 8003f02:	f3bf 8f6f 	isb	sy
 8003f06:	df00      	svc	0
 8003f08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003f0a:	bf00      	nop
 8003f0c:	e000ed08 	.word	0xe000ed08

08003f10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b086      	sub	sp, #24
 8003f14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003f16:	4b46      	ldr	r3, [pc, #280]	; (8004030 <xPortStartScheduler+0x120>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a46      	ldr	r2, [pc, #280]	; (8004034 <xPortStartScheduler+0x124>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d10a      	bne.n	8003f36 <xPortStartScheduler+0x26>
	__asm volatile
 8003f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f24:	f383 8811 	msr	BASEPRI, r3
 8003f28:	f3bf 8f6f 	isb	sy
 8003f2c:	f3bf 8f4f 	dsb	sy
 8003f30:	613b      	str	r3, [r7, #16]
}
 8003f32:	bf00      	nop
 8003f34:	e7fe      	b.n	8003f34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003f36:	4b3e      	ldr	r3, [pc, #248]	; (8004030 <xPortStartScheduler+0x120>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a3f      	ldr	r2, [pc, #252]	; (8004038 <xPortStartScheduler+0x128>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d10a      	bne.n	8003f56 <xPortStartScheduler+0x46>
	__asm volatile
 8003f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f44:	f383 8811 	msr	BASEPRI, r3
 8003f48:	f3bf 8f6f 	isb	sy
 8003f4c:	f3bf 8f4f 	dsb	sy
 8003f50:	60fb      	str	r3, [r7, #12]
}
 8003f52:	bf00      	nop
 8003f54:	e7fe      	b.n	8003f54 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003f56:	4b39      	ldr	r3, [pc, #228]	; (800403c <xPortStartScheduler+0x12c>)
 8003f58:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	781b      	ldrb	r3, [r3, #0]
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	22ff      	movs	r2, #255	; 0xff
 8003f66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003f70:	78fb      	ldrb	r3, [r7, #3]
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003f78:	b2da      	uxtb	r2, r3
 8003f7a:	4b31      	ldr	r3, [pc, #196]	; (8004040 <xPortStartScheduler+0x130>)
 8003f7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003f7e:	4b31      	ldr	r3, [pc, #196]	; (8004044 <xPortStartScheduler+0x134>)
 8003f80:	2207      	movs	r2, #7
 8003f82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f84:	e009      	b.n	8003f9a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8003f86:	4b2f      	ldr	r3, [pc, #188]	; (8004044 <xPortStartScheduler+0x134>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	4a2d      	ldr	r2, [pc, #180]	; (8004044 <xPortStartScheduler+0x134>)
 8003f8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003f90:	78fb      	ldrb	r3, [r7, #3]
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	005b      	lsls	r3, r3, #1
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f9a:	78fb      	ldrb	r3, [r7, #3]
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fa2:	2b80      	cmp	r3, #128	; 0x80
 8003fa4:	d0ef      	beq.n	8003f86 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003fa6:	4b27      	ldr	r3, [pc, #156]	; (8004044 <xPortStartScheduler+0x134>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f1c3 0307 	rsb	r3, r3, #7
 8003fae:	2b04      	cmp	r3, #4
 8003fb0:	d00a      	beq.n	8003fc8 <xPortStartScheduler+0xb8>
	__asm volatile
 8003fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb6:	f383 8811 	msr	BASEPRI, r3
 8003fba:	f3bf 8f6f 	isb	sy
 8003fbe:	f3bf 8f4f 	dsb	sy
 8003fc2:	60bb      	str	r3, [r7, #8]
}
 8003fc4:	bf00      	nop
 8003fc6:	e7fe      	b.n	8003fc6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003fc8:	4b1e      	ldr	r3, [pc, #120]	; (8004044 <xPortStartScheduler+0x134>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	021b      	lsls	r3, r3, #8
 8003fce:	4a1d      	ldr	r2, [pc, #116]	; (8004044 <xPortStartScheduler+0x134>)
 8003fd0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003fd2:	4b1c      	ldr	r3, [pc, #112]	; (8004044 <xPortStartScheduler+0x134>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003fda:	4a1a      	ldr	r2, [pc, #104]	; (8004044 <xPortStartScheduler+0x134>)
 8003fdc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	b2da      	uxtb	r2, r3
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003fe6:	4b18      	ldr	r3, [pc, #96]	; (8004048 <xPortStartScheduler+0x138>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a17      	ldr	r2, [pc, #92]	; (8004048 <xPortStartScheduler+0x138>)
 8003fec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ff0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003ff2:	4b15      	ldr	r3, [pc, #84]	; (8004048 <xPortStartScheduler+0x138>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a14      	ldr	r2, [pc, #80]	; (8004048 <xPortStartScheduler+0x138>)
 8003ff8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003ffc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003ffe:	f000 f8dd 	bl	80041bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004002:	4b12      	ldr	r3, [pc, #72]	; (800404c <xPortStartScheduler+0x13c>)
 8004004:	2200      	movs	r2, #0
 8004006:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004008:	f000 f8fc 	bl	8004204 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800400c:	4b10      	ldr	r3, [pc, #64]	; (8004050 <xPortStartScheduler+0x140>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a0f      	ldr	r2, [pc, #60]	; (8004050 <xPortStartScheduler+0x140>)
 8004012:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004016:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004018:	f7ff ff66 	bl	8003ee8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800401c:	f7ff fd4a 	bl	8003ab4 <vTaskSwitchContext>
	prvTaskExitError();
 8004020:	f7ff ff1e 	bl	8003e60 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004024:	2300      	movs	r3, #0
}
 8004026:	4618      	mov	r0, r3
 8004028:	3718      	adds	r7, #24
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	e000ed00 	.word	0xe000ed00
 8004034:	410fc271 	.word	0x410fc271
 8004038:	410fc270 	.word	0x410fc270
 800403c:	e000e400 	.word	0xe000e400
 8004040:	2000059c 	.word	0x2000059c
 8004044:	200005a0 	.word	0x200005a0
 8004048:	e000ed20 	.word	0xe000ed20
 800404c:	200000a4 	.word	0x200000a4
 8004050:	e000ef34 	.word	0xe000ef34

08004054 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
	__asm volatile
 800405a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800405e:	f383 8811 	msr	BASEPRI, r3
 8004062:	f3bf 8f6f 	isb	sy
 8004066:	f3bf 8f4f 	dsb	sy
 800406a:	607b      	str	r3, [r7, #4]
}
 800406c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800406e:	4b0f      	ldr	r3, [pc, #60]	; (80040ac <vPortEnterCritical+0x58>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	3301      	adds	r3, #1
 8004074:	4a0d      	ldr	r2, [pc, #52]	; (80040ac <vPortEnterCritical+0x58>)
 8004076:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004078:	4b0c      	ldr	r3, [pc, #48]	; (80040ac <vPortEnterCritical+0x58>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2b01      	cmp	r3, #1
 800407e:	d10f      	bne.n	80040a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004080:	4b0b      	ldr	r3, [pc, #44]	; (80040b0 <vPortEnterCritical+0x5c>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	b2db      	uxtb	r3, r3
 8004086:	2b00      	cmp	r3, #0
 8004088:	d00a      	beq.n	80040a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800408a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800408e:	f383 8811 	msr	BASEPRI, r3
 8004092:	f3bf 8f6f 	isb	sy
 8004096:	f3bf 8f4f 	dsb	sy
 800409a:	603b      	str	r3, [r7, #0]
}
 800409c:	bf00      	nop
 800409e:	e7fe      	b.n	800409e <vPortEnterCritical+0x4a>
	}
}
 80040a0:	bf00      	nop
 80040a2:	370c      	adds	r7, #12
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr
 80040ac:	200000a4 	.word	0x200000a4
 80040b0:	e000ed04 	.word	0xe000ed04

080040b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80040ba:	4b12      	ldr	r3, [pc, #72]	; (8004104 <vPortExitCritical+0x50>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d10a      	bne.n	80040d8 <vPortExitCritical+0x24>
	__asm volatile
 80040c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c6:	f383 8811 	msr	BASEPRI, r3
 80040ca:	f3bf 8f6f 	isb	sy
 80040ce:	f3bf 8f4f 	dsb	sy
 80040d2:	607b      	str	r3, [r7, #4]
}
 80040d4:	bf00      	nop
 80040d6:	e7fe      	b.n	80040d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80040d8:	4b0a      	ldr	r3, [pc, #40]	; (8004104 <vPortExitCritical+0x50>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	3b01      	subs	r3, #1
 80040de:	4a09      	ldr	r2, [pc, #36]	; (8004104 <vPortExitCritical+0x50>)
 80040e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80040e2:	4b08      	ldr	r3, [pc, #32]	; (8004104 <vPortExitCritical+0x50>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d105      	bne.n	80040f6 <vPortExitCritical+0x42>
 80040ea:	2300      	movs	r3, #0
 80040ec:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80040f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80040f6:	bf00      	nop
 80040f8:	370c      	adds	r7, #12
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr
 8004102:	bf00      	nop
 8004104:	200000a4 	.word	0x200000a4
	...

08004110 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004110:	f3ef 8009 	mrs	r0, PSP
 8004114:	f3bf 8f6f 	isb	sy
 8004118:	4b15      	ldr	r3, [pc, #84]	; (8004170 <pxCurrentTCBConst>)
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	f01e 0f10 	tst.w	lr, #16
 8004120:	bf08      	it	eq
 8004122:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004126:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800412a:	6010      	str	r0, [r2, #0]
 800412c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004130:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004134:	f380 8811 	msr	BASEPRI, r0
 8004138:	f3bf 8f4f 	dsb	sy
 800413c:	f3bf 8f6f 	isb	sy
 8004140:	f7ff fcb8 	bl	8003ab4 <vTaskSwitchContext>
 8004144:	f04f 0000 	mov.w	r0, #0
 8004148:	f380 8811 	msr	BASEPRI, r0
 800414c:	bc09      	pop	{r0, r3}
 800414e:	6819      	ldr	r1, [r3, #0]
 8004150:	6808      	ldr	r0, [r1, #0]
 8004152:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004156:	f01e 0f10 	tst.w	lr, #16
 800415a:	bf08      	it	eq
 800415c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004160:	f380 8809 	msr	PSP, r0
 8004164:	f3bf 8f6f 	isb	sy
 8004168:	4770      	bx	lr
 800416a:	bf00      	nop
 800416c:	f3af 8000 	nop.w

08004170 <pxCurrentTCBConst>:
 8004170:	20000470 	.word	0x20000470
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004174:	bf00      	nop
 8004176:	bf00      	nop

08004178 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0
	__asm volatile
 800417e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004182:	f383 8811 	msr	BASEPRI, r3
 8004186:	f3bf 8f6f 	isb	sy
 800418a:	f3bf 8f4f 	dsb	sy
 800418e:	607b      	str	r3, [r7, #4]
}
 8004190:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004192:	f7ff fbd7 	bl	8003944 <xTaskIncrementTick>
 8004196:	4603      	mov	r3, r0
 8004198:	2b00      	cmp	r3, #0
 800419a:	d003      	beq.n	80041a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800419c:	4b06      	ldr	r3, [pc, #24]	; (80041b8 <SysTick_Handler+0x40>)
 800419e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041a2:	601a      	str	r2, [r3, #0]
 80041a4:	2300      	movs	r3, #0
 80041a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	f383 8811 	msr	BASEPRI, r3
}
 80041ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80041b0:	bf00      	nop
 80041b2:	3708      	adds	r7, #8
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	e000ed04 	.word	0xe000ed04

080041bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80041bc:	b480      	push	{r7}
 80041be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80041c0:	4b0b      	ldr	r3, [pc, #44]	; (80041f0 <vPortSetupTimerInterrupt+0x34>)
 80041c2:	2200      	movs	r2, #0
 80041c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80041c6:	4b0b      	ldr	r3, [pc, #44]	; (80041f4 <vPortSetupTimerInterrupt+0x38>)
 80041c8:	2200      	movs	r2, #0
 80041ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80041cc:	4b0a      	ldr	r3, [pc, #40]	; (80041f8 <vPortSetupTimerInterrupt+0x3c>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a0a      	ldr	r2, [pc, #40]	; (80041fc <vPortSetupTimerInterrupt+0x40>)
 80041d2:	fba2 2303 	umull	r2, r3, r2, r3
 80041d6:	099b      	lsrs	r3, r3, #6
 80041d8:	4a09      	ldr	r2, [pc, #36]	; (8004200 <vPortSetupTimerInterrupt+0x44>)
 80041da:	3b01      	subs	r3, #1
 80041dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80041de:	4b04      	ldr	r3, [pc, #16]	; (80041f0 <vPortSetupTimerInterrupt+0x34>)
 80041e0:	2207      	movs	r2, #7
 80041e2:	601a      	str	r2, [r3, #0]
}
 80041e4:	bf00      	nop
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr
 80041ee:	bf00      	nop
 80041f0:	e000e010 	.word	0xe000e010
 80041f4:	e000e018 	.word	0xe000e018
 80041f8:	20000098 	.word	0x20000098
 80041fc:	10624dd3 	.word	0x10624dd3
 8004200:	e000e014 	.word	0xe000e014

08004204 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004204:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004214 <vPortEnableVFP+0x10>
 8004208:	6801      	ldr	r1, [r0, #0]
 800420a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800420e:	6001      	str	r1, [r0, #0]
 8004210:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004212:	bf00      	nop
 8004214:	e000ed88 	.word	0xe000ed88

08004218 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b08a      	sub	sp, #40	; 0x28
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004220:	2300      	movs	r3, #0
 8004222:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004224:	f7ff fae4 	bl	80037f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004228:	4b5b      	ldr	r3, [pc, #364]	; (8004398 <pvPortMalloc+0x180>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d101      	bne.n	8004234 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004230:	f000 f920 	bl	8004474 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004234:	4b59      	ldr	r3, [pc, #356]	; (800439c <pvPortMalloc+0x184>)
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	4013      	ands	r3, r2
 800423c:	2b00      	cmp	r3, #0
 800423e:	f040 8093 	bne.w	8004368 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d01d      	beq.n	8004284 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004248:	2208      	movs	r2, #8
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4413      	add	r3, r2
 800424e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f003 0307 	and.w	r3, r3, #7
 8004256:	2b00      	cmp	r3, #0
 8004258:	d014      	beq.n	8004284 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f023 0307 	bic.w	r3, r3, #7
 8004260:	3308      	adds	r3, #8
 8004262:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f003 0307 	and.w	r3, r3, #7
 800426a:	2b00      	cmp	r3, #0
 800426c:	d00a      	beq.n	8004284 <pvPortMalloc+0x6c>
	__asm volatile
 800426e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004272:	f383 8811 	msr	BASEPRI, r3
 8004276:	f3bf 8f6f 	isb	sy
 800427a:	f3bf 8f4f 	dsb	sy
 800427e:	617b      	str	r3, [r7, #20]
}
 8004280:	bf00      	nop
 8004282:	e7fe      	b.n	8004282 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d06e      	beq.n	8004368 <pvPortMalloc+0x150>
 800428a:	4b45      	ldr	r3, [pc, #276]	; (80043a0 <pvPortMalloc+0x188>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	429a      	cmp	r2, r3
 8004292:	d869      	bhi.n	8004368 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004294:	4b43      	ldr	r3, [pc, #268]	; (80043a4 <pvPortMalloc+0x18c>)
 8004296:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004298:	4b42      	ldr	r3, [pc, #264]	; (80043a4 <pvPortMalloc+0x18c>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800429e:	e004      	b.n	80042aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80042a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80042a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80042aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d903      	bls.n	80042bc <pvPortMalloc+0xa4>
 80042b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d1f1      	bne.n	80042a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80042bc:	4b36      	ldr	r3, [pc, #216]	; (8004398 <pvPortMalloc+0x180>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d050      	beq.n	8004368 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80042c6:	6a3b      	ldr	r3, [r7, #32]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	2208      	movs	r2, #8
 80042cc:	4413      	add	r3, r2
 80042ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80042d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	6a3b      	ldr	r3, [r7, #32]
 80042d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80042d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042da:	685a      	ldr	r2, [r3, #4]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	1ad2      	subs	r2, r2, r3
 80042e0:	2308      	movs	r3, #8
 80042e2:	005b      	lsls	r3, r3, #1
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d91f      	bls.n	8004328 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80042e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4413      	add	r3, r2
 80042ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	f003 0307 	and.w	r3, r3, #7
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d00a      	beq.n	8004310 <pvPortMalloc+0xf8>
	__asm volatile
 80042fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042fe:	f383 8811 	msr	BASEPRI, r3
 8004302:	f3bf 8f6f 	isb	sy
 8004306:	f3bf 8f4f 	dsb	sy
 800430a:	613b      	str	r3, [r7, #16]
}
 800430c:	bf00      	nop
 800430e:	e7fe      	b.n	800430e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004312:	685a      	ldr	r2, [r3, #4]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	1ad2      	subs	r2, r2, r3
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800431c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004322:	69b8      	ldr	r0, [r7, #24]
 8004324:	f000 f908 	bl	8004538 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004328:	4b1d      	ldr	r3, [pc, #116]	; (80043a0 <pvPortMalloc+0x188>)
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	4a1b      	ldr	r2, [pc, #108]	; (80043a0 <pvPortMalloc+0x188>)
 8004334:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004336:	4b1a      	ldr	r3, [pc, #104]	; (80043a0 <pvPortMalloc+0x188>)
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	4b1b      	ldr	r3, [pc, #108]	; (80043a8 <pvPortMalloc+0x190>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	429a      	cmp	r2, r3
 8004340:	d203      	bcs.n	800434a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004342:	4b17      	ldr	r3, [pc, #92]	; (80043a0 <pvPortMalloc+0x188>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a18      	ldr	r2, [pc, #96]	; (80043a8 <pvPortMalloc+0x190>)
 8004348:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800434a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434c:	685a      	ldr	r2, [r3, #4]
 800434e:	4b13      	ldr	r3, [pc, #76]	; (800439c <pvPortMalloc+0x184>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	431a      	orrs	r2, r3
 8004354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004356:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435a:	2200      	movs	r2, #0
 800435c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800435e:	4b13      	ldr	r3, [pc, #76]	; (80043ac <pvPortMalloc+0x194>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	3301      	adds	r3, #1
 8004364:	4a11      	ldr	r2, [pc, #68]	; (80043ac <pvPortMalloc+0x194>)
 8004366:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004368:	f7ff fa50 	bl	800380c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	f003 0307 	and.w	r3, r3, #7
 8004372:	2b00      	cmp	r3, #0
 8004374:	d00a      	beq.n	800438c <pvPortMalloc+0x174>
	__asm volatile
 8004376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800437a:	f383 8811 	msr	BASEPRI, r3
 800437e:	f3bf 8f6f 	isb	sy
 8004382:	f3bf 8f4f 	dsb	sy
 8004386:	60fb      	str	r3, [r7, #12]
}
 8004388:	bf00      	nop
 800438a:	e7fe      	b.n	800438a <pvPortMalloc+0x172>
	return pvReturn;
 800438c:	69fb      	ldr	r3, [r7, #28]
}
 800438e:	4618      	mov	r0, r3
 8004390:	3728      	adds	r7, #40	; 0x28
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	200041ac 	.word	0x200041ac
 800439c:	200041c0 	.word	0x200041c0
 80043a0:	200041b0 	.word	0x200041b0
 80043a4:	200041a4 	.word	0x200041a4
 80043a8:	200041b4 	.word	0x200041b4
 80043ac:	200041b8 	.word	0x200041b8

080043b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b086      	sub	sp, #24
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d04d      	beq.n	800445e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80043c2:	2308      	movs	r3, #8
 80043c4:	425b      	negs	r3, r3
 80043c6:	697a      	ldr	r2, [r7, #20]
 80043c8:	4413      	add	r3, r2
 80043ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	685a      	ldr	r2, [r3, #4]
 80043d4:	4b24      	ldr	r3, [pc, #144]	; (8004468 <vPortFree+0xb8>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4013      	ands	r3, r2
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d10a      	bne.n	80043f4 <vPortFree+0x44>
	__asm volatile
 80043de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e2:	f383 8811 	msr	BASEPRI, r3
 80043e6:	f3bf 8f6f 	isb	sy
 80043ea:	f3bf 8f4f 	dsb	sy
 80043ee:	60fb      	str	r3, [r7, #12]
}
 80043f0:	bf00      	nop
 80043f2:	e7fe      	b.n	80043f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d00a      	beq.n	8004412 <vPortFree+0x62>
	__asm volatile
 80043fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004400:	f383 8811 	msr	BASEPRI, r3
 8004404:	f3bf 8f6f 	isb	sy
 8004408:	f3bf 8f4f 	dsb	sy
 800440c:	60bb      	str	r3, [r7, #8]
}
 800440e:	bf00      	nop
 8004410:	e7fe      	b.n	8004410 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	685a      	ldr	r2, [r3, #4]
 8004416:	4b14      	ldr	r3, [pc, #80]	; (8004468 <vPortFree+0xb8>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4013      	ands	r3, r2
 800441c:	2b00      	cmp	r3, #0
 800441e:	d01e      	beq.n	800445e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d11a      	bne.n	800445e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	685a      	ldr	r2, [r3, #4]
 800442c:	4b0e      	ldr	r3, [pc, #56]	; (8004468 <vPortFree+0xb8>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	43db      	mvns	r3, r3
 8004432:	401a      	ands	r2, r3
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004438:	f7ff f9da 	bl	80037f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	685a      	ldr	r2, [r3, #4]
 8004440:	4b0a      	ldr	r3, [pc, #40]	; (800446c <vPortFree+0xbc>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4413      	add	r3, r2
 8004446:	4a09      	ldr	r2, [pc, #36]	; (800446c <vPortFree+0xbc>)
 8004448:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800444a:	6938      	ldr	r0, [r7, #16]
 800444c:	f000 f874 	bl	8004538 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004450:	4b07      	ldr	r3, [pc, #28]	; (8004470 <vPortFree+0xc0>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	3301      	adds	r3, #1
 8004456:	4a06      	ldr	r2, [pc, #24]	; (8004470 <vPortFree+0xc0>)
 8004458:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800445a:	f7ff f9d7 	bl	800380c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800445e:	bf00      	nop
 8004460:	3718      	adds	r7, #24
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop
 8004468:	200041c0 	.word	0x200041c0
 800446c:	200041b0 	.word	0x200041b0
 8004470:	200041bc 	.word	0x200041bc

08004474 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004474:	b480      	push	{r7}
 8004476:	b085      	sub	sp, #20
 8004478:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800447a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800447e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004480:	4b27      	ldr	r3, [pc, #156]	; (8004520 <prvHeapInit+0xac>)
 8004482:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f003 0307 	and.w	r3, r3, #7
 800448a:	2b00      	cmp	r3, #0
 800448c:	d00c      	beq.n	80044a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	3307      	adds	r3, #7
 8004492:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f023 0307 	bic.w	r3, r3, #7
 800449a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800449c:	68ba      	ldr	r2, [r7, #8]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	4a1f      	ldr	r2, [pc, #124]	; (8004520 <prvHeapInit+0xac>)
 80044a4:	4413      	add	r3, r2
 80044a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80044ac:	4a1d      	ldr	r2, [pc, #116]	; (8004524 <prvHeapInit+0xb0>)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80044b2:	4b1c      	ldr	r3, [pc, #112]	; (8004524 <prvHeapInit+0xb0>)
 80044b4:	2200      	movs	r2, #0
 80044b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	68ba      	ldr	r2, [r7, #8]
 80044bc:	4413      	add	r3, r2
 80044be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80044c0:	2208      	movs	r2, #8
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	1a9b      	subs	r3, r3, r2
 80044c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f023 0307 	bic.w	r3, r3, #7
 80044ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	4a15      	ldr	r2, [pc, #84]	; (8004528 <prvHeapInit+0xb4>)
 80044d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80044d6:	4b14      	ldr	r3, [pc, #80]	; (8004528 <prvHeapInit+0xb4>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	2200      	movs	r2, #0
 80044dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80044de:	4b12      	ldr	r3, [pc, #72]	; (8004528 <prvHeapInit+0xb4>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2200      	movs	r2, #0
 80044e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	68fa      	ldr	r2, [r7, #12]
 80044ee:	1ad2      	subs	r2, r2, r3
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80044f4:	4b0c      	ldr	r3, [pc, #48]	; (8004528 <prvHeapInit+0xb4>)
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	4a0a      	ldr	r2, [pc, #40]	; (800452c <prvHeapInit+0xb8>)
 8004502:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	4a09      	ldr	r2, [pc, #36]	; (8004530 <prvHeapInit+0xbc>)
 800450a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800450c:	4b09      	ldr	r3, [pc, #36]	; (8004534 <prvHeapInit+0xc0>)
 800450e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004512:	601a      	str	r2, [r3, #0]
}
 8004514:	bf00      	nop
 8004516:	3714      	adds	r7, #20
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr
 8004520:	200005a4 	.word	0x200005a4
 8004524:	200041a4 	.word	0x200041a4
 8004528:	200041ac 	.word	0x200041ac
 800452c:	200041b4 	.word	0x200041b4
 8004530:	200041b0 	.word	0x200041b0
 8004534:	200041c0 	.word	0x200041c0

08004538 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004538:	b480      	push	{r7}
 800453a:	b085      	sub	sp, #20
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004540:	4b28      	ldr	r3, [pc, #160]	; (80045e4 <prvInsertBlockIntoFreeList+0xac>)
 8004542:	60fb      	str	r3, [r7, #12]
 8004544:	e002      	b.n	800454c <prvInsertBlockIntoFreeList+0x14>
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	60fb      	str	r3, [r7, #12]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	429a      	cmp	r2, r3
 8004554:	d8f7      	bhi.n	8004546 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	68ba      	ldr	r2, [r7, #8]
 8004560:	4413      	add	r3, r2
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	429a      	cmp	r2, r3
 8004566:	d108      	bne.n	800457a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	685a      	ldr	r2, [r3, #4]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	441a      	add	r2, r3
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	68ba      	ldr	r2, [r7, #8]
 8004584:	441a      	add	r2, r3
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	429a      	cmp	r2, r3
 800458c:	d118      	bne.n	80045c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	4b15      	ldr	r3, [pc, #84]	; (80045e8 <prvInsertBlockIntoFreeList+0xb0>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	429a      	cmp	r2, r3
 8004598:	d00d      	beq.n	80045b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685a      	ldr	r2, [r3, #4]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	441a      	add	r2, r3
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	601a      	str	r2, [r3, #0]
 80045b4:	e008      	b.n	80045c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80045b6:	4b0c      	ldr	r3, [pc, #48]	; (80045e8 <prvInsertBlockIntoFreeList+0xb0>)
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	601a      	str	r2, [r3, #0]
 80045be:	e003      	b.n	80045c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80045c8:	68fa      	ldr	r2, [r7, #12]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d002      	beq.n	80045d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80045d6:	bf00      	nop
 80045d8:	3714      	adds	r7, #20
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
 80045e4:	200041a4 	.word	0x200041a4
 80045e8:	200041ac 	.word	0x200041ac

080045ec <memset>:
 80045ec:	4402      	add	r2, r0
 80045ee:	4603      	mov	r3, r0
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d100      	bne.n	80045f6 <memset+0xa>
 80045f4:	4770      	bx	lr
 80045f6:	f803 1b01 	strb.w	r1, [r3], #1
 80045fa:	e7f9      	b.n	80045f0 <memset+0x4>

080045fc <_reclaim_reent>:
 80045fc:	4b29      	ldr	r3, [pc, #164]	; (80046a4 <_reclaim_reent+0xa8>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4283      	cmp	r3, r0
 8004602:	b570      	push	{r4, r5, r6, lr}
 8004604:	4604      	mov	r4, r0
 8004606:	d04b      	beq.n	80046a0 <_reclaim_reent+0xa4>
 8004608:	69c3      	ldr	r3, [r0, #28]
 800460a:	b143      	cbz	r3, 800461e <_reclaim_reent+0x22>
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d144      	bne.n	800469c <_reclaim_reent+0xa0>
 8004612:	69e3      	ldr	r3, [r4, #28]
 8004614:	6819      	ldr	r1, [r3, #0]
 8004616:	b111      	cbz	r1, 800461e <_reclaim_reent+0x22>
 8004618:	4620      	mov	r0, r4
 800461a:	f000 f86b 	bl	80046f4 <_free_r>
 800461e:	6961      	ldr	r1, [r4, #20]
 8004620:	b111      	cbz	r1, 8004628 <_reclaim_reent+0x2c>
 8004622:	4620      	mov	r0, r4
 8004624:	f000 f866 	bl	80046f4 <_free_r>
 8004628:	69e1      	ldr	r1, [r4, #28]
 800462a:	b111      	cbz	r1, 8004632 <_reclaim_reent+0x36>
 800462c:	4620      	mov	r0, r4
 800462e:	f000 f861 	bl	80046f4 <_free_r>
 8004632:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004634:	b111      	cbz	r1, 800463c <_reclaim_reent+0x40>
 8004636:	4620      	mov	r0, r4
 8004638:	f000 f85c 	bl	80046f4 <_free_r>
 800463c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800463e:	b111      	cbz	r1, 8004646 <_reclaim_reent+0x4a>
 8004640:	4620      	mov	r0, r4
 8004642:	f000 f857 	bl	80046f4 <_free_r>
 8004646:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004648:	b111      	cbz	r1, 8004650 <_reclaim_reent+0x54>
 800464a:	4620      	mov	r0, r4
 800464c:	f000 f852 	bl	80046f4 <_free_r>
 8004650:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004652:	b111      	cbz	r1, 800465a <_reclaim_reent+0x5e>
 8004654:	4620      	mov	r0, r4
 8004656:	f000 f84d 	bl	80046f4 <_free_r>
 800465a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800465c:	b111      	cbz	r1, 8004664 <_reclaim_reent+0x68>
 800465e:	4620      	mov	r0, r4
 8004660:	f000 f848 	bl	80046f4 <_free_r>
 8004664:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004666:	b111      	cbz	r1, 800466e <_reclaim_reent+0x72>
 8004668:	4620      	mov	r0, r4
 800466a:	f000 f843 	bl	80046f4 <_free_r>
 800466e:	6a23      	ldr	r3, [r4, #32]
 8004670:	b1b3      	cbz	r3, 80046a0 <_reclaim_reent+0xa4>
 8004672:	4620      	mov	r0, r4
 8004674:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004678:	4718      	bx	r3
 800467a:	5949      	ldr	r1, [r1, r5]
 800467c:	b941      	cbnz	r1, 8004690 <_reclaim_reent+0x94>
 800467e:	3504      	adds	r5, #4
 8004680:	69e3      	ldr	r3, [r4, #28]
 8004682:	2d80      	cmp	r5, #128	; 0x80
 8004684:	68d9      	ldr	r1, [r3, #12]
 8004686:	d1f8      	bne.n	800467a <_reclaim_reent+0x7e>
 8004688:	4620      	mov	r0, r4
 800468a:	f000 f833 	bl	80046f4 <_free_r>
 800468e:	e7c0      	b.n	8004612 <_reclaim_reent+0x16>
 8004690:	680e      	ldr	r6, [r1, #0]
 8004692:	4620      	mov	r0, r4
 8004694:	f000 f82e 	bl	80046f4 <_free_r>
 8004698:	4631      	mov	r1, r6
 800469a:	e7ef      	b.n	800467c <_reclaim_reent+0x80>
 800469c:	2500      	movs	r5, #0
 800469e:	e7ef      	b.n	8004680 <_reclaim_reent+0x84>
 80046a0:	bd70      	pop	{r4, r5, r6, pc}
 80046a2:	bf00      	nop
 80046a4:	200000f4 	.word	0x200000f4

080046a8 <__libc_init_array>:
 80046a8:	b570      	push	{r4, r5, r6, lr}
 80046aa:	4d0d      	ldr	r5, [pc, #52]	; (80046e0 <__libc_init_array+0x38>)
 80046ac:	4c0d      	ldr	r4, [pc, #52]	; (80046e4 <__libc_init_array+0x3c>)
 80046ae:	1b64      	subs	r4, r4, r5
 80046b0:	10a4      	asrs	r4, r4, #2
 80046b2:	2600      	movs	r6, #0
 80046b4:	42a6      	cmp	r6, r4
 80046b6:	d109      	bne.n	80046cc <__libc_init_array+0x24>
 80046b8:	4d0b      	ldr	r5, [pc, #44]	; (80046e8 <__libc_init_array+0x40>)
 80046ba:	4c0c      	ldr	r4, [pc, #48]	; (80046ec <__libc_init_array+0x44>)
 80046bc:	f000 f872 	bl	80047a4 <_init>
 80046c0:	1b64      	subs	r4, r4, r5
 80046c2:	10a4      	asrs	r4, r4, #2
 80046c4:	2600      	movs	r6, #0
 80046c6:	42a6      	cmp	r6, r4
 80046c8:	d105      	bne.n	80046d6 <__libc_init_array+0x2e>
 80046ca:	bd70      	pop	{r4, r5, r6, pc}
 80046cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80046d0:	4798      	blx	r3
 80046d2:	3601      	adds	r6, #1
 80046d4:	e7ee      	b.n	80046b4 <__libc_init_array+0xc>
 80046d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80046da:	4798      	blx	r3
 80046dc:	3601      	adds	r6, #1
 80046de:	e7f2      	b.n	80046c6 <__libc_init_array+0x1e>
 80046e0:	080048c0 	.word	0x080048c0
 80046e4:	080048c0 	.word	0x080048c0
 80046e8:	080048c0 	.word	0x080048c0
 80046ec:	080048c4 	.word	0x080048c4

080046f0 <__retarget_lock_acquire_recursive>:
 80046f0:	4770      	bx	lr

080046f2 <__retarget_lock_release_recursive>:
 80046f2:	4770      	bx	lr

080046f4 <_free_r>:
 80046f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80046f6:	2900      	cmp	r1, #0
 80046f8:	d044      	beq.n	8004784 <_free_r+0x90>
 80046fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046fe:	9001      	str	r0, [sp, #4]
 8004700:	2b00      	cmp	r3, #0
 8004702:	f1a1 0404 	sub.w	r4, r1, #4
 8004706:	bfb8      	it	lt
 8004708:	18e4      	addlt	r4, r4, r3
 800470a:	f000 f83f 	bl	800478c <__malloc_lock>
 800470e:	4a1e      	ldr	r2, [pc, #120]	; (8004788 <_free_r+0x94>)
 8004710:	9801      	ldr	r0, [sp, #4]
 8004712:	6813      	ldr	r3, [r2, #0]
 8004714:	b933      	cbnz	r3, 8004724 <_free_r+0x30>
 8004716:	6063      	str	r3, [r4, #4]
 8004718:	6014      	str	r4, [r2, #0]
 800471a:	b003      	add	sp, #12
 800471c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004720:	f000 b83a 	b.w	8004798 <__malloc_unlock>
 8004724:	42a3      	cmp	r3, r4
 8004726:	d908      	bls.n	800473a <_free_r+0x46>
 8004728:	6825      	ldr	r5, [r4, #0]
 800472a:	1961      	adds	r1, r4, r5
 800472c:	428b      	cmp	r3, r1
 800472e:	bf01      	itttt	eq
 8004730:	6819      	ldreq	r1, [r3, #0]
 8004732:	685b      	ldreq	r3, [r3, #4]
 8004734:	1949      	addeq	r1, r1, r5
 8004736:	6021      	streq	r1, [r4, #0]
 8004738:	e7ed      	b.n	8004716 <_free_r+0x22>
 800473a:	461a      	mov	r2, r3
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	b10b      	cbz	r3, 8004744 <_free_r+0x50>
 8004740:	42a3      	cmp	r3, r4
 8004742:	d9fa      	bls.n	800473a <_free_r+0x46>
 8004744:	6811      	ldr	r1, [r2, #0]
 8004746:	1855      	adds	r5, r2, r1
 8004748:	42a5      	cmp	r5, r4
 800474a:	d10b      	bne.n	8004764 <_free_r+0x70>
 800474c:	6824      	ldr	r4, [r4, #0]
 800474e:	4421      	add	r1, r4
 8004750:	1854      	adds	r4, r2, r1
 8004752:	42a3      	cmp	r3, r4
 8004754:	6011      	str	r1, [r2, #0]
 8004756:	d1e0      	bne.n	800471a <_free_r+0x26>
 8004758:	681c      	ldr	r4, [r3, #0]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	6053      	str	r3, [r2, #4]
 800475e:	440c      	add	r4, r1
 8004760:	6014      	str	r4, [r2, #0]
 8004762:	e7da      	b.n	800471a <_free_r+0x26>
 8004764:	d902      	bls.n	800476c <_free_r+0x78>
 8004766:	230c      	movs	r3, #12
 8004768:	6003      	str	r3, [r0, #0]
 800476a:	e7d6      	b.n	800471a <_free_r+0x26>
 800476c:	6825      	ldr	r5, [r4, #0]
 800476e:	1961      	adds	r1, r4, r5
 8004770:	428b      	cmp	r3, r1
 8004772:	bf04      	itt	eq
 8004774:	6819      	ldreq	r1, [r3, #0]
 8004776:	685b      	ldreq	r3, [r3, #4]
 8004778:	6063      	str	r3, [r4, #4]
 800477a:	bf04      	itt	eq
 800477c:	1949      	addeq	r1, r1, r5
 800477e:	6021      	streq	r1, [r4, #0]
 8004780:	6054      	str	r4, [r2, #4]
 8004782:	e7ca      	b.n	800471a <_free_r+0x26>
 8004784:	b003      	add	sp, #12
 8004786:	bd30      	pop	{r4, r5, pc}
 8004788:	20004300 	.word	0x20004300

0800478c <__malloc_lock>:
 800478c:	4801      	ldr	r0, [pc, #4]	; (8004794 <__malloc_lock+0x8>)
 800478e:	f7ff bfaf 	b.w	80046f0 <__retarget_lock_acquire_recursive>
 8004792:	bf00      	nop
 8004794:	200042fc 	.word	0x200042fc

08004798 <__malloc_unlock>:
 8004798:	4801      	ldr	r0, [pc, #4]	; (80047a0 <__malloc_unlock+0x8>)
 800479a:	f7ff bfaa 	b.w	80046f2 <__retarget_lock_release_recursive>
 800479e:	bf00      	nop
 80047a0:	200042fc 	.word	0x200042fc

080047a4 <_init>:
 80047a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047a6:	bf00      	nop
 80047a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047aa:	bc08      	pop	{r3}
 80047ac:	469e      	mov	lr, r3
 80047ae:	4770      	bx	lr

080047b0 <_fini>:
 80047b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047b2:	bf00      	nop
 80047b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047b6:	bc08      	pop	{r3}
 80047b8:	469e      	mov	lr, r3
 80047ba:	4770      	bx	lr
