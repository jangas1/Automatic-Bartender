
Temp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005248  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  080053e8  080053e8  000153e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005530  08005530  000200d4  2**0
                  CONTENTS
  4 .ARM          00000008  08005530  08005530  00015530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005538  08005538  000200d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005538  08005538  00015538  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800553c  0800553c  0001553c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d4  20000000  08005540  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004230  200000d4  08005614  000200d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004304  08005614  00024304  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001370a  00000000  00000000  00020147  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002fc2  00000000  00000000  00033851  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001308  00000000  00000000  00036818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000eba  00000000  00000000  00037b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001841e  00000000  00000000  000389da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015456  00000000  00000000  00050df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000976db  00000000  00000000  0006624e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005400  00000000  00000000  000fd92c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  00102d2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000d4 	.word	0x200000d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080053d0 	.word	0x080053d0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000d8 	.word	0x200000d8
 80001dc:	080053d0 	.word	0x080053d0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800057c:	b480      	push	{r7}
 800057e:	b085      	sub	sp, #20
 8000580:	af00      	add	r7, sp, #0
 8000582:	60f8      	str	r0, [r7, #12]
 8000584:	60b9      	str	r1, [r7, #8]
 8000586:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	4a07      	ldr	r2, [pc, #28]	; (80005a8 <vApplicationGetIdleTaskMemory+0x2c>)
 800058c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800058e:	68bb      	ldr	r3, [r7, #8]
 8000590:	4a06      	ldr	r2, [pc, #24]	; (80005ac <vApplicationGetIdleTaskMemory+0x30>)
 8000592:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	2280      	movs	r2, #128	; 0x80
 8000598:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800059a:	bf00      	nop
 800059c:	3714      	adds	r7, #20
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	200000f0 	.word	0x200000f0
 80005ac:	20000190 	.word	0x20000190

080005b0 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 80005ba:	4a38      	ldr	r2, [pc, #224]	; (800069c <HD44780_Init+0xec>)
 80005bc:	79fb      	ldrb	r3, [r7, #7]
 80005be:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 80005c0:	4b37      	ldr	r3, [pc, #220]	; (80006a0 <HD44780_Init+0xf0>)
 80005c2:	2208      	movs	r2, #8
 80005c4:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80005c6:	4b37      	ldr	r3, [pc, #220]	; (80006a4 <HD44780_Init+0xf4>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 80005cc:	4b33      	ldr	r3, [pc, #204]	; (800069c <HD44780_Init+0xec>)
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	2b01      	cmp	r3, #1
 80005d2:	d907      	bls.n	80005e4 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 80005d4:	4b33      	ldr	r3, [pc, #204]	; (80006a4 <HD44780_Init+0xf4>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	f043 0308 	orr.w	r3, r3, #8
 80005dc:	b2da      	uxtb	r2, r3
 80005de:	4b31      	ldr	r3, [pc, #196]	; (80006a4 <HD44780_Init+0xf4>)
 80005e0:	701a      	strb	r2, [r3, #0]
 80005e2:	e006      	b.n	80005f2 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 80005e4:	4b2f      	ldr	r3, [pc, #188]	; (80006a4 <HD44780_Init+0xf4>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	f043 0304 	orr.w	r3, r3, #4
 80005ec:	b2da      	uxtb	r2, r3
 80005ee:	4b2d      	ldr	r3, [pc, #180]	; (80006a4 <HD44780_Init+0xf4>)
 80005f0:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 80005f2:	f000 f985 	bl	8000900 <DelayInit>
  osDelay(50);
 80005f6:	2032      	movs	r0, #50	; 0x32
 80005f8:	f000 f9ac 	bl	8000954 <osDelay>

  ExpanderWrite(dpBacklight);
 80005fc:	4b28      	ldr	r3, [pc, #160]	; (80006a0 <HD44780_Init+0xf0>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	4618      	mov	r0, r3
 8000602:	f000 f943 	bl	800088c <ExpanderWrite>
  osDelay(1000);
 8000606:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800060a:	f000 f9a3 	bl	8000954 <osDelay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 800060e:	2030      	movs	r0, #48	; 0x30
 8000610:	f000 f92b 	bl	800086a <Write4Bits>
  osDelay(4500);
 8000614:	f241 1094 	movw	r0, #4500	; 0x1194
 8000618:	f000 f99c 	bl	8000954 <osDelay>

  Write4Bits(0x03 << 4);
 800061c:	2030      	movs	r0, #48	; 0x30
 800061e:	f000 f924 	bl	800086a <Write4Bits>
  osDelay(4500);
 8000622:	f241 1094 	movw	r0, #4500	; 0x1194
 8000626:	f000 f995 	bl	8000954 <osDelay>

  Write4Bits(0x03 << 4);
 800062a:	2030      	movs	r0, #48	; 0x30
 800062c:	f000 f91d 	bl	800086a <Write4Bits>
  osDelay(4500);
 8000630:	f241 1094 	movw	r0, #4500	; 0x1194
 8000634:	f000 f98e 	bl	8000954 <osDelay>

  Write4Bits(0x02 << 4);
 8000638:	2020      	movs	r0, #32
 800063a:	f000 f916 	bl	800086a <Write4Bits>
  osDelay(100);
 800063e:	2064      	movs	r0, #100	; 0x64
 8000640:	f000 f988 	bl	8000954 <osDelay>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8000644:	4b17      	ldr	r3, [pc, #92]	; (80006a4 <HD44780_Init+0xf4>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	f043 0320 	orr.w	r3, r3, #32
 800064c:	b2db      	uxtb	r3, r3
 800064e:	4618      	mov	r0, r3
 8000650:	f000 f8ce 	bl	80007f0 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000654:	4b14      	ldr	r3, [pc, #80]	; (80006a8 <HD44780_Init+0xf8>)
 8000656:	2204      	movs	r2, #4
 8000658:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 800065a:	f000 f875 	bl	8000748 <HD44780_Display>
  HD44780_Clear();
 800065e:	f000 f82b 	bl	80006b8 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000662:	4b12      	ldr	r3, [pc, #72]	; (80006ac <HD44780_Init+0xfc>)
 8000664:	2202      	movs	r2, #2
 8000666:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000668:	4b10      	ldr	r3, [pc, #64]	; (80006ac <HD44780_Init+0xfc>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	f043 0304 	orr.w	r3, r3, #4
 8000670:	b2db      	uxtb	r3, r3
 8000672:	4618      	mov	r0, r3
 8000674:	f000 f8bc 	bl	80007f0 <SendCommand>
  osDelay(4500);
 8000678:	f241 1094 	movw	r0, #4500	; 0x1194
 800067c:	f000 f96a 	bl	8000954 <osDelay>

  HD44780_CreateSpecialChar(0, special1);
 8000680:	490b      	ldr	r1, [pc, #44]	; (80006b0 <HD44780_Init+0x100>)
 8000682:	2000      	movs	r0, #0
 8000684:	f000 f876 	bl	8000774 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8000688:	490a      	ldr	r1, [pc, #40]	; (80006b4 <HD44780_Init+0x104>)
 800068a:	2001      	movs	r0, #1
 800068c:	f000 f872 	bl	8000774 <HD44780_CreateSpecialChar>

  HD44780_Home();
 8000690:	f000 f81d 	bl	80006ce <HD44780_Home>
}
 8000694:	bf00      	nop
 8000696:	3708      	adds	r7, #8
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	20000393 	.word	0x20000393
 80006a0:	20000394 	.word	0x20000394
 80006a4:	20000390 	.word	0x20000390
 80006a8:	20000391 	.word	0x20000391
 80006ac:	20000392 	.word	0x20000392
 80006b0:	20000000 	.word	0x20000000
 80006b4:	20000008 	.word	0x20000008

080006b8 <HD44780_Clear>:

void HD44780_Clear()
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 80006bc:	2001      	movs	r0, #1
 80006be:	f000 f897 	bl	80007f0 <SendCommand>
  osDelay(2000);
 80006c2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006c6:	f000 f945 	bl	8000954 <osDelay>
}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}

080006ce <HD44780_Home>:

void HD44780_Home()
{
 80006ce:	b580      	push	{r7, lr}
 80006d0:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 80006d2:	2002      	movs	r0, #2
 80006d4:	f000 f88c 	bl	80007f0 <SendCommand>
  osDelay(2000);
 80006d8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006dc:	f000 f93a 	bl	8000954 <osDelay>
}
 80006e0:	bf00      	nop
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 80006e4:	b590      	push	{r4, r7, lr}
 80006e6:	b087      	sub	sp, #28
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	4603      	mov	r3, r0
 80006ec:	460a      	mov	r2, r1
 80006ee:	71fb      	strb	r3, [r7, #7]
 80006f0:	4613      	mov	r3, r2
 80006f2:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 80006f4:	4b12      	ldr	r3, [pc, #72]	; (8000740 <HD44780_SetCursor+0x5c>)
 80006f6:	f107 0408 	add.w	r4, r7, #8
 80006fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8000700:	4b10      	ldr	r3, [pc, #64]	; (8000744 <HD44780_SetCursor+0x60>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	79ba      	ldrb	r2, [r7, #6]
 8000706:	429a      	cmp	r2, r3
 8000708:	d303      	bcc.n	8000712 <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 800070a:	4b0e      	ldr	r3, [pc, #56]	; (8000744 <HD44780_SetCursor+0x60>)
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	3b01      	subs	r3, #1
 8000710:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8000712:	79bb      	ldrb	r3, [r7, #6]
 8000714:	009b      	lsls	r3, r3, #2
 8000716:	3318      	adds	r3, #24
 8000718:	443b      	add	r3, r7
 800071a:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800071e:	b2da      	uxtb	r2, r3
 8000720:	79fb      	ldrb	r3, [r7, #7]
 8000722:	4413      	add	r3, r2
 8000724:	b2db      	uxtb	r3, r3
 8000726:	b25b      	sxtb	r3, r3
 8000728:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800072c:	b25b      	sxtb	r3, r3
 800072e:	b2db      	uxtb	r3, r3
 8000730:	4618      	mov	r0, r3
 8000732:	f000 f85d 	bl	80007f0 <SendCommand>
}
 8000736:	bf00      	nop
 8000738:	371c      	adds	r7, #28
 800073a:	46bd      	mov	sp, r7
 800073c:	bd90      	pop	{r4, r7, pc}
 800073e:	bf00      	nop
 8000740:	080053e8 	.word	0x080053e8
 8000744:	20000393 	.word	0x20000393

08000748 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 800074c:	4b08      	ldr	r3, [pc, #32]	; (8000770 <HD44780_Display+0x28>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	f043 0304 	orr.w	r3, r3, #4
 8000754:	b2da      	uxtb	r2, r3
 8000756:	4b06      	ldr	r3, [pc, #24]	; (8000770 <HD44780_Display+0x28>)
 8000758:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800075a:	4b05      	ldr	r3, [pc, #20]	; (8000770 <HD44780_Display+0x28>)
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	f043 0308 	orr.w	r3, r3, #8
 8000762:	b2db      	uxtb	r3, r3
 8000764:	4618      	mov	r0, r3
 8000766:	f000 f843 	bl	80007f0 <SendCommand>
}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	20000391 	.word	0x20000391

08000774 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	6039      	str	r1, [r7, #0]
 800077e:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8000780:	79fb      	ldrb	r3, [r7, #7]
 8000782:	f003 0307 	and.w	r3, r3, #7
 8000786:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8000788:	79fb      	ldrb	r3, [r7, #7]
 800078a:	00db      	lsls	r3, r3, #3
 800078c:	b25b      	sxtb	r3, r3
 800078e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000792:	b25b      	sxtb	r3, r3
 8000794:	b2db      	uxtb	r3, r3
 8000796:	4618      	mov	r0, r3
 8000798:	f000 f82a 	bl	80007f0 <SendCommand>
  for (int i=0; i<8; i++)
 800079c:	2300      	movs	r3, #0
 800079e:	60fb      	str	r3, [r7, #12]
 80007a0:	e009      	b.n	80007b6 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	683a      	ldr	r2, [r7, #0]
 80007a6:	4413      	add	r3, r2
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	4618      	mov	r0, r3
 80007ac:	f000 f82e 	bl	800080c <SendChar>
  for (int i=0; i<8; i++)
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	3301      	adds	r3, #1
 80007b4:	60fb      	str	r3, [r7, #12]
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	2b07      	cmp	r3, #7
 80007ba:	ddf2      	ble.n	80007a2 <HD44780_CreateSpecialChar+0x2e>
  }
}
 80007bc:	bf00      	nop
 80007be:	bf00      	nop
 80007c0:	3710      	adds	r7, #16
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}

080007c6 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 80007c6:	b580      	push	{r7, lr}
 80007c8:	b082      	sub	sp, #8
 80007ca:	af00      	add	r7, sp, #0
 80007cc:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 80007ce:	e006      	b.n	80007de <HD44780_PrintStr+0x18>
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	1c5a      	adds	r2, r3, #1
 80007d4:	607a      	str	r2, [r7, #4]
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	4618      	mov	r0, r3
 80007da:	f000 f817 	bl	800080c <SendChar>
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d1f4      	bne.n	80007d0 <HD44780_PrintStr+0xa>
}
 80007e6:	bf00      	nop
 80007e8:	bf00      	nop
 80007ea:	3708      	adds	r7, #8
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4603      	mov	r3, r0
 80007f8:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 80007fa:	79fb      	ldrb	r3, [r7, #7]
 80007fc:	2100      	movs	r1, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f000 f812 	bl	8000828 <Send>
}
 8000804:	bf00      	nop
 8000806:	3708      	adds	r7, #8
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}

0800080c <SendChar>:

static void SendChar(uint8_t ch)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	4603      	mov	r3, r0
 8000814:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8000816:	79fb      	ldrb	r3, [r7, #7]
 8000818:	2101      	movs	r1, #1
 800081a:	4618      	mov	r0, r3
 800081c:	f000 f804 	bl	8000828 <Send>
}
 8000820:	bf00      	nop
 8000822:	3708      	adds	r7, #8
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}

08000828 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b084      	sub	sp, #16
 800082c:	af00      	add	r7, sp, #0
 800082e:	4603      	mov	r3, r0
 8000830:	460a      	mov	r2, r1
 8000832:	71fb      	strb	r3, [r7, #7]
 8000834:	4613      	mov	r3, r2
 8000836:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8000838:	79fb      	ldrb	r3, [r7, #7]
 800083a:	f023 030f 	bic.w	r3, r3, #15
 800083e:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8000840:	79fb      	ldrb	r3, [r7, #7]
 8000842:	011b      	lsls	r3, r3, #4
 8000844:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8000846:	7bfa      	ldrb	r2, [r7, #15]
 8000848:	79bb      	ldrb	r3, [r7, #6]
 800084a:	4313      	orrs	r3, r2
 800084c:	b2db      	uxtb	r3, r3
 800084e:	4618      	mov	r0, r3
 8000850:	f000 f80b 	bl	800086a <Write4Bits>
  Write4Bits((lownib)|mode);
 8000854:	7bba      	ldrb	r2, [r7, #14]
 8000856:	79bb      	ldrb	r3, [r7, #6]
 8000858:	4313      	orrs	r3, r2
 800085a:	b2db      	uxtb	r3, r3
 800085c:	4618      	mov	r0, r3
 800085e:	f000 f804 	bl	800086a <Write4Bits>
}
 8000862:	bf00      	nop
 8000864:	3710      	adds	r7, #16
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}

0800086a <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 800086a:	b580      	push	{r7, lr}
 800086c:	b082      	sub	sp, #8
 800086e:	af00      	add	r7, sp, #0
 8000870:	4603      	mov	r3, r0
 8000872:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8000874:	79fb      	ldrb	r3, [r7, #7]
 8000876:	4618      	mov	r0, r3
 8000878:	f000 f808 	bl	800088c <ExpanderWrite>
  PulseEnable(value);
 800087c:	79fb      	ldrb	r3, [r7, #7]
 800087e:	4618      	mov	r0, r3
 8000880:	f000 f820 	bl	80008c4 <PulseEnable>
}
 8000884:	bf00      	nop
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}

0800088c <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b086      	sub	sp, #24
 8000890:	af02      	add	r7, sp, #8
 8000892:	4603      	mov	r3, r0
 8000894:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8000896:	4b09      	ldr	r3, [pc, #36]	; (80008bc <ExpanderWrite+0x30>)
 8000898:	781a      	ldrb	r2, [r3, #0]
 800089a:	79fb      	ldrb	r3, [r7, #7]
 800089c:	4313      	orrs	r3, r2
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 80008a2:	f107 020f 	add.w	r2, r7, #15
 80008a6:	230a      	movs	r3, #10
 80008a8:	9300      	str	r3, [sp, #0]
 80008aa:	2301      	movs	r3, #1
 80008ac:	214e      	movs	r1, #78	; 0x4e
 80008ae:	4804      	ldr	r0, [pc, #16]	; (80008c0 <ExpanderWrite+0x34>)
 80008b0:	f001 fb86 	bl	8001fc0 <HAL_I2C_Master_Transmit>
}
 80008b4:	bf00      	nop
 80008b6:	3710      	adds	r7, #16
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	20000394 	.word	0x20000394
 80008c0:	20000398 	.word	0x20000398

080008c4 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	4603      	mov	r3, r0
 80008cc:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 80008ce:	79fb      	ldrb	r3, [r7, #7]
 80008d0:	f043 0304 	orr.w	r3, r3, #4
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	4618      	mov	r0, r3
 80008d8:	f7ff ffd8 	bl	800088c <ExpanderWrite>
  osDelay(20);
 80008dc:	2014      	movs	r0, #20
 80008de:	f000 f839 	bl	8000954 <osDelay>

  ExpanderWrite(_data & ~ENABLE);
 80008e2:	79fb      	ldrb	r3, [r7, #7]
 80008e4:	f023 0304 	bic.w	r3, r3, #4
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	4618      	mov	r0, r3
 80008ec:	f7ff ffce 	bl	800088c <ExpanderWrite>
  osDelay(20);
 80008f0:	2014      	movs	r0, #20
 80008f2:	f000 f82f 	bl	8000954 <osDelay>
}
 80008f6:	bf00      	nop
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
	...

08000900 <DelayInit>:

static void DelayInit(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8000904:	4b11      	ldr	r3, [pc, #68]	; (800094c <DelayInit+0x4c>)
 8000906:	68db      	ldr	r3, [r3, #12]
 8000908:	4a10      	ldr	r2, [pc, #64]	; (800094c <DelayInit+0x4c>)
 800090a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800090e:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8000910:	4b0e      	ldr	r3, [pc, #56]	; (800094c <DelayInit+0x4c>)
 8000912:	68db      	ldr	r3, [r3, #12]
 8000914:	4a0d      	ldr	r2, [pc, #52]	; (800094c <DelayInit+0x4c>)
 8000916:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800091a:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800091c:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <DelayInit+0x50>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a0b      	ldr	r2, [pc, #44]	; (8000950 <DelayInit+0x50>)
 8000922:	f023 0301 	bic.w	r3, r3, #1
 8000926:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000928:	4b09      	ldr	r3, [pc, #36]	; (8000950 <DelayInit+0x50>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a08      	ldr	r2, [pc, #32]	; (8000950 <DelayInit+0x50>)
 800092e:	f043 0301 	orr.w	r3, r3, #1
 8000932:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8000934:	4b06      	ldr	r3, [pc, #24]	; (8000950 <DelayInit+0x50>)
 8000936:	2200      	movs	r2, #0
 8000938:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 800093a:	bf00      	nop
  __ASM volatile ("NOP");
 800093c:	bf00      	nop
  __ASM volatile ("NOP");
 800093e:	bf00      	nop
}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	e000edf0 	.word	0xe000edf0
 8000950:	e0001000 	.word	0xe0001000

08000954 <osDelay>:

static void osDelay(uint32_t us) {
 8000954:	b480      	push	{r7}
 8000956:	b087      	sub	sp, #28
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 800095c:	4b0e      	ldr	r3, [pc, #56]	; (8000998 <osDelay+0x44>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a0e      	ldr	r2, [pc, #56]	; (800099c <osDelay+0x48>)
 8000962:	fba2 2303 	umull	r2, r3, r2, r3
 8000966:	0c9a      	lsrs	r2, r3, #18
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	fb02 f303 	mul.w	r3, r2, r3
 800096e:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8000970:	4b0b      	ldr	r3, [pc, #44]	; (80009a0 <osDelay+0x4c>)
 8000972:	685b      	ldr	r3, [r3, #4]
 8000974:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8000976:	4b0a      	ldr	r3, [pc, #40]	; (80009a0 <osDelay+0x4c>)
 8000978:	685a      	ldr	r2, [r3, #4]
 800097a:	693b      	ldr	r3, [r7, #16]
 800097c:	1ad3      	subs	r3, r2, r3
 800097e:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	697a      	ldr	r2, [r7, #20]
 8000984:	429a      	cmp	r2, r3
 8000986:	d8f6      	bhi.n	8000976 <osDelay+0x22>
}
 8000988:	bf00      	nop
 800098a:	bf00      	nop
 800098c:	371c      	adds	r7, #28
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	20000074 	.word	0x20000074
 800099c:	431bde83 	.word	0x431bde83
 80009a0:	e0001000 	.word	0xe0001000

080009a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009a4:	b5b0      	push	{r4, r5, r7, lr}
 80009a6:	b09c      	sub	sp, #112	; 0x70
 80009a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  menu.currentMenu = &SUB1;
 80009aa:	4b2c      	ldr	r3, [pc, #176]	; (8000a5c <main+0xb8>)
 80009ac:	4a2c      	ldr	r2, [pc, #176]	; (8000a60 <main+0xbc>)
 80009ae:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009b0:	f000 fee8 	bl	8001784 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009b4:	f000 f866 	bl	8000a84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009b8:	f000 f8fc 	bl	8000bb4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80009bc:	f000 f8cc 	bl	8000b58 <MX_I2C1_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityAboveNormal, 0, 128);
 80009c0:	4b28      	ldr	r3, [pc, #160]	; (8000a64 <main+0xc0>)
 80009c2:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80009c6:	461d      	mov	r5, r3
 80009c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80009d4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80009d8:	2100      	movs	r1, #0
 80009da:	4618      	mov	r0, r3
 80009dc:	f002 fda7 	bl	800352e <osThreadCreate>
 80009e0:	4603      	mov	r3, r0
 80009e2:	4a21      	ldr	r2, [pc, #132]	; (8000a68 <main+0xc4>)
 80009e4:	6013      	str	r3, [r2, #0]

  /* definition and creation of diodeDetector */
  osThreadDef(diodeDetector, diodeDetector_Init, osPriorityIdle, 0, 128);
 80009e6:	4b21      	ldr	r3, [pc, #132]	; (8000a6c <main+0xc8>)
 80009e8:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80009ec:	461d      	mov	r5, r3
 80009ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009f2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  diodeDetectorHandle = osThreadCreate(osThread(diodeDetector), NULL);
 80009fa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009fe:	2100      	movs	r1, #0
 8000a00:	4618      	mov	r0, r3
 8000a02:	f002 fd94 	bl	800352e <osThreadCreate>
 8000a06:	4603      	mov	r3, r0
 8000a08:	4a19      	ldr	r2, [pc, #100]	; (8000a70 <main+0xcc>)
 8000a0a:	6013      	str	r3, [r2, #0]

  /* definition and creation of holeState */
  osThreadDef(holeState, holeState_Init, osPriorityNormal, 0, 128);
 8000a0c:	4b19      	ldr	r3, [pc, #100]	; (8000a74 <main+0xd0>)
 8000a0e:	f107 041c 	add.w	r4, r7, #28
 8000a12:	461d      	mov	r5, r3
 8000a14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a18:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a1c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  holeStateHandle = osThreadCreate(osThread(holeState), NULL);
 8000a20:	f107 031c 	add.w	r3, r7, #28
 8000a24:	2100      	movs	r1, #0
 8000a26:	4618      	mov	r0, r3
 8000a28:	f002 fd81 	bl	800352e <osThreadCreate>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	4a12      	ldr	r2, [pc, #72]	; (8000a78 <main+0xd4>)
 8000a30:	6013      	str	r3, [r2, #0]

  /* definition and creation of displayMenu */
  osThreadDef(displayMenu, displayMenu_Init, osPriorityIdle, 0, 128);
 8000a32:	4b12      	ldr	r3, [pc, #72]	; (8000a7c <main+0xd8>)
 8000a34:	463c      	mov	r4, r7
 8000a36:	461d      	mov	r5, r3
 8000a38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a3c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a40:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  displayMenuHandle = osThreadCreate(osThread(displayMenu), NULL);
 8000a44:	463b      	mov	r3, r7
 8000a46:	2100      	movs	r1, #0
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f002 fd70 	bl	800352e <osThreadCreate>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	4a0b      	ldr	r2, [pc, #44]	; (8000a80 <main+0xdc>)
 8000a52:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000a54:	f002 fd64 	bl	8003520 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a58:	e7fe      	b.n	8000a58 <main+0xb4>
 8000a5a:	bf00      	nop
 8000a5c:	20000030 	.word	0x20000030
 8000a60:	20000010 	.word	0x20000010
 8000a64:	08005404 	.word	0x08005404
 8000a68:	200003ec 	.word	0x200003ec
 8000a6c:	08005430 	.word	0x08005430
 8000a70:	200003f0 	.word	0x200003f0
 8000a74:	08005458 	.word	0x08005458
 8000a78:	200003f4 	.word	0x200003f4
 8000a7c:	08005480 	.word	0x08005480
 8000a80:	200003f8 	.word	0x200003f8

08000a84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b094      	sub	sp, #80	; 0x50
 8000a88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a8a:	f107 0320 	add.w	r3, r7, #32
 8000a8e:	2230      	movs	r2, #48	; 0x30
 8000a90:	2100      	movs	r1, #0
 8000a92:	4618      	mov	r0, r3
 8000a94:	f003 ffc2 	bl	8004a1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a98:	f107 030c 	add.w	r3, r7, #12
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	609a      	str	r2, [r3, #8]
 8000aa4:	60da      	str	r2, [r3, #12]
 8000aa6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	60bb      	str	r3, [r7, #8]
 8000aac:	4b28      	ldr	r3, [pc, #160]	; (8000b50 <SystemClock_Config+0xcc>)
 8000aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab0:	4a27      	ldr	r2, [pc, #156]	; (8000b50 <SystemClock_Config+0xcc>)
 8000ab2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ab6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab8:	4b25      	ldr	r3, [pc, #148]	; (8000b50 <SystemClock_Config+0xcc>)
 8000aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ac0:	60bb      	str	r3, [r7, #8]
 8000ac2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	607b      	str	r3, [r7, #4]
 8000ac8:	4b22      	ldr	r3, [pc, #136]	; (8000b54 <SystemClock_Config+0xd0>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a21      	ldr	r2, [pc, #132]	; (8000b54 <SystemClock_Config+0xd0>)
 8000ace:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ad2:	6013      	str	r3, [r2, #0]
 8000ad4:	4b1f      	ldr	r3, [pc, #124]	; (8000b54 <SystemClock_Config+0xd0>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000adc:	607b      	str	r3, [r7, #4]
 8000ade:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ae8:	2310      	movs	r3, #16
 8000aea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aec:	2302      	movs	r3, #2
 8000aee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000af0:	2300      	movs	r3, #0
 8000af2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000af4:	2308      	movs	r3, #8
 8000af6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000af8:	23c0      	movs	r3, #192	; 0xc0
 8000afa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000afc:	2304      	movs	r3, #4
 8000afe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000b00:	2308      	movs	r3, #8
 8000b02:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b04:	f107 0320 	add.w	r3, r7, #32
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f001 fdb3 	bl	8002674 <HAL_RCC_OscConfig>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b14:	f000 fac2 	bl	800109c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b18:	230f      	movs	r3, #15
 8000b1a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b20:	2300      	movs	r3, #0
 8000b22:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b24:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b28:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b2e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b30:	f107 030c 	add.w	r3, r7, #12
 8000b34:	2103      	movs	r1, #3
 8000b36:	4618      	mov	r0, r3
 8000b38:	f002 f814 	bl	8002b64 <HAL_RCC_ClockConfig>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000b42:	f000 faab 	bl	800109c <Error_Handler>
  }
}
 8000b46:	bf00      	nop
 8000b48:	3750      	adds	r7, #80	; 0x50
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40023800 	.word	0x40023800
 8000b54:	40007000 	.word	0x40007000

08000b58 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b5c:	4b13      	ldr	r3, [pc, #76]	; (8000bac <MX_I2C1_Init+0x54>)
 8000b5e:	4a14      	ldr	r2, [pc, #80]	; (8000bb0 <MX_I2C1_Init+0x58>)
 8000b60:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 25000;
 8000b62:	4b12      	ldr	r3, [pc, #72]	; (8000bac <MX_I2C1_Init+0x54>)
 8000b64:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8000b68:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b6a:	4b10      	ldr	r3, [pc, #64]	; (8000bac <MX_I2C1_Init+0x54>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b70:	4b0e      	ldr	r3, [pc, #56]	; (8000bac <MX_I2C1_Init+0x54>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b76:	4b0d      	ldr	r3, [pc, #52]	; (8000bac <MX_I2C1_Init+0x54>)
 8000b78:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b7c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b7e:	4b0b      	ldr	r3, [pc, #44]	; (8000bac <MX_I2C1_Init+0x54>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b84:	4b09      	ldr	r3, [pc, #36]	; (8000bac <MX_I2C1_Init+0x54>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b8a:	4b08      	ldr	r3, [pc, #32]	; (8000bac <MX_I2C1_Init+0x54>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b90:	4b06      	ldr	r3, [pc, #24]	; (8000bac <MX_I2C1_Init+0x54>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b96:	4805      	ldr	r0, [pc, #20]	; (8000bac <MX_I2C1_Init+0x54>)
 8000b98:	f001 f8ce 	bl	8001d38 <HAL_I2C_Init>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8000ba2:	f000 fa7b 	bl	800109c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	20000398 	.word	0x20000398
 8000bb0:	40005400 	.word	0x40005400

08000bb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b08c      	sub	sp, #48	; 0x30
 8000bb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bba:	f107 031c 	add.w	r3, r7, #28
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	601a      	str	r2, [r3, #0]
 8000bc2:	605a      	str	r2, [r3, #4]
 8000bc4:	609a      	str	r2, [r3, #8]
 8000bc6:	60da      	str	r2, [r3, #12]
 8000bc8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	61bb      	str	r3, [r7, #24]
 8000bce:	4ba2      	ldr	r3, [pc, #648]	; (8000e58 <MX_GPIO_Init+0x2a4>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	4aa1      	ldr	r2, [pc, #644]	; (8000e58 <MX_GPIO_Init+0x2a4>)
 8000bd4:	f043 0310 	orr.w	r3, r3, #16
 8000bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bda:	4b9f      	ldr	r3, [pc, #636]	; (8000e58 <MX_GPIO_Init+0x2a4>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	f003 0310 	and.w	r3, r3, #16
 8000be2:	61bb      	str	r3, [r7, #24]
 8000be4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	617b      	str	r3, [r7, #20]
 8000bea:	4b9b      	ldr	r3, [pc, #620]	; (8000e58 <MX_GPIO_Init+0x2a4>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	4a9a      	ldr	r2, [pc, #616]	; (8000e58 <MX_GPIO_Init+0x2a4>)
 8000bf0:	f043 0304 	orr.w	r3, r3, #4
 8000bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf6:	4b98      	ldr	r3, [pc, #608]	; (8000e58 <MX_GPIO_Init+0x2a4>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	f003 0304 	and.w	r3, r3, #4
 8000bfe:	617b      	str	r3, [r7, #20]
 8000c00:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	613b      	str	r3, [r7, #16]
 8000c06:	4b94      	ldr	r3, [pc, #592]	; (8000e58 <MX_GPIO_Init+0x2a4>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	4a93      	ldr	r2, [pc, #588]	; (8000e58 <MX_GPIO_Init+0x2a4>)
 8000c0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c10:	6313      	str	r3, [r2, #48]	; 0x30
 8000c12:	4b91      	ldr	r3, [pc, #580]	; (8000e58 <MX_GPIO_Init+0x2a4>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c1a:	613b      	str	r3, [r7, #16]
 8000c1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	60fb      	str	r3, [r7, #12]
 8000c22:	4b8d      	ldr	r3, [pc, #564]	; (8000e58 <MX_GPIO_Init+0x2a4>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	4a8c      	ldr	r2, [pc, #560]	; (8000e58 <MX_GPIO_Init+0x2a4>)
 8000c28:	f043 0301 	orr.w	r3, r3, #1
 8000c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2e:	4b8a      	ldr	r3, [pc, #552]	; (8000e58 <MX_GPIO_Init+0x2a4>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	f003 0301 	and.w	r3, r3, #1
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60bb      	str	r3, [r7, #8]
 8000c3e:	4b86      	ldr	r3, [pc, #536]	; (8000e58 <MX_GPIO_Init+0x2a4>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	4a85      	ldr	r2, [pc, #532]	; (8000e58 <MX_GPIO_Init+0x2a4>)
 8000c44:	f043 0302 	orr.w	r3, r3, #2
 8000c48:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4a:	4b83      	ldr	r3, [pc, #524]	; (8000e58 <MX_GPIO_Init+0x2a4>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	f003 0302 	and.w	r3, r3, #2
 8000c52:	60bb      	str	r3, [r7, #8]
 8000c54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	607b      	str	r3, [r7, #4]
 8000c5a:	4b7f      	ldr	r3, [pc, #508]	; (8000e58 <MX_GPIO_Init+0x2a4>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	4a7e      	ldr	r2, [pc, #504]	; (8000e58 <MX_GPIO_Init+0x2a4>)
 8000c60:	f043 0308 	orr.w	r3, r3, #8
 8000c64:	6313      	str	r3, [r2, #48]	; 0x30
 8000c66:	4b7c      	ldr	r3, [pc, #496]	; (8000e58 <MX_GPIO_Init+0x2a4>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	f003 0308 	and.w	r3, r3, #8
 8000c6e:	607b      	str	r3, [r7, #4]
 8000c70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2108      	movs	r1, #8
 8000c76:	4879      	ldr	r0, [pc, #484]	; (8000e5c <MX_GPIO_Init+0x2a8>)
 8000c78:	f001 f844 	bl	8001d04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	2101      	movs	r1, #1
 8000c80:	4877      	ldr	r0, [pc, #476]	; (8000e60 <MX_GPIO_Init+0x2ac>)
 8000c82:	f001 f83f 	bl	8001d04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(diode1_GPIO_Port, diode1_Pin, GPIO_PIN_RESET);
 8000c86:	2200      	movs	r2, #0
 8000c88:	2104      	movs	r1, #4
 8000c8a:	4875      	ldr	r0, [pc, #468]	; (8000e60 <MX_GPIO_Init+0x2ac>)
 8000c8c:	f001 f83a 	bl	8001d04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000c90:	2200      	movs	r2, #0
 8000c92:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000c96:	4873      	ldr	r0, [pc, #460]	; (8000e64 <MX_GPIO_Init+0x2b0>)
 8000c98:	f001 f834 	bl	8001d04 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c9c:	2304      	movs	r3, #4
 8000c9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ca8:	f107 031c 	add.w	r3, r7, #28
 8000cac:	4619      	mov	r1, r3
 8000cae:	486b      	ldr	r0, [pc, #428]	; (8000e5c <MX_GPIO_Init+0x2a8>)
 8000cb0:	f000 fe8c 	bl	80019cc <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000cb4:	2308      	movs	r3, #8
 8000cb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000cc4:	f107 031c 	add.w	r3, r7, #28
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4864      	ldr	r0, [pc, #400]	; (8000e5c <MX_GPIO_Init+0x2a8>)
 8000ccc:	f000 fe7e 	bl	80019cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|MEMS_INT2_Pin;
 8000cd0:	2332      	movs	r3, #50	; 0x32
 8000cd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000cd4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000cd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cde:	f107 031c 	add.w	r3, r7, #28
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	485d      	ldr	r0, [pc, #372]	; (8000e5c <MX_GPIO_Init+0x2a8>)
 8000ce6:	f000 fe71 	bl	80019cc <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin diode1_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|diode1_Pin;
 8000cea:	2305      	movs	r3, #5
 8000cec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cfa:	f107 031c 	add.w	r3, r7, #28
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4857      	ldr	r0, [pc, #348]	; (8000e60 <MX_GPIO_Init+0x2ac>)
 8000d02:	f000 fe63 	bl	80019cc <HAL_GPIO_Init>

  /*Configure GPIO pin : holeStatePin1_Pin */
  GPIO_InitStruct.Pin = holeStatePin1_Pin;
 8000d06:	2302      	movs	r3, #2
 8000d08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d0e:	2302      	movs	r3, #2
 8000d10:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(holeStatePin1_GPIO_Port, &GPIO_InitStruct);
 8000d12:	f107 031c 	add.w	r3, r7, #28
 8000d16:	4619      	mov	r1, r3
 8000d18:	4851      	ldr	r0, [pc, #324]	; (8000e60 <MX_GPIO_Init+0x2ac>)
 8000d1a:	f000 fe57 	bl	80019cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000d1e:	2308      	movs	r3, #8
 8000d20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d22:	2302      	movs	r3, #2
 8000d24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d26:	2300      	movs	r3, #0
 8000d28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d2e:	2305      	movs	r3, #5
 8000d30:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000d32:	f107 031c 	add.w	r3, r7, #28
 8000d36:	4619      	mov	r1, r3
 8000d38:	4849      	ldr	r0, [pc, #292]	; (8000e60 <MX_GPIO_Init+0x2ac>)
 8000d3a:	f000 fe47 	bl	80019cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d42:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000d46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4c:	f107 031c 	add.w	r3, r7, #28
 8000d50:	4619      	mov	r1, r3
 8000d52:	4845      	ldr	r0, [pc, #276]	; (8000e68 <MX_GPIO_Init+0x2b4>)
 8000d54:	f000 fe3a 	bl	80019cc <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000d58:	2310      	movs	r3, #16
 8000d5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d64:	2300      	movs	r3, #0
 8000d66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d68:	2306      	movs	r3, #6
 8000d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000d6c:	f107 031c 	add.w	r3, r7, #28
 8000d70:	4619      	mov	r1, r3
 8000d72:	483d      	ldr	r0, [pc, #244]	; (8000e68 <MX_GPIO_Init+0x2b4>)
 8000d74:	f000 fe2a 	bl	80019cc <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000d78:	23e0      	movs	r3, #224	; 0xe0
 8000d7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d84:	2303      	movs	r3, #3
 8000d86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d88:	2305      	movs	r3, #5
 8000d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8c:	f107 031c 	add.w	r3, r7, #28
 8000d90:	4619      	mov	r1, r3
 8000d92:	4835      	ldr	r0, [pc, #212]	; (8000e68 <MX_GPIO_Init+0x2b4>)
 8000d94:	f000 fe1a 	bl	80019cc <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_IN_Pin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000d98:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da6:	2300      	movs	r3, #0
 8000da8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000daa:	2305      	movs	r3, #5
 8000dac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dae:	f107 031c 	add.w	r3, r7, #28
 8000db2:	4619      	mov	r1, r3
 8000db4:	482d      	ldr	r0, [pc, #180]	; (8000e6c <MX_GPIO_Init+0x2b8>)
 8000db6:	f000 fe09 	bl	80019cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000dba:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000dbe:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dcc:	f107 031c 	add.w	r3, r7, #28
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4824      	ldr	r0, [pc, #144]	; (8000e64 <MX_GPIO_Init+0x2b0>)
 8000dd4:	f000 fdfa 	bl	80019cc <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000dd8:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000ddc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dde:	2302      	movs	r3, #2
 8000de0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de2:	2300      	movs	r3, #0
 8000de4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de6:	2300      	movs	r3, #0
 8000de8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000dea:	2306      	movs	r3, #6
 8000dec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dee:	f107 031c 	add.w	r3, r7, #28
 8000df2:	4619      	mov	r1, r3
 8000df4:	481a      	ldr	r0, [pc, #104]	; (8000e60 <MX_GPIO_Init+0x2ac>)
 8000df6:	f000 fde9 	bl	80019cc <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000dfa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e00:	2300      	movs	r3, #0
 8000e02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e04:	2300      	movs	r3, #0
 8000e06:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000e08:	f107 031c 	add.w	r3, r7, #28
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4816      	ldr	r0, [pc, #88]	; (8000e68 <MX_GPIO_Init+0x2b4>)
 8000e10:	f000 fddc 	bl	80019cc <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000e14:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000e18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e22:	2303      	movs	r3, #3
 8000e24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e26:	230a      	movs	r3, #10
 8000e28:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e2a:	f107 031c 	add.w	r3, r7, #28
 8000e2e:	4619      	mov	r1, r3
 8000e30:	480d      	ldr	r0, [pc, #52]	; (8000e68 <MX_GPIO_Init+0x2b4>)
 8000e32:	f000 fdcb 	bl	80019cc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000e36:	2320      	movs	r3, #32
 8000e38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000e42:	f107 031c 	add.w	r3, r7, #28
 8000e46:	4619      	mov	r1, r3
 8000e48:	4806      	ldr	r0, [pc, #24]	; (8000e64 <MX_GPIO_Init+0x2b0>)
 8000e4a:	f000 fdbf 	bl	80019cc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e4e:	bf00      	nop
 8000e50:	3730      	adds	r7, #48	; 0x30
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40023800 	.word	0x40023800
 8000e5c:	40021000 	.word	0x40021000
 8000e60:	40020800 	.word	0x40020800
 8000e64:	40020c00 	.word	0x40020c00
 8000e68:	40020000 	.word	0x40020000
 8000e6c:	40020400 	.word	0x40020400

08000e70 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* Infinite loop */
  for(;;)
  {
	  osDelay(2000);
 8000e78:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000e7c:	f002 fba3 	bl	80035c6 <osDelay>
	  menu.currentMenu = &SUB3;
 8000e80:	4b38      	ldr	r3, [pc, #224]	; (8000f64 <StartDefaultTask+0xf4>)
 8000e82:	4a39      	ldr	r2, [pc, #228]	; (8000f68 <StartDefaultTask+0xf8>)
 8000e84:	601a      	str	r2, [r3, #0]
	  menu.menuChanged = 1;
 8000e86:	4b37      	ldr	r3, [pc, #220]	; (8000f64 <StartDefaultTask+0xf4>)
 8000e88:	2201      	movs	r2, #1
 8000e8a:	609a      	str	r2, [r3, #8]
	  drinkAddCounter1();
 8000e8c:	f000 fa12 	bl	80012b4 <drinkAddCounter1>
	  menu.menuChanged = 1;
 8000e90:	4b34      	ldr	r3, [pc, #208]	; (8000f64 <StartDefaultTask+0xf4>)
 8000e92:	2201      	movs	r2, #1
 8000e94:	609a      	str	r2, [r3, #8]
	  osDelay(2000);
 8000e96:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000e9a:	f002 fb94 	bl	80035c6 <osDelay>
	  drinkAddCounter2();
 8000e9e:	f000 fa19 	bl	80012d4 <drinkAddCounter2>
	  menu.menuChanged = 1;
 8000ea2:	4b30      	ldr	r3, [pc, #192]	; (8000f64 <StartDefaultTask+0xf4>)
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	609a      	str	r2, [r3, #8]
	  osDelay(2000);
 8000ea8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000eac:	f002 fb8b 	bl	80035c6 <osDelay>
	  drinkAddCounter2();
 8000eb0:	f000 fa10 	bl	80012d4 <drinkAddCounter2>
	  menu.menuChanged = 1;
 8000eb4:	4b2b      	ldr	r3, [pc, #172]	; (8000f64 <StartDefaultTask+0xf4>)
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	609a      	str	r2, [r3, #8]
	  osDelay(2000);
 8000eba:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000ebe:	f002 fb82 	bl	80035c6 <osDelay>
	  drinkAddCounter4();
 8000ec2:	f000 fa27 	bl	8001314 <drinkAddCounter4>
	  menu.menuChanged = 1;
 8000ec6:	4b27      	ldr	r3, [pc, #156]	; (8000f64 <StartDefaultTask+0xf4>)
 8000ec8:	2201      	movs	r2, #1
 8000eca:	609a      	str	r2, [r3, #8]
	  osDelay(2000);
 8000ecc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000ed0:	f002 fb79 	bl	80035c6 <osDelay>
	  drinkAddCounter3();
 8000ed4:	f000 fa0e 	bl	80012f4 <drinkAddCounter3>
	  menu.menuChanged = 1;
 8000ed8:	4b22      	ldr	r3, [pc, #136]	; (8000f64 <StartDefaultTask+0xf4>)
 8000eda:	2201      	movs	r2, #1
 8000edc:	609a      	str	r2, [r3, #8]
	  osDelay(2000);
 8000ede:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000ee2:	f002 fb70 	bl	80035c6 <osDelay>
	  drinkAddCounter4();
 8000ee6:	f000 fa15 	bl	8001314 <drinkAddCounter4>
	  drinkAddCounter1();
 8000eea:	f000 f9e3 	bl	80012b4 <drinkAddCounter1>
	  menu.menuChanged = 1;
 8000eee:	4b1d      	ldr	r3, [pc, #116]	; (8000f64 <StartDefaultTask+0xf4>)
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	609a      	str	r2, [r3, #8]
	  osDelay(2000);
 8000ef4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000ef8:	f002 fb65 	bl	80035c6 <osDelay>
	  drinkAddCounter2();
 8000efc:	f000 f9ea 	bl	80012d4 <drinkAddCounter2>
	  drinkAddCounter3();
 8000f00:	f000 f9f8 	bl	80012f4 <drinkAddCounter3>
	  drinkAddCounter4();
 8000f04:	f000 fa06 	bl	8001314 <drinkAddCounter4>
	  menu.menuChanged = 1;
 8000f08:	4b16      	ldr	r3, [pc, #88]	; (8000f64 <StartDefaultTask+0xf4>)
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	609a      	str	r2, [r3, #8]
	  osDelay(2000);
 8000f0e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f12:	f002 fb58 	bl	80035c6 <osDelay>
	  menu.handleRight(&menu);
 8000f16:	4b13      	ldr	r3, [pc, #76]	; (8000f64 <StartDefaultTask+0xf4>)
 8000f18:	691b      	ldr	r3, [r3, #16]
 8000f1a:	4812      	ldr	r0, [pc, #72]	; (8000f64 <StartDefaultTask+0xf4>)
 8000f1c:	4798      	blx	r3
	  menu.menuChanged = 1;
 8000f1e:	4b11      	ldr	r3, [pc, #68]	; (8000f64 <StartDefaultTask+0xf4>)
 8000f20:	2201      	movs	r2, #1
 8000f22:	609a      	str	r2, [r3, #8]
	  osDelay(2000);
 8000f24:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f28:	f002 fb4d 	bl	80035c6 <osDelay>
	  drinkCounterReset();
 8000f2c:	f000 fa02 	bl	8001334 <drinkCounterReset>
	  menu.menuChanged = 1;
 8000f30:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <StartDefaultTask+0xf4>)
 8000f32:	2201      	movs	r2, #1
 8000f34:	609a      	str	r2, [r3, #8]
	  osDelay(2000);
 8000f36:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f3a:	f002 fb44 	bl	80035c6 <osDelay>
	  menu.currentMenu = &SUB1;
 8000f3e:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <StartDefaultTask+0xf4>)
 8000f40:	4a0a      	ldr	r2, [pc, #40]	; (8000f6c <StartDefaultTask+0xfc>)
 8000f42:	601a      	str	r2, [r3, #0]
	  menu.menuChanged = 1;
 8000f44:	4b07      	ldr	r3, [pc, #28]	; (8000f64 <StartDefaultTask+0xf4>)
 8000f46:	2201      	movs	r2, #1
 8000f48:	609a      	str	r2, [r3, #8]
	  osDelay(2000);
 8000f4a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f4e:	f002 fb3a 	bl	80035c6 <osDelay>
	  menu.handleRight(&menu);
 8000f52:	4b04      	ldr	r3, [pc, #16]	; (8000f64 <StartDefaultTask+0xf4>)
 8000f54:	691b      	ldr	r3, [r3, #16]
 8000f56:	4803      	ldr	r0, [pc, #12]	; (8000f64 <StartDefaultTask+0xf4>)
 8000f58:	4798      	blx	r3
	  menu.menuChanged = 1;
 8000f5a:	4b02      	ldr	r3, [pc, #8]	; (8000f64 <StartDefaultTask+0xf4>)
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	609a      	str	r2, [r3, #8]
  {
 8000f60:	e78a      	b.n	8000e78 <StartDefaultTask+0x8>
 8000f62:	bf00      	nop
 8000f64:	20000030 	.word	0x20000030
 8000f68:	20000020 	.word	0x20000020
 8000f6c:	20000010 	.word	0x20000010

08000f70 <diodeDetector_Init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_diodeDetector_Init */
void diodeDetector_Init(void const * argument)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN diodeDetector_Init */
  /* Infinite loop */
  for(;;)
  {
	if (holeState1 == 1){
 8000f78:	4b09      	ldr	r3, [pc, #36]	; (8000fa0 <diodeDetector_Init+0x30>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d105      	bne.n	8000f8c <diodeDetector_Init+0x1c>
		HAL_GPIO_WritePin(diode1_GPIO_Port, diode1_Pin, 1);
 8000f80:	2201      	movs	r2, #1
 8000f82:	2104      	movs	r1, #4
 8000f84:	4807      	ldr	r0, [pc, #28]	; (8000fa4 <diodeDetector_Init+0x34>)
 8000f86:	f000 febd 	bl	8001d04 <HAL_GPIO_WritePin>
 8000f8a:	e004      	b.n	8000f96 <diodeDetector_Init+0x26>
	}
	else{
		HAL_GPIO_WritePin(diode1_GPIO_Port, diode1_Pin, 0);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	2104      	movs	r1, #4
 8000f90:	4804      	ldr	r0, [pc, #16]	; (8000fa4 <diodeDetector_Init+0x34>)
 8000f92:	f000 feb7 	bl	8001d04 <HAL_GPIO_WritePin>
	}
	else{
		HAL_GPIO_WritePin(diode4_GPIO_Port, diode4_Pin, 0);
	}
	*/
    osDelay(10000);
 8000f96:	f242 7010 	movw	r0, #10000	; 0x2710
 8000f9a:	f002 fb14 	bl	80035c6 <osDelay>
	if (holeState1 == 1){
 8000f9e:	e7eb      	b.n	8000f78 <diodeDetector_Init+0x8>
 8000fa0:	200003fc 	.word	0x200003fc
 8000fa4:	40020800 	.word	0x40020800

08000fa8 <holeState_Init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_holeState_Init */
void holeState_Init(void const * argument)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN holeState_Init */
  /* Infinite loop */
  for(;;)
  {
	if (HAL_GPIO_ReadPin(holeStatePin1_GPIO_Port, holeStatePin1_Pin) == 1){
 8000fb0:	2102      	movs	r1, #2
 8000fb2:	4809      	ldr	r0, [pc, #36]	; (8000fd8 <holeState_Init+0x30>)
 8000fb4:	f000 fe8e 	bl	8001cd4 <HAL_GPIO_ReadPin>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d103      	bne.n	8000fc6 <holeState_Init+0x1e>
		holeState1 = 1;
 8000fbe:	4b07      	ldr	r3, [pc, #28]	; (8000fdc <holeState_Init+0x34>)
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	701a      	strb	r2, [r3, #0]
 8000fc4:	e002      	b.n	8000fcc <holeState_Init+0x24>
	}
	else{
		holeState1 = 0;
 8000fc6:	4b05      	ldr	r3, [pc, #20]	; (8000fdc <holeState_Init+0x34>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	701a      	strb	r2, [r3, #0]
	}
	else{
		holeState4 = 0;
	}
	*/
    osDelay(10000);
 8000fcc:	f242 7010 	movw	r0, #10000	; 0x2710
 8000fd0:	f002 faf9 	bl	80035c6 <osDelay>
	if (HAL_GPIO_ReadPin(holeStatePin1_GPIO_Port, holeStatePin1_Pin) == 1){
 8000fd4:	e7ec      	b.n	8000fb0 <holeState_Init+0x8>
 8000fd6:	bf00      	nop
 8000fd8:	40020800 	.word	0x40020800
 8000fdc:	200003fc 	.word	0x200003fc

08000fe0 <displayMenu_Init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_displayMenu_Init */
void displayMenu_Init(void const * argument)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN displayMenu_Init */
  HD44780_Init(2);
 8000fe8:	2002      	movs	r0, #2
 8000fea:	f7ff fae1 	bl	80005b0 <HD44780_Init>
  drinkCounterReset();
 8000fee:	f000 f9a1 	bl	8001334 <drinkCounterReset>
  menu.cursorPos = 0;
 8000ff2:	4b1e      	ldr	r3, [pc, #120]	; (800106c <displayMenu_Init+0x8c>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	605a      	str	r2, [r3, #4]
  menu.menuChanged = 1;
 8000ff8:	4b1c      	ldr	r3, [pc, #112]	; (800106c <displayMenu_Init+0x8c>)
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	609a      	str	r2, [r3, #8]
  /* Infinite loop */
  for(;;)
  {
	  if(menu.menuChanged==1){
 8000ffe:	4b1b      	ldr	r3, [pc, #108]	; (800106c <displayMenu_Init+0x8c>)
 8001000:	689b      	ldr	r3, [r3, #8]
 8001002:	2b01      	cmp	r3, #1
 8001004:	d12e      	bne.n	8001064 <displayMenu_Init+0x84>
		  if (menu.currentMenu==&SUB1){
 8001006:	4b19      	ldr	r3, [pc, #100]	; (800106c <displayMenu_Init+0x8c>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a19      	ldr	r2, [pc, #100]	; (8001070 <displayMenu_Init+0x90>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d110      	bne.n	8001032 <displayMenu_Init+0x52>
			  defaultMenu();
 8001010:	f000 f85a 	bl	80010c8 <defaultMenu>
			  switch(menu.cursorPos){
 8001014:	4b15      	ldr	r3, [pc, #84]	; (800106c <displayMenu_Init+0x8c>)
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d002      	beq.n	8001022 <displayMenu_Init+0x42>
 800101c:	2b01      	cmp	r3, #1
 800101e:	d003      	beq.n	8001028 <displayMenu_Init+0x48>
 8001020:	e005      	b.n	800102e <displayMenu_Init+0x4e>
			  	  case 0:
			  		  defaultMenuCursorPos1();
 8001022:	f000 f8ef 	bl	8001204 <defaultMenuCursorPos1>
			  		  break;
 8001026:	e004      	b.n	8001032 <displayMenu_Init+0x52>
			  	  case 1:
			  		  defaultMenuCursorPos2();
 8001028:	f000 f902 	bl	8001230 <defaultMenuCursorPos2>
			  		  break;
 800102c:	e001      	b.n	8001032 <displayMenu_Init+0x52>
			  	  default:
			  		  menuError();
 800102e:	f000 f83b 	bl	80010a8 <menuError>
			  }
		  }
		  if (menu.currentMenu==&SUB3){
 8001032:	4b0e      	ldr	r3, [pc, #56]	; (800106c <displayMenu_Init+0x8c>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a0f      	ldr	r2, [pc, #60]	; (8001074 <displayMenu_Init+0x94>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d110      	bne.n	800105e <displayMenu_Init+0x7e>
			  sub3Menu();
 800103c:	f000 f85c 	bl	80010f8 <sub3Menu>
			  switch(menu.cursorPos){
 8001040:	4b0a      	ldr	r3, [pc, #40]	; (800106c <displayMenu_Init+0x8c>)
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d002      	beq.n	800104e <displayMenu_Init+0x6e>
 8001048:	2b01      	cmp	r3, #1
 800104a:	d003      	beq.n	8001054 <displayMenu_Init+0x74>
 800104c:	e005      	b.n	800105a <displayMenu_Init+0x7a>
			  	  case 0:
			  		  sub3MenuCursorPos1();
 800104e:	f000 f905 	bl	800125c <sub3MenuCursorPos1>
			  		  break;
 8001052:	e004      	b.n	800105e <displayMenu_Init+0x7e>
			  	  case 1:
			  		  sub3MenuCursorPos2();
 8001054:	f000 f918 	bl	8001288 <sub3MenuCursorPos2>
			  		  break;
 8001058:	e001      	b.n	800105e <displayMenu_Init+0x7e>
			  	  default:
			  		  menuError();
 800105a:	f000 f825 	bl	80010a8 <menuError>
			  }
		  }
	  menu.menuChanged = 0;
 800105e:	4b03      	ldr	r3, [pc, #12]	; (800106c <displayMenu_Init+0x8c>)
 8001060:	2200      	movs	r2, #0
 8001062:	609a      	str	r2, [r3, #8]
	  }
	osDelay(30);
 8001064:	201e      	movs	r0, #30
 8001066:	f002 faae 	bl	80035c6 <osDelay>
	  if(menu.menuChanged==1){
 800106a:	e7c8      	b.n	8000ffe <displayMenu_Init+0x1e>
 800106c:	20000030 	.word	0x20000030
 8001070:	20000010 	.word	0x20000010
 8001074:	20000020 	.word	0x20000020

08001078 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a04      	ldr	r2, [pc, #16]	; (8001098 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d101      	bne.n	800108e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800108a:	f000 fb9d 	bl	80017c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40010000 	.word	0x40010000

0800109c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010a0:	b672      	cpsid	i
}
 80010a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010a4:	e7fe      	b.n	80010a4 <Error_Handler+0x8>
	...

080010a8 <menuError>:
uint16_t drinkCounter1;
uint16_t drinkCounter2;
uint16_t drinkCounter3;
uint16_t drinkCounter4;

void menuError(){
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
	HD44780_Clear();
 80010ac:	f7ff fb04 	bl	80006b8 <HD44780_Clear>
	HD44780_SetCursor(0,0);
 80010b0:	2100      	movs	r1, #0
 80010b2:	2000      	movs	r0, #0
 80010b4:	f7ff fb16 	bl	80006e4 <HD44780_SetCursor>
	HD44780_PrintStr("Menu Display Error");
 80010b8:	4802      	ldr	r0, [pc, #8]	; (80010c4 <menuError+0x1c>)
 80010ba:	f7ff fb84 	bl	80007c6 <HD44780_PrintStr>
}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	0800549c 	.word	0x0800549c

080010c8 <defaultMenu>:

void defaultMenu(){
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
	HD44780_Clear();
 80010cc:	f7ff faf4 	bl	80006b8 <HD44780_Clear>
	HD44780_SetCursor(0,0);
 80010d0:	2100      	movs	r1, #0
 80010d2:	2000      	movs	r0, #0
 80010d4:	f7ff fb06 	bl	80006e4 <HD44780_SetCursor>
	HD44780_PrintStr(FirstOpt);
 80010d8:	4805      	ldr	r0, [pc, #20]	; (80010f0 <defaultMenu+0x28>)
 80010da:	f7ff fb74 	bl	80007c6 <HD44780_PrintStr>
	HD44780_SetCursor(0,1);
 80010de:	2101      	movs	r1, #1
 80010e0:	2000      	movs	r0, #0
 80010e2:	f7ff faff 	bl	80006e4 <HD44780_SetCursor>
	HD44780_PrintStr(SecondOpt);
 80010e6:	4803      	ldr	r0, [pc, #12]	; (80010f4 <defaultMenu+0x2c>)
 80010e8:	f7ff fb6d 	bl	80007c6 <HD44780_PrintStr>
}
 80010ec:	bf00      	nop
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	20000048 	.word	0x20000048
 80010f4:	20000054 	.word	0x20000054

080010f8 <sub3Menu>:

void sub3Menu(){
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
	HD44780_Clear();
 80010fc:	f7ff fadc 	bl	80006b8 <HD44780_Clear>
	HD44780_SetCursor(0,0);
 8001100:	2100      	movs	r1, #0
 8001102:	2000      	movs	r0, #0
 8001104:	f7ff faee 	bl	80006e4 <HD44780_SetCursor>
	HD44780_PrintStr(FirstOptsub3);
 8001108:	482f      	ldr	r0, [pc, #188]	; (80011c8 <sub3Menu+0xd0>)
 800110a:	f7ff fb5c 	bl	80007c6 <HD44780_PrintStr>
	HD44780_SetCursor(0,1);
 800110e:	2101      	movs	r1, #1
 8001110:	2000      	movs	r0, #0
 8001112:	f7ff fae7 	bl	80006e4 <HD44780_SetCursor>
	HD44780_PrintStr(SecondOptsub3);
 8001116:	482d      	ldr	r0, [pc, #180]	; (80011cc <sub3Menu+0xd4>)
 8001118:	f7ff fb55 	bl	80007c6 <HD44780_PrintStr>
	HD44780_SetCursor(8,0);
 800111c:	2100      	movs	r1, #0
 800111e:	2008      	movs	r0, #8
 8001120:	f7ff fae0 	bl	80006e4 <HD44780_SetCursor>
	HD44780_PrintStr("1st:");
 8001124:	482a      	ldr	r0, [pc, #168]	; (80011d0 <sub3Menu+0xd8>)
 8001126:	f7ff fb4e 	bl	80007c6 <HD44780_PrintStr>
	HD44780_SetCursor(12,0);
 800112a:	2100      	movs	r1, #0
 800112c:	200c      	movs	r0, #12
 800112e:	f7ff fad9 	bl	80006e4 <HD44780_SetCursor>
	sprintf(DrnCnt1, "%d", drinkCounter1);
 8001132:	4b28      	ldr	r3, [pc, #160]	; (80011d4 <sub3Menu+0xdc>)
 8001134:	881b      	ldrh	r3, [r3, #0]
 8001136:	461a      	mov	r2, r3
 8001138:	4927      	ldr	r1, [pc, #156]	; (80011d8 <sub3Menu+0xe0>)
 800113a:	4828      	ldr	r0, [pc, #160]	; (80011dc <sub3Menu+0xe4>)
 800113c:	f003 fc4e 	bl	80049dc <siprintf>
	HD44780_PrintStr(DrnCnt1);
 8001140:	4826      	ldr	r0, [pc, #152]	; (80011dc <sub3Menu+0xe4>)
 8001142:	f7ff fb40 	bl	80007c6 <HD44780_PrintStr>
	HD44780_SetCursor(14,0);
 8001146:	2100      	movs	r1, #0
 8001148:	200e      	movs	r0, #14
 800114a:	f7ff facb 	bl	80006e4 <HD44780_SetCursor>
	HD44780_PrintStr("2nd:");
 800114e:	4824      	ldr	r0, [pc, #144]	; (80011e0 <sub3Menu+0xe8>)
 8001150:	f7ff fb39 	bl	80007c6 <HD44780_PrintStr>
	HD44780_SetCursor(18,0);
 8001154:	2100      	movs	r1, #0
 8001156:	2012      	movs	r0, #18
 8001158:	f7ff fac4 	bl	80006e4 <HD44780_SetCursor>
	sprintf(DrnCnt2, "%d", drinkCounter2);
 800115c:	4b21      	ldr	r3, [pc, #132]	; (80011e4 <sub3Menu+0xec>)
 800115e:	881b      	ldrh	r3, [r3, #0]
 8001160:	461a      	mov	r2, r3
 8001162:	491d      	ldr	r1, [pc, #116]	; (80011d8 <sub3Menu+0xe0>)
 8001164:	4820      	ldr	r0, [pc, #128]	; (80011e8 <sub3Menu+0xf0>)
 8001166:	f003 fc39 	bl	80049dc <siprintf>
	HD44780_PrintStr(DrnCnt2);
 800116a:	481f      	ldr	r0, [pc, #124]	; (80011e8 <sub3Menu+0xf0>)
 800116c:	f7ff fb2b 	bl	80007c6 <HD44780_PrintStr>
	HD44780_SetCursor(8,1);
 8001170:	2101      	movs	r1, #1
 8001172:	2008      	movs	r0, #8
 8001174:	f7ff fab6 	bl	80006e4 <HD44780_SetCursor>
	HD44780_PrintStr("3rd:");
 8001178:	481c      	ldr	r0, [pc, #112]	; (80011ec <sub3Menu+0xf4>)
 800117a:	f7ff fb24 	bl	80007c6 <HD44780_PrintStr>
	HD44780_SetCursor(12,1);
 800117e:	2101      	movs	r1, #1
 8001180:	200c      	movs	r0, #12
 8001182:	f7ff faaf 	bl	80006e4 <HD44780_SetCursor>
	sprintf(DrnCnt3, "%d", drinkCounter3);
 8001186:	4b1a      	ldr	r3, [pc, #104]	; (80011f0 <sub3Menu+0xf8>)
 8001188:	881b      	ldrh	r3, [r3, #0]
 800118a:	461a      	mov	r2, r3
 800118c:	4912      	ldr	r1, [pc, #72]	; (80011d8 <sub3Menu+0xe0>)
 800118e:	4819      	ldr	r0, [pc, #100]	; (80011f4 <sub3Menu+0xfc>)
 8001190:	f003 fc24 	bl	80049dc <siprintf>
	HD44780_PrintStr(DrnCnt3);
 8001194:	4817      	ldr	r0, [pc, #92]	; (80011f4 <sub3Menu+0xfc>)
 8001196:	f7ff fb16 	bl	80007c6 <HD44780_PrintStr>
	HD44780_SetCursor(14,1);
 800119a:	2101      	movs	r1, #1
 800119c:	200e      	movs	r0, #14
 800119e:	f7ff faa1 	bl	80006e4 <HD44780_SetCursor>
	HD44780_PrintStr("4th:");
 80011a2:	4815      	ldr	r0, [pc, #84]	; (80011f8 <sub3Menu+0x100>)
 80011a4:	f7ff fb0f 	bl	80007c6 <HD44780_PrintStr>
	HD44780_SetCursor(18,1);
 80011a8:	2101      	movs	r1, #1
 80011aa:	2012      	movs	r0, #18
 80011ac:	f7ff fa9a 	bl	80006e4 <HD44780_SetCursor>
	sprintf(DrnCnt4, "%d", drinkCounter4);
 80011b0:	4b12      	ldr	r3, [pc, #72]	; (80011fc <sub3Menu+0x104>)
 80011b2:	881b      	ldrh	r3, [r3, #0]
 80011b4:	461a      	mov	r2, r3
 80011b6:	4908      	ldr	r1, [pc, #32]	; (80011d8 <sub3Menu+0xe0>)
 80011b8:	4811      	ldr	r0, [pc, #68]	; (8001200 <sub3Menu+0x108>)
 80011ba:	f003 fc0f 	bl	80049dc <siprintf>
	HD44780_PrintStr(DrnCnt4);
 80011be:	4810      	ldr	r0, [pc, #64]	; (8001200 <sub3Menu+0x108>)
 80011c0:	f7ff fb01 	bl	80007c6 <HD44780_PrintStr>
}
 80011c4:	bf00      	nop
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	20000064 	.word	0x20000064
 80011cc:	2000006c 	.word	0x2000006c
 80011d0:	080054b0 	.word	0x080054b0
 80011d4:	2000040e 	.word	0x2000040e
 80011d8:	080054b8 	.word	0x080054b8
 80011dc:	20000400 	.word	0x20000400
 80011e0:	080054bc 	.word	0x080054bc
 80011e4:	20000410 	.word	0x20000410
 80011e8:	20000404 	.word	0x20000404
 80011ec:	080054c4 	.word	0x080054c4
 80011f0:	20000412 	.word	0x20000412
 80011f4:	20000408 	.word	0x20000408
 80011f8:	080054cc 	.word	0x080054cc
 80011fc:	20000414 	.word	0x20000414
 8001200:	2000040c 	.word	0x2000040c

08001204 <defaultMenuCursorPos1>:

void defaultMenuCursorPos1(){
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
	HD44780_SetCursor(sizeof(SecondOpt),1);
 8001208:	2101      	movs	r1, #1
 800120a:	200e      	movs	r0, #14
 800120c:	f7ff fa6a 	bl	80006e4 <HD44780_SetCursor>
	HD44780_PrintStr("  ");
 8001210:	4805      	ldr	r0, [pc, #20]	; (8001228 <defaultMenuCursorPos1+0x24>)
 8001212:	f7ff fad8 	bl	80007c6 <HD44780_PrintStr>
	HD44780_SetCursor(sizeof(FirstOpt),0);
 8001216:	2100      	movs	r1, #0
 8001218:	2009      	movs	r0, #9
 800121a:	f7ff fa63 	bl	80006e4 <HD44780_SetCursor>
	HD44780_PrintStr("<-");
 800121e:	4803      	ldr	r0, [pc, #12]	; (800122c <defaultMenuCursorPos1+0x28>)
 8001220:	f7ff fad1 	bl	80007c6 <HD44780_PrintStr>
}
 8001224:	bf00      	nop
 8001226:	bd80      	pop	{r7, pc}
 8001228:	080054d4 	.word	0x080054d4
 800122c:	080054d8 	.word	0x080054d8

08001230 <defaultMenuCursorPos2>:

void defaultMenuCursorPos2(){
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
	HD44780_SetCursor(sizeof(FirstOpt),0);
 8001234:	2100      	movs	r1, #0
 8001236:	2009      	movs	r0, #9
 8001238:	f7ff fa54 	bl	80006e4 <HD44780_SetCursor>
	HD44780_PrintStr("  ");
 800123c:	4805      	ldr	r0, [pc, #20]	; (8001254 <defaultMenuCursorPos2+0x24>)
 800123e:	f7ff fac2 	bl	80007c6 <HD44780_PrintStr>
	HD44780_SetCursor(sizeof(SecondOpt),1);
 8001242:	2101      	movs	r1, #1
 8001244:	200e      	movs	r0, #14
 8001246:	f7ff fa4d 	bl	80006e4 <HD44780_SetCursor>
	HD44780_PrintStr("<-");
 800124a:	4803      	ldr	r0, [pc, #12]	; (8001258 <defaultMenuCursorPos2+0x28>)
 800124c:	f7ff fabb 	bl	80007c6 <HD44780_PrintStr>
}
 8001250:	bf00      	nop
 8001252:	bd80      	pop	{r7, pc}
 8001254:	080054d4 	.word	0x080054d4
 8001258:	080054d8 	.word	0x080054d8

0800125c <sub3MenuCursorPos1>:

void sub3MenuCursorPos1(){
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
	HD44780_SetCursor(sizeof(SecondOptsub3),1);
 8001260:	2101      	movs	r1, #1
 8001262:	2005      	movs	r0, #5
 8001264:	f7ff fa3e 	bl	80006e4 <HD44780_SetCursor>
	HD44780_PrintStr("  ");
 8001268:	4805      	ldr	r0, [pc, #20]	; (8001280 <sub3MenuCursorPos1+0x24>)
 800126a:	f7ff faac 	bl	80007c6 <HD44780_PrintStr>
	HD44780_SetCursor(sizeof(FirstOptsub3),0);
 800126e:	2100      	movs	r1, #0
 8001270:	2006      	movs	r0, #6
 8001272:	f7ff fa37 	bl	80006e4 <HD44780_SetCursor>
	HD44780_PrintStr("<-");
 8001276:	4803      	ldr	r0, [pc, #12]	; (8001284 <sub3MenuCursorPos1+0x28>)
 8001278:	f7ff faa5 	bl	80007c6 <HD44780_PrintStr>
}
 800127c:	bf00      	nop
 800127e:	bd80      	pop	{r7, pc}
 8001280:	080054d4 	.word	0x080054d4
 8001284:	080054d8 	.word	0x080054d8

08001288 <sub3MenuCursorPos2>:

void sub3MenuCursorPos2(){
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
	HD44780_SetCursor(sizeof(FirstOptsub3),0);
 800128c:	2100      	movs	r1, #0
 800128e:	2006      	movs	r0, #6
 8001290:	f7ff fa28 	bl	80006e4 <HD44780_SetCursor>
	HD44780_PrintStr("  ");
 8001294:	4805      	ldr	r0, [pc, #20]	; (80012ac <sub3MenuCursorPos2+0x24>)
 8001296:	f7ff fa96 	bl	80007c6 <HD44780_PrintStr>
	HD44780_SetCursor(sizeof(SecondOptsub3),1);
 800129a:	2101      	movs	r1, #1
 800129c:	2005      	movs	r0, #5
 800129e:	f7ff fa21 	bl	80006e4 <HD44780_SetCursor>
	HD44780_PrintStr("<-");
 80012a2:	4803      	ldr	r0, [pc, #12]	; (80012b0 <sub3MenuCursorPos2+0x28>)
 80012a4:	f7ff fa8f 	bl	80007c6 <HD44780_PrintStr>
}
 80012a8:	bf00      	nop
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	080054d4 	.word	0x080054d4
 80012b0:	080054d8 	.word	0x080054d8

080012b4 <drinkAddCounter1>:

void drinkAddCounter1(){
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
	drinkCounter1++;
 80012b8:	4b05      	ldr	r3, [pc, #20]	; (80012d0 <drinkAddCounter1+0x1c>)
 80012ba:	881b      	ldrh	r3, [r3, #0]
 80012bc:	3301      	adds	r3, #1
 80012be:	b29a      	uxth	r2, r3
 80012c0:	4b03      	ldr	r3, [pc, #12]	; (80012d0 <drinkAddCounter1+0x1c>)
 80012c2:	801a      	strh	r2, [r3, #0]
}
 80012c4:	bf00      	nop
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	2000040e 	.word	0x2000040e

080012d4 <drinkAddCounter2>:

void drinkAddCounter2(){
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
	drinkCounter2++;
 80012d8:	4b05      	ldr	r3, [pc, #20]	; (80012f0 <drinkAddCounter2+0x1c>)
 80012da:	881b      	ldrh	r3, [r3, #0]
 80012dc:	3301      	adds	r3, #1
 80012de:	b29a      	uxth	r2, r3
 80012e0:	4b03      	ldr	r3, [pc, #12]	; (80012f0 <drinkAddCounter2+0x1c>)
 80012e2:	801a      	strh	r2, [r3, #0]
}
 80012e4:	bf00      	nop
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	20000410 	.word	0x20000410

080012f4 <drinkAddCounter3>:

void drinkAddCounter3(){
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
	drinkCounter3++;
 80012f8:	4b05      	ldr	r3, [pc, #20]	; (8001310 <drinkAddCounter3+0x1c>)
 80012fa:	881b      	ldrh	r3, [r3, #0]
 80012fc:	3301      	adds	r3, #1
 80012fe:	b29a      	uxth	r2, r3
 8001300:	4b03      	ldr	r3, [pc, #12]	; (8001310 <drinkAddCounter3+0x1c>)
 8001302:	801a      	strh	r2, [r3, #0]
}
 8001304:	bf00      	nop
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	20000412 	.word	0x20000412

08001314 <drinkAddCounter4>:

void drinkAddCounter4(){
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
	drinkCounter4++;
 8001318:	4b05      	ldr	r3, [pc, #20]	; (8001330 <drinkAddCounter4+0x1c>)
 800131a:	881b      	ldrh	r3, [r3, #0]
 800131c:	3301      	adds	r3, #1
 800131e:	b29a      	uxth	r2, r3
 8001320:	4b03      	ldr	r3, [pc, #12]	; (8001330 <drinkAddCounter4+0x1c>)
 8001322:	801a      	strh	r2, [r3, #0]
}
 8001324:	bf00      	nop
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	20000414 	.word	0x20000414

08001334 <drinkCounterReset>:

void drinkCounterReset(){
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
	drinkCounter1 = 0;
 8001338:	4b08      	ldr	r3, [pc, #32]	; (800135c <drinkCounterReset+0x28>)
 800133a:	2200      	movs	r2, #0
 800133c:	801a      	strh	r2, [r3, #0]
	drinkCounter2 = 0;
 800133e:	4b08      	ldr	r3, [pc, #32]	; (8001360 <drinkCounterReset+0x2c>)
 8001340:	2200      	movs	r2, #0
 8001342:	801a      	strh	r2, [r3, #0]
	drinkCounter3 = 0;
 8001344:	4b07      	ldr	r3, [pc, #28]	; (8001364 <drinkCounterReset+0x30>)
 8001346:	2200      	movs	r2, #0
 8001348:	801a      	strh	r2, [r3, #0]
	drinkCounter4 = 0;
 800134a:	4b07      	ldr	r3, [pc, #28]	; (8001368 <drinkCounterReset+0x34>)
 800134c:	2200      	movs	r2, #0
 800134e:	801a      	strh	r2, [r3, #0]
}
 8001350:	bf00      	nop
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	2000040e 	.word	0x2000040e
 8001360:	20000410 	.word	0x20000410
 8001364:	20000412 	.word	0x20000412
 8001368:	20000414 	.word	0x20000414

0800136c <leftReact1>:

void leftReact1(menu_t* self){
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
	self->cursorPos--;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	1e5a      	subs	r2, r3, #1
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	605a      	str	r2, [r3, #4]
	if (self->cursorPos < 0){
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	2b00      	cmp	r3, #0
 8001384:	da02      	bge.n	800138c <leftReact1+0x20>
		self->cursorPos = 1;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2201      	movs	r2, #1
 800138a:	605a      	str	r2, [r3, #4]
	}
}
 800138c:	bf00      	nop
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <rightReact1>:

void rightReact1(menu_t* self){
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
	self->cursorPos++;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	1c5a      	adds	r2, r3, #1
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	605a      	str	r2, [r3, #4]
	if (self->cursorPos > 1){
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	dd02      	ble.n	80013b8 <rightReact1+0x20>
		self->cursorPos = 0;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2200      	movs	r2, #0
 80013b6:	605a      	str	r2, [r3, #4]
	}
}
 80013b8:	bf00      	nop
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr

080013c4 <leftReact3>:

void rightReact2(menu_t* self){
	XD = 4;
}

void leftReact3(menu_t* self){
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
	self->cursorPos--;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	1e5a      	subs	r2, r3, #1
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	605a      	str	r2, [r3, #4]
	if (self->cursorPos < 0){
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	da02      	bge.n	80013e4 <leftReact3+0x20>
		self->cursorPos = 1;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2201      	movs	r2, #1
 80013e2:	605a      	str	r2, [r3, #4]
	}
}
 80013e4:	bf00      	nop
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <rightReact3>:

void rightReact3(menu_t* self){
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
	self->cursorPos++;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	1c5a      	adds	r2, r3, #1
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	605a      	str	r2, [r3, #4]
	if (self->cursorPos > 1){
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	2b01      	cmp	r3, #1
 8001408:	dd02      	ble.n	8001410 <rightReact3+0x20>
		self->cursorPos = 0;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2200      	movs	r2, #0
 800140e:	605a      	str	r2, [r3, #4]
	}
}
 8001410:	bf00      	nop
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <clickedReact1>:

void clickedReact1(menu_t* self){
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
	//Do stuff
	//self->currentMenu->
	// cursorPos++
}
 8001424:	bf00      	nop
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <clickedReact3>:
	//Do stuff
	//self->currentMenu->
	// cursorPos++
}

void clickedReact3(menu_t* self){
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
	//Do stuff
	//self->currentMenu->
	// cursorPos++
}
 8001438:	bf00      	nop
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <handleLeft>:

void handleLeft(menu_t* self){
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
    self->currentMenu->leftReact(self);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	4798      	blx	r3
}
 8001456:	bf00      	nop
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}

0800145e <handleRight>:

void handleRight(menu_t* self){
 800145e:	b580      	push	{r7, lr}
 8001460:	b082      	sub	sp, #8
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
    self->currentMenu->rightReact(self);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	4798      	blx	r3
}
 8001470:	bf00      	nop
 8001472:	3708      	adds	r7, #8
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <handleClicked>:

void handleClicked(menu_t* self){
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
    self->clickedReact(self);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	695b      	ldr	r3, [r3, #20]
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	4798      	blx	r3
}
 8001488:	bf00      	nop
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}

08001490 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	607b      	str	r3, [r7, #4]
 800149a:	4b12      	ldr	r3, [pc, #72]	; (80014e4 <HAL_MspInit+0x54>)
 800149c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800149e:	4a11      	ldr	r2, [pc, #68]	; (80014e4 <HAL_MspInit+0x54>)
 80014a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014a4:	6453      	str	r3, [r2, #68]	; 0x44
 80014a6:	4b0f      	ldr	r3, [pc, #60]	; (80014e4 <HAL_MspInit+0x54>)
 80014a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014ae:	607b      	str	r3, [r7, #4]
 80014b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	603b      	str	r3, [r7, #0]
 80014b6:	4b0b      	ldr	r3, [pc, #44]	; (80014e4 <HAL_MspInit+0x54>)
 80014b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ba:	4a0a      	ldr	r2, [pc, #40]	; (80014e4 <HAL_MspInit+0x54>)
 80014bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014c0:	6413      	str	r3, [r2, #64]	; 0x40
 80014c2:	4b08      	ldr	r3, [pc, #32]	; (80014e4 <HAL_MspInit+0x54>)
 80014c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ca:	603b      	str	r3, [r7, #0]
 80014cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80014ce:	2200      	movs	r2, #0
 80014d0:	210f      	movs	r1, #15
 80014d2:	f06f 0001 	mvn.w	r0, #1
 80014d6:	f000 fa4f 	bl	8001978 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014da:	bf00      	nop
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	40023800 	.word	0x40023800

080014e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b08a      	sub	sp, #40	; 0x28
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f0:	f107 0314 	add.w	r3, r7, #20
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	609a      	str	r2, [r3, #8]
 80014fc:	60da      	str	r2, [r3, #12]
 80014fe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a19      	ldr	r2, [pc, #100]	; (800156c <HAL_I2C_MspInit+0x84>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d12c      	bne.n	8001564 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	613b      	str	r3, [r7, #16]
 800150e:	4b18      	ldr	r3, [pc, #96]	; (8001570 <HAL_I2C_MspInit+0x88>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	4a17      	ldr	r2, [pc, #92]	; (8001570 <HAL_I2C_MspInit+0x88>)
 8001514:	f043 0302 	orr.w	r3, r3, #2
 8001518:	6313      	str	r3, [r2, #48]	; 0x30
 800151a:	4b15      	ldr	r3, [pc, #84]	; (8001570 <HAL_I2C_MspInit+0x88>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	613b      	str	r3, [r7, #16]
 8001524:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001526:	f44f 7340 	mov.w	r3, #768	; 0x300
 800152a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800152c:	2312      	movs	r3, #18
 800152e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001530:	2300      	movs	r3, #0
 8001532:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001534:	2303      	movs	r3, #3
 8001536:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001538:	2304      	movs	r3, #4
 800153a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800153c:	f107 0314 	add.w	r3, r7, #20
 8001540:	4619      	mov	r1, r3
 8001542:	480c      	ldr	r0, [pc, #48]	; (8001574 <HAL_I2C_MspInit+0x8c>)
 8001544:	f000 fa42 	bl	80019cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001548:	2300      	movs	r3, #0
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	4b08      	ldr	r3, [pc, #32]	; (8001570 <HAL_I2C_MspInit+0x88>)
 800154e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001550:	4a07      	ldr	r2, [pc, #28]	; (8001570 <HAL_I2C_MspInit+0x88>)
 8001552:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001556:	6413      	str	r3, [r2, #64]	; 0x40
 8001558:	4b05      	ldr	r3, [pc, #20]	; (8001570 <HAL_I2C_MspInit+0x88>)
 800155a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001560:	60fb      	str	r3, [r7, #12]
 8001562:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001564:	bf00      	nop
 8001566:	3728      	adds	r7, #40	; 0x28
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	40005400 	.word	0x40005400
 8001570:	40023800 	.word	0x40023800
 8001574:	40020400 	.word	0x40020400

08001578 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b08c      	sub	sp, #48	; 0x30
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001580:	2300      	movs	r3, #0
 8001582:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001584:	2300      	movs	r3, #0
 8001586:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001588:	2300      	movs	r3, #0
 800158a:	60bb      	str	r3, [r7, #8]
 800158c:	4b2f      	ldr	r3, [pc, #188]	; (800164c <HAL_InitTick+0xd4>)
 800158e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001590:	4a2e      	ldr	r2, [pc, #184]	; (800164c <HAL_InitTick+0xd4>)
 8001592:	f043 0301 	orr.w	r3, r3, #1
 8001596:	6453      	str	r3, [r2, #68]	; 0x44
 8001598:	4b2c      	ldr	r3, [pc, #176]	; (800164c <HAL_InitTick+0xd4>)
 800159a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159c:	f003 0301 	and.w	r3, r3, #1
 80015a0:	60bb      	str	r3, [r7, #8]
 80015a2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015a4:	f107 020c 	add.w	r2, r7, #12
 80015a8:	f107 0310 	add.w	r3, r7, #16
 80015ac:	4611      	mov	r1, r2
 80015ae:	4618      	mov	r0, r3
 80015b0:	f001 fcf8 	bl	8002fa4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80015b4:	f001 fce2 	bl	8002f7c <HAL_RCC_GetPCLK2Freq>
 80015b8:	4603      	mov	r3, r0
 80015ba:	005b      	lsls	r3, r3, #1
 80015bc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015c0:	4a23      	ldr	r2, [pc, #140]	; (8001650 <HAL_InitTick+0xd8>)
 80015c2:	fba2 2303 	umull	r2, r3, r2, r3
 80015c6:	0c9b      	lsrs	r3, r3, #18
 80015c8:	3b01      	subs	r3, #1
 80015ca:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80015cc:	4b21      	ldr	r3, [pc, #132]	; (8001654 <HAL_InitTick+0xdc>)
 80015ce:	4a22      	ldr	r2, [pc, #136]	; (8001658 <HAL_InitTick+0xe0>)
 80015d0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80015d2:	4b20      	ldr	r3, [pc, #128]	; (8001654 <HAL_InitTick+0xdc>)
 80015d4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015d8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80015da:	4a1e      	ldr	r2, [pc, #120]	; (8001654 <HAL_InitTick+0xdc>)
 80015dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015de:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80015e0:	4b1c      	ldr	r3, [pc, #112]	; (8001654 <HAL_InitTick+0xdc>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015e6:	4b1b      	ldr	r3, [pc, #108]	; (8001654 <HAL_InitTick+0xdc>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ec:	4b19      	ldr	r3, [pc, #100]	; (8001654 <HAL_InitTick+0xdc>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80015f2:	4818      	ldr	r0, [pc, #96]	; (8001654 <HAL_InitTick+0xdc>)
 80015f4:	f001 fd08 	bl	8003008 <HAL_TIM_Base_Init>
 80015f8:	4603      	mov	r3, r0
 80015fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80015fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001602:	2b00      	cmp	r3, #0
 8001604:	d11b      	bne.n	800163e <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001606:	4813      	ldr	r0, [pc, #76]	; (8001654 <HAL_InitTick+0xdc>)
 8001608:	f001 fd58 	bl	80030bc <HAL_TIM_Base_Start_IT>
 800160c:	4603      	mov	r3, r0
 800160e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001612:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001616:	2b00      	cmp	r3, #0
 8001618:	d111      	bne.n	800163e <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800161a:	2019      	movs	r0, #25
 800161c:	f000 f9c8 	bl	80019b0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2b0f      	cmp	r3, #15
 8001624:	d808      	bhi.n	8001638 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001626:	2200      	movs	r2, #0
 8001628:	6879      	ldr	r1, [r7, #4]
 800162a:	2019      	movs	r0, #25
 800162c:	f000 f9a4 	bl	8001978 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001630:	4a0a      	ldr	r2, [pc, #40]	; (800165c <HAL_InitTick+0xe4>)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6013      	str	r3, [r2, #0]
 8001636:	e002      	b.n	800163e <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800163e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001642:	4618      	mov	r0, r3
 8001644:	3730      	adds	r7, #48	; 0x30
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40023800 	.word	0x40023800
 8001650:	431bde83 	.word	0x431bde83
 8001654:	20000418 	.word	0x20000418
 8001658:	40010000 	.word	0x40010000
 800165c:	20000078 	.word	0x20000078

08001660 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001664:	e7fe      	b.n	8001664 <NMI_Handler+0x4>

08001666 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001666:	b480      	push	{r7}
 8001668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800166a:	e7fe      	b.n	800166a <HardFault_Handler+0x4>

0800166c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001670:	e7fe      	b.n	8001670 <MemManage_Handler+0x4>

08001672 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001672:	b480      	push	{r7}
 8001674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001676:	e7fe      	b.n	8001676 <BusFault_Handler+0x4>

08001678 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800167c:	e7fe      	b.n	800167c <UsageFault_Handler+0x4>

0800167e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800167e:	b480      	push	{r7}
 8001680:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001682:	bf00      	nop
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001690:	4802      	ldr	r0, [pc, #8]	; (800169c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001692:	f001 fd75 	bl	8003180 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20000418 	.word	0x20000418

080016a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b086      	sub	sp, #24
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016a8:	4a14      	ldr	r2, [pc, #80]	; (80016fc <_sbrk+0x5c>)
 80016aa:	4b15      	ldr	r3, [pc, #84]	; (8001700 <_sbrk+0x60>)
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016b4:	4b13      	ldr	r3, [pc, #76]	; (8001704 <_sbrk+0x64>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d102      	bne.n	80016c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016bc:	4b11      	ldr	r3, [pc, #68]	; (8001704 <_sbrk+0x64>)
 80016be:	4a12      	ldr	r2, [pc, #72]	; (8001708 <_sbrk+0x68>)
 80016c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016c2:	4b10      	ldr	r3, [pc, #64]	; (8001704 <_sbrk+0x64>)
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4413      	add	r3, r2
 80016ca:	693a      	ldr	r2, [r7, #16]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d207      	bcs.n	80016e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016d0:	f003 fa02 	bl	8004ad8 <__errno>
 80016d4:	4603      	mov	r3, r0
 80016d6:	220c      	movs	r2, #12
 80016d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016da:	f04f 33ff 	mov.w	r3, #4294967295
 80016de:	e009      	b.n	80016f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016e0:	4b08      	ldr	r3, [pc, #32]	; (8001704 <_sbrk+0x64>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016e6:	4b07      	ldr	r3, [pc, #28]	; (8001704 <_sbrk+0x64>)
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4413      	add	r3, r2
 80016ee:	4a05      	ldr	r2, [pc, #20]	; (8001704 <_sbrk+0x64>)
 80016f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016f2:	68fb      	ldr	r3, [r7, #12]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3718      	adds	r7, #24
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	20020000 	.word	0x20020000
 8001700:	00000400 	.word	0x00000400
 8001704:	20000460 	.word	0x20000460
 8001708:	20004308 	.word	0x20004308

0800170c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001710:	4b06      	ldr	r3, [pc, #24]	; (800172c <SystemInit+0x20>)
 8001712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001716:	4a05      	ldr	r2, [pc, #20]	; (800172c <SystemInit+0x20>)
 8001718:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800171c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001720:	bf00      	nop
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	e000ed00 	.word	0xe000ed00

08001730 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001730:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001768 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001734:	f7ff ffea 	bl	800170c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001738:	480c      	ldr	r0, [pc, #48]	; (800176c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800173a:	490d      	ldr	r1, [pc, #52]	; (8001770 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800173c:	4a0d      	ldr	r2, [pc, #52]	; (8001774 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800173e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001740:	e002      	b.n	8001748 <LoopCopyDataInit>

08001742 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001742:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001744:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001746:	3304      	adds	r3, #4

08001748 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001748:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800174a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800174c:	d3f9      	bcc.n	8001742 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800174e:	4a0a      	ldr	r2, [pc, #40]	; (8001778 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001750:	4c0a      	ldr	r4, [pc, #40]	; (800177c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001752:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001754:	e001      	b.n	800175a <LoopFillZerobss>

08001756 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001756:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001758:	3204      	adds	r2, #4

0800175a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800175a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800175c:	d3fb      	bcc.n	8001756 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800175e:	f003 f9c1 	bl	8004ae4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001762:	f7ff f91f 	bl	80009a4 <main>
  bx  lr    
 8001766:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001768:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800176c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001770:	200000d4 	.word	0x200000d4
  ldr r2, =_sidata
 8001774:	08005540 	.word	0x08005540
  ldr r2, =_sbss
 8001778:	200000d4 	.word	0x200000d4
  ldr r4, =_ebss
 800177c:	20004304 	.word	0x20004304

08001780 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001780:	e7fe      	b.n	8001780 <ADC_IRQHandler>
	...

08001784 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001788:	4b0e      	ldr	r3, [pc, #56]	; (80017c4 <HAL_Init+0x40>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a0d      	ldr	r2, [pc, #52]	; (80017c4 <HAL_Init+0x40>)
 800178e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001792:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001794:	4b0b      	ldr	r3, [pc, #44]	; (80017c4 <HAL_Init+0x40>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a0a      	ldr	r2, [pc, #40]	; (80017c4 <HAL_Init+0x40>)
 800179a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800179e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017a0:	4b08      	ldr	r3, [pc, #32]	; (80017c4 <HAL_Init+0x40>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a07      	ldr	r2, [pc, #28]	; (80017c4 <HAL_Init+0x40>)
 80017a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017ac:	2003      	movs	r0, #3
 80017ae:	f000 f8d8 	bl	8001962 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017b2:	200f      	movs	r0, #15
 80017b4:	f7ff fee0 	bl	8001578 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017b8:	f7ff fe6a 	bl	8001490 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017bc:	2300      	movs	r3, #0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40023c00 	.word	0x40023c00

080017c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017cc:	4b06      	ldr	r3, [pc, #24]	; (80017e8 <HAL_IncTick+0x20>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	461a      	mov	r2, r3
 80017d2:	4b06      	ldr	r3, [pc, #24]	; (80017ec <HAL_IncTick+0x24>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4413      	add	r3, r2
 80017d8:	4a04      	ldr	r2, [pc, #16]	; (80017ec <HAL_IncTick+0x24>)
 80017da:	6013      	str	r3, [r2, #0]
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	2000007c 	.word	0x2000007c
 80017ec:	20000464 	.word	0x20000464

080017f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  return uwTick;
 80017f4:	4b03      	ldr	r3, [pc, #12]	; (8001804 <HAL_GetTick+0x14>)
 80017f6:	681b      	ldr	r3, [r3, #0]
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	20000464 	.word	0x20000464

08001808 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001808:	b480      	push	{r7}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f003 0307 	and.w	r3, r3, #7
 8001816:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001818:	4b0c      	ldr	r3, [pc, #48]	; (800184c <__NVIC_SetPriorityGrouping+0x44>)
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800181e:	68ba      	ldr	r2, [r7, #8]
 8001820:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001824:	4013      	ands	r3, r2
 8001826:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001830:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001834:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001838:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800183a:	4a04      	ldr	r2, [pc, #16]	; (800184c <__NVIC_SetPriorityGrouping+0x44>)
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	60d3      	str	r3, [r2, #12]
}
 8001840:	bf00      	nop
 8001842:	3714      	adds	r7, #20
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	e000ed00 	.word	0xe000ed00

08001850 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001854:	4b04      	ldr	r3, [pc, #16]	; (8001868 <__NVIC_GetPriorityGrouping+0x18>)
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	0a1b      	lsrs	r3, r3, #8
 800185a:	f003 0307 	and.w	r3, r3, #7
}
 800185e:	4618      	mov	r0, r3
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr
 8001868:	e000ed00 	.word	0xe000ed00

0800186c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	4603      	mov	r3, r0
 8001874:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187a:	2b00      	cmp	r3, #0
 800187c:	db0b      	blt.n	8001896 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800187e:	79fb      	ldrb	r3, [r7, #7]
 8001880:	f003 021f 	and.w	r2, r3, #31
 8001884:	4907      	ldr	r1, [pc, #28]	; (80018a4 <__NVIC_EnableIRQ+0x38>)
 8001886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188a:	095b      	lsrs	r3, r3, #5
 800188c:	2001      	movs	r0, #1
 800188e:	fa00 f202 	lsl.w	r2, r0, r2
 8001892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001896:	bf00      	nop
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	e000e100 	.word	0xe000e100

080018a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	4603      	mov	r3, r0
 80018b0:	6039      	str	r1, [r7, #0]
 80018b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	db0a      	blt.n	80018d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	b2da      	uxtb	r2, r3
 80018c0:	490c      	ldr	r1, [pc, #48]	; (80018f4 <__NVIC_SetPriority+0x4c>)
 80018c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c6:	0112      	lsls	r2, r2, #4
 80018c8:	b2d2      	uxtb	r2, r2
 80018ca:	440b      	add	r3, r1
 80018cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018d0:	e00a      	b.n	80018e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	b2da      	uxtb	r2, r3
 80018d6:	4908      	ldr	r1, [pc, #32]	; (80018f8 <__NVIC_SetPriority+0x50>)
 80018d8:	79fb      	ldrb	r3, [r7, #7]
 80018da:	f003 030f 	and.w	r3, r3, #15
 80018de:	3b04      	subs	r3, #4
 80018e0:	0112      	lsls	r2, r2, #4
 80018e2:	b2d2      	uxtb	r2, r2
 80018e4:	440b      	add	r3, r1
 80018e6:	761a      	strb	r2, [r3, #24]
}
 80018e8:	bf00      	nop
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr
 80018f4:	e000e100 	.word	0xe000e100
 80018f8:	e000ed00 	.word	0xe000ed00

080018fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b089      	sub	sp, #36	; 0x24
 8001900:	af00      	add	r7, sp, #0
 8001902:	60f8      	str	r0, [r7, #12]
 8001904:	60b9      	str	r1, [r7, #8]
 8001906:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	f003 0307 	and.w	r3, r3, #7
 800190e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	f1c3 0307 	rsb	r3, r3, #7
 8001916:	2b04      	cmp	r3, #4
 8001918:	bf28      	it	cs
 800191a:	2304      	movcs	r3, #4
 800191c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	3304      	adds	r3, #4
 8001922:	2b06      	cmp	r3, #6
 8001924:	d902      	bls.n	800192c <NVIC_EncodePriority+0x30>
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	3b03      	subs	r3, #3
 800192a:	e000      	b.n	800192e <NVIC_EncodePriority+0x32>
 800192c:	2300      	movs	r3, #0
 800192e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001930:	f04f 32ff 	mov.w	r2, #4294967295
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	fa02 f303 	lsl.w	r3, r2, r3
 800193a:	43da      	mvns	r2, r3
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	401a      	ands	r2, r3
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001944:	f04f 31ff 	mov.w	r1, #4294967295
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	fa01 f303 	lsl.w	r3, r1, r3
 800194e:	43d9      	mvns	r1, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001954:	4313      	orrs	r3, r2
         );
}
 8001956:	4618      	mov	r0, r3
 8001958:	3724      	adds	r7, #36	; 0x24
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr

08001962 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b082      	sub	sp, #8
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f7ff ff4c 	bl	8001808 <__NVIC_SetPriorityGrouping>
}
 8001970:	bf00      	nop
 8001972:	3708      	adds	r7, #8
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}

08001978 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001978:	b580      	push	{r7, lr}
 800197a:	b086      	sub	sp, #24
 800197c:	af00      	add	r7, sp, #0
 800197e:	4603      	mov	r3, r0
 8001980:	60b9      	str	r1, [r7, #8]
 8001982:	607a      	str	r2, [r7, #4]
 8001984:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001986:	2300      	movs	r3, #0
 8001988:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800198a:	f7ff ff61 	bl	8001850 <__NVIC_GetPriorityGrouping>
 800198e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	68b9      	ldr	r1, [r7, #8]
 8001994:	6978      	ldr	r0, [r7, #20]
 8001996:	f7ff ffb1 	bl	80018fc <NVIC_EncodePriority>
 800199a:	4602      	mov	r2, r0
 800199c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019a0:	4611      	mov	r1, r2
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7ff ff80 	bl	80018a8 <__NVIC_SetPriority>
}
 80019a8:	bf00      	nop
 80019aa:	3718      	adds	r7, #24
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	4603      	mov	r3, r0
 80019b8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019be:	4618      	mov	r0, r3
 80019c0:	f7ff ff54 	bl	800186c <__NVIC_EnableIRQ>
}
 80019c4:	bf00      	nop
 80019c6:	3708      	adds	r7, #8
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}

080019cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b089      	sub	sp, #36	; 0x24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019d6:	2300      	movs	r3, #0
 80019d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019da:	2300      	movs	r3, #0
 80019dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019de:	2300      	movs	r3, #0
 80019e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019e2:	2300      	movs	r3, #0
 80019e4:	61fb      	str	r3, [r7, #28]
 80019e6:	e159      	b.n	8001c9c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019e8:	2201      	movs	r2, #1
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	697a      	ldr	r2, [r7, #20]
 80019f8:	4013      	ands	r3, r2
 80019fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019fc:	693a      	ldr	r2, [r7, #16]
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	f040 8148 	bne.w	8001c96 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f003 0303 	and.w	r3, r3, #3
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d005      	beq.n	8001a1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d130      	bne.n	8001a80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	2203      	movs	r2, #3
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	43db      	mvns	r3, r3
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	4013      	ands	r3, r2
 8001a34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	68da      	ldr	r2, [r3, #12]
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a54:	2201      	movs	r2, #1
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	4013      	ands	r3, r2
 8001a62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	091b      	lsrs	r3, r3, #4
 8001a6a:	f003 0201 	and.w	r2, r3, #1
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	fa02 f303 	lsl.w	r3, r2, r3
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f003 0303 	and.w	r3, r3, #3
 8001a88:	2b03      	cmp	r3, #3
 8001a8a:	d017      	beq.n	8001abc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	2203      	movs	r2, #3
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	689a      	ldr	r2, [r3, #8]
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f003 0303 	and.w	r3, r3, #3
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d123      	bne.n	8001b10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	08da      	lsrs	r2, r3, #3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	3208      	adds	r2, #8
 8001ad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	f003 0307 	and.w	r3, r3, #7
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	220f      	movs	r2, #15
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	691a      	ldr	r2, [r3, #16]
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	f003 0307 	and.w	r3, r3, #7
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	08da      	lsrs	r2, r3, #3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	3208      	adds	r2, #8
 8001b0a:	69b9      	ldr	r1, [r7, #24]
 8001b0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	2203      	movs	r2, #3
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	43db      	mvns	r3, r3
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	4013      	ands	r3, r2
 8001b26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f003 0203 	and.w	r2, r3, #3
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	f000 80a2 	beq.w	8001c96 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b52:	2300      	movs	r3, #0
 8001b54:	60fb      	str	r3, [r7, #12]
 8001b56:	4b57      	ldr	r3, [pc, #348]	; (8001cb4 <HAL_GPIO_Init+0x2e8>)
 8001b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5a:	4a56      	ldr	r2, [pc, #344]	; (8001cb4 <HAL_GPIO_Init+0x2e8>)
 8001b5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b60:	6453      	str	r3, [r2, #68]	; 0x44
 8001b62:	4b54      	ldr	r3, [pc, #336]	; (8001cb4 <HAL_GPIO_Init+0x2e8>)
 8001b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b6a:	60fb      	str	r3, [r7, #12]
 8001b6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b6e:	4a52      	ldr	r2, [pc, #328]	; (8001cb8 <HAL_GPIO_Init+0x2ec>)
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	089b      	lsrs	r3, r3, #2
 8001b74:	3302      	adds	r3, #2
 8001b76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	f003 0303 	and.w	r3, r3, #3
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	220f      	movs	r2, #15
 8001b86:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8a:	43db      	mvns	r3, r3
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a49      	ldr	r2, [pc, #292]	; (8001cbc <HAL_GPIO_Init+0x2f0>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d019      	beq.n	8001bce <HAL_GPIO_Init+0x202>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a48      	ldr	r2, [pc, #288]	; (8001cc0 <HAL_GPIO_Init+0x2f4>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d013      	beq.n	8001bca <HAL_GPIO_Init+0x1fe>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a47      	ldr	r2, [pc, #284]	; (8001cc4 <HAL_GPIO_Init+0x2f8>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d00d      	beq.n	8001bc6 <HAL_GPIO_Init+0x1fa>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4a46      	ldr	r2, [pc, #280]	; (8001cc8 <HAL_GPIO_Init+0x2fc>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d007      	beq.n	8001bc2 <HAL_GPIO_Init+0x1f6>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4a45      	ldr	r2, [pc, #276]	; (8001ccc <HAL_GPIO_Init+0x300>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d101      	bne.n	8001bbe <HAL_GPIO_Init+0x1f2>
 8001bba:	2304      	movs	r3, #4
 8001bbc:	e008      	b.n	8001bd0 <HAL_GPIO_Init+0x204>
 8001bbe:	2307      	movs	r3, #7
 8001bc0:	e006      	b.n	8001bd0 <HAL_GPIO_Init+0x204>
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e004      	b.n	8001bd0 <HAL_GPIO_Init+0x204>
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	e002      	b.n	8001bd0 <HAL_GPIO_Init+0x204>
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e000      	b.n	8001bd0 <HAL_GPIO_Init+0x204>
 8001bce:	2300      	movs	r3, #0
 8001bd0:	69fa      	ldr	r2, [r7, #28]
 8001bd2:	f002 0203 	and.w	r2, r2, #3
 8001bd6:	0092      	lsls	r2, r2, #2
 8001bd8:	4093      	lsls	r3, r2
 8001bda:	69ba      	ldr	r2, [r7, #24]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001be0:	4935      	ldr	r1, [pc, #212]	; (8001cb8 <HAL_GPIO_Init+0x2ec>)
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	089b      	lsrs	r3, r3, #2
 8001be6:	3302      	adds	r3, #2
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bee:	4b38      	ldr	r3, [pc, #224]	; (8001cd0 <HAL_GPIO_Init+0x304>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	43db      	mvns	r3, r3
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d003      	beq.n	8001c12 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c12:	4a2f      	ldr	r2, [pc, #188]	; (8001cd0 <HAL_GPIO_Init+0x304>)
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c18:	4b2d      	ldr	r3, [pc, #180]	; (8001cd0 <HAL_GPIO_Init+0x304>)
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	43db      	mvns	r3, r3
 8001c22:	69ba      	ldr	r2, [r7, #24]
 8001c24:	4013      	ands	r3, r2
 8001c26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d003      	beq.n	8001c3c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c3c:	4a24      	ldr	r2, [pc, #144]	; (8001cd0 <HAL_GPIO_Init+0x304>)
 8001c3e:	69bb      	ldr	r3, [r7, #24]
 8001c40:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c42:	4b23      	ldr	r3, [pc, #140]	; (8001cd0 <HAL_GPIO_Init+0x304>)
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	43db      	mvns	r3, r3
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d003      	beq.n	8001c66 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c66:	4a1a      	ldr	r2, [pc, #104]	; (8001cd0 <HAL_GPIO_Init+0x304>)
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c6c:	4b18      	ldr	r3, [pc, #96]	; (8001cd0 <HAL_GPIO_Init+0x304>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	43db      	mvns	r3, r3
 8001c76:	69ba      	ldr	r2, [r7, #24]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d003      	beq.n	8001c90 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c90:	4a0f      	ldr	r2, [pc, #60]	; (8001cd0 <HAL_GPIO_Init+0x304>)
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	3301      	adds	r3, #1
 8001c9a:	61fb      	str	r3, [r7, #28]
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	2b0f      	cmp	r3, #15
 8001ca0:	f67f aea2 	bls.w	80019e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ca4:	bf00      	nop
 8001ca6:	bf00      	nop
 8001ca8:	3724      	adds	r7, #36	; 0x24
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	40023800 	.word	0x40023800
 8001cb8:	40013800 	.word	0x40013800
 8001cbc:	40020000 	.word	0x40020000
 8001cc0:	40020400 	.word	0x40020400
 8001cc4:	40020800 	.word	0x40020800
 8001cc8:	40020c00 	.word	0x40020c00
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	40013c00 	.word	0x40013c00

08001cd4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b085      	sub	sp, #20
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	460b      	mov	r3, r1
 8001cde:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	691a      	ldr	r2, [r3, #16]
 8001ce4:	887b      	ldrh	r3, [r7, #2]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d002      	beq.n	8001cf2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001cec:	2301      	movs	r3, #1
 8001cee:	73fb      	strb	r3, [r7, #15]
 8001cf0:	e001      	b.n	8001cf6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3714      	adds	r7, #20
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	807b      	strh	r3, [r7, #2]
 8001d10:	4613      	mov	r3, r2
 8001d12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d14:	787b      	ldrb	r3, [r7, #1]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d003      	beq.n	8001d22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d1a:	887a      	ldrh	r2, [r7, #2]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d20:	e003      	b.n	8001d2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d22:	887b      	ldrh	r3, [r7, #2]
 8001d24:	041a      	lsls	r2, r3, #16
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	619a      	str	r2, [r3, #24]
}
 8001d2a:	bf00      	nop
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
	...

08001d38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d101      	bne.n	8001d4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e12b      	b.n	8001fa2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d106      	bne.n	8001d64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f7ff fbc2 	bl	80014e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2224      	movs	r2, #36	; 0x24
 8001d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f022 0201 	bic.w	r2, r2, #1
 8001d7a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d8a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d9a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d9c:	f001 f8da 	bl	8002f54 <HAL_RCC_GetPCLK1Freq>
 8001da0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	4a81      	ldr	r2, [pc, #516]	; (8001fac <HAL_I2C_Init+0x274>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d807      	bhi.n	8001dbc <HAL_I2C_Init+0x84>
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	4a80      	ldr	r2, [pc, #512]	; (8001fb0 <HAL_I2C_Init+0x278>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	bf94      	ite	ls
 8001db4:	2301      	movls	r3, #1
 8001db6:	2300      	movhi	r3, #0
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	e006      	b.n	8001dca <HAL_I2C_Init+0x92>
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	4a7d      	ldr	r2, [pc, #500]	; (8001fb4 <HAL_I2C_Init+0x27c>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	bf94      	ite	ls
 8001dc4:	2301      	movls	r3, #1
 8001dc6:	2300      	movhi	r3, #0
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e0e7      	b.n	8001fa2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	4a78      	ldr	r2, [pc, #480]	; (8001fb8 <HAL_I2C_Init+0x280>)
 8001dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dda:	0c9b      	lsrs	r3, r3, #18
 8001ddc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	68ba      	ldr	r2, [r7, #8]
 8001dee:	430a      	orrs	r2, r1
 8001df0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	6a1b      	ldr	r3, [r3, #32]
 8001df8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	4a6a      	ldr	r2, [pc, #424]	; (8001fac <HAL_I2C_Init+0x274>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d802      	bhi.n	8001e0c <HAL_I2C_Init+0xd4>
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	e009      	b.n	8001e20 <HAL_I2C_Init+0xe8>
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001e12:	fb02 f303 	mul.w	r3, r2, r3
 8001e16:	4a69      	ldr	r2, [pc, #420]	; (8001fbc <HAL_I2C_Init+0x284>)
 8001e18:	fba2 2303 	umull	r2, r3, r2, r3
 8001e1c:	099b      	lsrs	r3, r3, #6
 8001e1e:	3301      	adds	r3, #1
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	6812      	ldr	r2, [r2, #0]
 8001e24:	430b      	orrs	r3, r1
 8001e26:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	69db      	ldr	r3, [r3, #28]
 8001e2e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001e32:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	495c      	ldr	r1, [pc, #368]	; (8001fac <HAL_I2C_Init+0x274>)
 8001e3c:	428b      	cmp	r3, r1
 8001e3e:	d819      	bhi.n	8001e74 <HAL_I2C_Init+0x13c>
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	1e59      	subs	r1, r3, #1
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e4e:	1c59      	adds	r1, r3, #1
 8001e50:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001e54:	400b      	ands	r3, r1
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d00a      	beq.n	8001e70 <HAL_I2C_Init+0x138>
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	1e59      	subs	r1, r3, #1
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	005b      	lsls	r3, r3, #1
 8001e64:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e68:	3301      	adds	r3, #1
 8001e6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e6e:	e051      	b.n	8001f14 <HAL_I2C_Init+0x1dc>
 8001e70:	2304      	movs	r3, #4
 8001e72:	e04f      	b.n	8001f14 <HAL_I2C_Init+0x1dc>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d111      	bne.n	8001ea0 <HAL_I2C_Init+0x168>
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	1e58      	subs	r0, r3, #1
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6859      	ldr	r1, [r3, #4]
 8001e84:	460b      	mov	r3, r1
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	440b      	add	r3, r1
 8001e8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e8e:	3301      	adds	r3, #1
 8001e90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	bf0c      	ite	eq
 8001e98:	2301      	moveq	r3, #1
 8001e9a:	2300      	movne	r3, #0
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	e012      	b.n	8001ec6 <HAL_I2C_Init+0x18e>
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	1e58      	subs	r0, r3, #1
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6859      	ldr	r1, [r3, #4]
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	440b      	add	r3, r1
 8001eae:	0099      	lsls	r1, r3, #2
 8001eb0:	440b      	add	r3, r1
 8001eb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	bf0c      	ite	eq
 8001ec0:	2301      	moveq	r3, #1
 8001ec2:	2300      	movne	r3, #0
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <HAL_I2C_Init+0x196>
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e022      	b.n	8001f14 <HAL_I2C_Init+0x1dc>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d10e      	bne.n	8001ef4 <HAL_I2C_Init+0x1bc>
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	1e58      	subs	r0, r3, #1
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6859      	ldr	r1, [r3, #4]
 8001ede:	460b      	mov	r3, r1
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	440b      	add	r3, r1
 8001ee4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ee8:	3301      	adds	r3, #1
 8001eea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ef2:	e00f      	b.n	8001f14 <HAL_I2C_Init+0x1dc>
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	1e58      	subs	r0, r3, #1
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6859      	ldr	r1, [r3, #4]
 8001efc:	460b      	mov	r3, r1
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	440b      	add	r3, r1
 8001f02:	0099      	lsls	r1, r3, #2
 8001f04:	440b      	add	r3, r1
 8001f06:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f14:	6879      	ldr	r1, [r7, #4]
 8001f16:	6809      	ldr	r1, [r1, #0]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	69da      	ldr	r2, [r3, #28]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6a1b      	ldr	r3, [r3, #32]
 8001f2e:	431a      	orrs	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	430a      	orrs	r2, r1
 8001f36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001f42:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	6911      	ldr	r1, [r2, #16]
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	68d2      	ldr	r2, [r2, #12]
 8001f4e:	4311      	orrs	r1, r2
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	6812      	ldr	r2, [r2, #0]
 8001f54:	430b      	orrs	r3, r1
 8001f56:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	695a      	ldr	r2, [r3, #20]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	699b      	ldr	r3, [r3, #24]
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	430a      	orrs	r2, r1
 8001f72:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f042 0201 	orr.w	r2, r2, #1
 8001f82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2220      	movs	r2, #32
 8001f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	000186a0 	.word	0x000186a0
 8001fb0:	001e847f 	.word	0x001e847f
 8001fb4:	003d08ff 	.word	0x003d08ff
 8001fb8:	431bde83 	.word	0x431bde83
 8001fbc:	10624dd3 	.word	0x10624dd3

08001fc0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b088      	sub	sp, #32
 8001fc4:	af02      	add	r7, sp, #8
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	607a      	str	r2, [r7, #4]
 8001fca:	461a      	mov	r2, r3
 8001fcc:	460b      	mov	r3, r1
 8001fce:	817b      	strh	r3, [r7, #10]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001fd4:	f7ff fc0c 	bl	80017f0 <HAL_GetTick>
 8001fd8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	2b20      	cmp	r3, #32
 8001fe4:	f040 80e0 	bne.w	80021a8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	9300      	str	r3, [sp, #0]
 8001fec:	2319      	movs	r3, #25
 8001fee:	2201      	movs	r2, #1
 8001ff0:	4970      	ldr	r1, [pc, #448]	; (80021b4 <HAL_I2C_Master_Transmit+0x1f4>)
 8001ff2:	68f8      	ldr	r0, [r7, #12]
 8001ff4:	f000 f964 	bl	80022c0 <I2C_WaitOnFlagUntilTimeout>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001ffe:	2302      	movs	r3, #2
 8002000:	e0d3      	b.n	80021aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002008:	2b01      	cmp	r3, #1
 800200a:	d101      	bne.n	8002010 <HAL_I2C_Master_Transmit+0x50>
 800200c:	2302      	movs	r3, #2
 800200e:	e0cc      	b.n	80021aa <HAL_I2C_Master_Transmit+0x1ea>
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2201      	movs	r2, #1
 8002014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	2b01      	cmp	r3, #1
 8002024:	d007      	beq.n	8002036 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f042 0201 	orr.w	r2, r2, #1
 8002034:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002044:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2221      	movs	r2, #33	; 0x21
 800204a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2210      	movs	r2, #16
 8002052:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2200      	movs	r2, #0
 800205a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	893a      	ldrh	r2, [r7, #8]
 8002066:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800206c:	b29a      	uxth	r2, r3
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	4a50      	ldr	r2, [pc, #320]	; (80021b8 <HAL_I2C_Master_Transmit+0x1f8>)
 8002076:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002078:	8979      	ldrh	r1, [r7, #10]
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	6a3a      	ldr	r2, [r7, #32]
 800207e:	68f8      	ldr	r0, [r7, #12]
 8002080:	f000 f89c 	bl	80021bc <I2C_MasterRequestWrite>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e08d      	b.n	80021aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800208e:	2300      	movs	r3, #0
 8002090:	613b      	str	r3, [r7, #16]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	695b      	ldr	r3, [r3, #20]
 8002098:	613b      	str	r3, [r7, #16]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	699b      	ldr	r3, [r3, #24]
 80020a0:	613b      	str	r3, [r7, #16]
 80020a2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80020a4:	e066      	b.n	8002174 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020a6:	697a      	ldr	r2, [r7, #20]
 80020a8:	6a39      	ldr	r1, [r7, #32]
 80020aa:	68f8      	ldr	r0, [r7, #12]
 80020ac:	f000 fa22 	bl	80024f4 <I2C_WaitOnTXEFlagUntilTimeout>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d00d      	beq.n	80020d2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ba:	2b04      	cmp	r3, #4
 80020bc:	d107      	bne.n	80020ce <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020cc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e06b      	b.n	80021aa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d6:	781a      	ldrb	r2, [r3, #0]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e2:	1c5a      	adds	r2, r3, #1
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	3b01      	subs	r3, #1
 80020f0:	b29a      	uxth	r2, r3
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020fa:	3b01      	subs	r3, #1
 80020fc:	b29a      	uxth	r2, r3
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	695b      	ldr	r3, [r3, #20]
 8002108:	f003 0304 	and.w	r3, r3, #4
 800210c:	2b04      	cmp	r3, #4
 800210e:	d11b      	bne.n	8002148 <HAL_I2C_Master_Transmit+0x188>
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002114:	2b00      	cmp	r3, #0
 8002116:	d017      	beq.n	8002148 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211c:	781a      	ldrb	r2, [r3, #0]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002128:	1c5a      	adds	r2, r3, #1
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002132:	b29b      	uxth	r3, r3
 8002134:	3b01      	subs	r3, #1
 8002136:	b29a      	uxth	r2, r3
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002140:	3b01      	subs	r3, #1
 8002142:	b29a      	uxth	r2, r3
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002148:	697a      	ldr	r2, [r7, #20]
 800214a:	6a39      	ldr	r1, [r7, #32]
 800214c:	68f8      	ldr	r0, [r7, #12]
 800214e:	f000 fa19 	bl	8002584 <I2C_WaitOnBTFFlagUntilTimeout>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d00d      	beq.n	8002174 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215c:	2b04      	cmp	r3, #4
 800215e:	d107      	bne.n	8002170 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800216e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e01a      	b.n	80021aa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002178:	2b00      	cmp	r3, #0
 800217a:	d194      	bne.n	80020a6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800218a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2220      	movs	r2, #32
 8002190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2200      	movs	r2, #0
 8002198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2200      	movs	r2, #0
 80021a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80021a4:	2300      	movs	r3, #0
 80021a6:	e000      	b.n	80021aa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80021a8:	2302      	movs	r3, #2
  }
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3718      	adds	r7, #24
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	00100002 	.word	0x00100002
 80021b8:	ffff0000 	.word	0xffff0000

080021bc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b088      	sub	sp, #32
 80021c0:	af02      	add	r7, sp, #8
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	607a      	str	r2, [r7, #4]
 80021c6:	603b      	str	r3, [r7, #0]
 80021c8:	460b      	mov	r3, r1
 80021ca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	2b08      	cmp	r3, #8
 80021d6:	d006      	beq.n	80021e6 <I2C_MasterRequestWrite+0x2a>
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d003      	beq.n	80021e6 <I2C_MasterRequestWrite+0x2a>
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80021e4:	d108      	bne.n	80021f8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021f4:	601a      	str	r2, [r3, #0]
 80021f6:	e00b      	b.n	8002210 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fc:	2b12      	cmp	r3, #18
 80021fe:	d107      	bne.n	8002210 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800220e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	9300      	str	r3, [sp, #0]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800221c:	68f8      	ldr	r0, [r7, #12]
 800221e:	f000 f84f 	bl	80022c0 <I2C_WaitOnFlagUntilTimeout>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d00d      	beq.n	8002244 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002232:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002236:	d103      	bne.n	8002240 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800223e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	e035      	b.n	80022b0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	691b      	ldr	r3, [r3, #16]
 8002248:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800224c:	d108      	bne.n	8002260 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800224e:	897b      	ldrh	r3, [r7, #10]
 8002250:	b2db      	uxtb	r3, r3
 8002252:	461a      	mov	r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800225c:	611a      	str	r2, [r3, #16]
 800225e:	e01b      	b.n	8002298 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002260:	897b      	ldrh	r3, [r7, #10]
 8002262:	11db      	asrs	r3, r3, #7
 8002264:	b2db      	uxtb	r3, r3
 8002266:	f003 0306 	and.w	r3, r3, #6
 800226a:	b2db      	uxtb	r3, r3
 800226c:	f063 030f 	orn	r3, r3, #15
 8002270:	b2da      	uxtb	r2, r3
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	490e      	ldr	r1, [pc, #56]	; (80022b8 <I2C_MasterRequestWrite+0xfc>)
 800227e:	68f8      	ldr	r0, [r7, #12]
 8002280:	f000 f898 	bl	80023b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d001      	beq.n	800228e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e010      	b.n	80022b0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800228e:	897b      	ldrh	r3, [r7, #10]
 8002290:	b2da      	uxtb	r2, r3
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	4907      	ldr	r1, [pc, #28]	; (80022bc <I2C_MasterRequestWrite+0x100>)
 800229e:	68f8      	ldr	r0, [r7, #12]
 80022a0:	f000 f888 	bl	80023b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e000      	b.n	80022b0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80022ae:	2300      	movs	r3, #0
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3718      	adds	r7, #24
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	00010008 	.word	0x00010008
 80022bc:	00010002 	.word	0x00010002

080022c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	603b      	str	r3, [r7, #0]
 80022cc:	4613      	mov	r3, r2
 80022ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022d0:	e048      	b.n	8002364 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022d8:	d044      	beq.n	8002364 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022da:	f7ff fa89 	bl	80017f0 <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	683a      	ldr	r2, [r7, #0]
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d302      	bcc.n	80022f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d139      	bne.n	8002364 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	0c1b      	lsrs	r3, r3, #16
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d10d      	bne.n	8002316 <I2C_WaitOnFlagUntilTimeout+0x56>
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	695b      	ldr	r3, [r3, #20]
 8002300:	43da      	mvns	r2, r3
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	4013      	ands	r3, r2
 8002306:	b29b      	uxth	r3, r3
 8002308:	2b00      	cmp	r3, #0
 800230a:	bf0c      	ite	eq
 800230c:	2301      	moveq	r3, #1
 800230e:	2300      	movne	r3, #0
 8002310:	b2db      	uxtb	r3, r3
 8002312:	461a      	mov	r2, r3
 8002314:	e00c      	b.n	8002330 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	699b      	ldr	r3, [r3, #24]
 800231c:	43da      	mvns	r2, r3
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	4013      	ands	r3, r2
 8002322:	b29b      	uxth	r3, r3
 8002324:	2b00      	cmp	r3, #0
 8002326:	bf0c      	ite	eq
 8002328:	2301      	moveq	r3, #1
 800232a:	2300      	movne	r3, #0
 800232c:	b2db      	uxtb	r3, r3
 800232e:	461a      	mov	r2, r3
 8002330:	79fb      	ldrb	r3, [r7, #7]
 8002332:	429a      	cmp	r2, r3
 8002334:	d116      	bne.n	8002364 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2200      	movs	r2, #0
 800233a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2220      	movs	r2, #32
 8002340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2200      	movs	r2, #0
 8002348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002350:	f043 0220 	orr.w	r2, r3, #32
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2200      	movs	r2, #0
 800235c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e023      	b.n	80023ac <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	0c1b      	lsrs	r3, r3, #16
 8002368:	b2db      	uxtb	r3, r3
 800236a:	2b01      	cmp	r3, #1
 800236c:	d10d      	bne.n	800238a <I2C_WaitOnFlagUntilTimeout+0xca>
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	695b      	ldr	r3, [r3, #20]
 8002374:	43da      	mvns	r2, r3
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	4013      	ands	r3, r2
 800237a:	b29b      	uxth	r3, r3
 800237c:	2b00      	cmp	r3, #0
 800237e:	bf0c      	ite	eq
 8002380:	2301      	moveq	r3, #1
 8002382:	2300      	movne	r3, #0
 8002384:	b2db      	uxtb	r3, r3
 8002386:	461a      	mov	r2, r3
 8002388:	e00c      	b.n	80023a4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	699b      	ldr	r3, [r3, #24]
 8002390:	43da      	mvns	r2, r3
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	4013      	ands	r3, r2
 8002396:	b29b      	uxth	r3, r3
 8002398:	2b00      	cmp	r3, #0
 800239a:	bf0c      	ite	eq
 800239c:	2301      	moveq	r3, #1
 800239e:	2300      	movne	r3, #0
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	461a      	mov	r2, r3
 80023a4:	79fb      	ldrb	r3, [r7, #7]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d093      	beq.n	80022d2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80023aa:	2300      	movs	r3, #0
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3710      	adds	r7, #16
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	60b9      	str	r1, [r7, #8]
 80023be:	607a      	str	r2, [r7, #4]
 80023c0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80023c2:	e071      	b.n	80024a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	695b      	ldr	r3, [r3, #20]
 80023ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023d2:	d123      	bne.n	800241c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023e2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80023ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2200      	movs	r2, #0
 80023f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2220      	movs	r2, #32
 80023f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2200      	movs	r2, #0
 8002400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002408:	f043 0204 	orr.w	r2, r3, #4
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2200      	movs	r2, #0
 8002414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e067      	b.n	80024ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002422:	d041      	beq.n	80024a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002424:	f7ff f9e4 	bl	80017f0 <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	429a      	cmp	r2, r3
 8002432:	d302      	bcc.n	800243a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d136      	bne.n	80024a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	0c1b      	lsrs	r3, r3, #16
 800243e:	b2db      	uxtb	r3, r3
 8002440:	2b01      	cmp	r3, #1
 8002442:	d10c      	bne.n	800245e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	695b      	ldr	r3, [r3, #20]
 800244a:	43da      	mvns	r2, r3
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	4013      	ands	r3, r2
 8002450:	b29b      	uxth	r3, r3
 8002452:	2b00      	cmp	r3, #0
 8002454:	bf14      	ite	ne
 8002456:	2301      	movne	r3, #1
 8002458:	2300      	moveq	r3, #0
 800245a:	b2db      	uxtb	r3, r3
 800245c:	e00b      	b.n	8002476 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	699b      	ldr	r3, [r3, #24]
 8002464:	43da      	mvns	r2, r3
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	4013      	ands	r3, r2
 800246a:	b29b      	uxth	r3, r3
 800246c:	2b00      	cmp	r3, #0
 800246e:	bf14      	ite	ne
 8002470:	2301      	movne	r3, #1
 8002472:	2300      	moveq	r3, #0
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b00      	cmp	r3, #0
 8002478:	d016      	beq.n	80024a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2200      	movs	r2, #0
 800247e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2220      	movs	r2, #32
 8002484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2200      	movs	r2, #0
 800248c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002494:	f043 0220 	orr.w	r2, r3, #32
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2200      	movs	r2, #0
 80024a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e021      	b.n	80024ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	0c1b      	lsrs	r3, r3, #16
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d10c      	bne.n	80024cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	695b      	ldr	r3, [r3, #20]
 80024b8:	43da      	mvns	r2, r3
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	4013      	ands	r3, r2
 80024be:	b29b      	uxth	r3, r3
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	bf14      	ite	ne
 80024c4:	2301      	movne	r3, #1
 80024c6:	2300      	moveq	r3, #0
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	e00b      	b.n	80024e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	699b      	ldr	r3, [r3, #24]
 80024d2:	43da      	mvns	r2, r3
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	4013      	ands	r3, r2
 80024d8:	b29b      	uxth	r3, r3
 80024da:	2b00      	cmp	r3, #0
 80024dc:	bf14      	ite	ne
 80024de:	2301      	movne	r3, #1
 80024e0:	2300      	moveq	r3, #0
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	f47f af6d 	bne.w	80023c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80024ea:	2300      	movs	r3, #0
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3710      	adds	r7, #16
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002500:	e034      	b.n	800256c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002502:	68f8      	ldr	r0, [r7, #12]
 8002504:	f000 f886 	bl	8002614 <I2C_IsAcknowledgeFailed>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e034      	b.n	800257c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002518:	d028      	beq.n	800256c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800251a:	f7ff f969 	bl	80017f0 <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	68ba      	ldr	r2, [r7, #8]
 8002526:	429a      	cmp	r2, r3
 8002528:	d302      	bcc.n	8002530 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d11d      	bne.n	800256c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	695b      	ldr	r3, [r3, #20]
 8002536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800253a:	2b80      	cmp	r3, #128	; 0x80
 800253c:	d016      	beq.n	800256c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2200      	movs	r2, #0
 8002542:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2220      	movs	r2, #32
 8002548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2200      	movs	r2, #0
 8002550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002558:	f043 0220 	orr.w	r2, r3, #32
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2200      	movs	r2, #0
 8002564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e007      	b.n	800257c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	695b      	ldr	r3, [r3, #20]
 8002572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002576:	2b80      	cmp	r3, #128	; 0x80
 8002578:	d1c3      	bne.n	8002502 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800257a:	2300      	movs	r3, #0
}
 800257c:	4618      	mov	r0, r3
 800257e:	3710      	adds	r7, #16
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}

08002584 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	60f8      	str	r0, [r7, #12]
 800258c:	60b9      	str	r1, [r7, #8]
 800258e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002590:	e034      	b.n	80025fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002592:	68f8      	ldr	r0, [r7, #12]
 8002594:	f000 f83e 	bl	8002614 <I2C_IsAcknowledgeFailed>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e034      	b.n	800260c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025a8:	d028      	beq.n	80025fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025aa:	f7ff f921 	bl	80017f0 <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	68ba      	ldr	r2, [r7, #8]
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d302      	bcc.n	80025c0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d11d      	bne.n	80025fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	695b      	ldr	r3, [r3, #20]
 80025c6:	f003 0304 	and.w	r3, r3, #4
 80025ca:	2b04      	cmp	r3, #4
 80025cc:	d016      	beq.n	80025fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2200      	movs	r2, #0
 80025d2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2220      	movs	r2, #32
 80025d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2200      	movs	r2, #0
 80025e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e8:	f043 0220 	orr.w	r2, r3, #32
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2200      	movs	r2, #0
 80025f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e007      	b.n	800260c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	695b      	ldr	r3, [r3, #20]
 8002602:	f003 0304 	and.w	r3, r3, #4
 8002606:	2b04      	cmp	r3, #4
 8002608:	d1c3      	bne.n	8002592 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800260a:	2300      	movs	r3, #0
}
 800260c:	4618      	mov	r0, r3
 800260e:	3710      	adds	r7, #16
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	695b      	ldr	r3, [r3, #20]
 8002622:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002626:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800262a:	d11b      	bne.n	8002664 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002634:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2220      	movs	r2, #32
 8002640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002650:	f043 0204 	orr.w	r2, r3, #4
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e000      	b.n	8002666 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	370c      	adds	r7, #12
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
	...

08002674 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b086      	sub	sp, #24
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d101      	bne.n	8002686 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e267      	b.n	8002b56 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0301 	and.w	r3, r3, #1
 800268e:	2b00      	cmp	r3, #0
 8002690:	d075      	beq.n	800277e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002692:	4b88      	ldr	r3, [pc, #544]	; (80028b4 <HAL_RCC_OscConfig+0x240>)
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	f003 030c 	and.w	r3, r3, #12
 800269a:	2b04      	cmp	r3, #4
 800269c:	d00c      	beq.n	80026b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800269e:	4b85      	ldr	r3, [pc, #532]	; (80028b4 <HAL_RCC_OscConfig+0x240>)
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026a6:	2b08      	cmp	r3, #8
 80026a8:	d112      	bne.n	80026d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026aa:	4b82      	ldr	r3, [pc, #520]	; (80028b4 <HAL_RCC_OscConfig+0x240>)
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026b6:	d10b      	bne.n	80026d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026b8:	4b7e      	ldr	r3, [pc, #504]	; (80028b4 <HAL_RCC_OscConfig+0x240>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d05b      	beq.n	800277c <HAL_RCC_OscConfig+0x108>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d157      	bne.n	800277c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e242      	b.n	8002b56 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026d8:	d106      	bne.n	80026e8 <HAL_RCC_OscConfig+0x74>
 80026da:	4b76      	ldr	r3, [pc, #472]	; (80028b4 <HAL_RCC_OscConfig+0x240>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a75      	ldr	r2, [pc, #468]	; (80028b4 <HAL_RCC_OscConfig+0x240>)
 80026e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026e4:	6013      	str	r3, [r2, #0]
 80026e6:	e01d      	b.n	8002724 <HAL_RCC_OscConfig+0xb0>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026f0:	d10c      	bne.n	800270c <HAL_RCC_OscConfig+0x98>
 80026f2:	4b70      	ldr	r3, [pc, #448]	; (80028b4 <HAL_RCC_OscConfig+0x240>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a6f      	ldr	r2, [pc, #444]	; (80028b4 <HAL_RCC_OscConfig+0x240>)
 80026f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026fc:	6013      	str	r3, [r2, #0]
 80026fe:	4b6d      	ldr	r3, [pc, #436]	; (80028b4 <HAL_RCC_OscConfig+0x240>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a6c      	ldr	r2, [pc, #432]	; (80028b4 <HAL_RCC_OscConfig+0x240>)
 8002704:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002708:	6013      	str	r3, [r2, #0]
 800270a:	e00b      	b.n	8002724 <HAL_RCC_OscConfig+0xb0>
 800270c:	4b69      	ldr	r3, [pc, #420]	; (80028b4 <HAL_RCC_OscConfig+0x240>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a68      	ldr	r2, [pc, #416]	; (80028b4 <HAL_RCC_OscConfig+0x240>)
 8002712:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002716:	6013      	str	r3, [r2, #0]
 8002718:	4b66      	ldr	r3, [pc, #408]	; (80028b4 <HAL_RCC_OscConfig+0x240>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a65      	ldr	r2, [pc, #404]	; (80028b4 <HAL_RCC_OscConfig+0x240>)
 800271e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002722:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d013      	beq.n	8002754 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800272c:	f7ff f860 	bl	80017f0 <HAL_GetTick>
 8002730:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002732:	e008      	b.n	8002746 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002734:	f7ff f85c 	bl	80017f0 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	2b64      	cmp	r3, #100	; 0x64
 8002740:	d901      	bls.n	8002746 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e207      	b.n	8002b56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002746:	4b5b      	ldr	r3, [pc, #364]	; (80028b4 <HAL_RCC_OscConfig+0x240>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d0f0      	beq.n	8002734 <HAL_RCC_OscConfig+0xc0>
 8002752:	e014      	b.n	800277e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002754:	f7ff f84c 	bl	80017f0 <HAL_GetTick>
 8002758:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800275a:	e008      	b.n	800276e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800275c:	f7ff f848 	bl	80017f0 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b64      	cmp	r3, #100	; 0x64
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e1f3      	b.n	8002b56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800276e:	4b51      	ldr	r3, [pc, #324]	; (80028b4 <HAL_RCC_OscConfig+0x240>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d1f0      	bne.n	800275c <HAL_RCC_OscConfig+0xe8>
 800277a:	e000      	b.n	800277e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800277c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0302 	and.w	r3, r3, #2
 8002786:	2b00      	cmp	r3, #0
 8002788:	d063      	beq.n	8002852 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800278a:	4b4a      	ldr	r3, [pc, #296]	; (80028b4 <HAL_RCC_OscConfig+0x240>)
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f003 030c 	and.w	r3, r3, #12
 8002792:	2b00      	cmp	r3, #0
 8002794:	d00b      	beq.n	80027ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002796:	4b47      	ldr	r3, [pc, #284]	; (80028b4 <HAL_RCC_OscConfig+0x240>)
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800279e:	2b08      	cmp	r3, #8
 80027a0:	d11c      	bne.n	80027dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027a2:	4b44      	ldr	r3, [pc, #272]	; (80028b4 <HAL_RCC_OscConfig+0x240>)
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d116      	bne.n	80027dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027ae:	4b41      	ldr	r3, [pc, #260]	; (80028b4 <HAL_RCC_OscConfig+0x240>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0302 	and.w	r3, r3, #2
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d005      	beq.n	80027c6 <HAL_RCC_OscConfig+0x152>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d001      	beq.n	80027c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e1c7      	b.n	8002b56 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027c6:	4b3b      	ldr	r3, [pc, #236]	; (80028b4 <HAL_RCC_OscConfig+0x240>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	00db      	lsls	r3, r3, #3
 80027d4:	4937      	ldr	r1, [pc, #220]	; (80028b4 <HAL_RCC_OscConfig+0x240>)
 80027d6:	4313      	orrs	r3, r2
 80027d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027da:	e03a      	b.n	8002852 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d020      	beq.n	8002826 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027e4:	4b34      	ldr	r3, [pc, #208]	; (80028b8 <HAL_RCC_OscConfig+0x244>)
 80027e6:	2201      	movs	r2, #1
 80027e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ea:	f7ff f801 	bl	80017f0 <HAL_GetTick>
 80027ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027f0:	e008      	b.n	8002804 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027f2:	f7fe fffd 	bl	80017f0 <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d901      	bls.n	8002804 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e1a8      	b.n	8002b56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002804:	4b2b      	ldr	r3, [pc, #172]	; (80028b4 <HAL_RCC_OscConfig+0x240>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0302 	and.w	r3, r3, #2
 800280c:	2b00      	cmp	r3, #0
 800280e:	d0f0      	beq.n	80027f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002810:	4b28      	ldr	r3, [pc, #160]	; (80028b4 <HAL_RCC_OscConfig+0x240>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	691b      	ldr	r3, [r3, #16]
 800281c:	00db      	lsls	r3, r3, #3
 800281e:	4925      	ldr	r1, [pc, #148]	; (80028b4 <HAL_RCC_OscConfig+0x240>)
 8002820:	4313      	orrs	r3, r2
 8002822:	600b      	str	r3, [r1, #0]
 8002824:	e015      	b.n	8002852 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002826:	4b24      	ldr	r3, [pc, #144]	; (80028b8 <HAL_RCC_OscConfig+0x244>)
 8002828:	2200      	movs	r2, #0
 800282a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800282c:	f7fe ffe0 	bl	80017f0 <HAL_GetTick>
 8002830:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002832:	e008      	b.n	8002846 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002834:	f7fe ffdc 	bl	80017f0 <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b02      	cmp	r3, #2
 8002840:	d901      	bls.n	8002846 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e187      	b.n	8002b56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002846:	4b1b      	ldr	r3, [pc, #108]	; (80028b4 <HAL_RCC_OscConfig+0x240>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d1f0      	bne.n	8002834 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0308 	and.w	r3, r3, #8
 800285a:	2b00      	cmp	r3, #0
 800285c:	d036      	beq.n	80028cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	695b      	ldr	r3, [r3, #20]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d016      	beq.n	8002894 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002866:	4b15      	ldr	r3, [pc, #84]	; (80028bc <HAL_RCC_OscConfig+0x248>)
 8002868:	2201      	movs	r2, #1
 800286a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800286c:	f7fe ffc0 	bl	80017f0 <HAL_GetTick>
 8002870:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002872:	e008      	b.n	8002886 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002874:	f7fe ffbc 	bl	80017f0 <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b02      	cmp	r3, #2
 8002880:	d901      	bls.n	8002886 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e167      	b.n	8002b56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002886:	4b0b      	ldr	r3, [pc, #44]	; (80028b4 <HAL_RCC_OscConfig+0x240>)
 8002888:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800288a:	f003 0302 	and.w	r3, r3, #2
 800288e:	2b00      	cmp	r3, #0
 8002890:	d0f0      	beq.n	8002874 <HAL_RCC_OscConfig+0x200>
 8002892:	e01b      	b.n	80028cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002894:	4b09      	ldr	r3, [pc, #36]	; (80028bc <HAL_RCC_OscConfig+0x248>)
 8002896:	2200      	movs	r2, #0
 8002898:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800289a:	f7fe ffa9 	bl	80017f0 <HAL_GetTick>
 800289e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028a0:	e00e      	b.n	80028c0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028a2:	f7fe ffa5 	bl	80017f0 <HAL_GetTick>
 80028a6:	4602      	mov	r2, r0
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d907      	bls.n	80028c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	e150      	b.n	8002b56 <HAL_RCC_OscConfig+0x4e2>
 80028b4:	40023800 	.word	0x40023800
 80028b8:	42470000 	.word	0x42470000
 80028bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028c0:	4b88      	ldr	r3, [pc, #544]	; (8002ae4 <HAL_RCC_OscConfig+0x470>)
 80028c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028c4:	f003 0302 	and.w	r3, r3, #2
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d1ea      	bne.n	80028a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0304 	and.w	r3, r3, #4
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	f000 8097 	beq.w	8002a08 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028da:	2300      	movs	r3, #0
 80028dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028de:	4b81      	ldr	r3, [pc, #516]	; (8002ae4 <HAL_RCC_OscConfig+0x470>)
 80028e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d10f      	bne.n	800290a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028ea:	2300      	movs	r3, #0
 80028ec:	60bb      	str	r3, [r7, #8]
 80028ee:	4b7d      	ldr	r3, [pc, #500]	; (8002ae4 <HAL_RCC_OscConfig+0x470>)
 80028f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f2:	4a7c      	ldr	r2, [pc, #496]	; (8002ae4 <HAL_RCC_OscConfig+0x470>)
 80028f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028f8:	6413      	str	r3, [r2, #64]	; 0x40
 80028fa:	4b7a      	ldr	r3, [pc, #488]	; (8002ae4 <HAL_RCC_OscConfig+0x470>)
 80028fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002902:	60bb      	str	r3, [r7, #8]
 8002904:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002906:	2301      	movs	r3, #1
 8002908:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800290a:	4b77      	ldr	r3, [pc, #476]	; (8002ae8 <HAL_RCC_OscConfig+0x474>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002912:	2b00      	cmp	r3, #0
 8002914:	d118      	bne.n	8002948 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002916:	4b74      	ldr	r3, [pc, #464]	; (8002ae8 <HAL_RCC_OscConfig+0x474>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a73      	ldr	r2, [pc, #460]	; (8002ae8 <HAL_RCC_OscConfig+0x474>)
 800291c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002920:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002922:	f7fe ff65 	bl	80017f0 <HAL_GetTick>
 8002926:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002928:	e008      	b.n	800293c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800292a:	f7fe ff61 	bl	80017f0 <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	2b02      	cmp	r3, #2
 8002936:	d901      	bls.n	800293c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	e10c      	b.n	8002b56 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800293c:	4b6a      	ldr	r3, [pc, #424]	; (8002ae8 <HAL_RCC_OscConfig+0x474>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002944:	2b00      	cmp	r3, #0
 8002946:	d0f0      	beq.n	800292a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	2b01      	cmp	r3, #1
 800294e:	d106      	bne.n	800295e <HAL_RCC_OscConfig+0x2ea>
 8002950:	4b64      	ldr	r3, [pc, #400]	; (8002ae4 <HAL_RCC_OscConfig+0x470>)
 8002952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002954:	4a63      	ldr	r2, [pc, #396]	; (8002ae4 <HAL_RCC_OscConfig+0x470>)
 8002956:	f043 0301 	orr.w	r3, r3, #1
 800295a:	6713      	str	r3, [r2, #112]	; 0x70
 800295c:	e01c      	b.n	8002998 <HAL_RCC_OscConfig+0x324>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	2b05      	cmp	r3, #5
 8002964:	d10c      	bne.n	8002980 <HAL_RCC_OscConfig+0x30c>
 8002966:	4b5f      	ldr	r3, [pc, #380]	; (8002ae4 <HAL_RCC_OscConfig+0x470>)
 8002968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800296a:	4a5e      	ldr	r2, [pc, #376]	; (8002ae4 <HAL_RCC_OscConfig+0x470>)
 800296c:	f043 0304 	orr.w	r3, r3, #4
 8002970:	6713      	str	r3, [r2, #112]	; 0x70
 8002972:	4b5c      	ldr	r3, [pc, #368]	; (8002ae4 <HAL_RCC_OscConfig+0x470>)
 8002974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002976:	4a5b      	ldr	r2, [pc, #364]	; (8002ae4 <HAL_RCC_OscConfig+0x470>)
 8002978:	f043 0301 	orr.w	r3, r3, #1
 800297c:	6713      	str	r3, [r2, #112]	; 0x70
 800297e:	e00b      	b.n	8002998 <HAL_RCC_OscConfig+0x324>
 8002980:	4b58      	ldr	r3, [pc, #352]	; (8002ae4 <HAL_RCC_OscConfig+0x470>)
 8002982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002984:	4a57      	ldr	r2, [pc, #348]	; (8002ae4 <HAL_RCC_OscConfig+0x470>)
 8002986:	f023 0301 	bic.w	r3, r3, #1
 800298a:	6713      	str	r3, [r2, #112]	; 0x70
 800298c:	4b55      	ldr	r3, [pc, #340]	; (8002ae4 <HAL_RCC_OscConfig+0x470>)
 800298e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002990:	4a54      	ldr	r2, [pc, #336]	; (8002ae4 <HAL_RCC_OscConfig+0x470>)
 8002992:	f023 0304 	bic.w	r3, r3, #4
 8002996:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d015      	beq.n	80029cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029a0:	f7fe ff26 	bl	80017f0 <HAL_GetTick>
 80029a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029a6:	e00a      	b.n	80029be <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029a8:	f7fe ff22 	bl	80017f0 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d901      	bls.n	80029be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e0cb      	b.n	8002b56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029be:	4b49      	ldr	r3, [pc, #292]	; (8002ae4 <HAL_RCC_OscConfig+0x470>)
 80029c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d0ee      	beq.n	80029a8 <HAL_RCC_OscConfig+0x334>
 80029ca:	e014      	b.n	80029f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029cc:	f7fe ff10 	bl	80017f0 <HAL_GetTick>
 80029d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029d2:	e00a      	b.n	80029ea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029d4:	f7fe ff0c 	bl	80017f0 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	f241 3288 	movw	r2, #5000	; 0x1388
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e0b5      	b.n	8002b56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029ea:	4b3e      	ldr	r3, [pc, #248]	; (8002ae4 <HAL_RCC_OscConfig+0x470>)
 80029ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ee:	f003 0302 	and.w	r3, r3, #2
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d1ee      	bne.n	80029d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029f6:	7dfb      	ldrb	r3, [r7, #23]
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d105      	bne.n	8002a08 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029fc:	4b39      	ldr	r3, [pc, #228]	; (8002ae4 <HAL_RCC_OscConfig+0x470>)
 80029fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a00:	4a38      	ldr	r2, [pc, #224]	; (8002ae4 <HAL_RCC_OscConfig+0x470>)
 8002a02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a06:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	699b      	ldr	r3, [r3, #24]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	f000 80a1 	beq.w	8002b54 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a12:	4b34      	ldr	r3, [pc, #208]	; (8002ae4 <HAL_RCC_OscConfig+0x470>)
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f003 030c 	and.w	r3, r3, #12
 8002a1a:	2b08      	cmp	r3, #8
 8002a1c:	d05c      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	699b      	ldr	r3, [r3, #24]
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d141      	bne.n	8002aaa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a26:	4b31      	ldr	r3, [pc, #196]	; (8002aec <HAL_RCC_OscConfig+0x478>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a2c:	f7fe fee0 	bl	80017f0 <HAL_GetTick>
 8002a30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a32:	e008      	b.n	8002a46 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a34:	f7fe fedc 	bl	80017f0 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e087      	b.n	8002b56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a46:	4b27      	ldr	r3, [pc, #156]	; (8002ae4 <HAL_RCC_OscConfig+0x470>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d1f0      	bne.n	8002a34 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	69da      	ldr	r2, [r3, #28]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a1b      	ldr	r3, [r3, #32]
 8002a5a:	431a      	orrs	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a60:	019b      	lsls	r3, r3, #6
 8002a62:	431a      	orrs	r2, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a68:	085b      	lsrs	r3, r3, #1
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	041b      	lsls	r3, r3, #16
 8002a6e:	431a      	orrs	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a74:	061b      	lsls	r3, r3, #24
 8002a76:	491b      	ldr	r1, [pc, #108]	; (8002ae4 <HAL_RCC_OscConfig+0x470>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a7c:	4b1b      	ldr	r3, [pc, #108]	; (8002aec <HAL_RCC_OscConfig+0x478>)
 8002a7e:	2201      	movs	r2, #1
 8002a80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a82:	f7fe feb5 	bl	80017f0 <HAL_GetTick>
 8002a86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a88:	e008      	b.n	8002a9c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a8a:	f7fe feb1 	bl	80017f0 <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d901      	bls.n	8002a9c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e05c      	b.n	8002b56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a9c:	4b11      	ldr	r3, [pc, #68]	; (8002ae4 <HAL_RCC_OscConfig+0x470>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d0f0      	beq.n	8002a8a <HAL_RCC_OscConfig+0x416>
 8002aa8:	e054      	b.n	8002b54 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aaa:	4b10      	ldr	r3, [pc, #64]	; (8002aec <HAL_RCC_OscConfig+0x478>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab0:	f7fe fe9e 	bl	80017f0 <HAL_GetTick>
 8002ab4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ab6:	e008      	b.n	8002aca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ab8:	f7fe fe9a 	bl	80017f0 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e045      	b.n	8002b56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aca:	4b06      	ldr	r3, [pc, #24]	; (8002ae4 <HAL_RCC_OscConfig+0x470>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d1f0      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x444>
 8002ad6:	e03d      	b.n	8002b54 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d107      	bne.n	8002af0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e038      	b.n	8002b56 <HAL_RCC_OscConfig+0x4e2>
 8002ae4:	40023800 	.word	0x40023800
 8002ae8:	40007000 	.word	0x40007000
 8002aec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002af0:	4b1b      	ldr	r3, [pc, #108]	; (8002b60 <HAL_RCC_OscConfig+0x4ec>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	699b      	ldr	r3, [r3, #24]
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d028      	beq.n	8002b50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d121      	bne.n	8002b50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d11a      	bne.n	8002b50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b20:	4013      	ands	r3, r2
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b26:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d111      	bne.n	8002b50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b36:	085b      	lsrs	r3, r3, #1
 8002b38:	3b01      	subs	r3, #1
 8002b3a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d107      	bne.n	8002b50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b4a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d001      	beq.n	8002b54 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e000      	b.n	8002b56 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3718      	adds	r7, #24
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	40023800 	.word	0x40023800

08002b64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d101      	bne.n	8002b78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e0cc      	b.n	8002d12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b78:	4b68      	ldr	r3, [pc, #416]	; (8002d1c <HAL_RCC_ClockConfig+0x1b8>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0307 	and.w	r3, r3, #7
 8002b80:	683a      	ldr	r2, [r7, #0]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d90c      	bls.n	8002ba0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b86:	4b65      	ldr	r3, [pc, #404]	; (8002d1c <HAL_RCC_ClockConfig+0x1b8>)
 8002b88:	683a      	ldr	r2, [r7, #0]
 8002b8a:	b2d2      	uxtb	r2, r2
 8002b8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b8e:	4b63      	ldr	r3, [pc, #396]	; (8002d1c <HAL_RCC_ClockConfig+0x1b8>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0307 	and.w	r3, r3, #7
 8002b96:	683a      	ldr	r2, [r7, #0]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d001      	beq.n	8002ba0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e0b8      	b.n	8002d12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0302 	and.w	r3, r3, #2
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d020      	beq.n	8002bee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0304 	and.w	r3, r3, #4
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d005      	beq.n	8002bc4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bb8:	4b59      	ldr	r3, [pc, #356]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	4a58      	ldr	r2, [pc, #352]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002bbe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002bc2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0308 	and.w	r3, r3, #8
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d005      	beq.n	8002bdc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bd0:	4b53      	ldr	r3, [pc, #332]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	4a52      	ldr	r2, [pc, #328]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002bda:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bdc:	4b50      	ldr	r3, [pc, #320]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	494d      	ldr	r1, [pc, #308]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d044      	beq.n	8002c84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d107      	bne.n	8002c12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c02:	4b47      	ldr	r3, [pc, #284]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d119      	bne.n	8002c42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e07f      	b.n	8002d12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d003      	beq.n	8002c22 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c1e:	2b03      	cmp	r3, #3
 8002c20:	d107      	bne.n	8002c32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c22:	4b3f      	ldr	r3, [pc, #252]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d109      	bne.n	8002c42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e06f      	b.n	8002d12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c32:	4b3b      	ldr	r3, [pc, #236]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d101      	bne.n	8002c42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e067      	b.n	8002d12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c42:	4b37      	ldr	r3, [pc, #220]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f023 0203 	bic.w	r2, r3, #3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	4934      	ldr	r1, [pc, #208]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c54:	f7fe fdcc 	bl	80017f0 <HAL_GetTick>
 8002c58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c5a:	e00a      	b.n	8002c72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c5c:	f7fe fdc8 	bl	80017f0 <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e04f      	b.n	8002d12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c72:	4b2b      	ldr	r3, [pc, #172]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f003 020c 	and.w	r2, r3, #12
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d1eb      	bne.n	8002c5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c84:	4b25      	ldr	r3, [pc, #148]	; (8002d1c <HAL_RCC_ClockConfig+0x1b8>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0307 	and.w	r3, r3, #7
 8002c8c:	683a      	ldr	r2, [r7, #0]
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d20c      	bcs.n	8002cac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c92:	4b22      	ldr	r3, [pc, #136]	; (8002d1c <HAL_RCC_ClockConfig+0x1b8>)
 8002c94:	683a      	ldr	r2, [r7, #0]
 8002c96:	b2d2      	uxtb	r2, r2
 8002c98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c9a:	4b20      	ldr	r3, [pc, #128]	; (8002d1c <HAL_RCC_ClockConfig+0x1b8>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0307 	and.w	r3, r3, #7
 8002ca2:	683a      	ldr	r2, [r7, #0]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d001      	beq.n	8002cac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e032      	b.n	8002d12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0304 	and.w	r3, r3, #4
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d008      	beq.n	8002cca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cb8:	4b19      	ldr	r3, [pc, #100]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	4916      	ldr	r1, [pc, #88]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0308 	and.w	r3, r3, #8
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d009      	beq.n	8002cea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cd6:	4b12      	ldr	r3, [pc, #72]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	00db      	lsls	r3, r3, #3
 8002ce4:	490e      	ldr	r1, [pc, #56]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002cea:	f000 f821 	bl	8002d30 <HAL_RCC_GetSysClockFreq>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	4b0b      	ldr	r3, [pc, #44]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	091b      	lsrs	r3, r3, #4
 8002cf6:	f003 030f 	and.w	r3, r3, #15
 8002cfa:	490a      	ldr	r1, [pc, #40]	; (8002d24 <HAL_RCC_ClockConfig+0x1c0>)
 8002cfc:	5ccb      	ldrb	r3, [r1, r3]
 8002cfe:	fa22 f303 	lsr.w	r3, r2, r3
 8002d02:	4a09      	ldr	r2, [pc, #36]	; (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002d04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d06:	4b09      	ldr	r3, [pc, #36]	; (8002d2c <HAL_RCC_ClockConfig+0x1c8>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7fe fc34 	bl	8001578 <HAL_InitTick>

  return HAL_OK;
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3710      	adds	r7, #16
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	40023c00 	.word	0x40023c00
 8002d20:	40023800 	.word	0x40023800
 8002d24:	080054e4 	.word	0x080054e4
 8002d28:	20000074 	.word	0x20000074
 8002d2c:	20000078 	.word	0x20000078

08002d30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d34:	b094      	sub	sp, #80	; 0x50
 8002d36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	647b      	str	r3, [r7, #68]	; 0x44
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d40:	2300      	movs	r3, #0
 8002d42:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002d44:	2300      	movs	r3, #0
 8002d46:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d48:	4b79      	ldr	r3, [pc, #484]	; (8002f30 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	f003 030c 	and.w	r3, r3, #12
 8002d50:	2b08      	cmp	r3, #8
 8002d52:	d00d      	beq.n	8002d70 <HAL_RCC_GetSysClockFreq+0x40>
 8002d54:	2b08      	cmp	r3, #8
 8002d56:	f200 80e1 	bhi.w	8002f1c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d002      	beq.n	8002d64 <HAL_RCC_GetSysClockFreq+0x34>
 8002d5e:	2b04      	cmp	r3, #4
 8002d60:	d003      	beq.n	8002d6a <HAL_RCC_GetSysClockFreq+0x3a>
 8002d62:	e0db      	b.n	8002f1c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d64:	4b73      	ldr	r3, [pc, #460]	; (8002f34 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d66:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002d68:	e0db      	b.n	8002f22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d6a:	4b73      	ldr	r3, [pc, #460]	; (8002f38 <HAL_RCC_GetSysClockFreq+0x208>)
 8002d6c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d6e:	e0d8      	b.n	8002f22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d70:	4b6f      	ldr	r3, [pc, #444]	; (8002f30 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d78:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d7a:	4b6d      	ldr	r3, [pc, #436]	; (8002f30 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d063      	beq.n	8002e4e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d86:	4b6a      	ldr	r3, [pc, #424]	; (8002f30 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	099b      	lsrs	r3, r3, #6
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d90:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d98:	633b      	str	r3, [r7, #48]	; 0x30
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	637b      	str	r3, [r7, #52]	; 0x34
 8002d9e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002da2:	4622      	mov	r2, r4
 8002da4:	462b      	mov	r3, r5
 8002da6:	f04f 0000 	mov.w	r0, #0
 8002daa:	f04f 0100 	mov.w	r1, #0
 8002dae:	0159      	lsls	r1, r3, #5
 8002db0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002db4:	0150      	lsls	r0, r2, #5
 8002db6:	4602      	mov	r2, r0
 8002db8:	460b      	mov	r3, r1
 8002dba:	4621      	mov	r1, r4
 8002dbc:	1a51      	subs	r1, r2, r1
 8002dbe:	6139      	str	r1, [r7, #16]
 8002dc0:	4629      	mov	r1, r5
 8002dc2:	eb63 0301 	sbc.w	r3, r3, r1
 8002dc6:	617b      	str	r3, [r7, #20]
 8002dc8:	f04f 0200 	mov.w	r2, #0
 8002dcc:	f04f 0300 	mov.w	r3, #0
 8002dd0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002dd4:	4659      	mov	r1, fp
 8002dd6:	018b      	lsls	r3, r1, #6
 8002dd8:	4651      	mov	r1, sl
 8002dda:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002dde:	4651      	mov	r1, sl
 8002de0:	018a      	lsls	r2, r1, #6
 8002de2:	4651      	mov	r1, sl
 8002de4:	ebb2 0801 	subs.w	r8, r2, r1
 8002de8:	4659      	mov	r1, fp
 8002dea:	eb63 0901 	sbc.w	r9, r3, r1
 8002dee:	f04f 0200 	mov.w	r2, #0
 8002df2:	f04f 0300 	mov.w	r3, #0
 8002df6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002dfa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002dfe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e02:	4690      	mov	r8, r2
 8002e04:	4699      	mov	r9, r3
 8002e06:	4623      	mov	r3, r4
 8002e08:	eb18 0303 	adds.w	r3, r8, r3
 8002e0c:	60bb      	str	r3, [r7, #8]
 8002e0e:	462b      	mov	r3, r5
 8002e10:	eb49 0303 	adc.w	r3, r9, r3
 8002e14:	60fb      	str	r3, [r7, #12]
 8002e16:	f04f 0200 	mov.w	r2, #0
 8002e1a:	f04f 0300 	mov.w	r3, #0
 8002e1e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002e22:	4629      	mov	r1, r5
 8002e24:	024b      	lsls	r3, r1, #9
 8002e26:	4621      	mov	r1, r4
 8002e28:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e2c:	4621      	mov	r1, r4
 8002e2e:	024a      	lsls	r2, r1, #9
 8002e30:	4610      	mov	r0, r2
 8002e32:	4619      	mov	r1, r3
 8002e34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e36:	2200      	movs	r2, #0
 8002e38:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e3c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e40:	f7fd fa1e 	bl	8000280 <__aeabi_uldivmod>
 8002e44:	4602      	mov	r2, r0
 8002e46:	460b      	mov	r3, r1
 8002e48:	4613      	mov	r3, r2
 8002e4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e4c:	e058      	b.n	8002f00 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e4e:	4b38      	ldr	r3, [pc, #224]	; (8002f30 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	099b      	lsrs	r3, r3, #6
 8002e54:	2200      	movs	r2, #0
 8002e56:	4618      	mov	r0, r3
 8002e58:	4611      	mov	r1, r2
 8002e5a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002e5e:	623b      	str	r3, [r7, #32]
 8002e60:	2300      	movs	r3, #0
 8002e62:	627b      	str	r3, [r7, #36]	; 0x24
 8002e64:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002e68:	4642      	mov	r2, r8
 8002e6a:	464b      	mov	r3, r9
 8002e6c:	f04f 0000 	mov.w	r0, #0
 8002e70:	f04f 0100 	mov.w	r1, #0
 8002e74:	0159      	lsls	r1, r3, #5
 8002e76:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e7a:	0150      	lsls	r0, r2, #5
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	460b      	mov	r3, r1
 8002e80:	4641      	mov	r1, r8
 8002e82:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e86:	4649      	mov	r1, r9
 8002e88:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e8c:	f04f 0200 	mov.w	r2, #0
 8002e90:	f04f 0300 	mov.w	r3, #0
 8002e94:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002e98:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002e9c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002ea0:	ebb2 040a 	subs.w	r4, r2, sl
 8002ea4:	eb63 050b 	sbc.w	r5, r3, fp
 8002ea8:	f04f 0200 	mov.w	r2, #0
 8002eac:	f04f 0300 	mov.w	r3, #0
 8002eb0:	00eb      	lsls	r3, r5, #3
 8002eb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002eb6:	00e2      	lsls	r2, r4, #3
 8002eb8:	4614      	mov	r4, r2
 8002eba:	461d      	mov	r5, r3
 8002ebc:	4643      	mov	r3, r8
 8002ebe:	18e3      	adds	r3, r4, r3
 8002ec0:	603b      	str	r3, [r7, #0]
 8002ec2:	464b      	mov	r3, r9
 8002ec4:	eb45 0303 	adc.w	r3, r5, r3
 8002ec8:	607b      	str	r3, [r7, #4]
 8002eca:	f04f 0200 	mov.w	r2, #0
 8002ece:	f04f 0300 	mov.w	r3, #0
 8002ed2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ed6:	4629      	mov	r1, r5
 8002ed8:	028b      	lsls	r3, r1, #10
 8002eda:	4621      	mov	r1, r4
 8002edc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ee0:	4621      	mov	r1, r4
 8002ee2:	028a      	lsls	r2, r1, #10
 8002ee4:	4610      	mov	r0, r2
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002eea:	2200      	movs	r2, #0
 8002eec:	61bb      	str	r3, [r7, #24]
 8002eee:	61fa      	str	r2, [r7, #28]
 8002ef0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ef4:	f7fd f9c4 	bl	8000280 <__aeabi_uldivmod>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	460b      	mov	r3, r1
 8002efc:	4613      	mov	r3, r2
 8002efe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f00:	4b0b      	ldr	r3, [pc, #44]	; (8002f30 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	0c1b      	lsrs	r3, r3, #16
 8002f06:	f003 0303 	and.w	r3, r3, #3
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002f10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f18:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f1a:	e002      	b.n	8002f22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f1c:	4b05      	ldr	r3, [pc, #20]	; (8002f34 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f1e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3750      	adds	r7, #80	; 0x50
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f2e:	bf00      	nop
 8002f30:	40023800 	.word	0x40023800
 8002f34:	00f42400 	.word	0x00f42400
 8002f38:	007a1200 	.word	0x007a1200

08002f3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f40:	4b03      	ldr	r3, [pc, #12]	; (8002f50 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f42:	681b      	ldr	r3, [r3, #0]
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop
 8002f50:	20000074 	.word	0x20000074

08002f54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f58:	f7ff fff0 	bl	8002f3c <HAL_RCC_GetHCLKFreq>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	4b05      	ldr	r3, [pc, #20]	; (8002f74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	0a9b      	lsrs	r3, r3, #10
 8002f64:	f003 0307 	and.w	r3, r3, #7
 8002f68:	4903      	ldr	r1, [pc, #12]	; (8002f78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f6a:	5ccb      	ldrb	r3, [r1, r3]
 8002f6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	40023800 	.word	0x40023800
 8002f78:	080054f4 	.word	0x080054f4

08002f7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002f80:	f7ff ffdc 	bl	8002f3c <HAL_RCC_GetHCLKFreq>
 8002f84:	4602      	mov	r2, r0
 8002f86:	4b05      	ldr	r3, [pc, #20]	; (8002f9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	0b5b      	lsrs	r3, r3, #13
 8002f8c:	f003 0307 	and.w	r3, r3, #7
 8002f90:	4903      	ldr	r1, [pc, #12]	; (8002fa0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f92:	5ccb      	ldrb	r3, [r1, r3]
 8002f94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	40023800 	.word	0x40023800
 8002fa0:	080054f4 	.word	0x080054f4

08002fa4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	220f      	movs	r2, #15
 8002fb2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002fb4:	4b12      	ldr	r3, [pc, #72]	; (8003000 <HAL_RCC_GetClockConfig+0x5c>)
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f003 0203 	and.w	r2, r3, #3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002fc0:	4b0f      	ldr	r3, [pc, #60]	; (8003000 <HAL_RCC_GetClockConfig+0x5c>)
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002fcc:	4b0c      	ldr	r3, [pc, #48]	; (8003000 <HAL_RCC_GetClockConfig+0x5c>)
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002fd8:	4b09      	ldr	r3, [pc, #36]	; (8003000 <HAL_RCC_GetClockConfig+0x5c>)
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	08db      	lsrs	r3, r3, #3
 8002fde:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002fe6:	4b07      	ldr	r3, [pc, #28]	; (8003004 <HAL_RCC_GetClockConfig+0x60>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0207 	and.w	r2, r3, #7
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	601a      	str	r2, [r3, #0]
}
 8002ff2:	bf00      	nop
 8002ff4:	370c      	adds	r7, #12
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	40023800 	.word	0x40023800
 8003004:	40023c00 	.word	0x40023c00

08003008 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d101      	bne.n	800301a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e041      	b.n	800309e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003020:	b2db      	uxtb	r3, r3
 8003022:	2b00      	cmp	r3, #0
 8003024:	d106      	bne.n	8003034 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f000 f839 	bl	80030a6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2202      	movs	r2, #2
 8003038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	3304      	adds	r3, #4
 8003044:	4619      	mov	r1, r3
 8003046:	4610      	mov	r0, r2
 8003048:	f000 f9b2 	bl	80033b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3708      	adds	r7, #8
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}

080030a6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80030a6:	b480      	push	{r7}
 80030a8:	b083      	sub	sp, #12
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80030ae:	bf00      	nop
 80030b0:	370c      	adds	r7, #12
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
	...

080030bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80030bc:	b480      	push	{r7}
 80030be:	b085      	sub	sp, #20
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d001      	beq.n	80030d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e044      	b.n	800315e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2202      	movs	r2, #2
 80030d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	68da      	ldr	r2, [r3, #12]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f042 0201 	orr.w	r2, r2, #1
 80030ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a1e      	ldr	r2, [pc, #120]	; (800316c <HAL_TIM_Base_Start_IT+0xb0>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d018      	beq.n	8003128 <HAL_TIM_Base_Start_IT+0x6c>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030fe:	d013      	beq.n	8003128 <HAL_TIM_Base_Start_IT+0x6c>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a1a      	ldr	r2, [pc, #104]	; (8003170 <HAL_TIM_Base_Start_IT+0xb4>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d00e      	beq.n	8003128 <HAL_TIM_Base_Start_IT+0x6c>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a19      	ldr	r2, [pc, #100]	; (8003174 <HAL_TIM_Base_Start_IT+0xb8>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d009      	beq.n	8003128 <HAL_TIM_Base_Start_IT+0x6c>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a17      	ldr	r2, [pc, #92]	; (8003178 <HAL_TIM_Base_Start_IT+0xbc>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d004      	beq.n	8003128 <HAL_TIM_Base_Start_IT+0x6c>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a16      	ldr	r2, [pc, #88]	; (800317c <HAL_TIM_Base_Start_IT+0xc0>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d111      	bne.n	800314c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f003 0307 	and.w	r3, r3, #7
 8003132:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2b06      	cmp	r3, #6
 8003138:	d010      	beq.n	800315c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f042 0201 	orr.w	r2, r2, #1
 8003148:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800314a:	e007      	b.n	800315c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f042 0201 	orr.w	r2, r2, #1
 800315a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800315c:	2300      	movs	r3, #0
}
 800315e:	4618      	mov	r0, r3
 8003160:	3714      	adds	r7, #20
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	40010000 	.word	0x40010000
 8003170:	40000400 	.word	0x40000400
 8003174:	40000800 	.word	0x40000800
 8003178:	40000c00 	.word	0x40000c00
 800317c:	40014000 	.word	0x40014000

08003180 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b084      	sub	sp, #16
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	f003 0302 	and.w	r3, r3, #2
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d020      	beq.n	80031e4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f003 0302 	and.w	r3, r3, #2
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d01b      	beq.n	80031e4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f06f 0202 	mvn.w	r2, #2
 80031b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2201      	movs	r2, #1
 80031ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	699b      	ldr	r3, [r3, #24]
 80031c2:	f003 0303 	and.w	r3, r3, #3
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d003      	beq.n	80031d2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f000 f8d2 	bl	8003374 <HAL_TIM_IC_CaptureCallback>
 80031d0:	e005      	b.n	80031de <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f000 f8c4 	bl	8003360 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f000 f8d5 	bl	8003388 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	f003 0304 	and.w	r3, r3, #4
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d020      	beq.n	8003230 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	f003 0304 	and.w	r3, r3, #4
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d01b      	beq.n	8003230 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f06f 0204 	mvn.w	r2, #4
 8003200:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2202      	movs	r2, #2
 8003206:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	699b      	ldr	r3, [r3, #24]
 800320e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003212:	2b00      	cmp	r3, #0
 8003214:	d003      	beq.n	800321e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f000 f8ac 	bl	8003374 <HAL_TIM_IC_CaptureCallback>
 800321c:	e005      	b.n	800322a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f000 f89e 	bl	8003360 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f000 f8af 	bl	8003388 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	f003 0308 	and.w	r3, r3, #8
 8003236:	2b00      	cmp	r3, #0
 8003238:	d020      	beq.n	800327c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f003 0308 	and.w	r3, r3, #8
 8003240:	2b00      	cmp	r3, #0
 8003242:	d01b      	beq.n	800327c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f06f 0208 	mvn.w	r2, #8
 800324c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2204      	movs	r2, #4
 8003252:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	69db      	ldr	r3, [r3, #28]
 800325a:	f003 0303 	and.w	r3, r3, #3
 800325e:	2b00      	cmp	r3, #0
 8003260:	d003      	beq.n	800326a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 f886 	bl	8003374 <HAL_TIM_IC_CaptureCallback>
 8003268:	e005      	b.n	8003276 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f000 f878 	bl	8003360 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f000 f889 	bl	8003388 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	f003 0310 	and.w	r3, r3, #16
 8003282:	2b00      	cmp	r3, #0
 8003284:	d020      	beq.n	80032c8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	f003 0310 	and.w	r3, r3, #16
 800328c:	2b00      	cmp	r3, #0
 800328e:	d01b      	beq.n	80032c8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f06f 0210 	mvn.w	r2, #16
 8003298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2208      	movs	r2, #8
 800329e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	69db      	ldr	r3, [r3, #28]
 80032a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d003      	beq.n	80032b6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f000 f860 	bl	8003374 <HAL_TIM_IC_CaptureCallback>
 80032b4:	e005      	b.n	80032c2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 f852 	bl	8003360 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f000 f863 	bl	8003388 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	f003 0301 	and.w	r3, r3, #1
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d00c      	beq.n	80032ec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	f003 0301 	and.w	r3, r3, #1
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d007      	beq.n	80032ec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f06f 0201 	mvn.w	r2, #1
 80032e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f7fd fec6 	bl	8001078 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d00c      	beq.n	8003310 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d007      	beq.n	8003310 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003308:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f000 f8e6 	bl	80034dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003316:	2b00      	cmp	r3, #0
 8003318:	d00c      	beq.n	8003334 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003320:	2b00      	cmp	r3, #0
 8003322:	d007      	beq.n	8003334 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800332c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 f834 	bl	800339c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	f003 0320 	and.w	r3, r3, #32
 800333a:	2b00      	cmp	r3, #0
 800333c:	d00c      	beq.n	8003358 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	f003 0320 	and.w	r3, r3, #32
 8003344:	2b00      	cmp	r3, #0
 8003346:	d007      	beq.n	8003358 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f06f 0220 	mvn.w	r2, #32
 8003350:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f000 f8b8 	bl	80034c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003358:	bf00      	nop
 800335a:	3710      	adds	r7, #16
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}

08003360 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003368:	bf00      	nop
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800337c:	bf00      	nop
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003390:	bf00      	nop
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr

0800339c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033a4:	bf00      	nop
 80033a6:	370c      	adds	r7, #12
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b085      	sub	sp, #20
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4a3a      	ldr	r2, [pc, #232]	; (80034ac <TIM_Base_SetConfig+0xfc>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d00f      	beq.n	80033e8 <TIM_Base_SetConfig+0x38>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033ce:	d00b      	beq.n	80033e8 <TIM_Base_SetConfig+0x38>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4a37      	ldr	r2, [pc, #220]	; (80034b0 <TIM_Base_SetConfig+0x100>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d007      	beq.n	80033e8 <TIM_Base_SetConfig+0x38>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4a36      	ldr	r2, [pc, #216]	; (80034b4 <TIM_Base_SetConfig+0x104>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d003      	beq.n	80033e8 <TIM_Base_SetConfig+0x38>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a35      	ldr	r2, [pc, #212]	; (80034b8 <TIM_Base_SetConfig+0x108>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d108      	bne.n	80033fa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	68fa      	ldr	r2, [r7, #12]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a2b      	ldr	r2, [pc, #172]	; (80034ac <TIM_Base_SetConfig+0xfc>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d01b      	beq.n	800343a <TIM_Base_SetConfig+0x8a>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003408:	d017      	beq.n	800343a <TIM_Base_SetConfig+0x8a>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a28      	ldr	r2, [pc, #160]	; (80034b0 <TIM_Base_SetConfig+0x100>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d013      	beq.n	800343a <TIM_Base_SetConfig+0x8a>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a27      	ldr	r2, [pc, #156]	; (80034b4 <TIM_Base_SetConfig+0x104>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d00f      	beq.n	800343a <TIM_Base_SetConfig+0x8a>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a26      	ldr	r2, [pc, #152]	; (80034b8 <TIM_Base_SetConfig+0x108>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d00b      	beq.n	800343a <TIM_Base_SetConfig+0x8a>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a25      	ldr	r2, [pc, #148]	; (80034bc <TIM_Base_SetConfig+0x10c>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d007      	beq.n	800343a <TIM_Base_SetConfig+0x8a>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a24      	ldr	r2, [pc, #144]	; (80034c0 <TIM_Base_SetConfig+0x110>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d003      	beq.n	800343a <TIM_Base_SetConfig+0x8a>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a23      	ldr	r2, [pc, #140]	; (80034c4 <TIM_Base_SetConfig+0x114>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d108      	bne.n	800344c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003440:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	68fa      	ldr	r2, [r7, #12]
 8003448:	4313      	orrs	r3, r2
 800344a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	695b      	ldr	r3, [r3, #20]
 8003456:	4313      	orrs	r3, r2
 8003458:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	68fa      	ldr	r2, [r7, #12]
 800345e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	689a      	ldr	r2, [r3, #8]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	4a0e      	ldr	r2, [pc, #56]	; (80034ac <TIM_Base_SetConfig+0xfc>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d103      	bne.n	8003480 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	691a      	ldr	r2, [r3, #16]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	f003 0301 	and.w	r3, r3, #1
 800348e:	2b01      	cmp	r3, #1
 8003490:	d105      	bne.n	800349e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	f023 0201 	bic.w	r2, r3, #1
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	611a      	str	r2, [r3, #16]
  }
}
 800349e:	bf00      	nop
 80034a0:	3714      	adds	r7, #20
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop
 80034ac:	40010000 	.word	0x40010000
 80034b0:	40000400 	.word	0x40000400
 80034b4:	40000800 	.word	0x40000800
 80034b8:	40000c00 	.word	0x40000c00
 80034bc:	40014000 	.word	0x40014000
 80034c0:	40014400 	.word	0x40014400
 80034c4:	40014800 	.word	0x40014800

080034c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034e4:	bf00      	nop
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b085      	sub	sp, #20
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	4603      	mov	r3, r0
 80034f8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80034fa:	2300      	movs	r3, #0
 80034fc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80034fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003502:	2b84      	cmp	r3, #132	; 0x84
 8003504:	d005      	beq.n	8003512 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003506:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	4413      	add	r3, r2
 800350e:	3303      	adds	r3, #3
 8003510:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003512:	68fb      	ldr	r3, [r7, #12]
}
 8003514:	4618      	mov	r0, r3
 8003516:	3714      	adds	r7, #20
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003524:	f000 faf6 	bl	8003b14 <vTaskStartScheduler>
  
  return osOK;
 8003528:	2300      	movs	r3, #0
}
 800352a:	4618      	mov	r0, r3
 800352c:	bd80      	pop	{r7, pc}

0800352e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800352e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003530:	b089      	sub	sp, #36	; 0x24
 8003532:	af04      	add	r7, sp, #16
 8003534:	6078      	str	r0, [r7, #4]
 8003536:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	695b      	ldr	r3, [r3, #20]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d020      	beq.n	8003582 <osThreadCreate+0x54>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	699b      	ldr	r3, [r3, #24]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d01c      	beq.n	8003582 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	685c      	ldr	r4, [r3, #4]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	691e      	ldr	r6, [r3, #16]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800355a:	4618      	mov	r0, r3
 800355c:	f7ff ffc8 	bl	80034f0 <makeFreeRtosPriority>
 8003560:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	695b      	ldr	r3, [r3, #20]
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800356a:	9202      	str	r2, [sp, #8]
 800356c:	9301      	str	r3, [sp, #4]
 800356e:	9100      	str	r1, [sp, #0]
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	4632      	mov	r2, r6
 8003574:	4629      	mov	r1, r5
 8003576:	4620      	mov	r0, r4
 8003578:	f000 f8ed 	bl	8003756 <xTaskCreateStatic>
 800357c:	4603      	mov	r3, r0
 800357e:	60fb      	str	r3, [r7, #12]
 8003580:	e01c      	b.n	80035bc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685c      	ldr	r4, [r3, #4]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800358e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003596:	4618      	mov	r0, r3
 8003598:	f7ff ffaa 	bl	80034f0 <makeFreeRtosPriority>
 800359c:	4602      	mov	r2, r0
 800359e:	f107 030c 	add.w	r3, r7, #12
 80035a2:	9301      	str	r3, [sp, #4]
 80035a4:	9200      	str	r2, [sp, #0]
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	4632      	mov	r2, r6
 80035aa:	4629      	mov	r1, r5
 80035ac:	4620      	mov	r0, r4
 80035ae:	f000 f92f 	bl	8003810 <xTaskCreate>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d001      	beq.n	80035bc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80035b8:	2300      	movs	r3, #0
 80035ba:	e000      	b.n	80035be <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80035bc:	68fb      	ldr	r3, [r7, #12]
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3714      	adds	r7, #20
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080035c6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80035c6:	b580      	push	{r7, lr}
 80035c8:	b084      	sub	sp, #16
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d001      	beq.n	80035dc <osDelay+0x16>
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	e000      	b.n	80035de <osDelay+0x18>
 80035dc:	2301      	movs	r3, #1
 80035de:	4618      	mov	r0, r3
 80035e0:	f000 fa64 	bl	8003aac <vTaskDelay>
  
  return osOK;
 80035e4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3710      	adds	r7, #16
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}

080035ee <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80035ee:	b480      	push	{r7}
 80035f0:	b083      	sub	sp, #12
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f103 0208 	add.w	r2, r3, #8
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f04f 32ff 	mov.w	r2, #4294967295
 8003606:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f103 0208 	add.w	r2, r3, #8
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f103 0208 	add.w	r2, r3, #8
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003622:	bf00      	nop
 8003624:	370c      	adds	r7, #12
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr

0800362e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800362e:	b480      	push	{r7}
 8003630:	b083      	sub	sp, #12
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800363c:	bf00      	nop
 800363e:	370c      	adds	r7, #12
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003648:	b480      	push	{r7}
 800364a:	b085      	sub	sp, #20
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	68fa      	ldr	r2, [r7, #12]
 800365c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	689a      	ldr	r2, [r3, #8]
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	683a      	ldr	r2, [r7, #0]
 800366c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	683a      	ldr	r2, [r7, #0]
 8003672:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	1c5a      	adds	r2, r3, #1
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	601a      	str	r2, [r3, #0]
}
 8003684:	bf00      	nop
 8003686:	3714      	adds	r7, #20
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr

08003690 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003690:	b480      	push	{r7}
 8003692:	b085      	sub	sp, #20
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036a6:	d103      	bne.n	80036b0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	691b      	ldr	r3, [r3, #16]
 80036ac:	60fb      	str	r3, [r7, #12]
 80036ae:	e00c      	b.n	80036ca <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	3308      	adds	r3, #8
 80036b4:	60fb      	str	r3, [r7, #12]
 80036b6:	e002      	b.n	80036be <vListInsert+0x2e>
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	60fb      	str	r3, [r7, #12]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68ba      	ldr	r2, [r7, #8]
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d2f6      	bcs.n	80036b8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	685a      	ldr	r2, [r3, #4]
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	683a      	ldr	r2, [r7, #0]
 80036d8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	68fa      	ldr	r2, [r7, #12]
 80036de:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	683a      	ldr	r2, [r7, #0]
 80036e4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	1c5a      	adds	r2, r3, #1
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	601a      	str	r2, [r3, #0]
}
 80036f6:	bf00      	nop
 80036f8:	3714      	adds	r7, #20
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr

08003702 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003702:	b480      	push	{r7}
 8003704:	b085      	sub	sp, #20
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	6892      	ldr	r2, [r2, #8]
 8003718:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	6852      	ldr	r2, [r2, #4]
 8003722:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	429a      	cmp	r2, r3
 800372c:	d103      	bne.n	8003736 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	689a      	ldr	r2, [r3, #8]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	1e5a      	subs	r2, r3, #1
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
}
 800374a:	4618      	mov	r0, r3
 800374c:	3714      	adds	r7, #20
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr

08003756 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003756:	b580      	push	{r7, lr}
 8003758:	b08e      	sub	sp, #56	; 0x38
 800375a:	af04      	add	r7, sp, #16
 800375c:	60f8      	str	r0, [r7, #12]
 800375e:	60b9      	str	r1, [r7, #8]
 8003760:	607a      	str	r2, [r7, #4]
 8003762:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003766:	2b00      	cmp	r3, #0
 8003768:	d10a      	bne.n	8003780 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800376a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800376e:	f383 8811 	msr	BASEPRI, r3
 8003772:	f3bf 8f6f 	isb	sy
 8003776:	f3bf 8f4f 	dsb	sy
 800377a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800377c:	bf00      	nop
 800377e:	e7fe      	b.n	800377e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003782:	2b00      	cmp	r3, #0
 8003784:	d10a      	bne.n	800379c <xTaskCreateStatic+0x46>
	__asm volatile
 8003786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800378a:	f383 8811 	msr	BASEPRI, r3
 800378e:	f3bf 8f6f 	isb	sy
 8003792:	f3bf 8f4f 	dsb	sy
 8003796:	61fb      	str	r3, [r7, #28]
}
 8003798:	bf00      	nop
 800379a:	e7fe      	b.n	800379a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800379c:	23a0      	movs	r3, #160	; 0xa0
 800379e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	2ba0      	cmp	r3, #160	; 0xa0
 80037a4:	d00a      	beq.n	80037bc <xTaskCreateStatic+0x66>
	__asm volatile
 80037a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037aa:	f383 8811 	msr	BASEPRI, r3
 80037ae:	f3bf 8f6f 	isb	sy
 80037b2:	f3bf 8f4f 	dsb	sy
 80037b6:	61bb      	str	r3, [r7, #24]
}
 80037b8:	bf00      	nop
 80037ba:	e7fe      	b.n	80037ba <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80037bc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80037be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d01e      	beq.n	8003802 <xTaskCreateStatic+0xac>
 80037c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d01b      	beq.n	8003802 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80037ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037cc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80037ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037d2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80037d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d6:	2202      	movs	r2, #2
 80037d8:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80037dc:	2300      	movs	r3, #0
 80037de:	9303      	str	r3, [sp, #12]
 80037e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e2:	9302      	str	r3, [sp, #8]
 80037e4:	f107 0314 	add.w	r3, r7, #20
 80037e8:	9301      	str	r3, [sp, #4]
 80037ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ec:	9300      	str	r3, [sp, #0]
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	68b9      	ldr	r1, [r7, #8]
 80037f4:	68f8      	ldr	r0, [r7, #12]
 80037f6:	f000 f851 	bl	800389c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80037fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80037fc:	f000 f8ec 	bl	80039d8 <prvAddNewTaskToReadyList>
 8003800:	e001      	b.n	8003806 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003802:	2300      	movs	r3, #0
 8003804:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003806:	697b      	ldr	r3, [r7, #20]
	}
 8003808:	4618      	mov	r0, r3
 800380a:	3728      	adds	r7, #40	; 0x28
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003810:	b580      	push	{r7, lr}
 8003812:	b08c      	sub	sp, #48	; 0x30
 8003814:	af04      	add	r7, sp, #16
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	603b      	str	r3, [r7, #0]
 800381c:	4613      	mov	r3, r2
 800381e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003820:	88fb      	ldrh	r3, [r7, #6]
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	4618      	mov	r0, r3
 8003826:	f000 feef 	bl	8004608 <pvPortMalloc>
 800382a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d00e      	beq.n	8003850 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003832:	20a0      	movs	r0, #160	; 0xa0
 8003834:	f000 fee8 	bl	8004608 <pvPortMalloc>
 8003838:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d003      	beq.n	8003848 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	697a      	ldr	r2, [r7, #20]
 8003844:	631a      	str	r2, [r3, #48]	; 0x30
 8003846:	e005      	b.n	8003854 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003848:	6978      	ldr	r0, [r7, #20]
 800384a:	f000 ffa9 	bl	80047a0 <vPortFree>
 800384e:	e001      	b.n	8003854 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003850:	2300      	movs	r3, #0
 8003852:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d017      	beq.n	800388a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003862:	88fa      	ldrh	r2, [r7, #6]
 8003864:	2300      	movs	r3, #0
 8003866:	9303      	str	r3, [sp, #12]
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	9302      	str	r3, [sp, #8]
 800386c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800386e:	9301      	str	r3, [sp, #4]
 8003870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003872:	9300      	str	r3, [sp, #0]
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	68b9      	ldr	r1, [r7, #8]
 8003878:	68f8      	ldr	r0, [r7, #12]
 800387a:	f000 f80f 	bl	800389c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800387e:	69f8      	ldr	r0, [r7, #28]
 8003880:	f000 f8aa 	bl	80039d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003884:	2301      	movs	r3, #1
 8003886:	61bb      	str	r3, [r7, #24]
 8003888:	e002      	b.n	8003890 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800388a:	f04f 33ff 	mov.w	r3, #4294967295
 800388e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003890:	69bb      	ldr	r3, [r7, #24]
	}
 8003892:	4618      	mov	r0, r3
 8003894:	3720      	adds	r7, #32
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
	...

0800389c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b088      	sub	sp, #32
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	607a      	str	r2, [r7, #4]
 80038a8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80038aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80038b4:	3b01      	subs	r3, #1
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	4413      	add	r3, r2
 80038ba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	f023 0307 	bic.w	r3, r3, #7
 80038c2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	f003 0307 	and.w	r3, r3, #7
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00a      	beq.n	80038e4 <prvInitialiseNewTask+0x48>
	__asm volatile
 80038ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038d2:	f383 8811 	msr	BASEPRI, r3
 80038d6:	f3bf 8f6f 	isb	sy
 80038da:	f3bf 8f4f 	dsb	sy
 80038de:	617b      	str	r3, [r7, #20]
}
 80038e0:	bf00      	nop
 80038e2:	e7fe      	b.n	80038e2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d01f      	beq.n	800392a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80038ea:	2300      	movs	r3, #0
 80038ec:	61fb      	str	r3, [r7, #28]
 80038ee:	e012      	b.n	8003916 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80038f0:	68ba      	ldr	r2, [r7, #8]
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	4413      	add	r3, r2
 80038f6:	7819      	ldrb	r1, [r3, #0]
 80038f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	4413      	add	r3, r2
 80038fe:	3334      	adds	r3, #52	; 0x34
 8003900:	460a      	mov	r2, r1
 8003902:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003904:	68ba      	ldr	r2, [r7, #8]
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	4413      	add	r3, r2
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d006      	beq.n	800391e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	3301      	adds	r3, #1
 8003914:	61fb      	str	r3, [r7, #28]
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	2b0f      	cmp	r3, #15
 800391a:	d9e9      	bls.n	80038f0 <prvInitialiseNewTask+0x54>
 800391c:	e000      	b.n	8003920 <prvInitialiseNewTask+0x84>
			{
				break;
 800391e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003922:	2200      	movs	r2, #0
 8003924:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003928:	e003      	b.n	8003932 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800392a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800392c:	2200      	movs	r2, #0
 800392e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003934:	2b06      	cmp	r3, #6
 8003936:	d901      	bls.n	800393c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003938:	2306      	movs	r3, #6
 800393a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800393c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800393e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003940:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003944:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003946:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800394a:	2200      	movs	r2, #0
 800394c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800394e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003950:	3304      	adds	r3, #4
 8003952:	4618      	mov	r0, r3
 8003954:	f7ff fe6b 	bl	800362e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800395a:	3318      	adds	r3, #24
 800395c:	4618      	mov	r0, r3
 800395e:	f7ff fe66 	bl	800362e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003964:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003966:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800396a:	f1c3 0207 	rsb	r2, r3, #7
 800396e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003970:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003974:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003976:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800397a:	2200      	movs	r2, #0
 800397c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003982:	2200      	movs	r2, #0
 8003984:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800398a:	334c      	adds	r3, #76	; 0x4c
 800398c:	224c      	movs	r2, #76	; 0x4c
 800398e:	2100      	movs	r1, #0
 8003990:	4618      	mov	r0, r3
 8003992:	f001 f843 	bl	8004a1c <memset>
 8003996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003998:	4a0c      	ldr	r2, [pc, #48]	; (80039cc <prvInitialiseNewTask+0x130>)
 800399a:	651a      	str	r2, [r3, #80]	; 0x50
 800399c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800399e:	4a0c      	ldr	r2, [pc, #48]	; (80039d0 <prvInitialiseNewTask+0x134>)
 80039a0:	655a      	str	r2, [r3, #84]	; 0x54
 80039a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a4:	4a0b      	ldr	r2, [pc, #44]	; (80039d4 <prvInitialiseNewTask+0x138>)
 80039a6:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80039a8:	683a      	ldr	r2, [r7, #0]
 80039aa:	68f9      	ldr	r1, [r7, #12]
 80039ac:	69b8      	ldr	r0, [r7, #24]
 80039ae:	f000 fc1f 	bl	80041f0 <pxPortInitialiseStack>
 80039b2:	4602      	mov	r2, r0
 80039b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80039b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d002      	beq.n	80039c4 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80039be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039c2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80039c4:	bf00      	nop
 80039c6:	3720      	adds	r7, #32
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	200041bc 	.word	0x200041bc
 80039d0:	20004224 	.word	0x20004224
 80039d4:	2000428c 	.word	0x2000428c

080039d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b082      	sub	sp, #8
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80039e0:	f000 fd30 	bl	8004444 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80039e4:	4b2a      	ldr	r3, [pc, #168]	; (8003a90 <prvAddNewTaskToReadyList+0xb8>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	3301      	adds	r3, #1
 80039ea:	4a29      	ldr	r2, [pc, #164]	; (8003a90 <prvAddNewTaskToReadyList+0xb8>)
 80039ec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80039ee:	4b29      	ldr	r3, [pc, #164]	; (8003a94 <prvAddNewTaskToReadyList+0xbc>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d109      	bne.n	8003a0a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80039f6:	4a27      	ldr	r2, [pc, #156]	; (8003a94 <prvAddNewTaskToReadyList+0xbc>)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80039fc:	4b24      	ldr	r3, [pc, #144]	; (8003a90 <prvAddNewTaskToReadyList+0xb8>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d110      	bne.n	8003a26 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003a04:	f000 facc 	bl	8003fa0 <prvInitialiseTaskLists>
 8003a08:	e00d      	b.n	8003a26 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003a0a:	4b23      	ldr	r3, [pc, #140]	; (8003a98 <prvAddNewTaskToReadyList+0xc0>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d109      	bne.n	8003a26 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003a12:	4b20      	ldr	r3, [pc, #128]	; (8003a94 <prvAddNewTaskToReadyList+0xbc>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d802      	bhi.n	8003a26 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003a20:	4a1c      	ldr	r2, [pc, #112]	; (8003a94 <prvAddNewTaskToReadyList+0xbc>)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003a26:	4b1d      	ldr	r3, [pc, #116]	; (8003a9c <prvAddNewTaskToReadyList+0xc4>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	4a1b      	ldr	r2, [pc, #108]	; (8003a9c <prvAddNewTaskToReadyList+0xc4>)
 8003a2e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a34:	2201      	movs	r2, #1
 8003a36:	409a      	lsls	r2, r3
 8003a38:	4b19      	ldr	r3, [pc, #100]	; (8003aa0 <prvAddNewTaskToReadyList+0xc8>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	4a18      	ldr	r2, [pc, #96]	; (8003aa0 <prvAddNewTaskToReadyList+0xc8>)
 8003a40:	6013      	str	r3, [r2, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a46:	4613      	mov	r3, r2
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	4413      	add	r3, r2
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	4a15      	ldr	r2, [pc, #84]	; (8003aa4 <prvAddNewTaskToReadyList+0xcc>)
 8003a50:	441a      	add	r2, r3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	3304      	adds	r3, #4
 8003a56:	4619      	mov	r1, r3
 8003a58:	4610      	mov	r0, r2
 8003a5a:	f7ff fdf5 	bl	8003648 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003a5e:	f000 fd21 	bl	80044a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003a62:	4b0d      	ldr	r3, [pc, #52]	; (8003a98 <prvAddNewTaskToReadyList+0xc0>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d00e      	beq.n	8003a88 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003a6a:	4b0a      	ldr	r3, [pc, #40]	; (8003a94 <prvAddNewTaskToReadyList+0xbc>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d207      	bcs.n	8003a88 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003a78:	4b0b      	ldr	r3, [pc, #44]	; (8003aa8 <prvAddNewTaskToReadyList+0xd0>)
 8003a7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a7e:	601a      	str	r2, [r3, #0]
 8003a80:	f3bf 8f4f 	dsb	sy
 8003a84:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003a88:	bf00      	nop
 8003a8a:	3708      	adds	r7, #8
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	20000568 	.word	0x20000568
 8003a94:	20000468 	.word	0x20000468
 8003a98:	20000574 	.word	0x20000574
 8003a9c:	20000584 	.word	0x20000584
 8003aa0:	20000570 	.word	0x20000570
 8003aa4:	2000046c 	.word	0x2000046c
 8003aa8:	e000ed04 	.word	0xe000ed04

08003aac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d017      	beq.n	8003aee <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003abe:	4b13      	ldr	r3, [pc, #76]	; (8003b0c <vTaskDelay+0x60>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d00a      	beq.n	8003adc <vTaskDelay+0x30>
	__asm volatile
 8003ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aca:	f383 8811 	msr	BASEPRI, r3
 8003ace:	f3bf 8f6f 	isb	sy
 8003ad2:	f3bf 8f4f 	dsb	sy
 8003ad6:	60bb      	str	r3, [r7, #8]
}
 8003ad8:	bf00      	nop
 8003ada:	e7fe      	b.n	8003ada <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003adc:	f000 f884 	bl	8003be8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003ae0:	2100      	movs	r1, #0
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f000 fb1e 	bl	8004124 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003ae8:	f000 f88c 	bl	8003c04 <xTaskResumeAll>
 8003aec:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d107      	bne.n	8003b04 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003af4:	4b06      	ldr	r3, [pc, #24]	; (8003b10 <vTaskDelay+0x64>)
 8003af6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003afa:	601a      	str	r2, [r3, #0]
 8003afc:	f3bf 8f4f 	dsb	sy
 8003b00:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003b04:	bf00      	nop
 8003b06:	3710      	adds	r7, #16
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	20000590 	.word	0x20000590
 8003b10:	e000ed04 	.word	0xe000ed04

08003b14 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b08a      	sub	sp, #40	; 0x28
 8003b18:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003b22:	463a      	mov	r2, r7
 8003b24:	1d39      	adds	r1, r7, #4
 8003b26:	f107 0308 	add.w	r3, r7, #8
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f7fc fd26 	bl	800057c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003b30:	6839      	ldr	r1, [r7, #0]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	68ba      	ldr	r2, [r7, #8]
 8003b36:	9202      	str	r2, [sp, #8]
 8003b38:	9301      	str	r3, [sp, #4]
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	9300      	str	r3, [sp, #0]
 8003b3e:	2300      	movs	r3, #0
 8003b40:	460a      	mov	r2, r1
 8003b42:	4921      	ldr	r1, [pc, #132]	; (8003bc8 <vTaskStartScheduler+0xb4>)
 8003b44:	4821      	ldr	r0, [pc, #132]	; (8003bcc <vTaskStartScheduler+0xb8>)
 8003b46:	f7ff fe06 	bl	8003756 <xTaskCreateStatic>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	4a20      	ldr	r2, [pc, #128]	; (8003bd0 <vTaskStartScheduler+0xbc>)
 8003b4e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003b50:	4b1f      	ldr	r3, [pc, #124]	; (8003bd0 <vTaskStartScheduler+0xbc>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d002      	beq.n	8003b5e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	617b      	str	r3, [r7, #20]
 8003b5c:	e001      	b.n	8003b62 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d11b      	bne.n	8003ba0 <vTaskStartScheduler+0x8c>
	__asm volatile
 8003b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b6c:	f383 8811 	msr	BASEPRI, r3
 8003b70:	f3bf 8f6f 	isb	sy
 8003b74:	f3bf 8f4f 	dsb	sy
 8003b78:	613b      	str	r3, [r7, #16]
}
 8003b7a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003b7c:	4b15      	ldr	r3, [pc, #84]	; (8003bd4 <vTaskStartScheduler+0xc0>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	334c      	adds	r3, #76	; 0x4c
 8003b82:	4a15      	ldr	r2, [pc, #84]	; (8003bd8 <vTaskStartScheduler+0xc4>)
 8003b84:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003b86:	4b15      	ldr	r3, [pc, #84]	; (8003bdc <vTaskStartScheduler+0xc8>)
 8003b88:	f04f 32ff 	mov.w	r2, #4294967295
 8003b8c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003b8e:	4b14      	ldr	r3, [pc, #80]	; (8003be0 <vTaskStartScheduler+0xcc>)
 8003b90:	2201      	movs	r2, #1
 8003b92:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003b94:	4b13      	ldr	r3, [pc, #76]	; (8003be4 <vTaskStartScheduler+0xd0>)
 8003b96:	2200      	movs	r2, #0
 8003b98:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003b9a:	f000 fbb1 	bl	8004300 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003b9e:	e00e      	b.n	8003bbe <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ba6:	d10a      	bne.n	8003bbe <vTaskStartScheduler+0xaa>
	__asm volatile
 8003ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bac:	f383 8811 	msr	BASEPRI, r3
 8003bb0:	f3bf 8f6f 	isb	sy
 8003bb4:	f3bf 8f4f 	dsb	sy
 8003bb8:	60fb      	str	r3, [r7, #12]
}
 8003bba:	bf00      	nop
 8003bbc:	e7fe      	b.n	8003bbc <vTaskStartScheduler+0xa8>
}
 8003bbe:	bf00      	nop
 8003bc0:	3718      	adds	r7, #24
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	080054dc 	.word	0x080054dc
 8003bcc:	08003f71 	.word	0x08003f71
 8003bd0:	2000058c 	.word	0x2000058c
 8003bd4:	20000468 	.word	0x20000468
 8003bd8:	200000d0 	.word	0x200000d0
 8003bdc:	20000588 	.word	0x20000588
 8003be0:	20000574 	.word	0x20000574
 8003be4:	2000056c 	.word	0x2000056c

08003be8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003be8:	b480      	push	{r7}
 8003bea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003bec:	4b04      	ldr	r3, [pc, #16]	; (8003c00 <vTaskSuspendAll+0x18>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	3301      	adds	r3, #1
 8003bf2:	4a03      	ldr	r2, [pc, #12]	; (8003c00 <vTaskSuspendAll+0x18>)
 8003bf4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003bf6:	bf00      	nop
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr
 8003c00:	20000590 	.word	0x20000590

08003c04 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003c12:	4b41      	ldr	r3, [pc, #260]	; (8003d18 <xTaskResumeAll+0x114>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d10a      	bne.n	8003c30 <xTaskResumeAll+0x2c>
	__asm volatile
 8003c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c1e:	f383 8811 	msr	BASEPRI, r3
 8003c22:	f3bf 8f6f 	isb	sy
 8003c26:	f3bf 8f4f 	dsb	sy
 8003c2a:	603b      	str	r3, [r7, #0]
}
 8003c2c:	bf00      	nop
 8003c2e:	e7fe      	b.n	8003c2e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003c30:	f000 fc08 	bl	8004444 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003c34:	4b38      	ldr	r3, [pc, #224]	; (8003d18 <xTaskResumeAll+0x114>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	3b01      	subs	r3, #1
 8003c3a:	4a37      	ldr	r2, [pc, #220]	; (8003d18 <xTaskResumeAll+0x114>)
 8003c3c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c3e:	4b36      	ldr	r3, [pc, #216]	; (8003d18 <xTaskResumeAll+0x114>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d161      	bne.n	8003d0a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003c46:	4b35      	ldr	r3, [pc, #212]	; (8003d1c <xTaskResumeAll+0x118>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d05d      	beq.n	8003d0a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c4e:	e02e      	b.n	8003cae <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c50:	4b33      	ldr	r3, [pc, #204]	; (8003d20 <xTaskResumeAll+0x11c>)
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	3318      	adds	r3, #24
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f7ff fd50 	bl	8003702 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	3304      	adds	r3, #4
 8003c66:	4618      	mov	r0, r3
 8003c68:	f7ff fd4b 	bl	8003702 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c70:	2201      	movs	r2, #1
 8003c72:	409a      	lsls	r2, r3
 8003c74:	4b2b      	ldr	r3, [pc, #172]	; (8003d24 <xTaskResumeAll+0x120>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	4a2a      	ldr	r2, [pc, #168]	; (8003d24 <xTaskResumeAll+0x120>)
 8003c7c:	6013      	str	r3, [r2, #0]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c82:	4613      	mov	r3, r2
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	4413      	add	r3, r2
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	4a27      	ldr	r2, [pc, #156]	; (8003d28 <xTaskResumeAll+0x124>)
 8003c8c:	441a      	add	r2, r3
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	3304      	adds	r3, #4
 8003c92:	4619      	mov	r1, r3
 8003c94:	4610      	mov	r0, r2
 8003c96:	f7ff fcd7 	bl	8003648 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c9e:	4b23      	ldr	r3, [pc, #140]	; (8003d2c <xTaskResumeAll+0x128>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d302      	bcc.n	8003cae <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003ca8:	4b21      	ldr	r3, [pc, #132]	; (8003d30 <xTaskResumeAll+0x12c>)
 8003caa:	2201      	movs	r2, #1
 8003cac:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003cae:	4b1c      	ldr	r3, [pc, #112]	; (8003d20 <xTaskResumeAll+0x11c>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d1cc      	bne.n	8003c50 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d001      	beq.n	8003cc0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003cbc:	f000 fa12 	bl	80040e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003cc0:	4b1c      	ldr	r3, [pc, #112]	; (8003d34 <xTaskResumeAll+0x130>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d010      	beq.n	8003cee <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003ccc:	f000 f836 	bl	8003d3c <xTaskIncrementTick>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d002      	beq.n	8003cdc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003cd6:	4b16      	ldr	r3, [pc, #88]	; (8003d30 <xTaskResumeAll+0x12c>)
 8003cd8:	2201      	movs	r2, #1
 8003cda:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	3b01      	subs	r3, #1
 8003ce0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d1f1      	bne.n	8003ccc <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8003ce8:	4b12      	ldr	r3, [pc, #72]	; (8003d34 <xTaskResumeAll+0x130>)
 8003cea:	2200      	movs	r2, #0
 8003cec:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003cee:	4b10      	ldr	r3, [pc, #64]	; (8003d30 <xTaskResumeAll+0x12c>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d009      	beq.n	8003d0a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003cfa:	4b0f      	ldr	r3, [pc, #60]	; (8003d38 <xTaskResumeAll+0x134>)
 8003cfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d00:	601a      	str	r2, [r3, #0]
 8003d02:	f3bf 8f4f 	dsb	sy
 8003d06:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003d0a:	f000 fbcb 	bl	80044a4 <vPortExitCritical>

	return xAlreadyYielded;
 8003d0e:	68bb      	ldr	r3, [r7, #8]
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3710      	adds	r7, #16
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	20000590 	.word	0x20000590
 8003d1c:	20000568 	.word	0x20000568
 8003d20:	20000528 	.word	0x20000528
 8003d24:	20000570 	.word	0x20000570
 8003d28:	2000046c 	.word	0x2000046c
 8003d2c:	20000468 	.word	0x20000468
 8003d30:	2000057c 	.word	0x2000057c
 8003d34:	20000578 	.word	0x20000578
 8003d38:	e000ed04 	.word	0xe000ed04

08003d3c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b086      	sub	sp, #24
 8003d40:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003d42:	2300      	movs	r3, #0
 8003d44:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d46:	4b4e      	ldr	r3, [pc, #312]	; (8003e80 <xTaskIncrementTick+0x144>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	f040 808e 	bne.w	8003e6c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003d50:	4b4c      	ldr	r3, [pc, #304]	; (8003e84 <xTaskIncrementTick+0x148>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	3301      	adds	r3, #1
 8003d56:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003d58:	4a4a      	ldr	r2, [pc, #296]	; (8003e84 <xTaskIncrementTick+0x148>)
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d120      	bne.n	8003da6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003d64:	4b48      	ldr	r3, [pc, #288]	; (8003e88 <xTaskIncrementTick+0x14c>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00a      	beq.n	8003d84 <xTaskIncrementTick+0x48>
	__asm volatile
 8003d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d72:	f383 8811 	msr	BASEPRI, r3
 8003d76:	f3bf 8f6f 	isb	sy
 8003d7a:	f3bf 8f4f 	dsb	sy
 8003d7e:	603b      	str	r3, [r7, #0]
}
 8003d80:	bf00      	nop
 8003d82:	e7fe      	b.n	8003d82 <xTaskIncrementTick+0x46>
 8003d84:	4b40      	ldr	r3, [pc, #256]	; (8003e88 <xTaskIncrementTick+0x14c>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	60fb      	str	r3, [r7, #12]
 8003d8a:	4b40      	ldr	r3, [pc, #256]	; (8003e8c <xTaskIncrementTick+0x150>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a3e      	ldr	r2, [pc, #248]	; (8003e88 <xTaskIncrementTick+0x14c>)
 8003d90:	6013      	str	r3, [r2, #0]
 8003d92:	4a3e      	ldr	r2, [pc, #248]	; (8003e8c <xTaskIncrementTick+0x150>)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6013      	str	r3, [r2, #0]
 8003d98:	4b3d      	ldr	r3, [pc, #244]	; (8003e90 <xTaskIncrementTick+0x154>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	3301      	adds	r3, #1
 8003d9e:	4a3c      	ldr	r2, [pc, #240]	; (8003e90 <xTaskIncrementTick+0x154>)
 8003da0:	6013      	str	r3, [r2, #0]
 8003da2:	f000 f99f 	bl	80040e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003da6:	4b3b      	ldr	r3, [pc, #236]	; (8003e94 <xTaskIncrementTick+0x158>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	693a      	ldr	r2, [r7, #16]
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d348      	bcc.n	8003e42 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003db0:	4b35      	ldr	r3, [pc, #212]	; (8003e88 <xTaskIncrementTick+0x14c>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d104      	bne.n	8003dc4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003dba:	4b36      	ldr	r3, [pc, #216]	; (8003e94 <xTaskIncrementTick+0x158>)
 8003dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8003dc0:	601a      	str	r2, [r3, #0]
					break;
 8003dc2:	e03e      	b.n	8003e42 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003dc4:	4b30      	ldr	r3, [pc, #192]	; (8003e88 <xTaskIncrementTick+0x14c>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003dd4:	693a      	ldr	r2, [r7, #16]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d203      	bcs.n	8003de4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003ddc:	4a2d      	ldr	r2, [pc, #180]	; (8003e94 <xTaskIncrementTick+0x158>)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003de2:	e02e      	b.n	8003e42 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	3304      	adds	r3, #4
 8003de8:	4618      	mov	r0, r3
 8003dea:	f7ff fc8a 	bl	8003702 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d004      	beq.n	8003e00 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	3318      	adds	r3, #24
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f7ff fc81 	bl	8003702 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e04:	2201      	movs	r2, #1
 8003e06:	409a      	lsls	r2, r3
 8003e08:	4b23      	ldr	r3, [pc, #140]	; (8003e98 <xTaskIncrementTick+0x15c>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	4a22      	ldr	r2, [pc, #136]	; (8003e98 <xTaskIncrementTick+0x15c>)
 8003e10:	6013      	str	r3, [r2, #0]
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e16:	4613      	mov	r3, r2
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	4413      	add	r3, r2
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	4a1f      	ldr	r2, [pc, #124]	; (8003e9c <xTaskIncrementTick+0x160>)
 8003e20:	441a      	add	r2, r3
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	3304      	adds	r3, #4
 8003e26:	4619      	mov	r1, r3
 8003e28:	4610      	mov	r0, r2
 8003e2a:	f7ff fc0d 	bl	8003648 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e32:	4b1b      	ldr	r3, [pc, #108]	; (8003ea0 <xTaskIncrementTick+0x164>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d3b9      	bcc.n	8003db0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e40:	e7b6      	b.n	8003db0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003e42:	4b17      	ldr	r3, [pc, #92]	; (8003ea0 <xTaskIncrementTick+0x164>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e48:	4914      	ldr	r1, [pc, #80]	; (8003e9c <xTaskIncrementTick+0x160>)
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	4413      	add	r3, r2
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	440b      	add	r3, r1
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d901      	bls.n	8003e5e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003e5e:	4b11      	ldr	r3, [pc, #68]	; (8003ea4 <xTaskIncrementTick+0x168>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d007      	beq.n	8003e76 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003e66:	2301      	movs	r3, #1
 8003e68:	617b      	str	r3, [r7, #20]
 8003e6a:	e004      	b.n	8003e76 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003e6c:	4b0e      	ldr	r3, [pc, #56]	; (8003ea8 <xTaskIncrementTick+0x16c>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	3301      	adds	r3, #1
 8003e72:	4a0d      	ldr	r2, [pc, #52]	; (8003ea8 <xTaskIncrementTick+0x16c>)
 8003e74:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003e76:	697b      	ldr	r3, [r7, #20]
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3718      	adds	r7, #24
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	20000590 	.word	0x20000590
 8003e84:	2000056c 	.word	0x2000056c
 8003e88:	20000520 	.word	0x20000520
 8003e8c:	20000524 	.word	0x20000524
 8003e90:	20000580 	.word	0x20000580
 8003e94:	20000588 	.word	0x20000588
 8003e98:	20000570 	.word	0x20000570
 8003e9c:	2000046c 	.word	0x2000046c
 8003ea0:	20000468 	.word	0x20000468
 8003ea4:	2000057c 	.word	0x2000057c
 8003ea8:	20000578 	.word	0x20000578

08003eac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003eac:	b480      	push	{r7}
 8003eae:	b087      	sub	sp, #28
 8003eb0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003eb2:	4b29      	ldr	r3, [pc, #164]	; (8003f58 <vTaskSwitchContext+0xac>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d003      	beq.n	8003ec2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003eba:	4b28      	ldr	r3, [pc, #160]	; (8003f5c <vTaskSwitchContext+0xb0>)
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003ec0:	e044      	b.n	8003f4c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8003ec2:	4b26      	ldr	r3, [pc, #152]	; (8003f5c <vTaskSwitchContext+0xb0>)
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ec8:	4b25      	ldr	r3, [pc, #148]	; (8003f60 <vTaskSwitchContext+0xb4>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	fab3 f383 	clz	r3, r3
 8003ed4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003ed6:	7afb      	ldrb	r3, [r7, #11]
 8003ed8:	f1c3 031f 	rsb	r3, r3, #31
 8003edc:	617b      	str	r3, [r7, #20]
 8003ede:	4921      	ldr	r1, [pc, #132]	; (8003f64 <vTaskSwitchContext+0xb8>)
 8003ee0:	697a      	ldr	r2, [r7, #20]
 8003ee2:	4613      	mov	r3, r2
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	4413      	add	r3, r2
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	440b      	add	r3, r1
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d10a      	bne.n	8003f08 <vTaskSwitchContext+0x5c>
	__asm volatile
 8003ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef6:	f383 8811 	msr	BASEPRI, r3
 8003efa:	f3bf 8f6f 	isb	sy
 8003efe:	f3bf 8f4f 	dsb	sy
 8003f02:	607b      	str	r3, [r7, #4]
}
 8003f04:	bf00      	nop
 8003f06:	e7fe      	b.n	8003f06 <vTaskSwitchContext+0x5a>
 8003f08:	697a      	ldr	r2, [r7, #20]
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	4413      	add	r3, r2
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	4a14      	ldr	r2, [pc, #80]	; (8003f64 <vTaskSwitchContext+0xb8>)
 8003f14:	4413      	add	r3, r2
 8003f16:	613b      	str	r3, [r7, #16]
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	685a      	ldr	r2, [r3, #4]
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	605a      	str	r2, [r3, #4]
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	685a      	ldr	r2, [r3, #4]
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	3308      	adds	r3, #8
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d104      	bne.n	8003f38 <vTaskSwitchContext+0x8c>
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	685a      	ldr	r2, [r3, #4]
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	605a      	str	r2, [r3, #4]
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	4a0a      	ldr	r2, [pc, #40]	; (8003f68 <vTaskSwitchContext+0xbc>)
 8003f40:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003f42:	4b09      	ldr	r3, [pc, #36]	; (8003f68 <vTaskSwitchContext+0xbc>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	334c      	adds	r3, #76	; 0x4c
 8003f48:	4a08      	ldr	r2, [pc, #32]	; (8003f6c <vTaskSwitchContext+0xc0>)
 8003f4a:	6013      	str	r3, [r2, #0]
}
 8003f4c:	bf00      	nop
 8003f4e:	371c      	adds	r7, #28
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr
 8003f58:	20000590 	.word	0x20000590
 8003f5c:	2000057c 	.word	0x2000057c
 8003f60:	20000570 	.word	0x20000570
 8003f64:	2000046c 	.word	0x2000046c
 8003f68:	20000468 	.word	0x20000468
 8003f6c:	200000d0 	.word	0x200000d0

08003f70 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b082      	sub	sp, #8
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003f78:	f000 f852 	bl	8004020 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003f7c:	4b06      	ldr	r3, [pc, #24]	; (8003f98 <prvIdleTask+0x28>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d9f9      	bls.n	8003f78 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003f84:	4b05      	ldr	r3, [pc, #20]	; (8003f9c <prvIdleTask+0x2c>)
 8003f86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f8a:	601a      	str	r2, [r3, #0]
 8003f8c:	f3bf 8f4f 	dsb	sy
 8003f90:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003f94:	e7f0      	b.n	8003f78 <prvIdleTask+0x8>
 8003f96:	bf00      	nop
 8003f98:	2000046c 	.word	0x2000046c
 8003f9c:	e000ed04 	.word	0xe000ed04

08003fa0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	607b      	str	r3, [r7, #4]
 8003faa:	e00c      	b.n	8003fc6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	4613      	mov	r3, r2
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	4413      	add	r3, r2
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	4a12      	ldr	r2, [pc, #72]	; (8004000 <prvInitialiseTaskLists+0x60>)
 8003fb8:	4413      	add	r3, r2
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f7ff fb17 	bl	80035ee <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	607b      	str	r3, [r7, #4]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2b06      	cmp	r3, #6
 8003fca:	d9ef      	bls.n	8003fac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003fcc:	480d      	ldr	r0, [pc, #52]	; (8004004 <prvInitialiseTaskLists+0x64>)
 8003fce:	f7ff fb0e 	bl	80035ee <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003fd2:	480d      	ldr	r0, [pc, #52]	; (8004008 <prvInitialiseTaskLists+0x68>)
 8003fd4:	f7ff fb0b 	bl	80035ee <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003fd8:	480c      	ldr	r0, [pc, #48]	; (800400c <prvInitialiseTaskLists+0x6c>)
 8003fda:	f7ff fb08 	bl	80035ee <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003fde:	480c      	ldr	r0, [pc, #48]	; (8004010 <prvInitialiseTaskLists+0x70>)
 8003fe0:	f7ff fb05 	bl	80035ee <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003fe4:	480b      	ldr	r0, [pc, #44]	; (8004014 <prvInitialiseTaskLists+0x74>)
 8003fe6:	f7ff fb02 	bl	80035ee <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003fea:	4b0b      	ldr	r3, [pc, #44]	; (8004018 <prvInitialiseTaskLists+0x78>)
 8003fec:	4a05      	ldr	r2, [pc, #20]	; (8004004 <prvInitialiseTaskLists+0x64>)
 8003fee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003ff0:	4b0a      	ldr	r3, [pc, #40]	; (800401c <prvInitialiseTaskLists+0x7c>)
 8003ff2:	4a05      	ldr	r2, [pc, #20]	; (8004008 <prvInitialiseTaskLists+0x68>)
 8003ff4:	601a      	str	r2, [r3, #0]
}
 8003ff6:	bf00      	nop
 8003ff8:	3708      	adds	r7, #8
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	2000046c 	.word	0x2000046c
 8004004:	200004f8 	.word	0x200004f8
 8004008:	2000050c 	.word	0x2000050c
 800400c:	20000528 	.word	0x20000528
 8004010:	2000053c 	.word	0x2000053c
 8004014:	20000554 	.word	0x20000554
 8004018:	20000520 	.word	0x20000520
 800401c:	20000524 	.word	0x20000524

08004020 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b082      	sub	sp, #8
 8004024:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004026:	e019      	b.n	800405c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004028:	f000 fa0c 	bl	8004444 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800402c:	4b10      	ldr	r3, [pc, #64]	; (8004070 <prvCheckTasksWaitingTermination+0x50>)
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	3304      	adds	r3, #4
 8004038:	4618      	mov	r0, r3
 800403a:	f7ff fb62 	bl	8003702 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800403e:	4b0d      	ldr	r3, [pc, #52]	; (8004074 <prvCheckTasksWaitingTermination+0x54>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	3b01      	subs	r3, #1
 8004044:	4a0b      	ldr	r2, [pc, #44]	; (8004074 <prvCheckTasksWaitingTermination+0x54>)
 8004046:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004048:	4b0b      	ldr	r3, [pc, #44]	; (8004078 <prvCheckTasksWaitingTermination+0x58>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	3b01      	subs	r3, #1
 800404e:	4a0a      	ldr	r2, [pc, #40]	; (8004078 <prvCheckTasksWaitingTermination+0x58>)
 8004050:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004052:	f000 fa27 	bl	80044a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f000 f810 	bl	800407c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800405c:	4b06      	ldr	r3, [pc, #24]	; (8004078 <prvCheckTasksWaitingTermination+0x58>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d1e1      	bne.n	8004028 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004064:	bf00      	nop
 8004066:	bf00      	nop
 8004068:	3708      	adds	r7, #8
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	2000053c 	.word	0x2000053c
 8004074:	20000568 	.word	0x20000568
 8004078:	20000550 	.word	0x20000550

0800407c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800407c:	b580      	push	{r7, lr}
 800407e:	b084      	sub	sp, #16
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	334c      	adds	r3, #76	; 0x4c
 8004088:	4618      	mov	r0, r3
 800408a:	f000 fccf 	bl	8004a2c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8004094:	2b00      	cmp	r3, #0
 8004096:	d108      	bne.n	80040aa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800409c:	4618      	mov	r0, r3
 800409e:	f000 fb7f 	bl	80047a0 <vPortFree>
				vPortFree( pxTCB );
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 fb7c 	bl	80047a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80040a8:	e018      	b.n	80040dc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d103      	bne.n	80040bc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f000 fb73 	bl	80047a0 <vPortFree>
	}
 80040ba:	e00f      	b.n	80040dc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d00a      	beq.n	80040dc <prvDeleteTCB+0x60>
	__asm volatile
 80040c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ca:	f383 8811 	msr	BASEPRI, r3
 80040ce:	f3bf 8f6f 	isb	sy
 80040d2:	f3bf 8f4f 	dsb	sy
 80040d6:	60fb      	str	r3, [r7, #12]
}
 80040d8:	bf00      	nop
 80040da:	e7fe      	b.n	80040da <prvDeleteTCB+0x5e>
	}
 80040dc:	bf00      	nop
 80040de:	3710      	adds	r7, #16
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80040ea:	4b0c      	ldr	r3, [pc, #48]	; (800411c <prvResetNextTaskUnblockTime+0x38>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d104      	bne.n	80040fe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80040f4:	4b0a      	ldr	r3, [pc, #40]	; (8004120 <prvResetNextTaskUnblockTime+0x3c>)
 80040f6:	f04f 32ff 	mov.w	r2, #4294967295
 80040fa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80040fc:	e008      	b.n	8004110 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040fe:	4b07      	ldr	r3, [pc, #28]	; (800411c <prvResetNextTaskUnblockTime+0x38>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	4a04      	ldr	r2, [pc, #16]	; (8004120 <prvResetNextTaskUnblockTime+0x3c>)
 800410e:	6013      	str	r3, [r2, #0]
}
 8004110:	bf00      	nop
 8004112:	370c      	adds	r7, #12
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr
 800411c:	20000520 	.word	0x20000520
 8004120:	20000588 	.word	0x20000588

08004124 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800412e:	4b29      	ldr	r3, [pc, #164]	; (80041d4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004134:	4b28      	ldr	r3, [pc, #160]	; (80041d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	3304      	adds	r3, #4
 800413a:	4618      	mov	r0, r3
 800413c:	f7ff fae1 	bl	8003702 <uxListRemove>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d10b      	bne.n	800415e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004146:	4b24      	ldr	r3, [pc, #144]	; (80041d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800414c:	2201      	movs	r2, #1
 800414e:	fa02 f303 	lsl.w	r3, r2, r3
 8004152:	43da      	mvns	r2, r3
 8004154:	4b21      	ldr	r3, [pc, #132]	; (80041dc <prvAddCurrentTaskToDelayedList+0xb8>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4013      	ands	r3, r2
 800415a:	4a20      	ldr	r2, [pc, #128]	; (80041dc <prvAddCurrentTaskToDelayedList+0xb8>)
 800415c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004164:	d10a      	bne.n	800417c <prvAddCurrentTaskToDelayedList+0x58>
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d007      	beq.n	800417c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800416c:	4b1a      	ldr	r3, [pc, #104]	; (80041d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	3304      	adds	r3, #4
 8004172:	4619      	mov	r1, r3
 8004174:	481a      	ldr	r0, [pc, #104]	; (80041e0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004176:	f7ff fa67 	bl	8003648 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800417a:	e026      	b.n	80041ca <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800417c:	68fa      	ldr	r2, [r7, #12]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4413      	add	r3, r2
 8004182:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004184:	4b14      	ldr	r3, [pc, #80]	; (80041d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	68ba      	ldr	r2, [r7, #8]
 800418a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800418c:	68ba      	ldr	r2, [r7, #8]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	429a      	cmp	r2, r3
 8004192:	d209      	bcs.n	80041a8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004194:	4b13      	ldr	r3, [pc, #76]	; (80041e4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	4b0f      	ldr	r3, [pc, #60]	; (80041d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	3304      	adds	r3, #4
 800419e:	4619      	mov	r1, r3
 80041a0:	4610      	mov	r0, r2
 80041a2:	f7ff fa75 	bl	8003690 <vListInsert>
}
 80041a6:	e010      	b.n	80041ca <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80041a8:	4b0f      	ldr	r3, [pc, #60]	; (80041e8 <prvAddCurrentTaskToDelayedList+0xc4>)
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	4b0a      	ldr	r3, [pc, #40]	; (80041d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	3304      	adds	r3, #4
 80041b2:	4619      	mov	r1, r3
 80041b4:	4610      	mov	r0, r2
 80041b6:	f7ff fa6b 	bl	8003690 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80041ba:	4b0c      	ldr	r3, [pc, #48]	; (80041ec <prvAddCurrentTaskToDelayedList+0xc8>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	68ba      	ldr	r2, [r7, #8]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d202      	bcs.n	80041ca <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80041c4:	4a09      	ldr	r2, [pc, #36]	; (80041ec <prvAddCurrentTaskToDelayedList+0xc8>)
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	6013      	str	r3, [r2, #0]
}
 80041ca:	bf00      	nop
 80041cc:	3710      	adds	r7, #16
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	2000056c 	.word	0x2000056c
 80041d8:	20000468 	.word	0x20000468
 80041dc:	20000570 	.word	0x20000570
 80041e0:	20000554 	.word	0x20000554
 80041e4:	20000524 	.word	0x20000524
 80041e8:	20000520 	.word	0x20000520
 80041ec:	20000588 	.word	0x20000588

080041f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80041f0:	b480      	push	{r7}
 80041f2:	b085      	sub	sp, #20
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	60b9      	str	r1, [r7, #8]
 80041fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	3b04      	subs	r3, #4
 8004200:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004208:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	3b04      	subs	r3, #4
 800420e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	f023 0201 	bic.w	r2, r3, #1
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	3b04      	subs	r3, #4
 800421e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004220:	4a0c      	ldr	r2, [pc, #48]	; (8004254 <pxPortInitialiseStack+0x64>)
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	3b14      	subs	r3, #20
 800422a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800422c:	687a      	ldr	r2, [r7, #4]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	3b04      	subs	r3, #4
 8004236:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f06f 0202 	mvn.w	r2, #2
 800423e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	3b20      	subs	r3, #32
 8004244:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004246:	68fb      	ldr	r3, [r7, #12]
}
 8004248:	4618      	mov	r0, r3
 800424a:	3714      	adds	r7, #20
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr
 8004254:	08004259 	.word	0x08004259

08004258 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004258:	b480      	push	{r7}
 800425a:	b085      	sub	sp, #20
 800425c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800425e:	2300      	movs	r3, #0
 8004260:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004262:	4b12      	ldr	r3, [pc, #72]	; (80042ac <prvTaskExitError+0x54>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800426a:	d00a      	beq.n	8004282 <prvTaskExitError+0x2a>
	__asm volatile
 800426c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004270:	f383 8811 	msr	BASEPRI, r3
 8004274:	f3bf 8f6f 	isb	sy
 8004278:	f3bf 8f4f 	dsb	sy
 800427c:	60fb      	str	r3, [r7, #12]
}
 800427e:	bf00      	nop
 8004280:	e7fe      	b.n	8004280 <prvTaskExitError+0x28>
	__asm volatile
 8004282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004286:	f383 8811 	msr	BASEPRI, r3
 800428a:	f3bf 8f6f 	isb	sy
 800428e:	f3bf 8f4f 	dsb	sy
 8004292:	60bb      	str	r3, [r7, #8]
}
 8004294:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004296:	bf00      	nop
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d0fc      	beq.n	8004298 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800429e:	bf00      	nop
 80042a0:	bf00      	nop
 80042a2:	3714      	adds	r7, #20
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr
 80042ac:	20000080 	.word	0x20000080

080042b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80042b0:	4b07      	ldr	r3, [pc, #28]	; (80042d0 <pxCurrentTCBConst2>)
 80042b2:	6819      	ldr	r1, [r3, #0]
 80042b4:	6808      	ldr	r0, [r1, #0]
 80042b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042ba:	f380 8809 	msr	PSP, r0
 80042be:	f3bf 8f6f 	isb	sy
 80042c2:	f04f 0000 	mov.w	r0, #0
 80042c6:	f380 8811 	msr	BASEPRI, r0
 80042ca:	4770      	bx	lr
 80042cc:	f3af 8000 	nop.w

080042d0 <pxCurrentTCBConst2>:
 80042d0:	20000468 	.word	0x20000468
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80042d4:	bf00      	nop
 80042d6:	bf00      	nop

080042d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80042d8:	4808      	ldr	r0, [pc, #32]	; (80042fc <prvPortStartFirstTask+0x24>)
 80042da:	6800      	ldr	r0, [r0, #0]
 80042dc:	6800      	ldr	r0, [r0, #0]
 80042de:	f380 8808 	msr	MSP, r0
 80042e2:	f04f 0000 	mov.w	r0, #0
 80042e6:	f380 8814 	msr	CONTROL, r0
 80042ea:	b662      	cpsie	i
 80042ec:	b661      	cpsie	f
 80042ee:	f3bf 8f4f 	dsb	sy
 80042f2:	f3bf 8f6f 	isb	sy
 80042f6:	df00      	svc	0
 80042f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80042fa:	bf00      	nop
 80042fc:	e000ed08 	.word	0xe000ed08

08004300 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b086      	sub	sp, #24
 8004304:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004306:	4b46      	ldr	r3, [pc, #280]	; (8004420 <xPortStartScheduler+0x120>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a46      	ldr	r2, [pc, #280]	; (8004424 <xPortStartScheduler+0x124>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d10a      	bne.n	8004326 <xPortStartScheduler+0x26>
	__asm volatile
 8004310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004314:	f383 8811 	msr	BASEPRI, r3
 8004318:	f3bf 8f6f 	isb	sy
 800431c:	f3bf 8f4f 	dsb	sy
 8004320:	613b      	str	r3, [r7, #16]
}
 8004322:	bf00      	nop
 8004324:	e7fe      	b.n	8004324 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004326:	4b3e      	ldr	r3, [pc, #248]	; (8004420 <xPortStartScheduler+0x120>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a3f      	ldr	r2, [pc, #252]	; (8004428 <xPortStartScheduler+0x128>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d10a      	bne.n	8004346 <xPortStartScheduler+0x46>
	__asm volatile
 8004330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004334:	f383 8811 	msr	BASEPRI, r3
 8004338:	f3bf 8f6f 	isb	sy
 800433c:	f3bf 8f4f 	dsb	sy
 8004340:	60fb      	str	r3, [r7, #12]
}
 8004342:	bf00      	nop
 8004344:	e7fe      	b.n	8004344 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004346:	4b39      	ldr	r3, [pc, #228]	; (800442c <xPortStartScheduler+0x12c>)
 8004348:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	b2db      	uxtb	r3, r3
 8004350:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	22ff      	movs	r2, #255	; 0xff
 8004356:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	b2db      	uxtb	r3, r3
 800435e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004360:	78fb      	ldrb	r3, [r7, #3]
 8004362:	b2db      	uxtb	r3, r3
 8004364:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004368:	b2da      	uxtb	r2, r3
 800436a:	4b31      	ldr	r3, [pc, #196]	; (8004430 <xPortStartScheduler+0x130>)
 800436c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800436e:	4b31      	ldr	r3, [pc, #196]	; (8004434 <xPortStartScheduler+0x134>)
 8004370:	2207      	movs	r2, #7
 8004372:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004374:	e009      	b.n	800438a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004376:	4b2f      	ldr	r3, [pc, #188]	; (8004434 <xPortStartScheduler+0x134>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	3b01      	subs	r3, #1
 800437c:	4a2d      	ldr	r2, [pc, #180]	; (8004434 <xPortStartScheduler+0x134>)
 800437e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004380:	78fb      	ldrb	r3, [r7, #3]
 8004382:	b2db      	uxtb	r3, r3
 8004384:	005b      	lsls	r3, r3, #1
 8004386:	b2db      	uxtb	r3, r3
 8004388:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800438a:	78fb      	ldrb	r3, [r7, #3]
 800438c:	b2db      	uxtb	r3, r3
 800438e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004392:	2b80      	cmp	r3, #128	; 0x80
 8004394:	d0ef      	beq.n	8004376 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004396:	4b27      	ldr	r3, [pc, #156]	; (8004434 <xPortStartScheduler+0x134>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f1c3 0307 	rsb	r3, r3, #7
 800439e:	2b04      	cmp	r3, #4
 80043a0:	d00a      	beq.n	80043b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80043a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a6:	f383 8811 	msr	BASEPRI, r3
 80043aa:	f3bf 8f6f 	isb	sy
 80043ae:	f3bf 8f4f 	dsb	sy
 80043b2:	60bb      	str	r3, [r7, #8]
}
 80043b4:	bf00      	nop
 80043b6:	e7fe      	b.n	80043b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80043b8:	4b1e      	ldr	r3, [pc, #120]	; (8004434 <xPortStartScheduler+0x134>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	021b      	lsls	r3, r3, #8
 80043be:	4a1d      	ldr	r2, [pc, #116]	; (8004434 <xPortStartScheduler+0x134>)
 80043c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80043c2:	4b1c      	ldr	r3, [pc, #112]	; (8004434 <xPortStartScheduler+0x134>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80043ca:	4a1a      	ldr	r2, [pc, #104]	; (8004434 <xPortStartScheduler+0x134>)
 80043cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	b2da      	uxtb	r2, r3
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80043d6:	4b18      	ldr	r3, [pc, #96]	; (8004438 <xPortStartScheduler+0x138>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a17      	ldr	r2, [pc, #92]	; (8004438 <xPortStartScheduler+0x138>)
 80043dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80043e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80043e2:	4b15      	ldr	r3, [pc, #84]	; (8004438 <xPortStartScheduler+0x138>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a14      	ldr	r2, [pc, #80]	; (8004438 <xPortStartScheduler+0x138>)
 80043e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80043ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80043ee:	f000 f8dd 	bl	80045ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80043f2:	4b12      	ldr	r3, [pc, #72]	; (800443c <xPortStartScheduler+0x13c>)
 80043f4:	2200      	movs	r2, #0
 80043f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80043f8:	f000 f8fc 	bl	80045f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80043fc:	4b10      	ldr	r3, [pc, #64]	; (8004440 <xPortStartScheduler+0x140>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a0f      	ldr	r2, [pc, #60]	; (8004440 <xPortStartScheduler+0x140>)
 8004402:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004406:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004408:	f7ff ff66 	bl	80042d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800440c:	f7ff fd4e 	bl	8003eac <vTaskSwitchContext>
	prvTaskExitError();
 8004410:	f7ff ff22 	bl	8004258 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004414:	2300      	movs	r3, #0
}
 8004416:	4618      	mov	r0, r3
 8004418:	3718      	adds	r7, #24
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	e000ed00 	.word	0xe000ed00
 8004424:	410fc271 	.word	0x410fc271
 8004428:	410fc270 	.word	0x410fc270
 800442c:	e000e400 	.word	0xe000e400
 8004430:	20000594 	.word	0x20000594
 8004434:	20000598 	.word	0x20000598
 8004438:	e000ed20 	.word	0xe000ed20
 800443c:	20000080 	.word	0x20000080
 8004440:	e000ef34 	.word	0xe000ef34

08004444 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
	__asm volatile
 800444a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800444e:	f383 8811 	msr	BASEPRI, r3
 8004452:	f3bf 8f6f 	isb	sy
 8004456:	f3bf 8f4f 	dsb	sy
 800445a:	607b      	str	r3, [r7, #4]
}
 800445c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800445e:	4b0f      	ldr	r3, [pc, #60]	; (800449c <vPortEnterCritical+0x58>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	3301      	adds	r3, #1
 8004464:	4a0d      	ldr	r2, [pc, #52]	; (800449c <vPortEnterCritical+0x58>)
 8004466:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004468:	4b0c      	ldr	r3, [pc, #48]	; (800449c <vPortEnterCritical+0x58>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2b01      	cmp	r3, #1
 800446e:	d10f      	bne.n	8004490 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004470:	4b0b      	ldr	r3, [pc, #44]	; (80044a0 <vPortEnterCritical+0x5c>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	b2db      	uxtb	r3, r3
 8004476:	2b00      	cmp	r3, #0
 8004478:	d00a      	beq.n	8004490 <vPortEnterCritical+0x4c>
	__asm volatile
 800447a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800447e:	f383 8811 	msr	BASEPRI, r3
 8004482:	f3bf 8f6f 	isb	sy
 8004486:	f3bf 8f4f 	dsb	sy
 800448a:	603b      	str	r3, [r7, #0]
}
 800448c:	bf00      	nop
 800448e:	e7fe      	b.n	800448e <vPortEnterCritical+0x4a>
	}
}
 8004490:	bf00      	nop
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr
 800449c:	20000080 	.word	0x20000080
 80044a0:	e000ed04 	.word	0xe000ed04

080044a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80044aa:	4b12      	ldr	r3, [pc, #72]	; (80044f4 <vPortExitCritical+0x50>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d10a      	bne.n	80044c8 <vPortExitCritical+0x24>
	__asm volatile
 80044b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b6:	f383 8811 	msr	BASEPRI, r3
 80044ba:	f3bf 8f6f 	isb	sy
 80044be:	f3bf 8f4f 	dsb	sy
 80044c2:	607b      	str	r3, [r7, #4]
}
 80044c4:	bf00      	nop
 80044c6:	e7fe      	b.n	80044c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80044c8:	4b0a      	ldr	r3, [pc, #40]	; (80044f4 <vPortExitCritical+0x50>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	3b01      	subs	r3, #1
 80044ce:	4a09      	ldr	r2, [pc, #36]	; (80044f4 <vPortExitCritical+0x50>)
 80044d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80044d2:	4b08      	ldr	r3, [pc, #32]	; (80044f4 <vPortExitCritical+0x50>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d105      	bne.n	80044e6 <vPortExitCritical+0x42>
 80044da:	2300      	movs	r3, #0
 80044dc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80044e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80044e6:	bf00      	nop
 80044e8:	370c      	adds	r7, #12
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr
 80044f2:	bf00      	nop
 80044f4:	20000080 	.word	0x20000080
	...

08004500 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004500:	f3ef 8009 	mrs	r0, PSP
 8004504:	f3bf 8f6f 	isb	sy
 8004508:	4b15      	ldr	r3, [pc, #84]	; (8004560 <pxCurrentTCBConst>)
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	f01e 0f10 	tst.w	lr, #16
 8004510:	bf08      	it	eq
 8004512:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004516:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800451a:	6010      	str	r0, [r2, #0]
 800451c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004520:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004524:	f380 8811 	msr	BASEPRI, r0
 8004528:	f3bf 8f4f 	dsb	sy
 800452c:	f3bf 8f6f 	isb	sy
 8004530:	f7ff fcbc 	bl	8003eac <vTaskSwitchContext>
 8004534:	f04f 0000 	mov.w	r0, #0
 8004538:	f380 8811 	msr	BASEPRI, r0
 800453c:	bc09      	pop	{r0, r3}
 800453e:	6819      	ldr	r1, [r3, #0]
 8004540:	6808      	ldr	r0, [r1, #0]
 8004542:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004546:	f01e 0f10 	tst.w	lr, #16
 800454a:	bf08      	it	eq
 800454c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004550:	f380 8809 	msr	PSP, r0
 8004554:	f3bf 8f6f 	isb	sy
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	f3af 8000 	nop.w

08004560 <pxCurrentTCBConst>:
 8004560:	20000468 	.word	0x20000468
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004564:	bf00      	nop
 8004566:	bf00      	nop

08004568 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b082      	sub	sp, #8
 800456c:	af00      	add	r7, sp, #0
	__asm volatile
 800456e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004572:	f383 8811 	msr	BASEPRI, r3
 8004576:	f3bf 8f6f 	isb	sy
 800457a:	f3bf 8f4f 	dsb	sy
 800457e:	607b      	str	r3, [r7, #4]
}
 8004580:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004582:	f7ff fbdb 	bl	8003d3c <xTaskIncrementTick>
 8004586:	4603      	mov	r3, r0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d003      	beq.n	8004594 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800458c:	4b06      	ldr	r3, [pc, #24]	; (80045a8 <SysTick_Handler+0x40>)
 800458e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004592:	601a      	str	r2, [r3, #0]
 8004594:	2300      	movs	r3, #0
 8004596:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	f383 8811 	msr	BASEPRI, r3
}
 800459e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80045a0:	bf00      	nop
 80045a2:	3708      	adds	r7, #8
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	e000ed04 	.word	0xe000ed04

080045ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80045ac:	b480      	push	{r7}
 80045ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80045b0:	4b0b      	ldr	r3, [pc, #44]	; (80045e0 <vPortSetupTimerInterrupt+0x34>)
 80045b2:	2200      	movs	r2, #0
 80045b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80045b6:	4b0b      	ldr	r3, [pc, #44]	; (80045e4 <vPortSetupTimerInterrupt+0x38>)
 80045b8:	2200      	movs	r2, #0
 80045ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80045bc:	4b0a      	ldr	r3, [pc, #40]	; (80045e8 <vPortSetupTimerInterrupt+0x3c>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a0a      	ldr	r2, [pc, #40]	; (80045ec <vPortSetupTimerInterrupt+0x40>)
 80045c2:	fba2 2303 	umull	r2, r3, r2, r3
 80045c6:	099b      	lsrs	r3, r3, #6
 80045c8:	4a09      	ldr	r2, [pc, #36]	; (80045f0 <vPortSetupTimerInterrupt+0x44>)
 80045ca:	3b01      	subs	r3, #1
 80045cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80045ce:	4b04      	ldr	r3, [pc, #16]	; (80045e0 <vPortSetupTimerInterrupt+0x34>)
 80045d0:	2207      	movs	r2, #7
 80045d2:	601a      	str	r2, [r3, #0]
}
 80045d4:	bf00      	nop
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr
 80045de:	bf00      	nop
 80045e0:	e000e010 	.word	0xe000e010
 80045e4:	e000e018 	.word	0xe000e018
 80045e8:	20000074 	.word	0x20000074
 80045ec:	10624dd3 	.word	0x10624dd3
 80045f0:	e000e014 	.word	0xe000e014

080045f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80045f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004604 <vPortEnableVFP+0x10>
 80045f8:	6801      	ldr	r1, [r0, #0]
 80045fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80045fe:	6001      	str	r1, [r0, #0]
 8004600:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004602:	bf00      	nop
 8004604:	e000ed88 	.word	0xe000ed88

08004608 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b08a      	sub	sp, #40	; 0x28
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004610:	2300      	movs	r3, #0
 8004612:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004614:	f7ff fae8 	bl	8003be8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004618:	4b5b      	ldr	r3, [pc, #364]	; (8004788 <pvPortMalloc+0x180>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d101      	bne.n	8004624 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004620:	f000 f920 	bl	8004864 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004624:	4b59      	ldr	r3, [pc, #356]	; (800478c <pvPortMalloc+0x184>)
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4013      	ands	r3, r2
 800462c:	2b00      	cmp	r3, #0
 800462e:	f040 8093 	bne.w	8004758 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d01d      	beq.n	8004674 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004638:	2208      	movs	r2, #8
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4413      	add	r3, r2
 800463e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f003 0307 	and.w	r3, r3, #7
 8004646:	2b00      	cmp	r3, #0
 8004648:	d014      	beq.n	8004674 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f023 0307 	bic.w	r3, r3, #7
 8004650:	3308      	adds	r3, #8
 8004652:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f003 0307 	and.w	r3, r3, #7
 800465a:	2b00      	cmp	r3, #0
 800465c:	d00a      	beq.n	8004674 <pvPortMalloc+0x6c>
	__asm volatile
 800465e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004662:	f383 8811 	msr	BASEPRI, r3
 8004666:	f3bf 8f6f 	isb	sy
 800466a:	f3bf 8f4f 	dsb	sy
 800466e:	617b      	str	r3, [r7, #20]
}
 8004670:	bf00      	nop
 8004672:	e7fe      	b.n	8004672 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d06e      	beq.n	8004758 <pvPortMalloc+0x150>
 800467a:	4b45      	ldr	r3, [pc, #276]	; (8004790 <pvPortMalloc+0x188>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	429a      	cmp	r2, r3
 8004682:	d869      	bhi.n	8004758 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004684:	4b43      	ldr	r3, [pc, #268]	; (8004794 <pvPortMalloc+0x18c>)
 8004686:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004688:	4b42      	ldr	r3, [pc, #264]	; (8004794 <pvPortMalloc+0x18c>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800468e:	e004      	b.n	800469a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004692:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800469a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d903      	bls.n	80046ac <pvPortMalloc+0xa4>
 80046a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d1f1      	bne.n	8004690 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80046ac:	4b36      	ldr	r3, [pc, #216]	; (8004788 <pvPortMalloc+0x180>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d050      	beq.n	8004758 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80046b6:	6a3b      	ldr	r3, [r7, #32]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	2208      	movs	r2, #8
 80046bc:	4413      	add	r3, r2
 80046be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80046c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	6a3b      	ldr	r3, [r7, #32]
 80046c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80046c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ca:	685a      	ldr	r2, [r3, #4]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	1ad2      	subs	r2, r2, r3
 80046d0:	2308      	movs	r3, #8
 80046d2:	005b      	lsls	r3, r3, #1
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d91f      	bls.n	8004718 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80046d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4413      	add	r3, r2
 80046de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80046e0:	69bb      	ldr	r3, [r7, #24]
 80046e2:	f003 0307 	and.w	r3, r3, #7
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d00a      	beq.n	8004700 <pvPortMalloc+0xf8>
	__asm volatile
 80046ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ee:	f383 8811 	msr	BASEPRI, r3
 80046f2:	f3bf 8f6f 	isb	sy
 80046f6:	f3bf 8f4f 	dsb	sy
 80046fa:	613b      	str	r3, [r7, #16]
}
 80046fc:	bf00      	nop
 80046fe:	e7fe      	b.n	80046fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004702:	685a      	ldr	r2, [r3, #4]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	1ad2      	subs	r2, r2, r3
 8004708:	69bb      	ldr	r3, [r7, #24]
 800470a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800470c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004712:	69b8      	ldr	r0, [r7, #24]
 8004714:	f000 f908 	bl	8004928 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004718:	4b1d      	ldr	r3, [pc, #116]	; (8004790 <pvPortMalloc+0x188>)
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	4a1b      	ldr	r2, [pc, #108]	; (8004790 <pvPortMalloc+0x188>)
 8004724:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004726:	4b1a      	ldr	r3, [pc, #104]	; (8004790 <pvPortMalloc+0x188>)
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	4b1b      	ldr	r3, [pc, #108]	; (8004798 <pvPortMalloc+0x190>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	429a      	cmp	r2, r3
 8004730:	d203      	bcs.n	800473a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004732:	4b17      	ldr	r3, [pc, #92]	; (8004790 <pvPortMalloc+0x188>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a18      	ldr	r2, [pc, #96]	; (8004798 <pvPortMalloc+0x190>)
 8004738:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800473a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473c:	685a      	ldr	r2, [r3, #4]
 800473e:	4b13      	ldr	r3, [pc, #76]	; (800478c <pvPortMalloc+0x184>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	431a      	orrs	r2, r3
 8004744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004746:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474a:	2200      	movs	r2, #0
 800474c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800474e:	4b13      	ldr	r3, [pc, #76]	; (800479c <pvPortMalloc+0x194>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	3301      	adds	r3, #1
 8004754:	4a11      	ldr	r2, [pc, #68]	; (800479c <pvPortMalloc+0x194>)
 8004756:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004758:	f7ff fa54 	bl	8003c04 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	f003 0307 	and.w	r3, r3, #7
 8004762:	2b00      	cmp	r3, #0
 8004764:	d00a      	beq.n	800477c <pvPortMalloc+0x174>
	__asm volatile
 8004766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800476a:	f383 8811 	msr	BASEPRI, r3
 800476e:	f3bf 8f6f 	isb	sy
 8004772:	f3bf 8f4f 	dsb	sy
 8004776:	60fb      	str	r3, [r7, #12]
}
 8004778:	bf00      	nop
 800477a:	e7fe      	b.n	800477a <pvPortMalloc+0x172>
	return pvReturn;
 800477c:	69fb      	ldr	r3, [r7, #28]
}
 800477e:	4618      	mov	r0, r3
 8004780:	3728      	adds	r7, #40	; 0x28
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	200041a4 	.word	0x200041a4
 800478c:	200041b8 	.word	0x200041b8
 8004790:	200041a8 	.word	0x200041a8
 8004794:	2000419c 	.word	0x2000419c
 8004798:	200041ac 	.word	0x200041ac
 800479c:	200041b0 	.word	0x200041b0

080047a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b086      	sub	sp, #24
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d04d      	beq.n	800484e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80047b2:	2308      	movs	r3, #8
 80047b4:	425b      	negs	r3, r3
 80047b6:	697a      	ldr	r2, [r7, #20]
 80047b8:	4413      	add	r3, r2
 80047ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	685a      	ldr	r2, [r3, #4]
 80047c4:	4b24      	ldr	r3, [pc, #144]	; (8004858 <vPortFree+0xb8>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4013      	ands	r3, r2
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d10a      	bne.n	80047e4 <vPortFree+0x44>
	__asm volatile
 80047ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d2:	f383 8811 	msr	BASEPRI, r3
 80047d6:	f3bf 8f6f 	isb	sy
 80047da:	f3bf 8f4f 	dsb	sy
 80047de:	60fb      	str	r3, [r7, #12]
}
 80047e0:	bf00      	nop
 80047e2:	e7fe      	b.n	80047e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d00a      	beq.n	8004802 <vPortFree+0x62>
	__asm volatile
 80047ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f0:	f383 8811 	msr	BASEPRI, r3
 80047f4:	f3bf 8f6f 	isb	sy
 80047f8:	f3bf 8f4f 	dsb	sy
 80047fc:	60bb      	str	r3, [r7, #8]
}
 80047fe:	bf00      	nop
 8004800:	e7fe      	b.n	8004800 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	685a      	ldr	r2, [r3, #4]
 8004806:	4b14      	ldr	r3, [pc, #80]	; (8004858 <vPortFree+0xb8>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4013      	ands	r3, r2
 800480c:	2b00      	cmp	r3, #0
 800480e:	d01e      	beq.n	800484e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d11a      	bne.n	800484e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	685a      	ldr	r2, [r3, #4]
 800481c:	4b0e      	ldr	r3, [pc, #56]	; (8004858 <vPortFree+0xb8>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	43db      	mvns	r3, r3
 8004822:	401a      	ands	r2, r3
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004828:	f7ff f9de 	bl	8003be8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	685a      	ldr	r2, [r3, #4]
 8004830:	4b0a      	ldr	r3, [pc, #40]	; (800485c <vPortFree+0xbc>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4413      	add	r3, r2
 8004836:	4a09      	ldr	r2, [pc, #36]	; (800485c <vPortFree+0xbc>)
 8004838:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800483a:	6938      	ldr	r0, [r7, #16]
 800483c:	f000 f874 	bl	8004928 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004840:	4b07      	ldr	r3, [pc, #28]	; (8004860 <vPortFree+0xc0>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	3301      	adds	r3, #1
 8004846:	4a06      	ldr	r2, [pc, #24]	; (8004860 <vPortFree+0xc0>)
 8004848:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800484a:	f7ff f9db 	bl	8003c04 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800484e:	bf00      	nop
 8004850:	3718      	adds	r7, #24
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	200041b8 	.word	0x200041b8
 800485c:	200041a8 	.word	0x200041a8
 8004860:	200041b4 	.word	0x200041b4

08004864 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004864:	b480      	push	{r7}
 8004866:	b085      	sub	sp, #20
 8004868:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800486a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800486e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004870:	4b27      	ldr	r3, [pc, #156]	; (8004910 <prvHeapInit+0xac>)
 8004872:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f003 0307 	and.w	r3, r3, #7
 800487a:	2b00      	cmp	r3, #0
 800487c:	d00c      	beq.n	8004898 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	3307      	adds	r3, #7
 8004882:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f023 0307 	bic.w	r3, r3, #7
 800488a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800488c:	68ba      	ldr	r2, [r7, #8]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	4a1f      	ldr	r2, [pc, #124]	; (8004910 <prvHeapInit+0xac>)
 8004894:	4413      	add	r3, r2
 8004896:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800489c:	4a1d      	ldr	r2, [pc, #116]	; (8004914 <prvHeapInit+0xb0>)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80048a2:	4b1c      	ldr	r3, [pc, #112]	; (8004914 <prvHeapInit+0xb0>)
 80048a4:	2200      	movs	r2, #0
 80048a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	68ba      	ldr	r2, [r7, #8]
 80048ac:	4413      	add	r3, r2
 80048ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80048b0:	2208      	movs	r2, #8
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	1a9b      	subs	r3, r3, r2
 80048b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f023 0307 	bic.w	r3, r3, #7
 80048be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	4a15      	ldr	r2, [pc, #84]	; (8004918 <prvHeapInit+0xb4>)
 80048c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80048c6:	4b14      	ldr	r3, [pc, #80]	; (8004918 <prvHeapInit+0xb4>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2200      	movs	r2, #0
 80048cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80048ce:	4b12      	ldr	r3, [pc, #72]	; (8004918 <prvHeapInit+0xb4>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2200      	movs	r2, #0
 80048d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	68fa      	ldr	r2, [r7, #12]
 80048de:	1ad2      	subs	r2, r2, r3
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80048e4:	4b0c      	ldr	r3, [pc, #48]	; (8004918 <prvHeapInit+0xb4>)
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	4a0a      	ldr	r2, [pc, #40]	; (800491c <prvHeapInit+0xb8>)
 80048f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	4a09      	ldr	r2, [pc, #36]	; (8004920 <prvHeapInit+0xbc>)
 80048fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80048fc:	4b09      	ldr	r3, [pc, #36]	; (8004924 <prvHeapInit+0xc0>)
 80048fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004902:	601a      	str	r2, [r3, #0]
}
 8004904:	bf00      	nop
 8004906:	3714      	adds	r7, #20
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr
 8004910:	2000059c 	.word	0x2000059c
 8004914:	2000419c 	.word	0x2000419c
 8004918:	200041a4 	.word	0x200041a4
 800491c:	200041ac 	.word	0x200041ac
 8004920:	200041a8 	.word	0x200041a8
 8004924:	200041b8 	.word	0x200041b8

08004928 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004928:	b480      	push	{r7}
 800492a:	b085      	sub	sp, #20
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004930:	4b28      	ldr	r3, [pc, #160]	; (80049d4 <prvInsertBlockIntoFreeList+0xac>)
 8004932:	60fb      	str	r3, [r7, #12]
 8004934:	e002      	b.n	800493c <prvInsertBlockIntoFreeList+0x14>
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	60fb      	str	r3, [r7, #12]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	429a      	cmp	r2, r3
 8004944:	d8f7      	bhi.n	8004936 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	68ba      	ldr	r2, [r7, #8]
 8004950:	4413      	add	r3, r2
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	429a      	cmp	r2, r3
 8004956:	d108      	bne.n	800496a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	685a      	ldr	r2, [r3, #4]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	441a      	add	r2, r3
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	68ba      	ldr	r2, [r7, #8]
 8004974:	441a      	add	r2, r3
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	429a      	cmp	r2, r3
 800497c:	d118      	bne.n	80049b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	4b15      	ldr	r3, [pc, #84]	; (80049d8 <prvInsertBlockIntoFreeList+0xb0>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	429a      	cmp	r2, r3
 8004988:	d00d      	beq.n	80049a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	685a      	ldr	r2, [r3, #4]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	441a      	add	r2, r3
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	601a      	str	r2, [r3, #0]
 80049a4:	e008      	b.n	80049b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80049a6:	4b0c      	ldr	r3, [pc, #48]	; (80049d8 <prvInsertBlockIntoFreeList+0xb0>)
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	601a      	str	r2, [r3, #0]
 80049ae:	e003      	b.n	80049b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80049b8:	68fa      	ldr	r2, [r7, #12]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	429a      	cmp	r2, r3
 80049be:	d002      	beq.n	80049c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80049c6:	bf00      	nop
 80049c8:	3714      	adds	r7, #20
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr
 80049d2:	bf00      	nop
 80049d4:	2000419c 	.word	0x2000419c
 80049d8:	200041a4 	.word	0x200041a4

080049dc <siprintf>:
 80049dc:	b40e      	push	{r1, r2, r3}
 80049de:	b500      	push	{lr}
 80049e0:	b09c      	sub	sp, #112	; 0x70
 80049e2:	ab1d      	add	r3, sp, #116	; 0x74
 80049e4:	9002      	str	r0, [sp, #8]
 80049e6:	9006      	str	r0, [sp, #24]
 80049e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80049ec:	4809      	ldr	r0, [pc, #36]	; (8004a14 <siprintf+0x38>)
 80049ee:	9107      	str	r1, [sp, #28]
 80049f0:	9104      	str	r1, [sp, #16]
 80049f2:	4909      	ldr	r1, [pc, #36]	; (8004a18 <siprintf+0x3c>)
 80049f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80049f8:	9105      	str	r1, [sp, #20]
 80049fa:	6800      	ldr	r0, [r0, #0]
 80049fc:	9301      	str	r3, [sp, #4]
 80049fe:	a902      	add	r1, sp, #8
 8004a00:	f000 f9f6 	bl	8004df0 <_svfiprintf_r>
 8004a04:	9b02      	ldr	r3, [sp, #8]
 8004a06:	2200      	movs	r2, #0
 8004a08:	701a      	strb	r2, [r3, #0]
 8004a0a:	b01c      	add	sp, #112	; 0x70
 8004a0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a10:	b003      	add	sp, #12
 8004a12:	4770      	bx	lr
 8004a14:	200000d0 	.word	0x200000d0
 8004a18:	ffff0208 	.word	0xffff0208

08004a1c <memset>:
 8004a1c:	4402      	add	r2, r0
 8004a1e:	4603      	mov	r3, r0
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d100      	bne.n	8004a26 <memset+0xa>
 8004a24:	4770      	bx	lr
 8004a26:	f803 1b01 	strb.w	r1, [r3], #1
 8004a2a:	e7f9      	b.n	8004a20 <memset+0x4>

08004a2c <_reclaim_reent>:
 8004a2c:	4b29      	ldr	r3, [pc, #164]	; (8004ad4 <_reclaim_reent+0xa8>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4283      	cmp	r3, r0
 8004a32:	b570      	push	{r4, r5, r6, lr}
 8004a34:	4604      	mov	r4, r0
 8004a36:	d04b      	beq.n	8004ad0 <_reclaim_reent+0xa4>
 8004a38:	69c3      	ldr	r3, [r0, #28]
 8004a3a:	b143      	cbz	r3, 8004a4e <_reclaim_reent+0x22>
 8004a3c:	68db      	ldr	r3, [r3, #12]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d144      	bne.n	8004acc <_reclaim_reent+0xa0>
 8004a42:	69e3      	ldr	r3, [r4, #28]
 8004a44:	6819      	ldr	r1, [r3, #0]
 8004a46:	b111      	cbz	r1, 8004a4e <_reclaim_reent+0x22>
 8004a48:	4620      	mov	r0, r4
 8004a4a:	f000 f87f 	bl	8004b4c <_free_r>
 8004a4e:	6961      	ldr	r1, [r4, #20]
 8004a50:	b111      	cbz	r1, 8004a58 <_reclaim_reent+0x2c>
 8004a52:	4620      	mov	r0, r4
 8004a54:	f000 f87a 	bl	8004b4c <_free_r>
 8004a58:	69e1      	ldr	r1, [r4, #28]
 8004a5a:	b111      	cbz	r1, 8004a62 <_reclaim_reent+0x36>
 8004a5c:	4620      	mov	r0, r4
 8004a5e:	f000 f875 	bl	8004b4c <_free_r>
 8004a62:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004a64:	b111      	cbz	r1, 8004a6c <_reclaim_reent+0x40>
 8004a66:	4620      	mov	r0, r4
 8004a68:	f000 f870 	bl	8004b4c <_free_r>
 8004a6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a6e:	b111      	cbz	r1, 8004a76 <_reclaim_reent+0x4a>
 8004a70:	4620      	mov	r0, r4
 8004a72:	f000 f86b 	bl	8004b4c <_free_r>
 8004a76:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004a78:	b111      	cbz	r1, 8004a80 <_reclaim_reent+0x54>
 8004a7a:	4620      	mov	r0, r4
 8004a7c:	f000 f866 	bl	8004b4c <_free_r>
 8004a80:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004a82:	b111      	cbz	r1, 8004a8a <_reclaim_reent+0x5e>
 8004a84:	4620      	mov	r0, r4
 8004a86:	f000 f861 	bl	8004b4c <_free_r>
 8004a8a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004a8c:	b111      	cbz	r1, 8004a94 <_reclaim_reent+0x68>
 8004a8e:	4620      	mov	r0, r4
 8004a90:	f000 f85c 	bl	8004b4c <_free_r>
 8004a94:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004a96:	b111      	cbz	r1, 8004a9e <_reclaim_reent+0x72>
 8004a98:	4620      	mov	r0, r4
 8004a9a:	f000 f857 	bl	8004b4c <_free_r>
 8004a9e:	6a23      	ldr	r3, [r4, #32]
 8004aa0:	b1b3      	cbz	r3, 8004ad0 <_reclaim_reent+0xa4>
 8004aa2:	4620      	mov	r0, r4
 8004aa4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004aa8:	4718      	bx	r3
 8004aaa:	5949      	ldr	r1, [r1, r5]
 8004aac:	b941      	cbnz	r1, 8004ac0 <_reclaim_reent+0x94>
 8004aae:	3504      	adds	r5, #4
 8004ab0:	69e3      	ldr	r3, [r4, #28]
 8004ab2:	2d80      	cmp	r5, #128	; 0x80
 8004ab4:	68d9      	ldr	r1, [r3, #12]
 8004ab6:	d1f8      	bne.n	8004aaa <_reclaim_reent+0x7e>
 8004ab8:	4620      	mov	r0, r4
 8004aba:	f000 f847 	bl	8004b4c <_free_r>
 8004abe:	e7c0      	b.n	8004a42 <_reclaim_reent+0x16>
 8004ac0:	680e      	ldr	r6, [r1, #0]
 8004ac2:	4620      	mov	r0, r4
 8004ac4:	f000 f842 	bl	8004b4c <_free_r>
 8004ac8:	4631      	mov	r1, r6
 8004aca:	e7ef      	b.n	8004aac <_reclaim_reent+0x80>
 8004acc:	2500      	movs	r5, #0
 8004ace:	e7ef      	b.n	8004ab0 <_reclaim_reent+0x84>
 8004ad0:	bd70      	pop	{r4, r5, r6, pc}
 8004ad2:	bf00      	nop
 8004ad4:	200000d0 	.word	0x200000d0

08004ad8 <__errno>:
 8004ad8:	4b01      	ldr	r3, [pc, #4]	; (8004ae0 <__errno+0x8>)
 8004ada:	6818      	ldr	r0, [r3, #0]
 8004adc:	4770      	bx	lr
 8004ade:	bf00      	nop
 8004ae0:	200000d0 	.word	0x200000d0

08004ae4 <__libc_init_array>:
 8004ae4:	b570      	push	{r4, r5, r6, lr}
 8004ae6:	4d0d      	ldr	r5, [pc, #52]	; (8004b1c <__libc_init_array+0x38>)
 8004ae8:	4c0d      	ldr	r4, [pc, #52]	; (8004b20 <__libc_init_array+0x3c>)
 8004aea:	1b64      	subs	r4, r4, r5
 8004aec:	10a4      	asrs	r4, r4, #2
 8004aee:	2600      	movs	r6, #0
 8004af0:	42a6      	cmp	r6, r4
 8004af2:	d109      	bne.n	8004b08 <__libc_init_array+0x24>
 8004af4:	4d0b      	ldr	r5, [pc, #44]	; (8004b24 <__libc_init_array+0x40>)
 8004af6:	4c0c      	ldr	r4, [pc, #48]	; (8004b28 <__libc_init_array+0x44>)
 8004af8:	f000 fc6a 	bl	80053d0 <_init>
 8004afc:	1b64      	subs	r4, r4, r5
 8004afe:	10a4      	asrs	r4, r4, #2
 8004b00:	2600      	movs	r6, #0
 8004b02:	42a6      	cmp	r6, r4
 8004b04:	d105      	bne.n	8004b12 <__libc_init_array+0x2e>
 8004b06:	bd70      	pop	{r4, r5, r6, pc}
 8004b08:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b0c:	4798      	blx	r3
 8004b0e:	3601      	adds	r6, #1
 8004b10:	e7ee      	b.n	8004af0 <__libc_init_array+0xc>
 8004b12:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b16:	4798      	blx	r3
 8004b18:	3601      	adds	r6, #1
 8004b1a:	e7f2      	b.n	8004b02 <__libc_init_array+0x1e>
 8004b1c:	08005538 	.word	0x08005538
 8004b20:	08005538 	.word	0x08005538
 8004b24:	08005538 	.word	0x08005538
 8004b28:	0800553c 	.word	0x0800553c

08004b2c <__retarget_lock_acquire_recursive>:
 8004b2c:	4770      	bx	lr

08004b2e <__retarget_lock_release_recursive>:
 8004b2e:	4770      	bx	lr

08004b30 <memcpy>:
 8004b30:	440a      	add	r2, r1
 8004b32:	4291      	cmp	r1, r2
 8004b34:	f100 33ff 	add.w	r3, r0, #4294967295
 8004b38:	d100      	bne.n	8004b3c <memcpy+0xc>
 8004b3a:	4770      	bx	lr
 8004b3c:	b510      	push	{r4, lr}
 8004b3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b46:	4291      	cmp	r1, r2
 8004b48:	d1f9      	bne.n	8004b3e <memcpy+0xe>
 8004b4a:	bd10      	pop	{r4, pc}

08004b4c <_free_r>:
 8004b4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004b4e:	2900      	cmp	r1, #0
 8004b50:	d044      	beq.n	8004bdc <_free_r+0x90>
 8004b52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b56:	9001      	str	r0, [sp, #4]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	f1a1 0404 	sub.w	r4, r1, #4
 8004b5e:	bfb8      	it	lt
 8004b60:	18e4      	addlt	r4, r4, r3
 8004b62:	f000 f8df 	bl	8004d24 <__malloc_lock>
 8004b66:	4a1e      	ldr	r2, [pc, #120]	; (8004be0 <_free_r+0x94>)
 8004b68:	9801      	ldr	r0, [sp, #4]
 8004b6a:	6813      	ldr	r3, [r2, #0]
 8004b6c:	b933      	cbnz	r3, 8004b7c <_free_r+0x30>
 8004b6e:	6063      	str	r3, [r4, #4]
 8004b70:	6014      	str	r4, [r2, #0]
 8004b72:	b003      	add	sp, #12
 8004b74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004b78:	f000 b8da 	b.w	8004d30 <__malloc_unlock>
 8004b7c:	42a3      	cmp	r3, r4
 8004b7e:	d908      	bls.n	8004b92 <_free_r+0x46>
 8004b80:	6825      	ldr	r5, [r4, #0]
 8004b82:	1961      	adds	r1, r4, r5
 8004b84:	428b      	cmp	r3, r1
 8004b86:	bf01      	itttt	eq
 8004b88:	6819      	ldreq	r1, [r3, #0]
 8004b8a:	685b      	ldreq	r3, [r3, #4]
 8004b8c:	1949      	addeq	r1, r1, r5
 8004b8e:	6021      	streq	r1, [r4, #0]
 8004b90:	e7ed      	b.n	8004b6e <_free_r+0x22>
 8004b92:	461a      	mov	r2, r3
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	b10b      	cbz	r3, 8004b9c <_free_r+0x50>
 8004b98:	42a3      	cmp	r3, r4
 8004b9a:	d9fa      	bls.n	8004b92 <_free_r+0x46>
 8004b9c:	6811      	ldr	r1, [r2, #0]
 8004b9e:	1855      	adds	r5, r2, r1
 8004ba0:	42a5      	cmp	r5, r4
 8004ba2:	d10b      	bne.n	8004bbc <_free_r+0x70>
 8004ba4:	6824      	ldr	r4, [r4, #0]
 8004ba6:	4421      	add	r1, r4
 8004ba8:	1854      	adds	r4, r2, r1
 8004baa:	42a3      	cmp	r3, r4
 8004bac:	6011      	str	r1, [r2, #0]
 8004bae:	d1e0      	bne.n	8004b72 <_free_r+0x26>
 8004bb0:	681c      	ldr	r4, [r3, #0]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	6053      	str	r3, [r2, #4]
 8004bb6:	440c      	add	r4, r1
 8004bb8:	6014      	str	r4, [r2, #0]
 8004bba:	e7da      	b.n	8004b72 <_free_r+0x26>
 8004bbc:	d902      	bls.n	8004bc4 <_free_r+0x78>
 8004bbe:	230c      	movs	r3, #12
 8004bc0:	6003      	str	r3, [r0, #0]
 8004bc2:	e7d6      	b.n	8004b72 <_free_r+0x26>
 8004bc4:	6825      	ldr	r5, [r4, #0]
 8004bc6:	1961      	adds	r1, r4, r5
 8004bc8:	428b      	cmp	r3, r1
 8004bca:	bf04      	itt	eq
 8004bcc:	6819      	ldreq	r1, [r3, #0]
 8004bce:	685b      	ldreq	r3, [r3, #4]
 8004bd0:	6063      	str	r3, [r4, #4]
 8004bd2:	bf04      	itt	eq
 8004bd4:	1949      	addeq	r1, r1, r5
 8004bd6:	6021      	streq	r1, [r4, #0]
 8004bd8:	6054      	str	r4, [r2, #4]
 8004bda:	e7ca      	b.n	8004b72 <_free_r+0x26>
 8004bdc:	b003      	add	sp, #12
 8004bde:	bd30      	pop	{r4, r5, pc}
 8004be0:	200042fc 	.word	0x200042fc

08004be4 <sbrk_aligned>:
 8004be4:	b570      	push	{r4, r5, r6, lr}
 8004be6:	4e0e      	ldr	r6, [pc, #56]	; (8004c20 <sbrk_aligned+0x3c>)
 8004be8:	460c      	mov	r4, r1
 8004bea:	6831      	ldr	r1, [r6, #0]
 8004bec:	4605      	mov	r5, r0
 8004bee:	b911      	cbnz	r1, 8004bf6 <sbrk_aligned+0x12>
 8004bf0:	f000 fba6 	bl	8005340 <_sbrk_r>
 8004bf4:	6030      	str	r0, [r6, #0]
 8004bf6:	4621      	mov	r1, r4
 8004bf8:	4628      	mov	r0, r5
 8004bfa:	f000 fba1 	bl	8005340 <_sbrk_r>
 8004bfe:	1c43      	adds	r3, r0, #1
 8004c00:	d00a      	beq.n	8004c18 <sbrk_aligned+0x34>
 8004c02:	1cc4      	adds	r4, r0, #3
 8004c04:	f024 0403 	bic.w	r4, r4, #3
 8004c08:	42a0      	cmp	r0, r4
 8004c0a:	d007      	beq.n	8004c1c <sbrk_aligned+0x38>
 8004c0c:	1a21      	subs	r1, r4, r0
 8004c0e:	4628      	mov	r0, r5
 8004c10:	f000 fb96 	bl	8005340 <_sbrk_r>
 8004c14:	3001      	adds	r0, #1
 8004c16:	d101      	bne.n	8004c1c <sbrk_aligned+0x38>
 8004c18:	f04f 34ff 	mov.w	r4, #4294967295
 8004c1c:	4620      	mov	r0, r4
 8004c1e:	bd70      	pop	{r4, r5, r6, pc}
 8004c20:	20004300 	.word	0x20004300

08004c24 <_malloc_r>:
 8004c24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c28:	1ccd      	adds	r5, r1, #3
 8004c2a:	f025 0503 	bic.w	r5, r5, #3
 8004c2e:	3508      	adds	r5, #8
 8004c30:	2d0c      	cmp	r5, #12
 8004c32:	bf38      	it	cc
 8004c34:	250c      	movcc	r5, #12
 8004c36:	2d00      	cmp	r5, #0
 8004c38:	4607      	mov	r7, r0
 8004c3a:	db01      	blt.n	8004c40 <_malloc_r+0x1c>
 8004c3c:	42a9      	cmp	r1, r5
 8004c3e:	d905      	bls.n	8004c4c <_malloc_r+0x28>
 8004c40:	230c      	movs	r3, #12
 8004c42:	603b      	str	r3, [r7, #0]
 8004c44:	2600      	movs	r6, #0
 8004c46:	4630      	mov	r0, r6
 8004c48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c4c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004d20 <_malloc_r+0xfc>
 8004c50:	f000 f868 	bl	8004d24 <__malloc_lock>
 8004c54:	f8d8 3000 	ldr.w	r3, [r8]
 8004c58:	461c      	mov	r4, r3
 8004c5a:	bb5c      	cbnz	r4, 8004cb4 <_malloc_r+0x90>
 8004c5c:	4629      	mov	r1, r5
 8004c5e:	4638      	mov	r0, r7
 8004c60:	f7ff ffc0 	bl	8004be4 <sbrk_aligned>
 8004c64:	1c43      	adds	r3, r0, #1
 8004c66:	4604      	mov	r4, r0
 8004c68:	d155      	bne.n	8004d16 <_malloc_r+0xf2>
 8004c6a:	f8d8 4000 	ldr.w	r4, [r8]
 8004c6e:	4626      	mov	r6, r4
 8004c70:	2e00      	cmp	r6, #0
 8004c72:	d145      	bne.n	8004d00 <_malloc_r+0xdc>
 8004c74:	2c00      	cmp	r4, #0
 8004c76:	d048      	beq.n	8004d0a <_malloc_r+0xe6>
 8004c78:	6823      	ldr	r3, [r4, #0]
 8004c7a:	4631      	mov	r1, r6
 8004c7c:	4638      	mov	r0, r7
 8004c7e:	eb04 0903 	add.w	r9, r4, r3
 8004c82:	f000 fb5d 	bl	8005340 <_sbrk_r>
 8004c86:	4581      	cmp	r9, r0
 8004c88:	d13f      	bne.n	8004d0a <_malloc_r+0xe6>
 8004c8a:	6821      	ldr	r1, [r4, #0]
 8004c8c:	1a6d      	subs	r5, r5, r1
 8004c8e:	4629      	mov	r1, r5
 8004c90:	4638      	mov	r0, r7
 8004c92:	f7ff ffa7 	bl	8004be4 <sbrk_aligned>
 8004c96:	3001      	adds	r0, #1
 8004c98:	d037      	beq.n	8004d0a <_malloc_r+0xe6>
 8004c9a:	6823      	ldr	r3, [r4, #0]
 8004c9c:	442b      	add	r3, r5
 8004c9e:	6023      	str	r3, [r4, #0]
 8004ca0:	f8d8 3000 	ldr.w	r3, [r8]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d038      	beq.n	8004d1a <_malloc_r+0xf6>
 8004ca8:	685a      	ldr	r2, [r3, #4]
 8004caa:	42a2      	cmp	r2, r4
 8004cac:	d12b      	bne.n	8004d06 <_malloc_r+0xe2>
 8004cae:	2200      	movs	r2, #0
 8004cb0:	605a      	str	r2, [r3, #4]
 8004cb2:	e00f      	b.n	8004cd4 <_malloc_r+0xb0>
 8004cb4:	6822      	ldr	r2, [r4, #0]
 8004cb6:	1b52      	subs	r2, r2, r5
 8004cb8:	d41f      	bmi.n	8004cfa <_malloc_r+0xd6>
 8004cba:	2a0b      	cmp	r2, #11
 8004cbc:	d917      	bls.n	8004cee <_malloc_r+0xca>
 8004cbe:	1961      	adds	r1, r4, r5
 8004cc0:	42a3      	cmp	r3, r4
 8004cc2:	6025      	str	r5, [r4, #0]
 8004cc4:	bf18      	it	ne
 8004cc6:	6059      	strne	r1, [r3, #4]
 8004cc8:	6863      	ldr	r3, [r4, #4]
 8004cca:	bf08      	it	eq
 8004ccc:	f8c8 1000 	streq.w	r1, [r8]
 8004cd0:	5162      	str	r2, [r4, r5]
 8004cd2:	604b      	str	r3, [r1, #4]
 8004cd4:	4638      	mov	r0, r7
 8004cd6:	f104 060b 	add.w	r6, r4, #11
 8004cda:	f000 f829 	bl	8004d30 <__malloc_unlock>
 8004cde:	f026 0607 	bic.w	r6, r6, #7
 8004ce2:	1d23      	adds	r3, r4, #4
 8004ce4:	1af2      	subs	r2, r6, r3
 8004ce6:	d0ae      	beq.n	8004c46 <_malloc_r+0x22>
 8004ce8:	1b9b      	subs	r3, r3, r6
 8004cea:	50a3      	str	r3, [r4, r2]
 8004cec:	e7ab      	b.n	8004c46 <_malloc_r+0x22>
 8004cee:	42a3      	cmp	r3, r4
 8004cf0:	6862      	ldr	r2, [r4, #4]
 8004cf2:	d1dd      	bne.n	8004cb0 <_malloc_r+0x8c>
 8004cf4:	f8c8 2000 	str.w	r2, [r8]
 8004cf8:	e7ec      	b.n	8004cd4 <_malloc_r+0xb0>
 8004cfa:	4623      	mov	r3, r4
 8004cfc:	6864      	ldr	r4, [r4, #4]
 8004cfe:	e7ac      	b.n	8004c5a <_malloc_r+0x36>
 8004d00:	4634      	mov	r4, r6
 8004d02:	6876      	ldr	r6, [r6, #4]
 8004d04:	e7b4      	b.n	8004c70 <_malloc_r+0x4c>
 8004d06:	4613      	mov	r3, r2
 8004d08:	e7cc      	b.n	8004ca4 <_malloc_r+0x80>
 8004d0a:	230c      	movs	r3, #12
 8004d0c:	603b      	str	r3, [r7, #0]
 8004d0e:	4638      	mov	r0, r7
 8004d10:	f000 f80e 	bl	8004d30 <__malloc_unlock>
 8004d14:	e797      	b.n	8004c46 <_malloc_r+0x22>
 8004d16:	6025      	str	r5, [r4, #0]
 8004d18:	e7dc      	b.n	8004cd4 <_malloc_r+0xb0>
 8004d1a:	605b      	str	r3, [r3, #4]
 8004d1c:	deff      	udf	#255	; 0xff
 8004d1e:	bf00      	nop
 8004d20:	200042fc 	.word	0x200042fc

08004d24 <__malloc_lock>:
 8004d24:	4801      	ldr	r0, [pc, #4]	; (8004d2c <__malloc_lock+0x8>)
 8004d26:	f7ff bf01 	b.w	8004b2c <__retarget_lock_acquire_recursive>
 8004d2a:	bf00      	nop
 8004d2c:	200042f8 	.word	0x200042f8

08004d30 <__malloc_unlock>:
 8004d30:	4801      	ldr	r0, [pc, #4]	; (8004d38 <__malloc_unlock+0x8>)
 8004d32:	f7ff befc 	b.w	8004b2e <__retarget_lock_release_recursive>
 8004d36:	bf00      	nop
 8004d38:	200042f8 	.word	0x200042f8

08004d3c <__ssputs_r>:
 8004d3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d40:	688e      	ldr	r6, [r1, #8]
 8004d42:	461f      	mov	r7, r3
 8004d44:	42be      	cmp	r6, r7
 8004d46:	680b      	ldr	r3, [r1, #0]
 8004d48:	4682      	mov	sl, r0
 8004d4a:	460c      	mov	r4, r1
 8004d4c:	4690      	mov	r8, r2
 8004d4e:	d82c      	bhi.n	8004daa <__ssputs_r+0x6e>
 8004d50:	898a      	ldrh	r2, [r1, #12]
 8004d52:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004d56:	d026      	beq.n	8004da6 <__ssputs_r+0x6a>
 8004d58:	6965      	ldr	r5, [r4, #20]
 8004d5a:	6909      	ldr	r1, [r1, #16]
 8004d5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004d60:	eba3 0901 	sub.w	r9, r3, r1
 8004d64:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004d68:	1c7b      	adds	r3, r7, #1
 8004d6a:	444b      	add	r3, r9
 8004d6c:	106d      	asrs	r5, r5, #1
 8004d6e:	429d      	cmp	r5, r3
 8004d70:	bf38      	it	cc
 8004d72:	461d      	movcc	r5, r3
 8004d74:	0553      	lsls	r3, r2, #21
 8004d76:	d527      	bpl.n	8004dc8 <__ssputs_r+0x8c>
 8004d78:	4629      	mov	r1, r5
 8004d7a:	f7ff ff53 	bl	8004c24 <_malloc_r>
 8004d7e:	4606      	mov	r6, r0
 8004d80:	b360      	cbz	r0, 8004ddc <__ssputs_r+0xa0>
 8004d82:	6921      	ldr	r1, [r4, #16]
 8004d84:	464a      	mov	r2, r9
 8004d86:	f7ff fed3 	bl	8004b30 <memcpy>
 8004d8a:	89a3      	ldrh	r3, [r4, #12]
 8004d8c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004d90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d94:	81a3      	strh	r3, [r4, #12]
 8004d96:	6126      	str	r6, [r4, #16]
 8004d98:	6165      	str	r5, [r4, #20]
 8004d9a:	444e      	add	r6, r9
 8004d9c:	eba5 0509 	sub.w	r5, r5, r9
 8004da0:	6026      	str	r6, [r4, #0]
 8004da2:	60a5      	str	r5, [r4, #8]
 8004da4:	463e      	mov	r6, r7
 8004da6:	42be      	cmp	r6, r7
 8004da8:	d900      	bls.n	8004dac <__ssputs_r+0x70>
 8004daa:	463e      	mov	r6, r7
 8004dac:	6820      	ldr	r0, [r4, #0]
 8004dae:	4632      	mov	r2, r6
 8004db0:	4641      	mov	r1, r8
 8004db2:	f000 faab 	bl	800530c <memmove>
 8004db6:	68a3      	ldr	r3, [r4, #8]
 8004db8:	1b9b      	subs	r3, r3, r6
 8004dba:	60a3      	str	r3, [r4, #8]
 8004dbc:	6823      	ldr	r3, [r4, #0]
 8004dbe:	4433      	add	r3, r6
 8004dc0:	6023      	str	r3, [r4, #0]
 8004dc2:	2000      	movs	r0, #0
 8004dc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dc8:	462a      	mov	r2, r5
 8004dca:	f000 fac9 	bl	8005360 <_realloc_r>
 8004dce:	4606      	mov	r6, r0
 8004dd0:	2800      	cmp	r0, #0
 8004dd2:	d1e0      	bne.n	8004d96 <__ssputs_r+0x5a>
 8004dd4:	6921      	ldr	r1, [r4, #16]
 8004dd6:	4650      	mov	r0, sl
 8004dd8:	f7ff feb8 	bl	8004b4c <_free_r>
 8004ddc:	230c      	movs	r3, #12
 8004dde:	f8ca 3000 	str.w	r3, [sl]
 8004de2:	89a3      	ldrh	r3, [r4, #12]
 8004de4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004de8:	81a3      	strh	r3, [r4, #12]
 8004dea:	f04f 30ff 	mov.w	r0, #4294967295
 8004dee:	e7e9      	b.n	8004dc4 <__ssputs_r+0x88>

08004df0 <_svfiprintf_r>:
 8004df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004df4:	4698      	mov	r8, r3
 8004df6:	898b      	ldrh	r3, [r1, #12]
 8004df8:	061b      	lsls	r3, r3, #24
 8004dfa:	b09d      	sub	sp, #116	; 0x74
 8004dfc:	4607      	mov	r7, r0
 8004dfe:	460d      	mov	r5, r1
 8004e00:	4614      	mov	r4, r2
 8004e02:	d50e      	bpl.n	8004e22 <_svfiprintf_r+0x32>
 8004e04:	690b      	ldr	r3, [r1, #16]
 8004e06:	b963      	cbnz	r3, 8004e22 <_svfiprintf_r+0x32>
 8004e08:	2140      	movs	r1, #64	; 0x40
 8004e0a:	f7ff ff0b 	bl	8004c24 <_malloc_r>
 8004e0e:	6028      	str	r0, [r5, #0]
 8004e10:	6128      	str	r0, [r5, #16]
 8004e12:	b920      	cbnz	r0, 8004e1e <_svfiprintf_r+0x2e>
 8004e14:	230c      	movs	r3, #12
 8004e16:	603b      	str	r3, [r7, #0]
 8004e18:	f04f 30ff 	mov.w	r0, #4294967295
 8004e1c:	e0d0      	b.n	8004fc0 <_svfiprintf_r+0x1d0>
 8004e1e:	2340      	movs	r3, #64	; 0x40
 8004e20:	616b      	str	r3, [r5, #20]
 8004e22:	2300      	movs	r3, #0
 8004e24:	9309      	str	r3, [sp, #36]	; 0x24
 8004e26:	2320      	movs	r3, #32
 8004e28:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004e2c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e30:	2330      	movs	r3, #48	; 0x30
 8004e32:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004fd8 <_svfiprintf_r+0x1e8>
 8004e36:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004e3a:	f04f 0901 	mov.w	r9, #1
 8004e3e:	4623      	mov	r3, r4
 8004e40:	469a      	mov	sl, r3
 8004e42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e46:	b10a      	cbz	r2, 8004e4c <_svfiprintf_r+0x5c>
 8004e48:	2a25      	cmp	r2, #37	; 0x25
 8004e4a:	d1f9      	bne.n	8004e40 <_svfiprintf_r+0x50>
 8004e4c:	ebba 0b04 	subs.w	fp, sl, r4
 8004e50:	d00b      	beq.n	8004e6a <_svfiprintf_r+0x7a>
 8004e52:	465b      	mov	r3, fp
 8004e54:	4622      	mov	r2, r4
 8004e56:	4629      	mov	r1, r5
 8004e58:	4638      	mov	r0, r7
 8004e5a:	f7ff ff6f 	bl	8004d3c <__ssputs_r>
 8004e5e:	3001      	adds	r0, #1
 8004e60:	f000 80a9 	beq.w	8004fb6 <_svfiprintf_r+0x1c6>
 8004e64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e66:	445a      	add	r2, fp
 8004e68:	9209      	str	r2, [sp, #36]	; 0x24
 8004e6a:	f89a 3000 	ldrb.w	r3, [sl]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	f000 80a1 	beq.w	8004fb6 <_svfiprintf_r+0x1c6>
 8004e74:	2300      	movs	r3, #0
 8004e76:	f04f 32ff 	mov.w	r2, #4294967295
 8004e7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e7e:	f10a 0a01 	add.w	sl, sl, #1
 8004e82:	9304      	str	r3, [sp, #16]
 8004e84:	9307      	str	r3, [sp, #28]
 8004e86:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004e8a:	931a      	str	r3, [sp, #104]	; 0x68
 8004e8c:	4654      	mov	r4, sl
 8004e8e:	2205      	movs	r2, #5
 8004e90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e94:	4850      	ldr	r0, [pc, #320]	; (8004fd8 <_svfiprintf_r+0x1e8>)
 8004e96:	f7fb f9a3 	bl	80001e0 <memchr>
 8004e9a:	9a04      	ldr	r2, [sp, #16]
 8004e9c:	b9d8      	cbnz	r0, 8004ed6 <_svfiprintf_r+0xe6>
 8004e9e:	06d0      	lsls	r0, r2, #27
 8004ea0:	bf44      	itt	mi
 8004ea2:	2320      	movmi	r3, #32
 8004ea4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ea8:	0711      	lsls	r1, r2, #28
 8004eaa:	bf44      	itt	mi
 8004eac:	232b      	movmi	r3, #43	; 0x2b
 8004eae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004eb2:	f89a 3000 	ldrb.w	r3, [sl]
 8004eb6:	2b2a      	cmp	r3, #42	; 0x2a
 8004eb8:	d015      	beq.n	8004ee6 <_svfiprintf_r+0xf6>
 8004eba:	9a07      	ldr	r2, [sp, #28]
 8004ebc:	4654      	mov	r4, sl
 8004ebe:	2000      	movs	r0, #0
 8004ec0:	f04f 0c0a 	mov.w	ip, #10
 8004ec4:	4621      	mov	r1, r4
 8004ec6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004eca:	3b30      	subs	r3, #48	; 0x30
 8004ecc:	2b09      	cmp	r3, #9
 8004ece:	d94d      	bls.n	8004f6c <_svfiprintf_r+0x17c>
 8004ed0:	b1b0      	cbz	r0, 8004f00 <_svfiprintf_r+0x110>
 8004ed2:	9207      	str	r2, [sp, #28]
 8004ed4:	e014      	b.n	8004f00 <_svfiprintf_r+0x110>
 8004ed6:	eba0 0308 	sub.w	r3, r0, r8
 8004eda:	fa09 f303 	lsl.w	r3, r9, r3
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	9304      	str	r3, [sp, #16]
 8004ee2:	46a2      	mov	sl, r4
 8004ee4:	e7d2      	b.n	8004e8c <_svfiprintf_r+0x9c>
 8004ee6:	9b03      	ldr	r3, [sp, #12]
 8004ee8:	1d19      	adds	r1, r3, #4
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	9103      	str	r1, [sp, #12]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	bfbb      	ittet	lt
 8004ef2:	425b      	neglt	r3, r3
 8004ef4:	f042 0202 	orrlt.w	r2, r2, #2
 8004ef8:	9307      	strge	r3, [sp, #28]
 8004efa:	9307      	strlt	r3, [sp, #28]
 8004efc:	bfb8      	it	lt
 8004efe:	9204      	strlt	r2, [sp, #16]
 8004f00:	7823      	ldrb	r3, [r4, #0]
 8004f02:	2b2e      	cmp	r3, #46	; 0x2e
 8004f04:	d10c      	bne.n	8004f20 <_svfiprintf_r+0x130>
 8004f06:	7863      	ldrb	r3, [r4, #1]
 8004f08:	2b2a      	cmp	r3, #42	; 0x2a
 8004f0a:	d134      	bne.n	8004f76 <_svfiprintf_r+0x186>
 8004f0c:	9b03      	ldr	r3, [sp, #12]
 8004f0e:	1d1a      	adds	r2, r3, #4
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	9203      	str	r2, [sp, #12]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	bfb8      	it	lt
 8004f18:	f04f 33ff 	movlt.w	r3, #4294967295
 8004f1c:	3402      	adds	r4, #2
 8004f1e:	9305      	str	r3, [sp, #20]
 8004f20:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004fe8 <_svfiprintf_r+0x1f8>
 8004f24:	7821      	ldrb	r1, [r4, #0]
 8004f26:	2203      	movs	r2, #3
 8004f28:	4650      	mov	r0, sl
 8004f2a:	f7fb f959 	bl	80001e0 <memchr>
 8004f2e:	b138      	cbz	r0, 8004f40 <_svfiprintf_r+0x150>
 8004f30:	9b04      	ldr	r3, [sp, #16]
 8004f32:	eba0 000a 	sub.w	r0, r0, sl
 8004f36:	2240      	movs	r2, #64	; 0x40
 8004f38:	4082      	lsls	r2, r0
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	3401      	adds	r4, #1
 8004f3e:	9304      	str	r3, [sp, #16]
 8004f40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f44:	4825      	ldr	r0, [pc, #148]	; (8004fdc <_svfiprintf_r+0x1ec>)
 8004f46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004f4a:	2206      	movs	r2, #6
 8004f4c:	f7fb f948 	bl	80001e0 <memchr>
 8004f50:	2800      	cmp	r0, #0
 8004f52:	d038      	beq.n	8004fc6 <_svfiprintf_r+0x1d6>
 8004f54:	4b22      	ldr	r3, [pc, #136]	; (8004fe0 <_svfiprintf_r+0x1f0>)
 8004f56:	bb1b      	cbnz	r3, 8004fa0 <_svfiprintf_r+0x1b0>
 8004f58:	9b03      	ldr	r3, [sp, #12]
 8004f5a:	3307      	adds	r3, #7
 8004f5c:	f023 0307 	bic.w	r3, r3, #7
 8004f60:	3308      	adds	r3, #8
 8004f62:	9303      	str	r3, [sp, #12]
 8004f64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f66:	4433      	add	r3, r6
 8004f68:	9309      	str	r3, [sp, #36]	; 0x24
 8004f6a:	e768      	b.n	8004e3e <_svfiprintf_r+0x4e>
 8004f6c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f70:	460c      	mov	r4, r1
 8004f72:	2001      	movs	r0, #1
 8004f74:	e7a6      	b.n	8004ec4 <_svfiprintf_r+0xd4>
 8004f76:	2300      	movs	r3, #0
 8004f78:	3401      	adds	r4, #1
 8004f7a:	9305      	str	r3, [sp, #20]
 8004f7c:	4619      	mov	r1, r3
 8004f7e:	f04f 0c0a 	mov.w	ip, #10
 8004f82:	4620      	mov	r0, r4
 8004f84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f88:	3a30      	subs	r2, #48	; 0x30
 8004f8a:	2a09      	cmp	r2, #9
 8004f8c:	d903      	bls.n	8004f96 <_svfiprintf_r+0x1a6>
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d0c6      	beq.n	8004f20 <_svfiprintf_r+0x130>
 8004f92:	9105      	str	r1, [sp, #20]
 8004f94:	e7c4      	b.n	8004f20 <_svfiprintf_r+0x130>
 8004f96:	fb0c 2101 	mla	r1, ip, r1, r2
 8004f9a:	4604      	mov	r4, r0
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e7f0      	b.n	8004f82 <_svfiprintf_r+0x192>
 8004fa0:	ab03      	add	r3, sp, #12
 8004fa2:	9300      	str	r3, [sp, #0]
 8004fa4:	462a      	mov	r2, r5
 8004fa6:	4b0f      	ldr	r3, [pc, #60]	; (8004fe4 <_svfiprintf_r+0x1f4>)
 8004fa8:	a904      	add	r1, sp, #16
 8004faa:	4638      	mov	r0, r7
 8004fac:	f3af 8000 	nop.w
 8004fb0:	1c42      	adds	r2, r0, #1
 8004fb2:	4606      	mov	r6, r0
 8004fb4:	d1d6      	bne.n	8004f64 <_svfiprintf_r+0x174>
 8004fb6:	89ab      	ldrh	r3, [r5, #12]
 8004fb8:	065b      	lsls	r3, r3, #25
 8004fba:	f53f af2d 	bmi.w	8004e18 <_svfiprintf_r+0x28>
 8004fbe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004fc0:	b01d      	add	sp, #116	; 0x74
 8004fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fc6:	ab03      	add	r3, sp, #12
 8004fc8:	9300      	str	r3, [sp, #0]
 8004fca:	462a      	mov	r2, r5
 8004fcc:	4b05      	ldr	r3, [pc, #20]	; (8004fe4 <_svfiprintf_r+0x1f4>)
 8004fce:	a904      	add	r1, sp, #16
 8004fd0:	4638      	mov	r0, r7
 8004fd2:	f000 f879 	bl	80050c8 <_printf_i>
 8004fd6:	e7eb      	b.n	8004fb0 <_svfiprintf_r+0x1c0>
 8004fd8:	080054fc 	.word	0x080054fc
 8004fdc:	08005506 	.word	0x08005506
 8004fe0:	00000000 	.word	0x00000000
 8004fe4:	08004d3d 	.word	0x08004d3d
 8004fe8:	08005502 	.word	0x08005502

08004fec <_printf_common>:
 8004fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ff0:	4616      	mov	r6, r2
 8004ff2:	4699      	mov	r9, r3
 8004ff4:	688a      	ldr	r2, [r1, #8]
 8004ff6:	690b      	ldr	r3, [r1, #16]
 8004ff8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	bfb8      	it	lt
 8005000:	4613      	movlt	r3, r2
 8005002:	6033      	str	r3, [r6, #0]
 8005004:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005008:	4607      	mov	r7, r0
 800500a:	460c      	mov	r4, r1
 800500c:	b10a      	cbz	r2, 8005012 <_printf_common+0x26>
 800500e:	3301      	adds	r3, #1
 8005010:	6033      	str	r3, [r6, #0]
 8005012:	6823      	ldr	r3, [r4, #0]
 8005014:	0699      	lsls	r1, r3, #26
 8005016:	bf42      	ittt	mi
 8005018:	6833      	ldrmi	r3, [r6, #0]
 800501a:	3302      	addmi	r3, #2
 800501c:	6033      	strmi	r3, [r6, #0]
 800501e:	6825      	ldr	r5, [r4, #0]
 8005020:	f015 0506 	ands.w	r5, r5, #6
 8005024:	d106      	bne.n	8005034 <_printf_common+0x48>
 8005026:	f104 0a19 	add.w	sl, r4, #25
 800502a:	68e3      	ldr	r3, [r4, #12]
 800502c:	6832      	ldr	r2, [r6, #0]
 800502e:	1a9b      	subs	r3, r3, r2
 8005030:	42ab      	cmp	r3, r5
 8005032:	dc26      	bgt.n	8005082 <_printf_common+0x96>
 8005034:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005038:	1e13      	subs	r3, r2, #0
 800503a:	6822      	ldr	r2, [r4, #0]
 800503c:	bf18      	it	ne
 800503e:	2301      	movne	r3, #1
 8005040:	0692      	lsls	r2, r2, #26
 8005042:	d42b      	bmi.n	800509c <_printf_common+0xb0>
 8005044:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005048:	4649      	mov	r1, r9
 800504a:	4638      	mov	r0, r7
 800504c:	47c0      	blx	r8
 800504e:	3001      	adds	r0, #1
 8005050:	d01e      	beq.n	8005090 <_printf_common+0xa4>
 8005052:	6823      	ldr	r3, [r4, #0]
 8005054:	6922      	ldr	r2, [r4, #16]
 8005056:	f003 0306 	and.w	r3, r3, #6
 800505a:	2b04      	cmp	r3, #4
 800505c:	bf02      	ittt	eq
 800505e:	68e5      	ldreq	r5, [r4, #12]
 8005060:	6833      	ldreq	r3, [r6, #0]
 8005062:	1aed      	subeq	r5, r5, r3
 8005064:	68a3      	ldr	r3, [r4, #8]
 8005066:	bf0c      	ite	eq
 8005068:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800506c:	2500      	movne	r5, #0
 800506e:	4293      	cmp	r3, r2
 8005070:	bfc4      	itt	gt
 8005072:	1a9b      	subgt	r3, r3, r2
 8005074:	18ed      	addgt	r5, r5, r3
 8005076:	2600      	movs	r6, #0
 8005078:	341a      	adds	r4, #26
 800507a:	42b5      	cmp	r5, r6
 800507c:	d11a      	bne.n	80050b4 <_printf_common+0xc8>
 800507e:	2000      	movs	r0, #0
 8005080:	e008      	b.n	8005094 <_printf_common+0xa8>
 8005082:	2301      	movs	r3, #1
 8005084:	4652      	mov	r2, sl
 8005086:	4649      	mov	r1, r9
 8005088:	4638      	mov	r0, r7
 800508a:	47c0      	blx	r8
 800508c:	3001      	adds	r0, #1
 800508e:	d103      	bne.n	8005098 <_printf_common+0xac>
 8005090:	f04f 30ff 	mov.w	r0, #4294967295
 8005094:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005098:	3501      	adds	r5, #1
 800509a:	e7c6      	b.n	800502a <_printf_common+0x3e>
 800509c:	18e1      	adds	r1, r4, r3
 800509e:	1c5a      	adds	r2, r3, #1
 80050a0:	2030      	movs	r0, #48	; 0x30
 80050a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80050a6:	4422      	add	r2, r4
 80050a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80050ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80050b0:	3302      	adds	r3, #2
 80050b2:	e7c7      	b.n	8005044 <_printf_common+0x58>
 80050b4:	2301      	movs	r3, #1
 80050b6:	4622      	mov	r2, r4
 80050b8:	4649      	mov	r1, r9
 80050ba:	4638      	mov	r0, r7
 80050bc:	47c0      	blx	r8
 80050be:	3001      	adds	r0, #1
 80050c0:	d0e6      	beq.n	8005090 <_printf_common+0xa4>
 80050c2:	3601      	adds	r6, #1
 80050c4:	e7d9      	b.n	800507a <_printf_common+0x8e>
	...

080050c8 <_printf_i>:
 80050c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050cc:	7e0f      	ldrb	r7, [r1, #24]
 80050ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80050d0:	2f78      	cmp	r7, #120	; 0x78
 80050d2:	4691      	mov	r9, r2
 80050d4:	4680      	mov	r8, r0
 80050d6:	460c      	mov	r4, r1
 80050d8:	469a      	mov	sl, r3
 80050da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80050de:	d807      	bhi.n	80050f0 <_printf_i+0x28>
 80050e0:	2f62      	cmp	r7, #98	; 0x62
 80050e2:	d80a      	bhi.n	80050fa <_printf_i+0x32>
 80050e4:	2f00      	cmp	r7, #0
 80050e6:	f000 80d4 	beq.w	8005292 <_printf_i+0x1ca>
 80050ea:	2f58      	cmp	r7, #88	; 0x58
 80050ec:	f000 80c0 	beq.w	8005270 <_printf_i+0x1a8>
 80050f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80050f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80050f8:	e03a      	b.n	8005170 <_printf_i+0xa8>
 80050fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80050fe:	2b15      	cmp	r3, #21
 8005100:	d8f6      	bhi.n	80050f0 <_printf_i+0x28>
 8005102:	a101      	add	r1, pc, #4	; (adr r1, 8005108 <_printf_i+0x40>)
 8005104:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005108:	08005161 	.word	0x08005161
 800510c:	08005175 	.word	0x08005175
 8005110:	080050f1 	.word	0x080050f1
 8005114:	080050f1 	.word	0x080050f1
 8005118:	080050f1 	.word	0x080050f1
 800511c:	080050f1 	.word	0x080050f1
 8005120:	08005175 	.word	0x08005175
 8005124:	080050f1 	.word	0x080050f1
 8005128:	080050f1 	.word	0x080050f1
 800512c:	080050f1 	.word	0x080050f1
 8005130:	080050f1 	.word	0x080050f1
 8005134:	08005279 	.word	0x08005279
 8005138:	080051a1 	.word	0x080051a1
 800513c:	08005233 	.word	0x08005233
 8005140:	080050f1 	.word	0x080050f1
 8005144:	080050f1 	.word	0x080050f1
 8005148:	0800529b 	.word	0x0800529b
 800514c:	080050f1 	.word	0x080050f1
 8005150:	080051a1 	.word	0x080051a1
 8005154:	080050f1 	.word	0x080050f1
 8005158:	080050f1 	.word	0x080050f1
 800515c:	0800523b 	.word	0x0800523b
 8005160:	682b      	ldr	r3, [r5, #0]
 8005162:	1d1a      	adds	r2, r3, #4
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	602a      	str	r2, [r5, #0]
 8005168:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800516c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005170:	2301      	movs	r3, #1
 8005172:	e09f      	b.n	80052b4 <_printf_i+0x1ec>
 8005174:	6820      	ldr	r0, [r4, #0]
 8005176:	682b      	ldr	r3, [r5, #0]
 8005178:	0607      	lsls	r7, r0, #24
 800517a:	f103 0104 	add.w	r1, r3, #4
 800517e:	6029      	str	r1, [r5, #0]
 8005180:	d501      	bpl.n	8005186 <_printf_i+0xbe>
 8005182:	681e      	ldr	r6, [r3, #0]
 8005184:	e003      	b.n	800518e <_printf_i+0xc6>
 8005186:	0646      	lsls	r6, r0, #25
 8005188:	d5fb      	bpl.n	8005182 <_printf_i+0xba>
 800518a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800518e:	2e00      	cmp	r6, #0
 8005190:	da03      	bge.n	800519a <_printf_i+0xd2>
 8005192:	232d      	movs	r3, #45	; 0x2d
 8005194:	4276      	negs	r6, r6
 8005196:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800519a:	485a      	ldr	r0, [pc, #360]	; (8005304 <_printf_i+0x23c>)
 800519c:	230a      	movs	r3, #10
 800519e:	e012      	b.n	80051c6 <_printf_i+0xfe>
 80051a0:	682b      	ldr	r3, [r5, #0]
 80051a2:	6820      	ldr	r0, [r4, #0]
 80051a4:	1d19      	adds	r1, r3, #4
 80051a6:	6029      	str	r1, [r5, #0]
 80051a8:	0605      	lsls	r5, r0, #24
 80051aa:	d501      	bpl.n	80051b0 <_printf_i+0xe8>
 80051ac:	681e      	ldr	r6, [r3, #0]
 80051ae:	e002      	b.n	80051b6 <_printf_i+0xee>
 80051b0:	0641      	lsls	r1, r0, #25
 80051b2:	d5fb      	bpl.n	80051ac <_printf_i+0xe4>
 80051b4:	881e      	ldrh	r6, [r3, #0]
 80051b6:	4853      	ldr	r0, [pc, #332]	; (8005304 <_printf_i+0x23c>)
 80051b8:	2f6f      	cmp	r7, #111	; 0x6f
 80051ba:	bf0c      	ite	eq
 80051bc:	2308      	moveq	r3, #8
 80051be:	230a      	movne	r3, #10
 80051c0:	2100      	movs	r1, #0
 80051c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80051c6:	6865      	ldr	r5, [r4, #4]
 80051c8:	60a5      	str	r5, [r4, #8]
 80051ca:	2d00      	cmp	r5, #0
 80051cc:	bfa2      	ittt	ge
 80051ce:	6821      	ldrge	r1, [r4, #0]
 80051d0:	f021 0104 	bicge.w	r1, r1, #4
 80051d4:	6021      	strge	r1, [r4, #0]
 80051d6:	b90e      	cbnz	r6, 80051dc <_printf_i+0x114>
 80051d8:	2d00      	cmp	r5, #0
 80051da:	d04b      	beq.n	8005274 <_printf_i+0x1ac>
 80051dc:	4615      	mov	r5, r2
 80051de:	fbb6 f1f3 	udiv	r1, r6, r3
 80051e2:	fb03 6711 	mls	r7, r3, r1, r6
 80051e6:	5dc7      	ldrb	r7, [r0, r7]
 80051e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80051ec:	4637      	mov	r7, r6
 80051ee:	42bb      	cmp	r3, r7
 80051f0:	460e      	mov	r6, r1
 80051f2:	d9f4      	bls.n	80051de <_printf_i+0x116>
 80051f4:	2b08      	cmp	r3, #8
 80051f6:	d10b      	bne.n	8005210 <_printf_i+0x148>
 80051f8:	6823      	ldr	r3, [r4, #0]
 80051fa:	07de      	lsls	r6, r3, #31
 80051fc:	d508      	bpl.n	8005210 <_printf_i+0x148>
 80051fe:	6923      	ldr	r3, [r4, #16]
 8005200:	6861      	ldr	r1, [r4, #4]
 8005202:	4299      	cmp	r1, r3
 8005204:	bfde      	ittt	le
 8005206:	2330      	movle	r3, #48	; 0x30
 8005208:	f805 3c01 	strble.w	r3, [r5, #-1]
 800520c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005210:	1b52      	subs	r2, r2, r5
 8005212:	6122      	str	r2, [r4, #16]
 8005214:	f8cd a000 	str.w	sl, [sp]
 8005218:	464b      	mov	r3, r9
 800521a:	aa03      	add	r2, sp, #12
 800521c:	4621      	mov	r1, r4
 800521e:	4640      	mov	r0, r8
 8005220:	f7ff fee4 	bl	8004fec <_printf_common>
 8005224:	3001      	adds	r0, #1
 8005226:	d14a      	bne.n	80052be <_printf_i+0x1f6>
 8005228:	f04f 30ff 	mov.w	r0, #4294967295
 800522c:	b004      	add	sp, #16
 800522e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005232:	6823      	ldr	r3, [r4, #0]
 8005234:	f043 0320 	orr.w	r3, r3, #32
 8005238:	6023      	str	r3, [r4, #0]
 800523a:	4833      	ldr	r0, [pc, #204]	; (8005308 <_printf_i+0x240>)
 800523c:	2778      	movs	r7, #120	; 0x78
 800523e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005242:	6823      	ldr	r3, [r4, #0]
 8005244:	6829      	ldr	r1, [r5, #0]
 8005246:	061f      	lsls	r7, r3, #24
 8005248:	f851 6b04 	ldr.w	r6, [r1], #4
 800524c:	d402      	bmi.n	8005254 <_printf_i+0x18c>
 800524e:	065f      	lsls	r7, r3, #25
 8005250:	bf48      	it	mi
 8005252:	b2b6      	uxthmi	r6, r6
 8005254:	07df      	lsls	r7, r3, #31
 8005256:	bf48      	it	mi
 8005258:	f043 0320 	orrmi.w	r3, r3, #32
 800525c:	6029      	str	r1, [r5, #0]
 800525e:	bf48      	it	mi
 8005260:	6023      	strmi	r3, [r4, #0]
 8005262:	b91e      	cbnz	r6, 800526c <_printf_i+0x1a4>
 8005264:	6823      	ldr	r3, [r4, #0]
 8005266:	f023 0320 	bic.w	r3, r3, #32
 800526a:	6023      	str	r3, [r4, #0]
 800526c:	2310      	movs	r3, #16
 800526e:	e7a7      	b.n	80051c0 <_printf_i+0xf8>
 8005270:	4824      	ldr	r0, [pc, #144]	; (8005304 <_printf_i+0x23c>)
 8005272:	e7e4      	b.n	800523e <_printf_i+0x176>
 8005274:	4615      	mov	r5, r2
 8005276:	e7bd      	b.n	80051f4 <_printf_i+0x12c>
 8005278:	682b      	ldr	r3, [r5, #0]
 800527a:	6826      	ldr	r6, [r4, #0]
 800527c:	6961      	ldr	r1, [r4, #20]
 800527e:	1d18      	adds	r0, r3, #4
 8005280:	6028      	str	r0, [r5, #0]
 8005282:	0635      	lsls	r5, r6, #24
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	d501      	bpl.n	800528c <_printf_i+0x1c4>
 8005288:	6019      	str	r1, [r3, #0]
 800528a:	e002      	b.n	8005292 <_printf_i+0x1ca>
 800528c:	0670      	lsls	r0, r6, #25
 800528e:	d5fb      	bpl.n	8005288 <_printf_i+0x1c0>
 8005290:	8019      	strh	r1, [r3, #0]
 8005292:	2300      	movs	r3, #0
 8005294:	6123      	str	r3, [r4, #16]
 8005296:	4615      	mov	r5, r2
 8005298:	e7bc      	b.n	8005214 <_printf_i+0x14c>
 800529a:	682b      	ldr	r3, [r5, #0]
 800529c:	1d1a      	adds	r2, r3, #4
 800529e:	602a      	str	r2, [r5, #0]
 80052a0:	681d      	ldr	r5, [r3, #0]
 80052a2:	6862      	ldr	r2, [r4, #4]
 80052a4:	2100      	movs	r1, #0
 80052a6:	4628      	mov	r0, r5
 80052a8:	f7fa ff9a 	bl	80001e0 <memchr>
 80052ac:	b108      	cbz	r0, 80052b2 <_printf_i+0x1ea>
 80052ae:	1b40      	subs	r0, r0, r5
 80052b0:	6060      	str	r0, [r4, #4]
 80052b2:	6863      	ldr	r3, [r4, #4]
 80052b4:	6123      	str	r3, [r4, #16]
 80052b6:	2300      	movs	r3, #0
 80052b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052bc:	e7aa      	b.n	8005214 <_printf_i+0x14c>
 80052be:	6923      	ldr	r3, [r4, #16]
 80052c0:	462a      	mov	r2, r5
 80052c2:	4649      	mov	r1, r9
 80052c4:	4640      	mov	r0, r8
 80052c6:	47d0      	blx	sl
 80052c8:	3001      	adds	r0, #1
 80052ca:	d0ad      	beq.n	8005228 <_printf_i+0x160>
 80052cc:	6823      	ldr	r3, [r4, #0]
 80052ce:	079b      	lsls	r3, r3, #30
 80052d0:	d413      	bmi.n	80052fa <_printf_i+0x232>
 80052d2:	68e0      	ldr	r0, [r4, #12]
 80052d4:	9b03      	ldr	r3, [sp, #12]
 80052d6:	4298      	cmp	r0, r3
 80052d8:	bfb8      	it	lt
 80052da:	4618      	movlt	r0, r3
 80052dc:	e7a6      	b.n	800522c <_printf_i+0x164>
 80052de:	2301      	movs	r3, #1
 80052e0:	4632      	mov	r2, r6
 80052e2:	4649      	mov	r1, r9
 80052e4:	4640      	mov	r0, r8
 80052e6:	47d0      	blx	sl
 80052e8:	3001      	adds	r0, #1
 80052ea:	d09d      	beq.n	8005228 <_printf_i+0x160>
 80052ec:	3501      	adds	r5, #1
 80052ee:	68e3      	ldr	r3, [r4, #12]
 80052f0:	9903      	ldr	r1, [sp, #12]
 80052f2:	1a5b      	subs	r3, r3, r1
 80052f4:	42ab      	cmp	r3, r5
 80052f6:	dcf2      	bgt.n	80052de <_printf_i+0x216>
 80052f8:	e7eb      	b.n	80052d2 <_printf_i+0x20a>
 80052fa:	2500      	movs	r5, #0
 80052fc:	f104 0619 	add.w	r6, r4, #25
 8005300:	e7f5      	b.n	80052ee <_printf_i+0x226>
 8005302:	bf00      	nop
 8005304:	0800550d 	.word	0x0800550d
 8005308:	0800551e 	.word	0x0800551e

0800530c <memmove>:
 800530c:	4288      	cmp	r0, r1
 800530e:	b510      	push	{r4, lr}
 8005310:	eb01 0402 	add.w	r4, r1, r2
 8005314:	d902      	bls.n	800531c <memmove+0x10>
 8005316:	4284      	cmp	r4, r0
 8005318:	4623      	mov	r3, r4
 800531a:	d807      	bhi.n	800532c <memmove+0x20>
 800531c:	1e43      	subs	r3, r0, #1
 800531e:	42a1      	cmp	r1, r4
 8005320:	d008      	beq.n	8005334 <memmove+0x28>
 8005322:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005326:	f803 2f01 	strb.w	r2, [r3, #1]!
 800532a:	e7f8      	b.n	800531e <memmove+0x12>
 800532c:	4402      	add	r2, r0
 800532e:	4601      	mov	r1, r0
 8005330:	428a      	cmp	r2, r1
 8005332:	d100      	bne.n	8005336 <memmove+0x2a>
 8005334:	bd10      	pop	{r4, pc}
 8005336:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800533a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800533e:	e7f7      	b.n	8005330 <memmove+0x24>

08005340 <_sbrk_r>:
 8005340:	b538      	push	{r3, r4, r5, lr}
 8005342:	4d06      	ldr	r5, [pc, #24]	; (800535c <_sbrk_r+0x1c>)
 8005344:	2300      	movs	r3, #0
 8005346:	4604      	mov	r4, r0
 8005348:	4608      	mov	r0, r1
 800534a:	602b      	str	r3, [r5, #0]
 800534c:	f7fc f9a8 	bl	80016a0 <_sbrk>
 8005350:	1c43      	adds	r3, r0, #1
 8005352:	d102      	bne.n	800535a <_sbrk_r+0x1a>
 8005354:	682b      	ldr	r3, [r5, #0]
 8005356:	b103      	cbz	r3, 800535a <_sbrk_r+0x1a>
 8005358:	6023      	str	r3, [r4, #0]
 800535a:	bd38      	pop	{r3, r4, r5, pc}
 800535c:	200042f4 	.word	0x200042f4

08005360 <_realloc_r>:
 8005360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005364:	4680      	mov	r8, r0
 8005366:	4614      	mov	r4, r2
 8005368:	460e      	mov	r6, r1
 800536a:	b921      	cbnz	r1, 8005376 <_realloc_r+0x16>
 800536c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005370:	4611      	mov	r1, r2
 8005372:	f7ff bc57 	b.w	8004c24 <_malloc_r>
 8005376:	b92a      	cbnz	r2, 8005384 <_realloc_r+0x24>
 8005378:	f7ff fbe8 	bl	8004b4c <_free_r>
 800537c:	4625      	mov	r5, r4
 800537e:	4628      	mov	r0, r5
 8005380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005384:	f000 f81b 	bl	80053be <_malloc_usable_size_r>
 8005388:	4284      	cmp	r4, r0
 800538a:	4607      	mov	r7, r0
 800538c:	d802      	bhi.n	8005394 <_realloc_r+0x34>
 800538e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005392:	d812      	bhi.n	80053ba <_realloc_r+0x5a>
 8005394:	4621      	mov	r1, r4
 8005396:	4640      	mov	r0, r8
 8005398:	f7ff fc44 	bl	8004c24 <_malloc_r>
 800539c:	4605      	mov	r5, r0
 800539e:	2800      	cmp	r0, #0
 80053a0:	d0ed      	beq.n	800537e <_realloc_r+0x1e>
 80053a2:	42bc      	cmp	r4, r7
 80053a4:	4622      	mov	r2, r4
 80053a6:	4631      	mov	r1, r6
 80053a8:	bf28      	it	cs
 80053aa:	463a      	movcs	r2, r7
 80053ac:	f7ff fbc0 	bl	8004b30 <memcpy>
 80053b0:	4631      	mov	r1, r6
 80053b2:	4640      	mov	r0, r8
 80053b4:	f7ff fbca 	bl	8004b4c <_free_r>
 80053b8:	e7e1      	b.n	800537e <_realloc_r+0x1e>
 80053ba:	4635      	mov	r5, r6
 80053bc:	e7df      	b.n	800537e <_realloc_r+0x1e>

080053be <_malloc_usable_size_r>:
 80053be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053c2:	1f18      	subs	r0, r3, #4
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	bfbc      	itt	lt
 80053c8:	580b      	ldrlt	r3, [r1, r0]
 80053ca:	18c0      	addlt	r0, r0, r3
 80053cc:	4770      	bx	lr
	...

080053d0 <_init>:
 80053d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053d2:	bf00      	nop
 80053d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053d6:	bc08      	pop	{r3}
 80053d8:	469e      	mov	lr, r3
 80053da:	4770      	bx	lr

080053dc <_fini>:
 80053dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053de:	bf00      	nop
 80053e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053e2:	bc08      	pop	{r3}
 80053e4:	469e      	mov	lr, r3
 80053e6:	4770      	bx	lr
