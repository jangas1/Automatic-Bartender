
Temp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007078  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  08007218  08007218  00017218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800738c  0800738c  00020134  2**0
                  CONTENTS
  4 .ARM          00000008  0800738c  0800738c  0001738c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007394  08007394  00020134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007394  08007394  00017394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007398  08007398  00017398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000134  20000000  0800739c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000042dc  20000134  080074d0  00020134  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004410  080074d0  00024410  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014964  00000000  00000000  000201a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003430  00000000  00000000  00034b0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001418  00000000  00000000  00037f40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f7e  00000000  00000000  00039358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019a96  00000000  00000000  0003a2d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018081  00000000  00000000  00053d6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00098a3f  00000000  00000000  0006bded  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000058c0  00000000  00000000  0010482c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0010a0ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000134 	.word	0x20000134
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007200 	.word	0x08007200

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000138 	.word	0x20000138
 80001dc:	08007200 	.word	0x08007200

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b970 	b.w	8000d54 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9e08      	ldr	r6, [sp, #32]
 8000a92:	460d      	mov	r5, r1
 8000a94:	4604      	mov	r4, r0
 8000a96:	460f      	mov	r7, r1
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d14a      	bne.n	8000b32 <__udivmoddi4+0xa6>
 8000a9c:	428a      	cmp	r2, r1
 8000a9e:	4694      	mov	ip, r2
 8000aa0:	d965      	bls.n	8000b6e <__udivmoddi4+0xe2>
 8000aa2:	fab2 f382 	clz	r3, r2
 8000aa6:	b143      	cbz	r3, 8000aba <__udivmoddi4+0x2e>
 8000aa8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000aac:	f1c3 0220 	rsb	r2, r3, #32
 8000ab0:	409f      	lsls	r7, r3
 8000ab2:	fa20 f202 	lsr.w	r2, r0, r2
 8000ab6:	4317      	orrs	r7, r2
 8000ab8:	409c      	lsls	r4, r3
 8000aba:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000abe:	fa1f f58c 	uxth.w	r5, ip
 8000ac2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ac6:	0c22      	lsrs	r2, r4, #16
 8000ac8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000acc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ad0:	fb01 f005 	mul.w	r0, r1, r5
 8000ad4:	4290      	cmp	r0, r2
 8000ad6:	d90a      	bls.n	8000aee <__udivmoddi4+0x62>
 8000ad8:	eb1c 0202 	adds.w	r2, ip, r2
 8000adc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ae0:	f080 811c 	bcs.w	8000d1c <__udivmoddi4+0x290>
 8000ae4:	4290      	cmp	r0, r2
 8000ae6:	f240 8119 	bls.w	8000d1c <__udivmoddi4+0x290>
 8000aea:	3902      	subs	r1, #2
 8000aec:	4462      	add	r2, ip
 8000aee:	1a12      	subs	r2, r2, r0
 8000af0:	b2a4      	uxth	r4, r4
 8000af2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000af6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000afa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000afe:	fb00 f505 	mul.w	r5, r0, r5
 8000b02:	42a5      	cmp	r5, r4
 8000b04:	d90a      	bls.n	8000b1c <__udivmoddi4+0x90>
 8000b06:	eb1c 0404 	adds.w	r4, ip, r4
 8000b0a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b0e:	f080 8107 	bcs.w	8000d20 <__udivmoddi4+0x294>
 8000b12:	42a5      	cmp	r5, r4
 8000b14:	f240 8104 	bls.w	8000d20 <__udivmoddi4+0x294>
 8000b18:	4464      	add	r4, ip
 8000b1a:	3802      	subs	r0, #2
 8000b1c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b20:	1b64      	subs	r4, r4, r5
 8000b22:	2100      	movs	r1, #0
 8000b24:	b11e      	cbz	r6, 8000b2e <__udivmoddi4+0xa2>
 8000b26:	40dc      	lsrs	r4, r3
 8000b28:	2300      	movs	r3, #0
 8000b2a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b32:	428b      	cmp	r3, r1
 8000b34:	d908      	bls.n	8000b48 <__udivmoddi4+0xbc>
 8000b36:	2e00      	cmp	r6, #0
 8000b38:	f000 80ed 	beq.w	8000d16 <__udivmoddi4+0x28a>
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b42:	4608      	mov	r0, r1
 8000b44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b48:	fab3 f183 	clz	r1, r3
 8000b4c:	2900      	cmp	r1, #0
 8000b4e:	d149      	bne.n	8000be4 <__udivmoddi4+0x158>
 8000b50:	42ab      	cmp	r3, r5
 8000b52:	d302      	bcc.n	8000b5a <__udivmoddi4+0xce>
 8000b54:	4282      	cmp	r2, r0
 8000b56:	f200 80f8 	bhi.w	8000d4a <__udivmoddi4+0x2be>
 8000b5a:	1a84      	subs	r4, r0, r2
 8000b5c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b60:	2001      	movs	r0, #1
 8000b62:	4617      	mov	r7, r2
 8000b64:	2e00      	cmp	r6, #0
 8000b66:	d0e2      	beq.n	8000b2e <__udivmoddi4+0xa2>
 8000b68:	e9c6 4700 	strd	r4, r7, [r6]
 8000b6c:	e7df      	b.n	8000b2e <__udivmoddi4+0xa2>
 8000b6e:	b902      	cbnz	r2, 8000b72 <__udivmoddi4+0xe6>
 8000b70:	deff      	udf	#255	; 0xff
 8000b72:	fab2 f382 	clz	r3, r2
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	f040 8090 	bne.w	8000c9c <__udivmoddi4+0x210>
 8000b7c:	1a8a      	subs	r2, r1, r2
 8000b7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b82:	fa1f fe8c 	uxth.w	lr, ip
 8000b86:	2101      	movs	r1, #1
 8000b88:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b8c:	fb07 2015 	mls	r0, r7, r5, r2
 8000b90:	0c22      	lsrs	r2, r4, #16
 8000b92:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b96:	fb0e f005 	mul.w	r0, lr, r5
 8000b9a:	4290      	cmp	r0, r2
 8000b9c:	d908      	bls.n	8000bb0 <__udivmoddi4+0x124>
 8000b9e:	eb1c 0202 	adds.w	r2, ip, r2
 8000ba2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ba6:	d202      	bcs.n	8000bae <__udivmoddi4+0x122>
 8000ba8:	4290      	cmp	r0, r2
 8000baa:	f200 80cb 	bhi.w	8000d44 <__udivmoddi4+0x2b8>
 8000bae:	4645      	mov	r5, r8
 8000bb0:	1a12      	subs	r2, r2, r0
 8000bb2:	b2a4      	uxth	r4, r4
 8000bb4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000bb8:	fb07 2210 	mls	r2, r7, r0, r2
 8000bbc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bc0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bc4:	45a6      	cmp	lr, r4
 8000bc6:	d908      	bls.n	8000bda <__udivmoddi4+0x14e>
 8000bc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bcc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bd0:	d202      	bcs.n	8000bd8 <__udivmoddi4+0x14c>
 8000bd2:	45a6      	cmp	lr, r4
 8000bd4:	f200 80bb 	bhi.w	8000d4e <__udivmoddi4+0x2c2>
 8000bd8:	4610      	mov	r0, r2
 8000bda:	eba4 040e 	sub.w	r4, r4, lr
 8000bde:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000be2:	e79f      	b.n	8000b24 <__udivmoddi4+0x98>
 8000be4:	f1c1 0720 	rsb	r7, r1, #32
 8000be8:	408b      	lsls	r3, r1
 8000bea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bf2:	fa05 f401 	lsl.w	r4, r5, r1
 8000bf6:	fa20 f307 	lsr.w	r3, r0, r7
 8000bfa:	40fd      	lsrs	r5, r7
 8000bfc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c00:	4323      	orrs	r3, r4
 8000c02:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c06:	fa1f fe8c 	uxth.w	lr, ip
 8000c0a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c0e:	0c1c      	lsrs	r4, r3, #16
 8000c10:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c14:	fb08 f50e 	mul.w	r5, r8, lr
 8000c18:	42a5      	cmp	r5, r4
 8000c1a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c1e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c22:	d90b      	bls.n	8000c3c <__udivmoddi4+0x1b0>
 8000c24:	eb1c 0404 	adds.w	r4, ip, r4
 8000c28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c2c:	f080 8088 	bcs.w	8000d40 <__udivmoddi4+0x2b4>
 8000c30:	42a5      	cmp	r5, r4
 8000c32:	f240 8085 	bls.w	8000d40 <__udivmoddi4+0x2b4>
 8000c36:	f1a8 0802 	sub.w	r8, r8, #2
 8000c3a:	4464      	add	r4, ip
 8000c3c:	1b64      	subs	r4, r4, r5
 8000c3e:	b29d      	uxth	r5, r3
 8000c40:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c44:	fb09 4413 	mls	r4, r9, r3, r4
 8000c48:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c4c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c50:	45a6      	cmp	lr, r4
 8000c52:	d908      	bls.n	8000c66 <__udivmoddi4+0x1da>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c5c:	d26c      	bcs.n	8000d38 <__udivmoddi4+0x2ac>
 8000c5e:	45a6      	cmp	lr, r4
 8000c60:	d96a      	bls.n	8000d38 <__udivmoddi4+0x2ac>
 8000c62:	3b02      	subs	r3, #2
 8000c64:	4464      	add	r4, ip
 8000c66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6a:	fba3 9502 	umull	r9, r5, r3, r2
 8000c6e:	eba4 040e 	sub.w	r4, r4, lr
 8000c72:	42ac      	cmp	r4, r5
 8000c74:	46c8      	mov	r8, r9
 8000c76:	46ae      	mov	lr, r5
 8000c78:	d356      	bcc.n	8000d28 <__udivmoddi4+0x29c>
 8000c7a:	d053      	beq.n	8000d24 <__udivmoddi4+0x298>
 8000c7c:	b156      	cbz	r6, 8000c94 <__udivmoddi4+0x208>
 8000c7e:	ebb0 0208 	subs.w	r2, r0, r8
 8000c82:	eb64 040e 	sbc.w	r4, r4, lr
 8000c86:	fa04 f707 	lsl.w	r7, r4, r7
 8000c8a:	40ca      	lsrs	r2, r1
 8000c8c:	40cc      	lsrs	r4, r1
 8000c8e:	4317      	orrs	r7, r2
 8000c90:	e9c6 7400 	strd	r7, r4, [r6]
 8000c94:	4618      	mov	r0, r3
 8000c96:	2100      	movs	r1, #0
 8000c98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9c:	f1c3 0120 	rsb	r1, r3, #32
 8000ca0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ca4:	fa20 f201 	lsr.w	r2, r0, r1
 8000ca8:	fa25 f101 	lsr.w	r1, r5, r1
 8000cac:	409d      	lsls	r5, r3
 8000cae:	432a      	orrs	r2, r5
 8000cb0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cb4:	fa1f fe8c 	uxth.w	lr, ip
 8000cb8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cbc:	fb07 1510 	mls	r5, r7, r0, r1
 8000cc0:	0c11      	lsrs	r1, r2, #16
 8000cc2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000cc6:	fb00 f50e 	mul.w	r5, r0, lr
 8000cca:	428d      	cmp	r5, r1
 8000ccc:	fa04 f403 	lsl.w	r4, r4, r3
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0x258>
 8000cd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cd6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cda:	d22f      	bcs.n	8000d3c <__udivmoddi4+0x2b0>
 8000cdc:	428d      	cmp	r5, r1
 8000cde:	d92d      	bls.n	8000d3c <__udivmoddi4+0x2b0>
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	4461      	add	r1, ip
 8000ce4:	1b49      	subs	r1, r1, r5
 8000ce6:	b292      	uxth	r2, r2
 8000ce8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000cec:	fb07 1115 	mls	r1, r7, r5, r1
 8000cf0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cf4:	fb05 f10e 	mul.w	r1, r5, lr
 8000cf8:	4291      	cmp	r1, r2
 8000cfa:	d908      	bls.n	8000d0e <__udivmoddi4+0x282>
 8000cfc:	eb1c 0202 	adds.w	r2, ip, r2
 8000d00:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d04:	d216      	bcs.n	8000d34 <__udivmoddi4+0x2a8>
 8000d06:	4291      	cmp	r1, r2
 8000d08:	d914      	bls.n	8000d34 <__udivmoddi4+0x2a8>
 8000d0a:	3d02      	subs	r5, #2
 8000d0c:	4462      	add	r2, ip
 8000d0e:	1a52      	subs	r2, r2, r1
 8000d10:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d14:	e738      	b.n	8000b88 <__udivmoddi4+0xfc>
 8000d16:	4631      	mov	r1, r6
 8000d18:	4630      	mov	r0, r6
 8000d1a:	e708      	b.n	8000b2e <__udivmoddi4+0xa2>
 8000d1c:	4639      	mov	r1, r7
 8000d1e:	e6e6      	b.n	8000aee <__udivmoddi4+0x62>
 8000d20:	4610      	mov	r0, r2
 8000d22:	e6fb      	b.n	8000b1c <__udivmoddi4+0x90>
 8000d24:	4548      	cmp	r0, r9
 8000d26:	d2a9      	bcs.n	8000c7c <__udivmoddi4+0x1f0>
 8000d28:	ebb9 0802 	subs.w	r8, r9, r2
 8000d2c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d30:	3b01      	subs	r3, #1
 8000d32:	e7a3      	b.n	8000c7c <__udivmoddi4+0x1f0>
 8000d34:	4645      	mov	r5, r8
 8000d36:	e7ea      	b.n	8000d0e <__udivmoddi4+0x282>
 8000d38:	462b      	mov	r3, r5
 8000d3a:	e794      	b.n	8000c66 <__udivmoddi4+0x1da>
 8000d3c:	4640      	mov	r0, r8
 8000d3e:	e7d1      	b.n	8000ce4 <__udivmoddi4+0x258>
 8000d40:	46d0      	mov	r8, sl
 8000d42:	e77b      	b.n	8000c3c <__udivmoddi4+0x1b0>
 8000d44:	3d02      	subs	r5, #2
 8000d46:	4462      	add	r2, ip
 8000d48:	e732      	b.n	8000bb0 <__udivmoddi4+0x124>
 8000d4a:	4608      	mov	r0, r1
 8000d4c:	e70a      	b.n	8000b64 <__udivmoddi4+0xd8>
 8000d4e:	4464      	add	r4, ip
 8000d50:	3802      	subs	r0, #2
 8000d52:	e742      	b.n	8000bda <__udivmoddi4+0x14e>

08000d54 <__aeabi_idiv0>:
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop

08000d58 <LeftReact>:
/**
 * @brief Reacts to a left turn of the encoder.
 *
 * This function is called when the encoder is turned left. It handles the left turn event.
 */
void LeftReact(){
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
    menu.handleLeft(&menu);
 8000d5c:	4b02      	ldr	r3, [pc, #8]	; (8000d68 <LeftReact+0x10>)
 8000d5e:	699b      	ldr	r3, [r3, #24]
 8000d60:	4801      	ldr	r0, [pc, #4]	; (8000d68 <LeftReact+0x10>)
 8000d62:	4798      	blx	r3
}
 8000d64:	bf00      	nop
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	20000040 	.word	0x20000040

08000d6c <RightReact>:
/**
 * @brief Reacts to a right turn of the encoder.
 *
 * This function is called when the encoder is turned right. It handles the right turn event.
 */
void RightReact(){
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
    menu.handleRight(&menu);
 8000d70:	4b02      	ldr	r3, [pc, #8]	; (8000d7c <RightReact+0x10>)
 8000d72:	69db      	ldr	r3, [r3, #28]
 8000d74:	4801      	ldr	r0, [pc, #4]	; (8000d7c <RightReact+0x10>)
 8000d76:	4798      	blx	r3
}
 8000d78:	bf00      	nop
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	20000040 	.word	0x20000040

08000d80 <ClickedReact>:
/**
 * @brief Reacts to a click of the encoder button.
 *
 * This function is called when the encoder button is clicked. It handles the click event.
 */
void ClickedReact(){
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
    menu.clickedReact(&menu);
 8000d84:	4b02      	ldr	r3, [pc, #8]	; (8000d90 <ClickedReact+0x10>)
 8000d86:	6a1b      	ldr	r3, [r3, #32]
 8000d88:	4801      	ldr	r0, [pc, #4]	; (8000d90 <ClickedReact+0x10>)
 8000d8a:	4798      	blx	r3
}
 8000d8c:	bf00      	nop
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	20000040 	.word	0x20000040

08000d94 <ISR>:
 * @brief Interrupt Service Routine for the encoder.
 *
 * This function is called in response to changes in the encoder's signals.
 * It updates the encoder state and calls the appropriate callback functions.
 */
void ISR(){
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
    enc.lastClock = enc.newClock;
 8000d98:	4b2c      	ldr	r3, [pc, #176]	; (8000e4c <ISR+0xb8>)
 8000d9a:	789a      	ldrb	r2, [r3, #2]
 8000d9c:	4b2b      	ldr	r3, [pc, #172]	; (8000e4c <ISR+0xb8>)
 8000d9e:	701a      	strb	r2, [r3, #0]
    enc.lastDir = enc.direction;
 8000da0:	4b2a      	ldr	r3, [pc, #168]	; (8000e4c <ISR+0xb8>)
 8000da2:	785a      	ldrb	r2, [r3, #1]
 8000da4:	4b29      	ldr	r3, [pc, #164]	; (8000e4c <ISR+0xb8>)
 8000da6:	70da      	strb	r2, [r3, #3]
    enc.lastClicked = enc.Clicked;
 8000da8:	4b28      	ldr	r3, [pc, #160]	; (8000e4c <ISR+0xb8>)
 8000daa:	795a      	ldrb	r2, [r3, #5]
 8000dac:	4b27      	ldr	r3, [pc, #156]	; (8000e4c <ISR+0xb8>)
 8000dae:	711a      	strb	r2, [r3, #4]
    enc.newClock = HAL_GPIO_ReadPin(enc_CLK_GPIO_Port, enc_CLK_Pin);
 8000db0:	2140      	movs	r1, #64	; 0x40
 8000db2:	4827      	ldr	r0, [pc, #156]	; (8000e50 <ISR+0xbc>)
 8000db4:	f002 f924 	bl	8003000 <HAL_GPIO_ReadPin>
 8000db8:	4603      	mov	r3, r0
 8000dba:	461a      	mov	r2, r3
 8000dbc:	4b23      	ldr	r3, [pc, #140]	; (8000e4c <ISR+0xb8>)
 8000dbe:	709a      	strb	r2, [r3, #2]
    enc.direction = HAL_GPIO_ReadPin(enc_DATA_GPIO_Port, enc_DATA_Pin);
 8000dc0:	2120      	movs	r1, #32
 8000dc2:	4823      	ldr	r0, [pc, #140]	; (8000e50 <ISR+0xbc>)
 8000dc4:	f002 f91c 	bl	8003000 <HAL_GPIO_ReadPin>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	461a      	mov	r2, r3
 8000dcc:	4b1f      	ldr	r3, [pc, #124]	; (8000e4c <ISR+0xb8>)
 8000dce:	705a      	strb	r2, [r3, #1]
    enc.Clicked = !HAL_GPIO_ReadPin(enc_CLICK_GPIO_Port, enc_CLICK_Pin);
 8000dd0:	2110      	movs	r1, #16
 8000dd2:	481f      	ldr	r0, [pc, #124]	; (8000e50 <ISR+0xbc>)
 8000dd4:	f002 f914 	bl	8003000 <HAL_GPIO_ReadPin>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	bf0c      	ite	eq
 8000dde:	2301      	moveq	r3, #1
 8000de0:	2300      	movne	r3, #0
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	461a      	mov	r2, r3
 8000de6:	4b19      	ldr	r3, [pc, #100]	; (8000e4c <ISR+0xb8>)
 8000de8:	715a      	strb	r2, [r3, #5]

    if (((enc.lastClock != enc.newClock) && enc.newClock == 1)) {
 8000dea:	4b18      	ldr	r3, [pc, #96]	; (8000e4c <ISR+0xb8>)
 8000dec:	781a      	ldrb	r2, [r3, #0]
 8000dee:	4b17      	ldr	r3, [pc, #92]	; (8000e4c <ISR+0xb8>)
 8000df0:	789b      	ldrb	r3, [r3, #2]
 8000df2:	429a      	cmp	r2, r3
 8000df4:	d00b      	beq.n	8000e0e <ISR+0x7a>
 8000df6:	4b15      	ldr	r3, [pc, #84]	; (8000e4c <ISR+0xb8>)
 8000df8:	789b      	ldrb	r3, [r3, #2]
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d107      	bne.n	8000e0e <ISR+0x7a>
        if (enc.direction == 1) {
 8000dfe:	4b13      	ldr	r3, [pc, #76]	; (8000e4c <ISR+0xb8>)
 8000e00:	785b      	ldrb	r3, [r3, #1]
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d114      	bne.n	8000e30 <ISR+0x9c>
            enc.LeftCallback();
 8000e06:	4b11      	ldr	r3, [pc, #68]	; (8000e4c <ISR+0xb8>)
 8000e08:	68db      	ldr	r3, [r3, #12]
 8000e0a:	4798      	blx	r3
        if (enc.direction == 1) {
 8000e0c:	e010      	b.n	8000e30 <ISR+0x9c>
        }
    } else if ((enc.lastDir != enc.direction) && enc.direction == 1) {
 8000e0e:	4b0f      	ldr	r3, [pc, #60]	; (8000e4c <ISR+0xb8>)
 8000e10:	78da      	ldrb	r2, [r3, #3]
 8000e12:	4b0e      	ldr	r3, [pc, #56]	; (8000e4c <ISR+0xb8>)
 8000e14:	785b      	ldrb	r3, [r3, #1]
 8000e16:	429a      	cmp	r2, r3
 8000e18:	d00a      	beq.n	8000e30 <ISR+0x9c>
 8000e1a:	4b0c      	ldr	r3, [pc, #48]	; (8000e4c <ISR+0xb8>)
 8000e1c:	785b      	ldrb	r3, [r3, #1]
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d106      	bne.n	8000e30 <ISR+0x9c>
        if (enc.newClock == 1) {
 8000e22:	4b0a      	ldr	r3, [pc, #40]	; (8000e4c <ISR+0xb8>)
 8000e24:	789b      	ldrb	r3, [r3, #2]
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d102      	bne.n	8000e30 <ISR+0x9c>
            enc.RightCallback();
 8000e2a:	4b08      	ldr	r3, [pc, #32]	; (8000e4c <ISR+0xb8>)
 8000e2c:	691b      	ldr	r3, [r3, #16]
 8000e2e:	4798      	blx	r3
        }
    }
    if ((enc.Clicked == 1) && (enc.lastClicked == 0)) {
 8000e30:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <ISR+0xb8>)
 8000e32:	795b      	ldrb	r3, [r3, #5]
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d106      	bne.n	8000e46 <ISR+0xb2>
 8000e38:	4b04      	ldr	r3, [pc, #16]	; (8000e4c <ISR+0xb8>)
 8000e3a:	791b      	ldrb	r3, [r3, #4]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d102      	bne.n	8000e46 <ISR+0xb2>
        enc.ClickedCallback();
 8000e40:	4b02      	ldr	r3, [pc, #8]	; (8000e4c <ISR+0xb8>)
 8000e42:	695b      	ldr	r3, [r3, #20]
 8000e44:	4798      	blx	r3
    }
}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	20000150 	.word	0x20000150
 8000e50:	40020400 	.word	0x40020400

08000e54 <encoderInit>:
/**
 * @brief Initializes the encoder.
 *
 * This function initializes the encoder structure and sets the default callback functions.
 */
void encoderInit(){
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
    enc.ISR = ISR;
 8000e58:	4b0e      	ldr	r3, [pc, #56]	; (8000e94 <encoderInit+0x40>)
 8000e5a:	4a0f      	ldr	r2, [pc, #60]	; (8000e98 <encoderInit+0x44>)
 8000e5c:	609a      	str	r2, [r3, #8]
    enc.RightCallback = RightReact;
 8000e5e:	4b0d      	ldr	r3, [pc, #52]	; (8000e94 <encoderInit+0x40>)
 8000e60:	4a0e      	ldr	r2, [pc, #56]	; (8000e9c <encoderInit+0x48>)
 8000e62:	611a      	str	r2, [r3, #16]
    enc.LeftCallback = LeftReact;
 8000e64:	4b0b      	ldr	r3, [pc, #44]	; (8000e94 <encoderInit+0x40>)
 8000e66:	4a0e      	ldr	r2, [pc, #56]	; (8000ea0 <encoderInit+0x4c>)
 8000e68:	60da      	str	r2, [r3, #12]
    enc.ClickedCallback = ClickedReact;
 8000e6a:	4b0a      	ldr	r3, [pc, #40]	; (8000e94 <encoderInit+0x40>)
 8000e6c:	4a0d      	ldr	r2, [pc, #52]	; (8000ea4 <encoderInit+0x50>)
 8000e6e:	615a      	str	r2, [r3, #20]
    enc.direction = 1;
 8000e70:	4b08      	ldr	r3, [pc, #32]	; (8000e94 <encoderInit+0x40>)
 8000e72:	2201      	movs	r2, #1
 8000e74:	705a      	strb	r2, [r3, #1]
    enc.lastClock = 1;
 8000e76:	4b07      	ldr	r3, [pc, #28]	; (8000e94 <encoderInit+0x40>)
 8000e78:	2201      	movs	r2, #1
 8000e7a:	701a      	strb	r2, [r3, #0]
    enc.lastDir = 1;
 8000e7c:	4b05      	ldr	r3, [pc, #20]	; (8000e94 <encoderInit+0x40>)
 8000e7e:	2201      	movs	r2, #1
 8000e80:	70da      	strb	r2, [r3, #3]
    enc.newClock = 1;
 8000e82:	4b04      	ldr	r3, [pc, #16]	; (8000e94 <encoderInit+0x40>)
 8000e84:	2201      	movs	r2, #1
 8000e86:	709a      	strb	r2, [r3, #2]
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	20000150 	.word	0x20000150
 8000e98:	08000d95 	.word	0x08000d95
 8000e9c:	08000d6d 	.word	0x08000d6d
 8000ea0:	08000d59 	.word	0x08000d59
 8000ea4:	08000d81 	.word	0x08000d81

08000ea8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	4a07      	ldr	r2, [pc, #28]	; (8000ed4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000eb8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000eba:	68bb      	ldr	r3, [r7, #8]
 8000ebc:	4a06      	ldr	r2, [pc, #24]	; (8000ed8 <vApplicationGetIdleTaskMemory+0x30>)
 8000ebe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2280      	movs	r2, #128	; 0x80
 8000ec4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000ec6:	bf00      	nop
 8000ec8:	3714      	adds	r7, #20
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	20000168 	.word	0x20000168
 8000ed8:	20000208 	.word	0x20000208

08000edc <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8000ee6:	4a38      	ldr	r2, [pc, #224]	; (8000fc8 <HD44780_Init+0xec>)
 8000ee8:	79fb      	ldrb	r3, [r7, #7]
 8000eea:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8000eec:	4b37      	ldr	r3, [pc, #220]	; (8000fcc <HD44780_Init+0xf0>)
 8000eee:	2208      	movs	r2, #8
 8000ef0:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000ef2:	4b37      	ldr	r3, [pc, #220]	; (8000fd0 <HD44780_Init+0xf4>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8000ef8:	4b33      	ldr	r3, [pc, #204]	; (8000fc8 <HD44780_Init+0xec>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d907      	bls.n	8000f10 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000f00:	4b33      	ldr	r3, [pc, #204]	; (8000fd0 <HD44780_Init+0xf4>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	f043 0308 	orr.w	r3, r3, #8
 8000f08:	b2da      	uxtb	r2, r3
 8000f0a:	4b31      	ldr	r3, [pc, #196]	; (8000fd0 <HD44780_Init+0xf4>)
 8000f0c:	701a      	strb	r2, [r3, #0]
 8000f0e:	e006      	b.n	8000f1e <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000f10:	4b2f      	ldr	r3, [pc, #188]	; (8000fd0 <HD44780_Init+0xf4>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	f043 0304 	orr.w	r3, r3, #4
 8000f18:	b2da      	uxtb	r2, r3
 8000f1a:	4b2d      	ldr	r3, [pc, #180]	; (8000fd0 <HD44780_Init+0xf4>)
 8000f1c:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8000f1e:	f000 f985 	bl	800122c <DelayInit>
  osDelay(50);
 8000f22:	2032      	movs	r0, #50	; 0x32
 8000f24:	f000 f9ac 	bl	8001280 <osDelay>

  ExpanderWrite(dpBacklight);
 8000f28:	4b28      	ldr	r3, [pc, #160]	; (8000fcc <HD44780_Init+0xf0>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f000 f943 	bl	80011b8 <ExpanderWrite>
  osDelay(1000);
 8000f32:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f36:	f000 f9a3 	bl	8001280 <osDelay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8000f3a:	2030      	movs	r0, #48	; 0x30
 8000f3c:	f000 f92b 	bl	8001196 <Write4Bits>
  osDelay(4500);
 8000f40:	f241 1094 	movw	r0, #4500	; 0x1194
 8000f44:	f000 f99c 	bl	8001280 <osDelay>

  Write4Bits(0x03 << 4);
 8000f48:	2030      	movs	r0, #48	; 0x30
 8000f4a:	f000 f924 	bl	8001196 <Write4Bits>
  osDelay(4500);
 8000f4e:	f241 1094 	movw	r0, #4500	; 0x1194
 8000f52:	f000 f995 	bl	8001280 <osDelay>

  Write4Bits(0x03 << 4);
 8000f56:	2030      	movs	r0, #48	; 0x30
 8000f58:	f000 f91d 	bl	8001196 <Write4Bits>
  osDelay(4500);
 8000f5c:	f241 1094 	movw	r0, #4500	; 0x1194
 8000f60:	f000 f98e 	bl	8001280 <osDelay>

  Write4Bits(0x02 << 4);
 8000f64:	2020      	movs	r0, #32
 8000f66:	f000 f916 	bl	8001196 <Write4Bits>
  osDelay(100);
 8000f6a:	2064      	movs	r0, #100	; 0x64
 8000f6c:	f000 f988 	bl	8001280 <osDelay>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8000f70:	4b17      	ldr	r3, [pc, #92]	; (8000fd0 <HD44780_Init+0xf4>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	f043 0320 	orr.w	r3, r3, #32
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f000 f8ce 	bl	800111c <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000f80:	4b14      	ldr	r3, [pc, #80]	; (8000fd4 <HD44780_Init+0xf8>)
 8000f82:	2204      	movs	r2, #4
 8000f84:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8000f86:	f000 f875 	bl	8001074 <HD44780_Display>
  HD44780_Clear();
 8000f8a:	f000 f82b 	bl	8000fe4 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000f8e:	4b12      	ldr	r3, [pc, #72]	; (8000fd8 <HD44780_Init+0xfc>)
 8000f90:	2202      	movs	r2, #2
 8000f92:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000f94:	4b10      	ldr	r3, [pc, #64]	; (8000fd8 <HD44780_Init+0xfc>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	f043 0304 	orr.w	r3, r3, #4
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f000 f8bc 	bl	800111c <SendCommand>
  osDelay(4500);
 8000fa4:	f241 1094 	movw	r0, #4500	; 0x1194
 8000fa8:	f000 f96a 	bl	8001280 <osDelay>

  HD44780_CreateSpecialChar(0, special1);
 8000fac:	490b      	ldr	r1, [pc, #44]	; (8000fdc <HD44780_Init+0x100>)
 8000fae:	2000      	movs	r0, #0
 8000fb0:	f000 f876 	bl	80010a0 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8000fb4:	490a      	ldr	r1, [pc, #40]	; (8000fe0 <HD44780_Init+0x104>)
 8000fb6:	2001      	movs	r0, #1
 8000fb8:	f000 f872 	bl	80010a0 <HD44780_CreateSpecialChar>

  HD44780_Home();
 8000fbc:	f000 f81d 	bl	8000ffa <HD44780_Home>
}
 8000fc0:	bf00      	nop
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	2000040b 	.word	0x2000040b
 8000fcc:	2000040c 	.word	0x2000040c
 8000fd0:	20000408 	.word	0x20000408
 8000fd4:	20000409 	.word	0x20000409
 8000fd8:	2000040a 	.word	0x2000040a
 8000fdc:	20000000 	.word	0x20000000
 8000fe0:	20000008 	.word	0x20000008

08000fe4 <HD44780_Clear>:

void HD44780_Clear()
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8000fe8:	2001      	movs	r0, #1
 8000fea:	f000 f897 	bl	800111c <SendCommand>
  osDelay(2000);
 8000fee:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000ff2:	f000 f945 	bl	8001280 <osDelay>
}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <HD44780_Home>:

void HD44780_Home()
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8000ffe:	2002      	movs	r0, #2
 8001000:	f000 f88c 	bl	800111c <SendCommand>
  osDelay(2000);
 8001004:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001008:	f000 f93a 	bl	8001280 <osDelay>
}
 800100c:	bf00      	nop
 800100e:	bd80      	pop	{r7, pc}

08001010 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8001010:	b590      	push	{r4, r7, lr}
 8001012:	b087      	sub	sp, #28
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	460a      	mov	r2, r1
 800101a:	71fb      	strb	r3, [r7, #7]
 800101c:	4613      	mov	r3, r2
 800101e:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8001020:	4b12      	ldr	r3, [pc, #72]	; (800106c <HD44780_SetCursor+0x5c>)
 8001022:	f107 0408 	add.w	r4, r7, #8
 8001026:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001028:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 800102c:	4b10      	ldr	r3, [pc, #64]	; (8001070 <HD44780_SetCursor+0x60>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	79ba      	ldrb	r2, [r7, #6]
 8001032:	429a      	cmp	r2, r3
 8001034:	d303      	bcc.n	800103e <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 8001036:	4b0e      	ldr	r3, [pc, #56]	; (8001070 <HD44780_SetCursor+0x60>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	3b01      	subs	r3, #1
 800103c:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 800103e:	79bb      	ldrb	r3, [r7, #6]
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	3318      	adds	r3, #24
 8001044:	443b      	add	r3, r7
 8001046:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800104a:	b2da      	uxtb	r2, r3
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	4413      	add	r3, r2
 8001050:	b2db      	uxtb	r3, r3
 8001052:	b25b      	sxtb	r3, r3
 8001054:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001058:	b25b      	sxtb	r3, r3
 800105a:	b2db      	uxtb	r3, r3
 800105c:	4618      	mov	r0, r3
 800105e:	f000 f85d 	bl	800111c <SendCommand>
}
 8001062:	bf00      	nop
 8001064:	371c      	adds	r7, #28
 8001066:	46bd      	mov	sp, r7
 8001068:	bd90      	pop	{r4, r7, pc}
 800106a:	bf00      	nop
 800106c:	08007218 	.word	0x08007218
 8001070:	2000040b 	.word	0x2000040b

08001074 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8001078:	4b08      	ldr	r3, [pc, #32]	; (800109c <HD44780_Display+0x28>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	f043 0304 	orr.w	r3, r3, #4
 8001080:	b2da      	uxtb	r2, r3
 8001082:	4b06      	ldr	r3, [pc, #24]	; (800109c <HD44780_Display+0x28>)
 8001084:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8001086:	4b05      	ldr	r3, [pc, #20]	; (800109c <HD44780_Display+0x28>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	f043 0308 	orr.w	r3, r3, #8
 800108e:	b2db      	uxtb	r3, r3
 8001090:	4618      	mov	r0, r3
 8001092:	f000 f843 	bl	800111c <SendCommand>
}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	20000409 	.word	0x20000409

080010a0 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	6039      	str	r1, [r7, #0]
 80010aa:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	f003 0307 	and.w	r3, r3, #7
 80010b2:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	00db      	lsls	r3, r3, #3
 80010b8:	b25b      	sxtb	r3, r3
 80010ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010be:	b25b      	sxtb	r3, r3
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	4618      	mov	r0, r3
 80010c4:	f000 f82a 	bl	800111c <SendCommand>
  for (int i=0; i<8; i++)
 80010c8:	2300      	movs	r3, #0
 80010ca:	60fb      	str	r3, [r7, #12]
 80010cc:	e009      	b.n	80010e2 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	683a      	ldr	r2, [r7, #0]
 80010d2:	4413      	add	r3, r2
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f000 f82e 	bl	8001138 <SendChar>
  for (int i=0; i<8; i++)
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	3301      	adds	r3, #1
 80010e0:	60fb      	str	r3, [r7, #12]
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	2b07      	cmp	r3, #7
 80010e6:	ddf2      	ble.n	80010ce <HD44780_CreateSpecialChar+0x2e>
  }
}
 80010e8:	bf00      	nop
 80010ea:	bf00      	nop
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b082      	sub	sp, #8
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 80010fa:	e006      	b.n	800110a <HD44780_PrintStr+0x18>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	1c5a      	adds	r2, r3, #1
 8001100:	607a      	str	r2, [r7, #4]
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	4618      	mov	r0, r3
 8001106:	f000 f817 	bl	8001138 <SendChar>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d1f4      	bne.n	80010fc <HD44780_PrintStr+0xa>
}
 8001112:	bf00      	nop
 8001114:	bf00      	nop
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	2100      	movs	r1, #0
 800112a:	4618      	mov	r0, r3
 800112c:	f000 f812 	bl	8001154 <Send>
}
 8001130:	bf00      	nop
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}

08001138 <SendChar>:

static void SendChar(uint8_t ch)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	2101      	movs	r1, #1
 8001146:	4618      	mov	r0, r3
 8001148:	f000 f804 	bl	8001154 <Send>
}
 800114c:	bf00      	nop
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	460a      	mov	r2, r1
 800115e:	71fb      	strb	r3, [r7, #7]
 8001160:	4613      	mov	r3, r2
 8001162:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	f023 030f 	bic.w	r3, r3, #15
 800116a:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 800116c:	79fb      	ldrb	r3, [r7, #7]
 800116e:	011b      	lsls	r3, r3, #4
 8001170:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8001172:	7bfa      	ldrb	r2, [r7, #15]
 8001174:	79bb      	ldrb	r3, [r7, #6]
 8001176:	4313      	orrs	r3, r2
 8001178:	b2db      	uxtb	r3, r3
 800117a:	4618      	mov	r0, r3
 800117c:	f000 f80b 	bl	8001196 <Write4Bits>
  Write4Bits((lownib)|mode);
 8001180:	7bba      	ldrb	r2, [r7, #14]
 8001182:	79bb      	ldrb	r3, [r7, #6]
 8001184:	4313      	orrs	r3, r2
 8001186:	b2db      	uxtb	r3, r3
 8001188:	4618      	mov	r0, r3
 800118a:	f000 f804 	bl	8001196 <Write4Bits>
}
 800118e:	bf00      	nop
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	b082      	sub	sp, #8
 800119a:	af00      	add	r7, sp, #0
 800119c:	4603      	mov	r3, r0
 800119e:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	4618      	mov	r0, r3
 80011a4:	f000 f808 	bl	80011b8 <ExpanderWrite>
  PulseEnable(value);
 80011a8:	79fb      	ldrb	r3, [r7, #7]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f000 f820 	bl	80011f0 <PulseEnable>
}
 80011b0:	bf00      	nop
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af02      	add	r7, sp, #8
 80011be:	4603      	mov	r3, r0
 80011c0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 80011c2:	4b09      	ldr	r3, [pc, #36]	; (80011e8 <ExpanderWrite+0x30>)
 80011c4:	781a      	ldrb	r2, [r3, #0]
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 80011ce:	f107 020f 	add.w	r2, r7, #15
 80011d2:	230a      	movs	r3, #10
 80011d4:	9300      	str	r3, [sp, #0]
 80011d6:	2301      	movs	r3, #1
 80011d8:	214e      	movs	r1, #78	; 0x4e
 80011da:	4804      	ldr	r0, [pc, #16]	; (80011ec <ExpanderWrite+0x34>)
 80011dc:	f002 f886 	bl	80032ec <HAL_I2C_Master_Transmit>
}
 80011e0:	bf00      	nop
 80011e2:	3710      	adds	r7, #16
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	2000040c 	.word	0x2000040c
 80011ec:	20000410 	.word	0x20000410

080011f0 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	4603      	mov	r3, r0
 80011f8:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 80011fa:	79fb      	ldrb	r3, [r7, #7]
 80011fc:	f043 0304 	orr.w	r3, r3, #4
 8001200:	b2db      	uxtb	r3, r3
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff ffd8 	bl	80011b8 <ExpanderWrite>
  osDelay(20);
 8001208:	2014      	movs	r0, #20
 800120a:	f000 f839 	bl	8001280 <osDelay>

  ExpanderWrite(_data & ~ENABLE);
 800120e:	79fb      	ldrb	r3, [r7, #7]
 8001210:	f023 0304 	bic.w	r3, r3, #4
 8001214:	b2db      	uxtb	r3, r3
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff ffce 	bl	80011b8 <ExpanderWrite>
  osDelay(20);
 800121c:	2014      	movs	r0, #20
 800121e:	f000 f82f 	bl	8001280 <osDelay>
}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
	...

0800122c <DelayInit>:

static void DelayInit(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8001230:	4b11      	ldr	r3, [pc, #68]	; (8001278 <DelayInit+0x4c>)
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	4a10      	ldr	r2, [pc, #64]	; (8001278 <DelayInit+0x4c>)
 8001236:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800123a:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 800123c:	4b0e      	ldr	r3, [pc, #56]	; (8001278 <DelayInit+0x4c>)
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	4a0d      	ldr	r2, [pc, #52]	; (8001278 <DelayInit+0x4c>)
 8001242:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001246:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001248:	4b0c      	ldr	r3, [pc, #48]	; (800127c <DelayInit+0x50>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a0b      	ldr	r2, [pc, #44]	; (800127c <DelayInit+0x50>)
 800124e:	f023 0301 	bic.w	r3, r3, #1
 8001252:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001254:	4b09      	ldr	r3, [pc, #36]	; (800127c <DelayInit+0x50>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a08      	ldr	r2, [pc, #32]	; (800127c <DelayInit+0x50>)
 800125a:	f043 0301 	orr.w	r3, r3, #1
 800125e:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8001260:	4b06      	ldr	r3, [pc, #24]	; (800127c <DelayInit+0x50>)
 8001262:	2200      	movs	r2, #0
 8001264:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8001266:	bf00      	nop
  __ASM volatile ("NOP");
 8001268:	bf00      	nop
  __ASM volatile ("NOP");
 800126a:	bf00      	nop
}
 800126c:	bf00      	nop
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	e000edf0 	.word	0xe000edf0
 800127c:	e0001000 	.word	0xe0001000

08001280 <osDelay>:

static void osDelay(uint32_t us) {
 8001280:	b480      	push	{r7}
 8001282:	b087      	sub	sp, #28
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8001288:	4b0e      	ldr	r3, [pc, #56]	; (80012c4 <osDelay+0x44>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a0e      	ldr	r2, [pc, #56]	; (80012c8 <osDelay+0x48>)
 800128e:	fba2 2303 	umull	r2, r3, r2, r3
 8001292:	0c9a      	lsrs	r2, r3, #18
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	fb02 f303 	mul.w	r3, r2, r3
 800129a:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 800129c:	4b0b      	ldr	r3, [pc, #44]	; (80012cc <osDelay+0x4c>)
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 80012a2:	4b0a      	ldr	r3, [pc, #40]	; (80012cc <osDelay+0x4c>)
 80012a4:	685a      	ldr	r2, [r3, #4]
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	697a      	ldr	r2, [r7, #20]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d8f6      	bhi.n	80012a2 <osDelay+0x22>
}
 80012b4:	bf00      	nop
 80012b6:	bf00      	nop
 80012b8:	371c      	adds	r7, #28
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	200000d4 	.word	0x200000d4
 80012c8:	431bde83 	.word	0x431bde83
 80012cc:	e0001000 	.word	0xe0001000

080012d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012d0:	b5b0      	push	{r4, r5, r7, lr}
 80012d2:	b0a4      	sub	sp, #144	; 0x90
 80012d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  menu.currentMenu = &SUB1;
 80012d6:	4b3d      	ldr	r3, [pc, #244]	; (80013cc <main+0xfc>)
 80012d8:	4a3d      	ldr	r2, [pc, #244]	; (80013d0 <main+0x100>)
 80012da:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012dc:	f001 fbe8 	bl	8002ab0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012e0:	f000 f890 	bl	8001404 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012e4:	f000 f9b8 	bl	8001658 <MX_GPIO_Init>
  MX_I2C1_Init();
 80012e8:	f000 f8f6 	bl	80014d8 <MX_I2C1_Init>
  MX_TIM2_Init();
 80012ec:	f000 f922 	bl	8001534 <MX_TIM2_Init>
  MX_TIM9_Init();
 80012f0:	f000 f96c 	bl	80015cc <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */
  encoderInit();
 80012f4:	f7ff fdae 	bl	8000e54 <encoderInit>
  HAL_TIM_Base_Start_IT(&htim2);
 80012f8:	4836      	ldr	r0, [pc, #216]	; (80013d4 <main+0x104>)
 80012fa:	f003 f86b 	bl	80043d4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 80012fe:	2100      	movs	r1, #0
 8001300:	4835      	ldr	r0, [pc, #212]	; (80013d8 <main+0x108>)
 8001302:	f003 f919 	bl	8004538 <HAL_TIM_PWM_Start>
  initServo();
 8001306:	f001 f8b3 	bl	8002470 <initServo>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityAboveNormal, 0, 128);
 800130a:	4b34      	ldr	r3, [pc, #208]	; (80013dc <main+0x10c>)
 800130c:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8001310:	461d      	mov	r5, r3
 8001312:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001314:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001316:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800131a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800131e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001322:	2100      	movs	r1, #0
 8001324:	4618      	mov	r0, r3
 8001326:	f003 ffd2 	bl	80052ce <osThreadCreate>
 800132a:	4603      	mov	r3, r0
 800132c:	4a2c      	ldr	r2, [pc, #176]	; (80013e0 <main+0x110>)
 800132e:	6013      	str	r3, [r2, #0]

  /* definition and creation of diodeDetector */
  osThreadDef(diodeDetector, diodeDetector_Init, osPriorityIdle, 0, 128);
 8001330:	4b2c      	ldr	r3, [pc, #176]	; (80013e4 <main+0x114>)
 8001332:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8001336:	461d      	mov	r5, r3
 8001338:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800133a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800133c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001340:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  diodeDetectorHandle = osThreadCreate(osThread(diodeDetector), NULL);
 8001344:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001348:	2100      	movs	r1, #0
 800134a:	4618      	mov	r0, r3
 800134c:	f003 ffbf 	bl	80052ce <osThreadCreate>
 8001350:	4603      	mov	r3, r0
 8001352:	4a25      	ldr	r2, [pc, #148]	; (80013e8 <main+0x118>)
 8001354:	6013      	str	r3, [r2, #0]

  /* definition and creation of holeState */
  osThreadDef(holeState, holeState_Init, osPriorityNormal, 0, 128);
 8001356:	4b25      	ldr	r3, [pc, #148]	; (80013ec <main+0x11c>)
 8001358:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800135c:	461d      	mov	r5, r3
 800135e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001360:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001362:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001366:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  holeStateHandle = osThreadCreate(osThread(holeState), NULL);
 800136a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800136e:	2100      	movs	r1, #0
 8001370:	4618      	mov	r0, r3
 8001372:	f003 ffac 	bl	80052ce <osThreadCreate>
 8001376:	4603      	mov	r3, r0
 8001378:	4a1d      	ldr	r2, [pc, #116]	; (80013f0 <main+0x120>)
 800137a:	6013      	str	r3, [r2, #0]

  /* definition and creation of displayMenu */
  osThreadDef(displayMenu, displayMenu_Init, osPriorityIdle, 0, 128);
 800137c:	4b1d      	ldr	r3, [pc, #116]	; (80013f4 <main+0x124>)
 800137e:	f107 0420 	add.w	r4, r7, #32
 8001382:	461d      	mov	r5, r3
 8001384:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001386:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001388:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800138c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  displayMenuHandle = osThreadCreate(osThread(displayMenu), NULL);
 8001390:	f107 0320 	add.w	r3, r7, #32
 8001394:	2100      	movs	r1, #0
 8001396:	4618      	mov	r0, r3
 8001398:	f003 ff99 	bl	80052ce <osThreadCreate>
 800139c:	4603      	mov	r3, r0
 800139e:	4a16      	ldr	r2, [pc, #88]	; (80013f8 <main+0x128>)
 80013a0:	6013      	str	r3, [r2, #0]

  /* definition and creation of servoPour */
  osThreadDef(servoPour, pourInit, osPriorityHigh, 0, 128);
 80013a2:	4b16      	ldr	r3, [pc, #88]	; (80013fc <main+0x12c>)
 80013a4:	1d3c      	adds	r4, r7, #4
 80013a6:	461d      	mov	r5, r3
 80013a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013ac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  servoPourHandle = osThreadCreate(osThread(servoPour), NULL);
 80013b4:	1d3b      	adds	r3, r7, #4
 80013b6:	2100      	movs	r1, #0
 80013b8:	4618      	mov	r0, r3
 80013ba:	f003 ff88 	bl	80052ce <osThreadCreate>
 80013be:	4603      	mov	r3, r0
 80013c0:	4a0f      	ldr	r2, [pc, #60]	; (8001400 <main+0x130>)
 80013c2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80013c4:	f003 ff7c 	bl	80052c0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013c8:	e7fe      	b.n	80013c8 <main+0xf8>
 80013ca:	bf00      	nop
 80013cc:	20000040 	.word	0x20000040
 80013d0:	20000010 	.word	0x20000010
 80013d4:	20000464 	.word	0x20000464
 80013d8:	200004ac 	.word	0x200004ac
 80013dc:	08007234 	.word	0x08007234
 80013e0:	200004f4 	.word	0x200004f4
 80013e4:	08007260 	.word	0x08007260
 80013e8:	200004f8 	.word	0x200004f8
 80013ec:	08007288 	.word	0x08007288
 80013f0:	200004fc 	.word	0x200004fc
 80013f4:	080072b0 	.word	0x080072b0
 80013f8:	20000500 	.word	0x20000500
 80013fc:	080072d8 	.word	0x080072d8
 8001400:	20000504 	.word	0x20000504

08001404 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b094      	sub	sp, #80	; 0x50
 8001408:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800140a:	f107 0320 	add.w	r3, r7, #32
 800140e:	2230      	movs	r2, #48	; 0x30
 8001410:	2100      	movs	r1, #0
 8001412:	4618      	mov	r0, r3
 8001414:	f005 f9d2 	bl	80067bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001418:	f107 030c 	add.w	r3, r7, #12
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	60da      	str	r2, [r3, #12]
 8001426:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001428:	2300      	movs	r3, #0
 800142a:	60bb      	str	r3, [r7, #8]
 800142c:	4b28      	ldr	r3, [pc, #160]	; (80014d0 <SystemClock_Config+0xcc>)
 800142e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001430:	4a27      	ldr	r2, [pc, #156]	; (80014d0 <SystemClock_Config+0xcc>)
 8001432:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001436:	6413      	str	r3, [r2, #64]	; 0x40
 8001438:	4b25      	ldr	r3, [pc, #148]	; (80014d0 <SystemClock_Config+0xcc>)
 800143a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001440:	60bb      	str	r3, [r7, #8]
 8001442:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001444:	2300      	movs	r3, #0
 8001446:	607b      	str	r3, [r7, #4]
 8001448:	4b22      	ldr	r3, [pc, #136]	; (80014d4 <SystemClock_Config+0xd0>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a21      	ldr	r2, [pc, #132]	; (80014d4 <SystemClock_Config+0xd0>)
 800144e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001452:	6013      	str	r3, [r2, #0]
 8001454:	4b1f      	ldr	r3, [pc, #124]	; (80014d4 <SystemClock_Config+0xd0>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800145c:	607b      	str	r3, [r7, #4]
 800145e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001460:	2302      	movs	r3, #2
 8001462:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001464:	2301      	movs	r3, #1
 8001466:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001468:	2310      	movs	r3, #16
 800146a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800146c:	2302      	movs	r3, #2
 800146e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001470:	2300      	movs	r3, #0
 8001472:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001474:	2308      	movs	r3, #8
 8001476:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001478:	2360      	movs	r3, #96	; 0x60
 800147a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800147c:	2302      	movs	r3, #2
 800147e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001480:	2308      	movs	r3, #8
 8001482:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001484:	f107 0320 	add.w	r3, r7, #32
 8001488:	4618      	mov	r0, r3
 800148a:	f002 fa89 	bl	80039a0 <HAL_RCC_OscConfig>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001494:	f000 fc50 	bl	8001d38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001498:	230f      	movs	r3, #15
 800149a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800149c:	2302      	movs	r3, #2
 800149e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014a0:	2300      	movs	r3, #0
 80014a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80014aa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80014ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80014b0:	f107 030c 	add.w	r3, r7, #12
 80014b4:	2103      	movs	r1, #3
 80014b6:	4618      	mov	r0, r3
 80014b8:	f002 fcea 	bl	8003e90 <HAL_RCC_ClockConfig>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80014c2:	f000 fc39 	bl	8001d38 <Error_Handler>
  }
}
 80014c6:	bf00      	nop
 80014c8:	3750      	adds	r7, #80	; 0x50
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40023800 	.word	0x40023800
 80014d4:	40007000 	.word	0x40007000

080014d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014dc:	4b13      	ldr	r3, [pc, #76]	; (800152c <MX_I2C1_Init+0x54>)
 80014de:	4a14      	ldr	r2, [pc, #80]	; (8001530 <MX_I2C1_Init+0x58>)
 80014e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 25000;
 80014e2:	4b12      	ldr	r3, [pc, #72]	; (800152c <MX_I2C1_Init+0x54>)
 80014e4:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80014e8:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014ea:	4b10      	ldr	r3, [pc, #64]	; (800152c <MX_I2C1_Init+0x54>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014f0:	4b0e      	ldr	r3, [pc, #56]	; (800152c <MX_I2C1_Init+0x54>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014f6:	4b0d      	ldr	r3, [pc, #52]	; (800152c <MX_I2C1_Init+0x54>)
 80014f8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014fc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014fe:	4b0b      	ldr	r3, [pc, #44]	; (800152c <MX_I2C1_Init+0x54>)
 8001500:	2200      	movs	r2, #0
 8001502:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001504:	4b09      	ldr	r3, [pc, #36]	; (800152c <MX_I2C1_Init+0x54>)
 8001506:	2200      	movs	r2, #0
 8001508:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800150a:	4b08      	ldr	r3, [pc, #32]	; (800152c <MX_I2C1_Init+0x54>)
 800150c:	2200      	movs	r2, #0
 800150e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001510:	4b06      	ldr	r3, [pc, #24]	; (800152c <MX_I2C1_Init+0x54>)
 8001512:	2200      	movs	r2, #0
 8001514:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001516:	4805      	ldr	r0, [pc, #20]	; (800152c <MX_I2C1_Init+0x54>)
 8001518:	f001 fda4 	bl	8003064 <HAL_I2C_Init>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8001522:	f000 fc09 	bl	8001d38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	20000410 	.word	0x20000410
 8001530:	40005400 	.word	0x40005400

08001534 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b086      	sub	sp, #24
 8001538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800153a:	f107 0308 	add.w	r3, r7, #8
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	605a      	str	r2, [r3, #4]
 8001544:	609a      	str	r2, [r3, #8]
 8001546:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001548:	463b      	mov	r3, r7
 800154a:	2200      	movs	r2, #0
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001550:	4b1d      	ldr	r3, [pc, #116]	; (80015c8 <MX_TIM2_Init+0x94>)
 8001552:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001556:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001558:	4b1b      	ldr	r3, [pc, #108]	; (80015c8 <MX_TIM2_Init+0x94>)
 800155a:	2200      	movs	r2, #0
 800155c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800155e:	4b1a      	ldr	r3, [pc, #104]	; (80015c8 <MX_TIM2_Init+0x94>)
 8001560:	2200      	movs	r2, #0
 8001562:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60000;
 8001564:	4b18      	ldr	r3, [pc, #96]	; (80015c8 <MX_TIM2_Init+0x94>)
 8001566:	f64e 2260 	movw	r2, #60000	; 0xea60
 800156a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800156c:	4b16      	ldr	r3, [pc, #88]	; (80015c8 <MX_TIM2_Init+0x94>)
 800156e:	2200      	movs	r2, #0
 8001570:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001572:	4b15      	ldr	r3, [pc, #84]	; (80015c8 <MX_TIM2_Init+0x94>)
 8001574:	2200      	movs	r2, #0
 8001576:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001578:	4813      	ldr	r0, [pc, #76]	; (80015c8 <MX_TIM2_Init+0x94>)
 800157a:	f002 fedb 	bl	8004334 <HAL_TIM_Base_Init>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001584:	f000 fbd8 	bl	8001d38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001588:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800158c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800158e:	f107 0308 	add.w	r3, r7, #8
 8001592:	4619      	mov	r1, r3
 8001594:	480c      	ldr	r0, [pc, #48]	; (80015c8 <MX_TIM2_Init+0x94>)
 8001596:	f003 fa31 	bl	80049fc <HAL_TIM_ConfigClockSource>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80015a0:	f000 fbca 	bl	8001d38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015a4:	2300      	movs	r3, #0
 80015a6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015a8:	2300      	movs	r3, #0
 80015aa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015ac:	463b      	mov	r3, r7
 80015ae:	4619      	mov	r1, r3
 80015b0:	4805      	ldr	r0, [pc, #20]	; (80015c8 <MX_TIM2_Init+0x94>)
 80015b2:	f003 fdeb 	bl	800518c <HAL_TIMEx_MasterConfigSynchronization>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80015bc:	f000 fbbc 	bl	8001d38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80015c0:	bf00      	nop
 80015c2:	3718      	adds	r7, #24
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	20000464 	.word	0x20000464

080015cc <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b088      	sub	sp, #32
 80015d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80015d2:	1d3b      	adds	r3, r7, #4
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	605a      	str	r2, [r3, #4]
 80015da:	609a      	str	r2, [r3, #8]
 80015dc:	60da      	str	r2, [r3, #12]
 80015de:	611a      	str	r2, [r3, #16]
 80015e0:	615a      	str	r2, [r3, #20]
 80015e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80015e4:	4b1a      	ldr	r3, [pc, #104]	; (8001650 <MX_TIM9_Init+0x84>)
 80015e6:	4a1b      	ldr	r2, [pc, #108]	; (8001654 <MX_TIM9_Init+0x88>)
 80015e8:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 266;
 80015ea:	4b19      	ldr	r3, [pc, #100]	; (8001650 <MX_TIM9_Init+0x84>)
 80015ec:	f44f 7285 	mov.w	r2, #266	; 0x10a
 80015f0:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015f2:	4b17      	ldr	r3, [pc, #92]	; (8001650 <MX_TIM9_Init+0x84>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 3600;
 80015f8:	4b15      	ldr	r3, [pc, #84]	; (8001650 <MX_TIM9_Init+0x84>)
 80015fa:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80015fe:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001600:	4b13      	ldr	r3, [pc, #76]	; (8001650 <MX_TIM9_Init+0x84>)
 8001602:	2200      	movs	r2, #0
 8001604:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001606:	4b12      	ldr	r3, [pc, #72]	; (8001650 <MX_TIM9_Init+0x84>)
 8001608:	2280      	movs	r2, #128	; 0x80
 800160a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 800160c:	4810      	ldr	r0, [pc, #64]	; (8001650 <MX_TIM9_Init+0x84>)
 800160e:	f002 ff43 	bl	8004498 <HAL_TIM_PWM_Init>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <MX_TIM9_Init+0x50>
  {
    Error_Handler();
 8001618:	f000 fb8e 	bl	8001d38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800161c:	2360      	movs	r3, #96	; 0x60
 800161e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 249;
 8001620:	23f9      	movs	r3, #249	; 0xf9
 8001622:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001624:	2300      	movs	r3, #0
 8001626:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001628:	2300      	movs	r3, #0
 800162a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800162c:	1d3b      	adds	r3, r7, #4
 800162e:	2200      	movs	r2, #0
 8001630:	4619      	mov	r1, r3
 8001632:	4807      	ldr	r0, [pc, #28]	; (8001650 <MX_TIM9_Init+0x84>)
 8001634:	f003 f920 	bl	8004878 <HAL_TIM_PWM_ConfigChannel>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_TIM9_Init+0x76>
  {
    Error_Handler();
 800163e:	f000 fb7b 	bl	8001d38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8001642:	4803      	ldr	r0, [pc, #12]	; (8001650 <MX_TIM9_Init+0x84>)
 8001644:	f001 f8e6 	bl	8002814 <HAL_TIM_MspPostInit>

}
 8001648:	bf00      	nop
 800164a:	3720      	adds	r7, #32
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	200004ac 	.word	0x200004ac
 8001654:	40014000 	.word	0x40014000

08001658 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b08c      	sub	sp, #48	; 0x30
 800165c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800165e:	f107 031c 	add.w	r3, r7, #28
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	605a      	str	r2, [r3, #4]
 8001668:	609a      	str	r2, [r3, #8]
 800166a:	60da      	str	r2, [r3, #12]
 800166c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	61bb      	str	r3, [r7, #24]
 8001672:	4bb5      	ldr	r3, [pc, #724]	; (8001948 <MX_GPIO_Init+0x2f0>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	4ab4      	ldr	r2, [pc, #720]	; (8001948 <MX_GPIO_Init+0x2f0>)
 8001678:	f043 0310 	orr.w	r3, r3, #16
 800167c:	6313      	str	r3, [r2, #48]	; 0x30
 800167e:	4bb2      	ldr	r3, [pc, #712]	; (8001948 <MX_GPIO_Init+0x2f0>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	f003 0310 	and.w	r3, r3, #16
 8001686:	61bb      	str	r3, [r7, #24]
 8001688:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	617b      	str	r3, [r7, #20]
 800168e:	4bae      	ldr	r3, [pc, #696]	; (8001948 <MX_GPIO_Init+0x2f0>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	4aad      	ldr	r2, [pc, #692]	; (8001948 <MX_GPIO_Init+0x2f0>)
 8001694:	f043 0304 	orr.w	r3, r3, #4
 8001698:	6313      	str	r3, [r2, #48]	; 0x30
 800169a:	4bab      	ldr	r3, [pc, #684]	; (8001948 <MX_GPIO_Init+0x2f0>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	f003 0304 	and.w	r3, r3, #4
 80016a2:	617b      	str	r3, [r7, #20]
 80016a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	613b      	str	r3, [r7, #16]
 80016aa:	4ba7      	ldr	r3, [pc, #668]	; (8001948 <MX_GPIO_Init+0x2f0>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	4aa6      	ldr	r2, [pc, #664]	; (8001948 <MX_GPIO_Init+0x2f0>)
 80016b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016b4:	6313      	str	r3, [r2, #48]	; 0x30
 80016b6:	4ba4      	ldr	r3, [pc, #656]	; (8001948 <MX_GPIO_Init+0x2f0>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016be:	613b      	str	r3, [r7, #16]
 80016c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	60fb      	str	r3, [r7, #12]
 80016c6:	4ba0      	ldr	r3, [pc, #640]	; (8001948 <MX_GPIO_Init+0x2f0>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	4a9f      	ldr	r2, [pc, #636]	; (8001948 <MX_GPIO_Init+0x2f0>)
 80016cc:	f043 0301 	orr.w	r3, r3, #1
 80016d0:	6313      	str	r3, [r2, #48]	; 0x30
 80016d2:	4b9d      	ldr	r3, [pc, #628]	; (8001948 <MX_GPIO_Init+0x2f0>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	60fb      	str	r3, [r7, #12]
 80016dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016de:	2300      	movs	r3, #0
 80016e0:	60bb      	str	r3, [r7, #8]
 80016e2:	4b99      	ldr	r3, [pc, #612]	; (8001948 <MX_GPIO_Init+0x2f0>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	4a98      	ldr	r2, [pc, #608]	; (8001948 <MX_GPIO_Init+0x2f0>)
 80016e8:	f043 0302 	orr.w	r3, r3, #2
 80016ec:	6313      	str	r3, [r2, #48]	; 0x30
 80016ee:	4b96      	ldr	r3, [pc, #600]	; (8001948 <MX_GPIO_Init+0x2f0>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	60bb      	str	r3, [r7, #8]
 80016f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016fa:	2300      	movs	r3, #0
 80016fc:	607b      	str	r3, [r7, #4]
 80016fe:	4b92      	ldr	r3, [pc, #584]	; (8001948 <MX_GPIO_Init+0x2f0>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	4a91      	ldr	r2, [pc, #580]	; (8001948 <MX_GPIO_Init+0x2f0>)
 8001704:	f043 0308 	orr.w	r3, r3, #8
 8001708:	6313      	str	r3, [r2, #48]	; 0x30
 800170a:	4b8f      	ldr	r3, [pc, #572]	; (8001948 <MX_GPIO_Init+0x2f0>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	f003 0308 	and.w	r3, r3, #8
 8001712:	607b      	str	r3, [r7, #4]
 8001714:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|pump_Pin, GPIO_PIN_RESET);
 8001716:	2200      	movs	r2, #0
 8001718:	f44f 7184 	mov.w	r1, #264	; 0x108
 800171c:	488b      	ldr	r0, [pc, #556]	; (800194c <MX_GPIO_Init+0x2f4>)
 800171e:	f001 fc87 	bl	8003030 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001722:	2201      	movs	r2, #1
 8001724:	2101      	movs	r1, #1
 8001726:	488a      	ldr	r0, [pc, #552]	; (8001950 <MX_GPIO_Init+0x2f8>)
 8001728:	f001 fc82 	bl	8003030 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, diode1_Pin|diode2_Pin, GPIO_PIN_RESET);
 800172c:	2200      	movs	r2, #0
 800172e:	2114      	movs	r1, #20
 8001730:	4887      	ldr	r0, [pc, #540]	; (8001950 <MX_GPIO_Init+0x2f8>)
 8001732:	f001 fc7d 	bl	8003030 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, diode3_Pin|diode4_Pin, GPIO_PIN_RESET);
 8001736:	2200      	movs	r2, #0
 8001738:	2105      	movs	r1, #5
 800173a:	4886      	ldr	r0, [pc, #536]	; (8001954 <MX_GPIO_Init+0x2fc>)
 800173c:	f001 fc78 	bl	8003030 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001740:	2200      	movs	r2, #0
 8001742:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001746:	4884      	ldr	r0, [pc, #528]	; (8001958 <MX_GPIO_Init+0x300>)
 8001748:	f001 fc72 	bl	8003030 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800174c:	2304      	movs	r3, #4
 800174e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001750:	2300      	movs	r3, #0
 8001752:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001754:	2300      	movs	r3, #0
 8001756:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001758:	f107 031c 	add.w	r3, r7, #28
 800175c:	4619      	mov	r1, r3
 800175e:	487b      	ldr	r0, [pc, #492]	; (800194c <MX_GPIO_Init+0x2f4>)
 8001760:	f001 faca 	bl	8002cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin pump_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|pump_Pin;
 8001764:	f44f 7384 	mov.w	r3, #264	; 0x108
 8001768:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800176a:	2301      	movs	r3, #1
 800176c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176e:	2300      	movs	r3, #0
 8001770:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001772:	2300      	movs	r3, #0
 8001774:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001776:	f107 031c 	add.w	r3, r7, #28
 800177a:	4619      	mov	r1, r3
 800177c:	4873      	ldr	r0, [pc, #460]	; (800194c <MX_GPIO_Init+0x2f4>)
 800177e:	f001 fabb 	bl	8002cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|MEMS_INT2_Pin;
 8001782:	2332      	movs	r3, #50	; 0x32
 8001784:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001786:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800178a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178c:	2300      	movs	r3, #0
 800178e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001790:	f107 031c 	add.w	r3, r7, #28
 8001794:	4619      	mov	r1, r3
 8001796:	486d      	ldr	r0, [pc, #436]	; (800194c <MX_GPIO_Init+0x2f4>)
 8001798:	f001 faae 	bl	8002cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin diode1_Pin diode2_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|diode1_Pin|diode2_Pin;
 800179c:	2315      	movs	r3, #21
 800179e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a0:	2301      	movs	r3, #1
 80017a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a4:	2300      	movs	r3, #0
 80017a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a8:	2300      	movs	r3, #0
 80017aa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017ac:	f107 031c 	add.w	r3, r7, #28
 80017b0:	4619      	mov	r1, r3
 80017b2:	4867      	ldr	r0, [pc, #412]	; (8001950 <MX_GPIO_Init+0x2f8>)
 80017b4:	f001 faa0 	bl	8002cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : holeStatePin1_Pin holeStatePin2_Pin */
  GPIO_InitStruct.Pin = holeStatePin1_Pin|holeStatePin2_Pin;
 80017b8:	2322      	movs	r3, #34	; 0x22
 80017ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017bc:	2300      	movs	r3, #0
 80017be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017c0:	2301      	movs	r3, #1
 80017c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017c4:	f107 031c 	add.w	r3, r7, #28
 80017c8:	4619      	mov	r1, r3
 80017ca:	4861      	ldr	r0, [pc, #388]	; (8001950 <MX_GPIO_Init+0x2f8>)
 80017cc:	f001 fa94 	bl	8002cf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80017d0:	2308      	movs	r3, #8
 80017d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d4:	2302      	movs	r3, #2
 80017d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d8:	2300      	movs	r3, #0
 80017da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017dc:	2300      	movs	r3, #0
 80017de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80017e0:	2305      	movs	r3, #5
 80017e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80017e4:	f107 031c 	add.w	r3, r7, #28
 80017e8:	4619      	mov	r1, r3
 80017ea:	4859      	ldr	r0, [pc, #356]	; (8001950 <MX_GPIO_Init+0x2f8>)
 80017ec:	f001 fa84 	bl	8002cf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80017f0:	2301      	movs	r3, #1
 80017f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80017f4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80017f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fa:	2300      	movs	r3, #0
 80017fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017fe:	f107 031c 	add.w	r3, r7, #28
 8001802:	4619      	mov	r1, r3
 8001804:	4855      	ldr	r0, [pc, #340]	; (800195c <MX_GPIO_Init+0x304>)
 8001806:	f001 fa77 	bl	8002cf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800180a:	2310      	movs	r3, #16
 800180c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800180e:	2302      	movs	r3, #2
 8001810:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001812:	2300      	movs	r3, #0
 8001814:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001816:	2300      	movs	r3, #0
 8001818:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800181a:	2306      	movs	r3, #6
 800181c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800181e:	f107 031c 	add.w	r3, r7, #28
 8001822:	4619      	mov	r1, r3
 8001824:	484d      	ldr	r0, [pc, #308]	; (800195c <MX_GPIO_Init+0x304>)
 8001826:	f001 fa67 	bl	8002cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800182a:	23e0      	movs	r3, #224	; 0xe0
 800182c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182e:	2302      	movs	r3, #2
 8001830:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001832:	2300      	movs	r3, #0
 8001834:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001836:	2303      	movs	r3, #3
 8001838:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800183a:	2305      	movs	r3, #5
 800183c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800183e:	f107 031c 	add.w	r3, r7, #28
 8001842:	4619      	mov	r1, r3
 8001844:	4845      	ldr	r0, [pc, #276]	; (800195c <MX_GPIO_Init+0x304>)
 8001846:	f001 fa57 	bl	8002cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : diode3_Pin diode4_Pin */
  GPIO_InitStruct.Pin = diode3_Pin|diode4_Pin;
 800184a:	2305      	movs	r3, #5
 800184c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800184e:	2301      	movs	r3, #1
 8001850:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001852:	2300      	movs	r3, #0
 8001854:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001856:	2300      	movs	r3, #0
 8001858:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800185a:	f107 031c 	add.w	r3, r7, #28
 800185e:	4619      	mov	r1, r3
 8001860:	483c      	ldr	r0, [pc, #240]	; (8001954 <MX_GPIO_Init+0x2fc>)
 8001862:	f001 fa49 	bl	8002cf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : holeStatePin3_Pin */
  GPIO_InitStruct.Pin = holeStatePin3_Pin;
 8001866:	2302      	movs	r3, #2
 8001868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800186a:	2300      	movs	r3, #0
 800186c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800186e:	2301      	movs	r3, #1
 8001870:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(holeStatePin3_GPIO_Port, &GPIO_InitStruct);
 8001872:	f107 031c 	add.w	r3, r7, #28
 8001876:	4619      	mov	r1, r3
 8001878:	4836      	ldr	r0, [pc, #216]	; (8001954 <MX_GPIO_Init+0x2fc>)
 800187a:	f001 fa3d 	bl	8002cf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : holeStatePin4_Pin */
  GPIO_InitStruct.Pin = holeStatePin4_Pin;
 800187e:	2380      	movs	r3, #128	; 0x80
 8001880:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001882:	2300      	movs	r3, #0
 8001884:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001886:	2301      	movs	r3, #1
 8001888:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(holeStatePin4_GPIO_Port, &GPIO_InitStruct);
 800188a:	f107 031c 	add.w	r3, r7, #28
 800188e:	4619      	mov	r1, r3
 8001890:	482e      	ldr	r0, [pc, #184]	; (800194c <MX_GPIO_Init+0x2f4>)
 8001892:	f001 fa31 	bl	8002cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_IN_Pin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8001896:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800189a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189c:	2302      	movs	r3, #2
 800189e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a0:	2300      	movs	r3, #0
 80018a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a4:	2300      	movs	r3, #0
 80018a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018a8:	2305      	movs	r3, #5
 80018aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ac:	f107 031c 	add.w	r3, r7, #28
 80018b0:	4619      	mov	r1, r3
 80018b2:	4828      	ldr	r0, [pc, #160]	; (8001954 <MX_GPIO_Init+0x2fc>)
 80018b4:	f001 fa20 	bl	8002cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80018b8:	f24f 0310 	movw	r3, #61456	; 0xf010
 80018bc:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018be:	2301      	movs	r3, #1
 80018c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c2:	2300      	movs	r3, #0
 80018c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c6:	2300      	movs	r3, #0
 80018c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018ca:	f107 031c 	add.w	r3, r7, #28
 80018ce:	4619      	mov	r1, r3
 80018d0:	4821      	ldr	r0, [pc, #132]	; (8001958 <MX_GPIO_Init+0x300>)
 80018d2:	f001 fa11 	bl	8002cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80018d6:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80018da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018dc:	2302      	movs	r3, #2
 80018de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e0:	2300      	movs	r3, #0
 80018e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e4:	2300      	movs	r3, #0
 80018e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80018e8:	2306      	movs	r3, #6
 80018ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018ec:	f107 031c 	add.w	r3, r7, #28
 80018f0:	4619      	mov	r1, r3
 80018f2:	4817      	ldr	r0, [pc, #92]	; (8001950 <MX_GPIO_Init+0x2f8>)
 80018f4:	f001 fa00 	bl	8002cf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80018f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018fe:	2300      	movs	r3, #0
 8001900:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001902:	2300      	movs	r3, #0
 8001904:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8001906:	f107 031c 	add.w	r3, r7, #28
 800190a:	4619      	mov	r1, r3
 800190c:	4813      	ldr	r0, [pc, #76]	; (800195c <MX_GPIO_Init+0x304>)
 800190e:	f001 f9f3 	bl	8002cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8001912:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001916:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001918:	2302      	movs	r3, #2
 800191a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191c:	2300      	movs	r3, #0
 800191e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001920:	2303      	movs	r3, #3
 8001922:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001924:	230a      	movs	r3, #10
 8001926:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001928:	f107 031c 	add.w	r3, r7, #28
 800192c:	4619      	mov	r1, r3
 800192e:	480b      	ldr	r0, [pc, #44]	; (800195c <MX_GPIO_Init+0x304>)
 8001930:	f001 f9e2 	bl	8002cf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001934:	2320      	movs	r3, #32
 8001936:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001938:	2300      	movs	r3, #0
 800193a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193c:	2300      	movs	r3, #0
 800193e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001940:	f107 031c 	add.w	r3, r7, #28
 8001944:	4619      	mov	r1, r3
 8001946:	e00b      	b.n	8001960 <MX_GPIO_Init+0x308>
 8001948:	40023800 	.word	0x40023800
 800194c:	40021000 	.word	0x40021000
 8001950:	40020800 	.word	0x40020800
 8001954:	40020400 	.word	0x40020400
 8001958:	40020c00 	.word	0x40020c00
 800195c:	40020000 	.word	0x40020000
 8001960:	4809      	ldr	r0, [pc, #36]	; (8001988 <MX_GPIO_Init+0x330>)
 8001962:	f001 f9c9 	bl	8002cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : enc_CLICK_Pin enc_DATA_Pin enc_CLK_Pin */
  GPIO_InitStruct.Pin = enc_CLICK_Pin|enc_DATA_Pin|enc_CLK_Pin;
 8001966:	2370      	movs	r3, #112	; 0x70
 8001968:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800196a:	2300      	movs	r3, #0
 800196c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196e:	2300      	movs	r3, #0
 8001970:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001972:	f107 031c 	add.w	r3, r7, #28
 8001976:	4619      	mov	r1, r3
 8001978:	4804      	ldr	r0, [pc, #16]	; (800198c <MX_GPIO_Init+0x334>)
 800197a:	f001 f9bd 	bl	8002cf8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800197e:	bf00      	nop
 8001980:	3730      	adds	r7, #48	; 0x30
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	40020c00 	.word	0x40020c00
 800198c:	40020400 	.word	0x40020400

08001990 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {

	  osDelay(10000);
 8001998:	f242 7010 	movw	r0, #10000	; 0x2710
 800199c:	f003 fce3 	bl	8005366 <osDelay>
 80019a0:	e7fa      	b.n	8001998 <StartDefaultTask+0x8>
	...

080019a4 <diodeDetector_Init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_diodeDetector_Init */
void diodeDetector_Init(void const * argument)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN diodeDetector_Init */
  /* Infinite loop */
  for(;;)
  {

	if (drinkpos.postitionOfDrinks[0] == 1){
 80019ac:	4b1f      	ldr	r3, [pc, #124]	; (8001a2c <diodeDetector_Init+0x88>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d105      	bne.n	80019c0 <diodeDetector_Init+0x1c>
		HAL_GPIO_WritePin(diode1_GPIO_Port, diode1_Pin, 1);
 80019b4:	2201      	movs	r2, #1
 80019b6:	2104      	movs	r1, #4
 80019b8:	481d      	ldr	r0, [pc, #116]	; (8001a30 <diodeDetector_Init+0x8c>)
 80019ba:	f001 fb39 	bl	8003030 <HAL_GPIO_WritePin>
 80019be:	e004      	b.n	80019ca <diodeDetector_Init+0x26>
	}
	else{
		HAL_GPIO_WritePin(diode1_GPIO_Port, diode1_Pin, 0);
 80019c0:	2200      	movs	r2, #0
 80019c2:	2104      	movs	r1, #4
 80019c4:	481a      	ldr	r0, [pc, #104]	; (8001a30 <diodeDetector_Init+0x8c>)
 80019c6:	f001 fb33 	bl	8003030 <HAL_GPIO_WritePin>
	}
	if (drinkpos.postitionOfDrinks[1] == 1){
 80019ca:	4b18      	ldr	r3, [pc, #96]	; (8001a2c <diodeDetector_Init+0x88>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d105      	bne.n	80019de <diodeDetector_Init+0x3a>
		HAL_GPIO_WritePin(diode2_GPIO_Port, diode2_Pin, 1);
 80019d2:	2201      	movs	r2, #1
 80019d4:	2110      	movs	r1, #16
 80019d6:	4816      	ldr	r0, [pc, #88]	; (8001a30 <diodeDetector_Init+0x8c>)
 80019d8:	f001 fb2a 	bl	8003030 <HAL_GPIO_WritePin>
 80019dc:	e004      	b.n	80019e8 <diodeDetector_Init+0x44>
	}
	else{
		HAL_GPIO_WritePin(diode2_GPIO_Port, diode2_Pin, 0);
 80019de:	2200      	movs	r2, #0
 80019e0:	2110      	movs	r1, #16
 80019e2:	4813      	ldr	r0, [pc, #76]	; (8001a30 <diodeDetector_Init+0x8c>)
 80019e4:	f001 fb24 	bl	8003030 <HAL_GPIO_WritePin>
	}
	if (drinkpos.postitionOfDrinks[2] == 1){
 80019e8:	4b10      	ldr	r3, [pc, #64]	; (8001a2c <diodeDetector_Init+0x88>)
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d105      	bne.n	80019fc <diodeDetector_Init+0x58>
		HAL_GPIO_WritePin(diode3_GPIO_Port, diode3_Pin, 1);
 80019f0:	2201      	movs	r2, #1
 80019f2:	2101      	movs	r1, #1
 80019f4:	480f      	ldr	r0, [pc, #60]	; (8001a34 <diodeDetector_Init+0x90>)
 80019f6:	f001 fb1b 	bl	8003030 <HAL_GPIO_WritePin>
 80019fa:	e004      	b.n	8001a06 <diodeDetector_Init+0x62>
	}
	else{
		HAL_GPIO_WritePin(diode3_GPIO_Port, diode3_Pin, 0);
 80019fc:	2200      	movs	r2, #0
 80019fe:	2101      	movs	r1, #1
 8001a00:	480c      	ldr	r0, [pc, #48]	; (8001a34 <diodeDetector_Init+0x90>)
 8001a02:	f001 fb15 	bl	8003030 <HAL_GPIO_WritePin>
	}
	if (drinkpos.postitionOfDrinks[3] == 1){
 8001a06:	4b09      	ldr	r3, [pc, #36]	; (8001a2c <diodeDetector_Init+0x88>)
 8001a08:	68db      	ldr	r3, [r3, #12]
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d105      	bne.n	8001a1a <diodeDetector_Init+0x76>
		HAL_GPIO_WritePin(diode4_GPIO_Port, diode4_Pin, 1);
 8001a0e:	2201      	movs	r2, #1
 8001a10:	2104      	movs	r1, #4
 8001a12:	4808      	ldr	r0, [pc, #32]	; (8001a34 <diodeDetector_Init+0x90>)
 8001a14:	f001 fb0c 	bl	8003030 <HAL_GPIO_WritePin>
 8001a18:	e004      	b.n	8001a24 <diodeDetector_Init+0x80>
	}
	else{
		HAL_GPIO_WritePin(diode4_GPIO_Port, diode4_Pin, 0);
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	2104      	movs	r1, #4
 8001a1e:	4805      	ldr	r0, [pc, #20]	; (8001a34 <diodeDetector_Init+0x90>)
 8001a20:	f001 fb06 	bl	8003030 <HAL_GPIO_WritePin>
	}

	osDelay(100);
 8001a24:	2064      	movs	r0, #100	; 0x64
 8001a26:	f003 fc9e 	bl	8005366 <osDelay>
	if (drinkpos.postitionOfDrinks[0] == 1){
 8001a2a:	e7bf      	b.n	80019ac <diodeDetector_Init+0x8>
 8001a2c:	20000064 	.word	0x20000064
 8001a30:	40020800 	.word	0x40020800
 8001a34:	40020400 	.word	0x40020400

08001a38 <holeState_Init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_holeState_Init */
void holeState_Init(void const * argument)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN holeState_Init */
  /* Infinite loop */
  for(;;)
  {

	if (HAL_GPIO_ReadPin(holeStatePin1_GPIO_Port, holeStatePin1_Pin) == 0){
 8001a40:	2102      	movs	r1, #2
 8001a42:	4825      	ldr	r0, [pc, #148]	; (8001ad8 <holeState_Init+0xa0>)
 8001a44:	f001 fadc 	bl	8003000 <HAL_GPIO_ReadPin>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d105      	bne.n	8001a5a <holeState_Init+0x22>
		drinkpos.drinkChange(&drinkpos, 1);
 8001a4e:	4b23      	ldr	r3, [pc, #140]	; (8001adc <holeState_Init+0xa4>)
 8001a50:	691b      	ldr	r3, [r3, #16]
 8001a52:	2101      	movs	r1, #1
 8001a54:	4821      	ldr	r0, [pc, #132]	; (8001adc <holeState_Init+0xa4>)
 8001a56:	4798      	blx	r3
 8001a58:	e004      	b.n	8001a64 <holeState_Init+0x2c>
	}
	else{
		drinkpos.drinkChange(&drinkpos, 11);
 8001a5a:	4b20      	ldr	r3, [pc, #128]	; (8001adc <holeState_Init+0xa4>)
 8001a5c:	691b      	ldr	r3, [r3, #16]
 8001a5e:	210b      	movs	r1, #11
 8001a60:	481e      	ldr	r0, [pc, #120]	; (8001adc <holeState_Init+0xa4>)
 8001a62:	4798      	blx	r3
	}

	if (HAL_GPIO_ReadPin(holeStatePin2_GPIO_Port, holeStatePin2_Pin) == 0){
 8001a64:	2120      	movs	r1, #32
 8001a66:	481c      	ldr	r0, [pc, #112]	; (8001ad8 <holeState_Init+0xa0>)
 8001a68:	f001 faca 	bl	8003000 <HAL_GPIO_ReadPin>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d105      	bne.n	8001a7e <holeState_Init+0x46>
		drinkpos.drinkChange(&drinkpos, 2);
 8001a72:	4b1a      	ldr	r3, [pc, #104]	; (8001adc <holeState_Init+0xa4>)
 8001a74:	691b      	ldr	r3, [r3, #16]
 8001a76:	2102      	movs	r1, #2
 8001a78:	4818      	ldr	r0, [pc, #96]	; (8001adc <holeState_Init+0xa4>)
 8001a7a:	4798      	blx	r3
 8001a7c:	e004      	b.n	8001a88 <holeState_Init+0x50>
	}
	else{
		drinkpos.drinkChange(&drinkpos, 22);
 8001a7e:	4b17      	ldr	r3, [pc, #92]	; (8001adc <holeState_Init+0xa4>)
 8001a80:	691b      	ldr	r3, [r3, #16]
 8001a82:	2116      	movs	r1, #22
 8001a84:	4815      	ldr	r0, [pc, #84]	; (8001adc <holeState_Init+0xa4>)
 8001a86:	4798      	blx	r3
	}
	if (HAL_GPIO_ReadPin(holeStatePin3_GPIO_Port, holeStatePin3_Pin) == 0){
 8001a88:	2102      	movs	r1, #2
 8001a8a:	4815      	ldr	r0, [pc, #84]	; (8001ae0 <holeState_Init+0xa8>)
 8001a8c:	f001 fab8 	bl	8003000 <HAL_GPIO_ReadPin>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d105      	bne.n	8001aa2 <holeState_Init+0x6a>
		drinkpos.drinkChange(&drinkpos, 3);
 8001a96:	4b11      	ldr	r3, [pc, #68]	; (8001adc <holeState_Init+0xa4>)
 8001a98:	691b      	ldr	r3, [r3, #16]
 8001a9a:	2103      	movs	r1, #3
 8001a9c:	480f      	ldr	r0, [pc, #60]	; (8001adc <holeState_Init+0xa4>)
 8001a9e:	4798      	blx	r3
 8001aa0:	e004      	b.n	8001aac <holeState_Init+0x74>
	}
	else{
		drinkpos.drinkChange(&drinkpos, 33);
 8001aa2:	4b0e      	ldr	r3, [pc, #56]	; (8001adc <holeState_Init+0xa4>)
 8001aa4:	691b      	ldr	r3, [r3, #16]
 8001aa6:	2121      	movs	r1, #33	; 0x21
 8001aa8:	480c      	ldr	r0, [pc, #48]	; (8001adc <holeState_Init+0xa4>)
 8001aaa:	4798      	blx	r3
	}
	if (HAL_GPIO_ReadPin(holeStatePin4_GPIO_Port, holeStatePin4_Pin) == 0){
 8001aac:	2180      	movs	r1, #128	; 0x80
 8001aae:	480d      	ldr	r0, [pc, #52]	; (8001ae4 <holeState_Init+0xac>)
 8001ab0:	f001 faa6 	bl	8003000 <HAL_GPIO_ReadPin>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d105      	bne.n	8001ac6 <holeState_Init+0x8e>
		drinkpos.drinkChange(&drinkpos, 4);
 8001aba:	4b08      	ldr	r3, [pc, #32]	; (8001adc <holeState_Init+0xa4>)
 8001abc:	691b      	ldr	r3, [r3, #16]
 8001abe:	2104      	movs	r1, #4
 8001ac0:	4806      	ldr	r0, [pc, #24]	; (8001adc <holeState_Init+0xa4>)
 8001ac2:	4798      	blx	r3
 8001ac4:	e004      	b.n	8001ad0 <holeState_Init+0x98>
	}
	else{
		drinkpos.drinkChange(&drinkpos, 44);
 8001ac6:	4b05      	ldr	r3, [pc, #20]	; (8001adc <holeState_Init+0xa4>)
 8001ac8:	691b      	ldr	r3, [r3, #16]
 8001aca:	212c      	movs	r1, #44	; 0x2c
 8001acc:	4803      	ldr	r0, [pc, #12]	; (8001adc <holeState_Init+0xa4>)
 8001ace:	4798      	blx	r3
	}

    osDelay(100);
 8001ad0:	2064      	movs	r0, #100	; 0x64
 8001ad2:	f003 fc48 	bl	8005366 <osDelay>
	if (HAL_GPIO_ReadPin(holeStatePin1_GPIO_Port, holeStatePin1_Pin) == 0){
 8001ad6:	e7b3      	b.n	8001a40 <holeState_Init+0x8>
 8001ad8:	40020800 	.word	0x40020800
 8001adc:	20000064 	.word	0x20000064
 8001ae0:	40020400 	.word	0x40020400
 8001ae4:	40021000 	.word	0x40021000

08001ae8 <displayMenu_Init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_displayMenu_Init */
void displayMenu_Init(void const * argument)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN displayMenu_Init */
  HD44780_Init(2);
 8001af0:	2002      	movs	r0, #2
 8001af2:	f7ff f9f3 	bl	8000edc <HD44780_Init>
  drinkCounterReset();
 8001af6:	f000 faf7 	bl	80020e8 <drinkCounterReset>
  menu.subMenuFlag = 1;
 8001afa:	4b39      	ldr	r3, [pc, #228]	; (8001be0 <displayMenu_Init+0xf8>)
 8001afc:	2201      	movs	r2, #1
 8001afe:	611a      	str	r2, [r3, #16]
  menu.cursorPos = 0;
 8001b00:	4b37      	ldr	r3, [pc, #220]	; (8001be0 <displayMenu_Init+0xf8>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	609a      	str	r2, [r3, #8]
  menu.menuChanged = 1;
 8001b06:	4b36      	ldr	r3, [pc, #216]	; (8001be0 <displayMenu_Init+0xf8>)
 8001b08:	2201      	movs	r2, #1
 8001b0a:	60da      	str	r2, [r3, #12]
  menu.mililiters = 10;
 8001b0c:	4b34      	ldr	r3, [pc, #208]	; (8001be0 <displayMenu_Init+0xf8>)
 8001b0e:	220a      	movs	r2, #10
 8001b10:	615a      	str	r2, [r3, #20]
  /* Infinite loop */
  for(;;)
  {
	  switch(menu.subMenuFlag){
 8001b12:	4b33      	ldr	r3, [pc, #204]	; (8001be0 <displayMenu_Init+0xf8>)
 8001b14:	691b      	ldr	r3, [r3, #16]
 8001b16:	2b03      	cmp	r3, #3
 8001b18:	d00e      	beq.n	8001b38 <displayMenu_Init+0x50>
 8001b1a:	2b03      	cmp	r3, #3
 8001b1c:	dc10      	bgt.n	8001b40 <displayMenu_Init+0x58>
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d002      	beq.n	8001b28 <displayMenu_Init+0x40>
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d004      	beq.n	8001b30 <displayMenu_Init+0x48>
 8001b26:	e00b      	b.n	8001b40 <displayMenu_Init+0x58>
	  	  case 1:
	  		  menu.currentMenu = &SUB1;
 8001b28:	4b2d      	ldr	r3, [pc, #180]	; (8001be0 <displayMenu_Init+0xf8>)
 8001b2a:	4a2e      	ldr	r2, [pc, #184]	; (8001be4 <displayMenu_Init+0xfc>)
 8001b2c:	601a      	str	r2, [r3, #0]
	  		  break;
 8001b2e:	e007      	b.n	8001b40 <displayMenu_Init+0x58>
	  	  case 2:
	          menu.currentMenu = &SUB2;
 8001b30:	4b2b      	ldr	r3, [pc, #172]	; (8001be0 <displayMenu_Init+0xf8>)
 8001b32:	4a2d      	ldr	r2, [pc, #180]	; (8001be8 <displayMenu_Init+0x100>)
 8001b34:	601a      	str	r2, [r3, #0]
	          break;
 8001b36:	e003      	b.n	8001b40 <displayMenu_Init+0x58>
	  	  case 3:
	  		  menu.currentMenu = &SUB3;
 8001b38:	4b29      	ldr	r3, [pc, #164]	; (8001be0 <displayMenu_Init+0xf8>)
 8001b3a:	4a2c      	ldr	r2, [pc, #176]	; (8001bec <displayMenu_Init+0x104>)
 8001b3c:	601a      	str	r2, [r3, #0]
	  		  break;
 8001b3e:	bf00      	nop
	  	  //default:
	  	//	  menuError();
	  }
	  if(menu.menuChanged==1){
 8001b40:	4b27      	ldr	r3, [pc, #156]	; (8001be0 <displayMenu_Init+0xf8>)
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d146      	bne.n	8001bd6 <displayMenu_Init+0xee>
		  if (menu.currentMenu==&SUB1){
 8001b48:	4b25      	ldr	r3, [pc, #148]	; (8001be0 <displayMenu_Init+0xf8>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a25      	ldr	r2, [pc, #148]	; (8001be4 <displayMenu_Init+0xfc>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d115      	bne.n	8001b7e <displayMenu_Init+0x96>
			  defaultMenu();
 8001b52:	f000 f8f7 	bl	8001d44 <defaultMenu>
			  switch(menu.cursorPos){
 8001b56:	4b22      	ldr	r3, [pc, #136]	; (8001be0 <displayMenu_Init+0xf8>)
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d00c      	beq.n	8001b78 <displayMenu_Init+0x90>
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	dc0d      	bgt.n	8001b7e <displayMenu_Init+0x96>
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d002      	beq.n	8001b6c <displayMenu_Init+0x84>
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d003      	beq.n	8001b72 <displayMenu_Init+0x8a>
 8001b6a:	e008      	b.n	8001b7e <displayMenu_Init+0x96>
			  	  case 0:
			  		  defaultMenuCursorPos1();
 8001b6c:	f000 f9ca 	bl	8001f04 <defaultMenuCursorPos1>
			  		  break;
 8001b70:	e005      	b.n	8001b7e <displayMenu_Init+0x96>
			  	  case 1:
			  		  defaultMenuCursorPos2();
 8001b72:	f000 f9e5 	bl	8001f40 <defaultMenuCursorPos2>
			  		  break;
 8001b76:	e002      	b.n	8001b7e <displayMenu_Init+0x96>
			  	  case 2:
			  		  defaultMenuCursorPos3();
 8001b78:	f000 fa00 	bl	8001f7c <defaultMenuCursorPos3>
			  		  break;
 8001b7c:	bf00      	nop
			//  	  default:
			//  		  menuError();
			  }
		  }
		  if (menu.currentMenu==&SUB2){
 8001b7e:	4b18      	ldr	r3, [pc, #96]	; (8001be0 <displayMenu_Init+0xf8>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a19      	ldr	r2, [pc, #100]	; (8001be8 <displayMenu_Init+0x100>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d10f      	bne.n	8001ba8 <displayMenu_Init+0xc0>
			  sub2Menu(&menu);
 8001b88:	4815      	ldr	r0, [pc, #84]	; (8001be0 <displayMenu_Init+0xf8>)
 8001b8a:	f000 f8fd 	bl	8001d88 <sub2Menu>
			  switch(menu.cursorPos){
 8001b8e:	4b14      	ldr	r3, [pc, #80]	; (8001be0 <displayMenu_Init+0xf8>)
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d002      	beq.n	8001b9c <displayMenu_Init+0xb4>
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d003      	beq.n	8001ba2 <displayMenu_Init+0xba>
 8001b9a:	e005      	b.n	8001ba8 <displayMenu_Init+0xc0>
			  	  case 0:
			  		  sub2MenuCursorPos1();
 8001b9c:	f000 fa0c 	bl	8001fb8 <sub2MenuCursorPos1>
			  		  break;
 8001ba0:	e002      	b.n	8001ba8 <displayMenu_Init+0xc0>
			  	  case 1:
			  		  sub2MenuCursorPos2();
 8001ba2:	f000 fa1f 	bl	8001fe4 <sub2MenuCursorPos2>
			  		  break;
 8001ba6:	bf00      	nop
			  //	  default:
			  //		  menuError();
			  }
		  }
		  if (menu.currentMenu==&SUB3){
 8001ba8:	4b0d      	ldr	r3, [pc, #52]	; (8001be0 <displayMenu_Init+0xf8>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a0f      	ldr	r2, [pc, #60]	; (8001bec <displayMenu_Init+0x104>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d10e      	bne.n	8001bd0 <displayMenu_Init+0xe8>
			  sub3Menu();
 8001bb2:	f000 f921 	bl	8001df8 <sub3Menu>
			  switch(menu.cursorPos){
 8001bb6:	4b0a      	ldr	r3, [pc, #40]	; (8001be0 <displayMenu_Init+0xf8>)
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d002      	beq.n	8001bc4 <displayMenu_Init+0xdc>
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d003      	beq.n	8001bca <displayMenu_Init+0xe2>
 8001bc2:	e005      	b.n	8001bd0 <displayMenu_Init+0xe8>
			  	  case 0:
			  		  sub3MenuCursorPos1();
 8001bc4:	f000 fa24 	bl	8002010 <sub3MenuCursorPos1>
			  		  break;
 8001bc8:	e002      	b.n	8001bd0 <displayMenu_Init+0xe8>
			  	  case 1:
			  		  sub3MenuCursorPos2();
 8001bca:	f000 fa37 	bl	800203c <sub3MenuCursorPos2>
			  		  break;
 8001bce:	bf00      	nop
			  //	  default:
			  //		  menuError();
			  }
		  }
	  menu.menuChanged = 0;
 8001bd0:	4b03      	ldr	r3, [pc, #12]	; (8001be0 <displayMenu_Init+0xf8>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	60da      	str	r2, [r3, #12]
	  }
	osDelay(30);
 8001bd6:	201e      	movs	r0, #30
 8001bd8:	f003 fbc5 	bl	8005366 <osDelay>
	  switch(menu.subMenuFlag){
 8001bdc:	e799      	b.n	8001b12 <displayMenu_Init+0x2a>
 8001bde:	bf00      	nop
 8001be0:	20000040 	.word	0x20000040
 8001be4:	20000010 	.word	0x20000010
 8001be8:	20000020 	.word	0x20000020
 8001bec:	20000030 	.word	0x20000030

08001bf0 <pump>:
  /* USER CODE END displayMenu_Init */
}

/* USER CODE BEGIN Header_pourInit */

void pump(int timeOn){
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
	osDelay(2000);
 8001bf8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001bfc:	f003 fbb3 	bl	8005366 <osDelay>
	HAL_GPIO_WritePin(pump_GPIO_Port, pump_Pin, 1);
 8001c00:	2201      	movs	r2, #1
 8001c02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c06:	480a      	ldr	r0, [pc, #40]	; (8001c30 <pump+0x40>)
 8001c08:	f001 fa12 	bl	8003030 <HAL_GPIO_WritePin>
	osDelay(timeOn);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f003 fba9 	bl	8005366 <osDelay>
	HAL_GPIO_WritePin(pump_GPIO_Port, pump_Pin, 0);
 8001c14:	2200      	movs	r2, #0
 8001c16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c1a:	4805      	ldr	r0, [pc, #20]	; (8001c30 <pump+0x40>)
 8001c1c:	f001 fa08 	bl	8003030 <HAL_GPIO_WritePin>
	osDelay(2000);
 8001c20:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001c24:	f003 fb9f 	bl	8005366 <osDelay>
}
 8001c28:	bf00      	nop
 8001c2a:	3708      	adds	r7, #8
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	40021000 	.word	0x40021000

08001c34 <pourInit>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_pourInit */
void pourInit(void const * argument)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN pourInit */
	menu.pourChanged = 0;
 8001c3c:	4b32      	ldr	r3, [pc, #200]	; (8001d08 <pourInit+0xd4>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	605a      	str	r2, [r3, #4]
	HAL_GPIO_WritePin(pump_GPIO_Port, pump_Pin, 0);
 8001c42:	2200      	movs	r2, #0
 8001c44:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c48:	4830      	ldr	r0, [pc, #192]	; (8001d0c <pourInit+0xd8>)
 8001c4a:	f001 f9f1 	bl	8003030 <HAL_GPIO_WritePin>
  /* Infinite loop */
  for(;;)
  {
	if (menu.pourChanged == 1){
 8001c4e:	4b2e      	ldr	r3, [pc, #184]	; (8001d08 <pourInit+0xd4>)
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d154      	bne.n	8001d00 <pourInit+0xcc>
		setRotation(10);
 8001c56:	200a      	movs	r0, #10
 8001c58:	f000 fbea 	bl	8002430 <setRotation>
		osDelay(1500);
 8001c5c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001c60:	f003 fb81 	bl	8005366 <osDelay>
		if (drinkpos.postitionOfDrinks[0] == 1){
 8001c64:	4b2a      	ldr	r3, [pc, #168]	; (8001d10 <pourInit+0xdc>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d10c      	bne.n	8001c86 <pourInit+0x52>
			setRotation(58);
 8001c6c:	203a      	movs	r0, #58	; 0x3a
 8001c6e:	f000 fbdf 	bl	8002430 <setRotation>
			pump(menu.mililiters*200);
 8001c72:	4b25      	ldr	r3, [pc, #148]	; (8001d08 <pourInit+0xd4>)
 8001c74:	695b      	ldr	r3, [r3, #20]
 8001c76:	22c8      	movs	r2, #200	; 0xc8
 8001c78:	fb02 f303 	mul.w	r3, r2, r3
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff ffb7 	bl	8001bf0 <pump>
			drinkAddCounter1();
 8001c82:	f000 f9f1 	bl	8002068 <drinkAddCounter1>
		}
		if (drinkpos.postitionOfDrinks[1] == 1){
 8001c86:	4b22      	ldr	r3, [pc, #136]	; (8001d10 <pourInit+0xdc>)
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d10c      	bne.n	8001ca8 <pourInit+0x74>
			setRotation(84);
 8001c8e:	2054      	movs	r0, #84	; 0x54
 8001c90:	f000 fbce 	bl	8002430 <setRotation>
			pump(menu.mililiters*200);
 8001c94:	4b1c      	ldr	r3, [pc, #112]	; (8001d08 <pourInit+0xd4>)
 8001c96:	695b      	ldr	r3, [r3, #20]
 8001c98:	22c8      	movs	r2, #200	; 0xc8
 8001c9a:	fb02 f303 	mul.w	r3, r2, r3
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7ff ffa6 	bl	8001bf0 <pump>
			drinkAddCounter2();
 8001ca4:	f000 f9f0 	bl	8002088 <drinkAddCounter2>
		}
		if (drinkpos.postitionOfDrinks[2] == 1){
 8001ca8:	4b19      	ldr	r3, [pc, #100]	; (8001d10 <pourInit+0xdc>)
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d10c      	bne.n	8001cca <pourInit+0x96>
			setRotation(112);
 8001cb0:	2070      	movs	r0, #112	; 0x70
 8001cb2:	f000 fbbd 	bl	8002430 <setRotation>
			pump(menu.mililiters*200);
 8001cb6:	4b14      	ldr	r3, [pc, #80]	; (8001d08 <pourInit+0xd4>)
 8001cb8:	695b      	ldr	r3, [r3, #20]
 8001cba:	22c8      	movs	r2, #200	; 0xc8
 8001cbc:	fb02 f303 	mul.w	r3, r2, r3
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff ff95 	bl	8001bf0 <pump>
			drinkAddCounter3();
 8001cc6:	f000 f9ef 	bl	80020a8 <drinkAddCounter3>
		}
		if (drinkpos.postitionOfDrinks[3] == 1){
 8001cca:	4b11      	ldr	r3, [pc, #68]	; (8001d10 <pourInit+0xdc>)
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d10c      	bne.n	8001cec <pourInit+0xb8>
			setRotation(141);
 8001cd2:	208d      	movs	r0, #141	; 0x8d
 8001cd4:	f000 fbac 	bl	8002430 <setRotation>
			pump(menu.mililiters*200);
 8001cd8:	4b0b      	ldr	r3, [pc, #44]	; (8001d08 <pourInit+0xd4>)
 8001cda:	695b      	ldr	r3, [r3, #20]
 8001cdc:	22c8      	movs	r2, #200	; 0xc8
 8001cde:	fb02 f303 	mul.w	r3, r2, r3
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7ff ff84 	bl	8001bf0 <pump>
			drinkAddCounter4();
 8001ce8:	f000 f9ee 	bl	80020c8 <drinkAddCounter4>
		}
		osDelay(500);
 8001cec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001cf0:	f003 fb39 	bl	8005366 <osDelay>
		setRotation(180);
 8001cf4:	20b4      	movs	r0, #180	; 0xb4
 8001cf6:	f000 fb9b 	bl	8002430 <setRotation>
		menu.pourChanged = 0;
 8001cfa:	4b03      	ldr	r3, [pc, #12]	; (8001d08 <pourInit+0xd4>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	605a      	str	r2, [r3, #4]
	}
    osDelay(30);
 8001d00:	201e      	movs	r0, #30
 8001d02:	f003 fb30 	bl	8005366 <osDelay>
	if (menu.pourChanged == 1){
 8001d06:	e7a2      	b.n	8001c4e <pourInit+0x1a>
 8001d08:	20000040 	.word	0x20000040
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	20000064 	.word	0x20000064

08001d14 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a04      	ldr	r2, [pc, #16]	; (8001d34 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d101      	bne.n	8001d2a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001d26:	f000 fee5 	bl	8002af4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001d2a:	bf00      	nop
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	40010000 	.word	0x40010000

08001d38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d3c:	b672      	cpsid	i
}
 8001d3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d40:	e7fe      	b.n	8001d40 <Error_Handler+0x8>
	...

08001d44 <defaultMenu>:
	HD44780_Clear();
	HD44780_SetCursor(0,0);
	HD44780_PrintStr("Menu Display Error");
}

void defaultMenu(){
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
	HD44780_Clear();
 8001d48:	f7ff f94c 	bl	8000fe4 <HD44780_Clear>
	HD44780_SetCursor(0,0);
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	2000      	movs	r0, #0
 8001d50:	f7ff f95e 	bl	8001010 <HD44780_SetCursor>
	HD44780_PrintStr(FirstOpt);
 8001d54:	4809      	ldr	r0, [pc, #36]	; (8001d7c <defaultMenu+0x38>)
 8001d56:	f7ff f9cc 	bl	80010f2 <HD44780_PrintStr>
	HD44780_SetCursor(0,1);
 8001d5a:	2101      	movs	r1, #1
 8001d5c:	2000      	movs	r0, #0
 8001d5e:	f7ff f957 	bl	8001010 <HD44780_SetCursor>
	HD44780_PrintStr(SecondOpt);
 8001d62:	4807      	ldr	r0, [pc, #28]	; (8001d80 <defaultMenu+0x3c>)
 8001d64:	f7ff f9c5 	bl	80010f2 <HD44780_PrintStr>
	HD44780_SetCursor(13,0);
 8001d68:	2100      	movs	r1, #0
 8001d6a:	200d      	movs	r0, #13
 8001d6c:	f7ff f950 	bl	8001010 <HD44780_SetCursor>
	HD44780_PrintStr(ThirdOpt);
 8001d70:	4804      	ldr	r0, [pc, #16]	; (8001d84 <defaultMenu+0x40>)
 8001d72:	f7ff f9be 	bl	80010f2 <HD44780_PrintStr>
}
 8001d76:	bf00      	nop
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	2000007c 	.word	0x2000007c
 8001d80:	20000088 	.word	0x20000088
 8001d84:	20000098 	.word	0x20000098

08001d88 <sub2Menu>:

void sub2Menu(menu_t* self){
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
	HD44780_Clear();
 8001d90:	f7ff f928 	bl	8000fe4 <HD44780_Clear>
	HD44780_SetCursor(0,0);
 8001d94:	2100      	movs	r1, #0
 8001d96:	2000      	movs	r0, #0
 8001d98:	f7ff f93a 	bl	8001010 <HD44780_SetCursor>
	HD44780_PrintStr(FirstOptsub2);
 8001d9c:	4811      	ldr	r0, [pc, #68]	; (8001de4 <sub2Menu+0x5c>)
 8001d9e:	f7ff f9a8 	bl	80010f2 <HD44780_PrintStr>
	HD44780_SetCursor(0,1);
 8001da2:	2101      	movs	r1, #1
 8001da4:	2000      	movs	r0, #0
 8001da6:	f7ff f933 	bl	8001010 <HD44780_SetCursor>
	HD44780_PrintStr(SecondOptsub2);
 8001daa:	480f      	ldr	r0, [pc, #60]	; (8001de8 <sub2Menu+0x60>)
 8001dac:	f7ff f9a1 	bl	80010f2 <HD44780_PrintStr>
	HD44780_SetCursor(16,0);
 8001db0:	2100      	movs	r1, #0
 8001db2:	2010      	movs	r0, #16
 8001db4:	f7ff f92c 	bl	8001010 <HD44780_SetCursor>
	sprintf(Ml, "%d", self->mililiters);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	695b      	ldr	r3, [r3, #20]
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	490b      	ldr	r1, [pc, #44]	; (8001dec <sub2Menu+0x64>)
 8001dc0:	480b      	ldr	r0, [pc, #44]	; (8001df0 <sub2Menu+0x68>)
 8001dc2:	f004 fcdb 	bl	800677c <siprintf>
	HD44780_PrintStr(Ml);
 8001dc6:	480a      	ldr	r0, [pc, #40]	; (8001df0 <sub2Menu+0x68>)
 8001dc8:	f7ff f993 	bl	80010f2 <HD44780_PrintStr>
	HD44780_SetCursor(18,0);
 8001dcc:	2100      	movs	r1, #0
 8001dce:	2012      	movs	r0, #18
 8001dd0:	f7ff f91e 	bl	8001010 <HD44780_SetCursor>
	HD44780_PrintStr("ml");
 8001dd4:	4807      	ldr	r0, [pc, #28]	; (8001df4 <sub2Menu+0x6c>)
 8001dd6:	f7ff f98c 	bl	80010f2 <HD44780_PrintStr>
}
 8001dda:	bf00      	nop
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	200000a0 	.word	0x200000a0
 8001de8:	200000ac 	.word	0x200000ac
 8001dec:	08007308 	.word	0x08007308
 8001df0:	20000508 	.word	0x20000508
 8001df4:	0800730c 	.word	0x0800730c

08001df8 <sub3Menu>:

void sub3Menu(){
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
	HD44780_Clear();
 8001dfc:	f7ff f8f2 	bl	8000fe4 <HD44780_Clear>
	HD44780_SetCursor(0,0);
 8001e00:	2100      	movs	r1, #0
 8001e02:	2000      	movs	r0, #0
 8001e04:	f7ff f904 	bl	8001010 <HD44780_SetCursor>
	HD44780_PrintStr(FirstOptsub3);
 8001e08:	482f      	ldr	r0, [pc, #188]	; (8001ec8 <sub3Menu+0xd0>)
 8001e0a:	f7ff f972 	bl	80010f2 <HD44780_PrintStr>
	HD44780_SetCursor(0,1);
 8001e0e:	2101      	movs	r1, #1
 8001e10:	2000      	movs	r0, #0
 8001e12:	f7ff f8fd 	bl	8001010 <HD44780_SetCursor>
	HD44780_PrintStr(SecondOptsub3);
 8001e16:	482d      	ldr	r0, [pc, #180]	; (8001ecc <sub3Menu+0xd4>)
 8001e18:	f7ff f96b 	bl	80010f2 <HD44780_PrintStr>
	HD44780_SetCursor(8,0);
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	2008      	movs	r0, #8
 8001e20:	f7ff f8f6 	bl	8001010 <HD44780_SetCursor>
	HD44780_PrintStr("1st:");
 8001e24:	482a      	ldr	r0, [pc, #168]	; (8001ed0 <sub3Menu+0xd8>)
 8001e26:	f7ff f964 	bl	80010f2 <HD44780_PrintStr>
	HD44780_SetCursor(12,0);
 8001e2a:	2100      	movs	r1, #0
 8001e2c:	200c      	movs	r0, #12
 8001e2e:	f7ff f8ef 	bl	8001010 <HD44780_SetCursor>
	sprintf(DrnCnt1, "%d", drinkCounter1);
 8001e32:	4b28      	ldr	r3, [pc, #160]	; (8001ed4 <sub3Menu+0xdc>)
 8001e34:	881b      	ldrh	r3, [r3, #0]
 8001e36:	461a      	mov	r2, r3
 8001e38:	4927      	ldr	r1, [pc, #156]	; (8001ed8 <sub3Menu+0xe0>)
 8001e3a:	4828      	ldr	r0, [pc, #160]	; (8001edc <sub3Menu+0xe4>)
 8001e3c:	f004 fc9e 	bl	800677c <siprintf>
	HD44780_PrintStr(DrnCnt1);
 8001e40:	4826      	ldr	r0, [pc, #152]	; (8001edc <sub3Menu+0xe4>)
 8001e42:	f7ff f956 	bl	80010f2 <HD44780_PrintStr>
	HD44780_SetCursor(14,0);
 8001e46:	2100      	movs	r1, #0
 8001e48:	200e      	movs	r0, #14
 8001e4a:	f7ff f8e1 	bl	8001010 <HD44780_SetCursor>
	HD44780_PrintStr("2nd:");
 8001e4e:	4824      	ldr	r0, [pc, #144]	; (8001ee0 <sub3Menu+0xe8>)
 8001e50:	f7ff f94f 	bl	80010f2 <HD44780_PrintStr>
	HD44780_SetCursor(18,0);
 8001e54:	2100      	movs	r1, #0
 8001e56:	2012      	movs	r0, #18
 8001e58:	f7ff f8da 	bl	8001010 <HD44780_SetCursor>
	sprintf(DrnCnt2, "%d", drinkCounter2);
 8001e5c:	4b21      	ldr	r3, [pc, #132]	; (8001ee4 <sub3Menu+0xec>)
 8001e5e:	881b      	ldrh	r3, [r3, #0]
 8001e60:	461a      	mov	r2, r3
 8001e62:	491d      	ldr	r1, [pc, #116]	; (8001ed8 <sub3Menu+0xe0>)
 8001e64:	4820      	ldr	r0, [pc, #128]	; (8001ee8 <sub3Menu+0xf0>)
 8001e66:	f004 fc89 	bl	800677c <siprintf>
	HD44780_PrintStr(DrnCnt2);
 8001e6a:	481f      	ldr	r0, [pc, #124]	; (8001ee8 <sub3Menu+0xf0>)
 8001e6c:	f7ff f941 	bl	80010f2 <HD44780_PrintStr>
	HD44780_SetCursor(8,1);
 8001e70:	2101      	movs	r1, #1
 8001e72:	2008      	movs	r0, #8
 8001e74:	f7ff f8cc 	bl	8001010 <HD44780_SetCursor>
	HD44780_PrintStr("3rd:");
 8001e78:	481c      	ldr	r0, [pc, #112]	; (8001eec <sub3Menu+0xf4>)
 8001e7a:	f7ff f93a 	bl	80010f2 <HD44780_PrintStr>
	HD44780_SetCursor(12,1);
 8001e7e:	2101      	movs	r1, #1
 8001e80:	200c      	movs	r0, #12
 8001e82:	f7ff f8c5 	bl	8001010 <HD44780_SetCursor>
	sprintf(DrnCnt3, "%d", drinkCounter3);
 8001e86:	4b1a      	ldr	r3, [pc, #104]	; (8001ef0 <sub3Menu+0xf8>)
 8001e88:	881b      	ldrh	r3, [r3, #0]
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	4912      	ldr	r1, [pc, #72]	; (8001ed8 <sub3Menu+0xe0>)
 8001e8e:	4819      	ldr	r0, [pc, #100]	; (8001ef4 <sub3Menu+0xfc>)
 8001e90:	f004 fc74 	bl	800677c <siprintf>
	HD44780_PrintStr(DrnCnt3);
 8001e94:	4817      	ldr	r0, [pc, #92]	; (8001ef4 <sub3Menu+0xfc>)
 8001e96:	f7ff f92c 	bl	80010f2 <HD44780_PrintStr>
	HD44780_SetCursor(14,1);
 8001e9a:	2101      	movs	r1, #1
 8001e9c:	200e      	movs	r0, #14
 8001e9e:	f7ff f8b7 	bl	8001010 <HD44780_SetCursor>
	HD44780_PrintStr("4th:");
 8001ea2:	4815      	ldr	r0, [pc, #84]	; (8001ef8 <sub3Menu+0x100>)
 8001ea4:	f7ff f925 	bl	80010f2 <HD44780_PrintStr>
	HD44780_SetCursor(18,1);
 8001ea8:	2101      	movs	r1, #1
 8001eaa:	2012      	movs	r0, #18
 8001eac:	f7ff f8b0 	bl	8001010 <HD44780_SetCursor>
	sprintf(DrnCnt4, "%d", drinkCounter4);
 8001eb0:	4b12      	ldr	r3, [pc, #72]	; (8001efc <sub3Menu+0x104>)
 8001eb2:	881b      	ldrh	r3, [r3, #0]
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	4908      	ldr	r1, [pc, #32]	; (8001ed8 <sub3Menu+0xe0>)
 8001eb8:	4811      	ldr	r0, [pc, #68]	; (8001f00 <sub3Menu+0x108>)
 8001eba:	f004 fc5f 	bl	800677c <siprintf>
	HD44780_PrintStr(DrnCnt4);
 8001ebe:	4810      	ldr	r0, [pc, #64]	; (8001f00 <sub3Menu+0x108>)
 8001ec0:	f7ff f917 	bl	80010f2 <HD44780_PrintStr>
}
 8001ec4:	bf00      	nop
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	200000b4 	.word	0x200000b4
 8001ecc:	200000bc 	.word	0x200000bc
 8001ed0:	08007310 	.word	0x08007310
 8001ed4:	2000051a 	.word	0x2000051a
 8001ed8:	08007308 	.word	0x08007308
 8001edc:	2000050c 	.word	0x2000050c
 8001ee0:	08007318 	.word	0x08007318
 8001ee4:	2000051c 	.word	0x2000051c
 8001ee8:	20000510 	.word	0x20000510
 8001eec:	08007320 	.word	0x08007320
 8001ef0:	2000051e 	.word	0x2000051e
 8001ef4:	20000514 	.word	0x20000514
 8001ef8:	08007328 	.word	0x08007328
 8001efc:	20000520 	.word	0x20000520
 8001f00:	20000518 	.word	0x20000518

08001f04 <defaultMenuCursorPos1>:

void defaultMenuCursorPos1(){
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
	HD44780_SetCursor(sizeof(SecondOpt),1);
 8001f08:	2101      	movs	r1, #1
 8001f0a:	200e      	movs	r0, #14
 8001f0c:	f7ff f880 	bl	8001010 <HD44780_SetCursor>
	HD44780_PrintStr("  ");
 8001f10:	4809      	ldr	r0, [pc, #36]	; (8001f38 <defaultMenuCursorPos1+0x34>)
 8001f12:	f7ff f8ee 	bl	80010f2 <HD44780_PrintStr>
	HD44780_SetCursor(sizeof(ThirdOpt)+ 13,0);
 8001f16:	2100      	movs	r1, #0
 8001f18:	2012      	movs	r0, #18
 8001f1a:	f7ff f879 	bl	8001010 <HD44780_SetCursor>
	HD44780_PrintStr("  ");
 8001f1e:	4806      	ldr	r0, [pc, #24]	; (8001f38 <defaultMenuCursorPos1+0x34>)
 8001f20:	f7ff f8e7 	bl	80010f2 <HD44780_PrintStr>
	HD44780_SetCursor(sizeof(FirstOpt),0);
 8001f24:	2100      	movs	r1, #0
 8001f26:	2009      	movs	r0, #9
 8001f28:	f7ff f872 	bl	8001010 <HD44780_SetCursor>
	HD44780_PrintStr("<-");
 8001f2c:	4803      	ldr	r0, [pc, #12]	; (8001f3c <defaultMenuCursorPos1+0x38>)
 8001f2e:	f7ff f8e0 	bl	80010f2 <HD44780_PrintStr>
}
 8001f32:	bf00      	nop
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	08007330 	.word	0x08007330
 8001f3c:	08007334 	.word	0x08007334

08001f40 <defaultMenuCursorPos2>:

void defaultMenuCursorPos2(){
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
	HD44780_SetCursor(sizeof(FirstOpt),0);
 8001f44:	2100      	movs	r1, #0
 8001f46:	2009      	movs	r0, #9
 8001f48:	f7ff f862 	bl	8001010 <HD44780_SetCursor>
	HD44780_PrintStr("  ");
 8001f4c:	4809      	ldr	r0, [pc, #36]	; (8001f74 <defaultMenuCursorPos2+0x34>)
 8001f4e:	f7ff f8d0 	bl	80010f2 <HD44780_PrintStr>
	HD44780_SetCursor(sizeof(ThirdOpt)+ 13,0);
 8001f52:	2100      	movs	r1, #0
 8001f54:	2012      	movs	r0, #18
 8001f56:	f7ff f85b 	bl	8001010 <HD44780_SetCursor>
	HD44780_PrintStr("  ");
 8001f5a:	4806      	ldr	r0, [pc, #24]	; (8001f74 <defaultMenuCursorPos2+0x34>)
 8001f5c:	f7ff f8c9 	bl	80010f2 <HD44780_PrintStr>
	HD44780_SetCursor(sizeof(SecondOpt),1);
 8001f60:	2101      	movs	r1, #1
 8001f62:	200e      	movs	r0, #14
 8001f64:	f7ff f854 	bl	8001010 <HD44780_SetCursor>
	HD44780_PrintStr("<-");
 8001f68:	4803      	ldr	r0, [pc, #12]	; (8001f78 <defaultMenuCursorPos2+0x38>)
 8001f6a:	f7ff f8c2 	bl	80010f2 <HD44780_PrintStr>
}
 8001f6e:	bf00      	nop
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	08007330 	.word	0x08007330
 8001f78:	08007334 	.word	0x08007334

08001f7c <defaultMenuCursorPos3>:

void defaultMenuCursorPos3(){
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
	HD44780_SetCursor(sizeof(SecondOpt),1);
 8001f80:	2101      	movs	r1, #1
 8001f82:	200e      	movs	r0, #14
 8001f84:	f7ff f844 	bl	8001010 <HD44780_SetCursor>
	HD44780_PrintStr("  ");
 8001f88:	4809      	ldr	r0, [pc, #36]	; (8001fb0 <defaultMenuCursorPos3+0x34>)
 8001f8a:	f7ff f8b2 	bl	80010f2 <HD44780_PrintStr>
	HD44780_SetCursor(sizeof(FirstOpt),0);
 8001f8e:	2100      	movs	r1, #0
 8001f90:	2009      	movs	r0, #9
 8001f92:	f7ff f83d 	bl	8001010 <HD44780_SetCursor>
	HD44780_PrintStr("  ");
 8001f96:	4806      	ldr	r0, [pc, #24]	; (8001fb0 <defaultMenuCursorPos3+0x34>)
 8001f98:	f7ff f8ab 	bl	80010f2 <HD44780_PrintStr>
	HD44780_SetCursor(sizeof(ThirdOpt)+ 13,0);
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	2012      	movs	r0, #18
 8001fa0:	f7ff f836 	bl	8001010 <HD44780_SetCursor>
	HD44780_PrintStr("<-");
 8001fa4:	4803      	ldr	r0, [pc, #12]	; (8001fb4 <defaultMenuCursorPos3+0x38>)
 8001fa6:	f7ff f8a4 	bl	80010f2 <HD44780_PrintStr>
}
 8001faa:	bf00      	nop
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	08007330 	.word	0x08007330
 8001fb4:	08007334 	.word	0x08007334

08001fb8 <sub2MenuCursorPos1>:

void sub2MenuCursorPos1(){
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
	HD44780_SetCursor(sizeof(SecondOptsub2),1);
 8001fbc:	2101      	movs	r1, #1
 8001fbe:	2005      	movs	r0, #5
 8001fc0:	f7ff f826 	bl	8001010 <HD44780_SetCursor>
	HD44780_PrintStr("  ");
 8001fc4:	4805      	ldr	r0, [pc, #20]	; (8001fdc <sub2MenuCursorPos1+0x24>)
 8001fc6:	f7ff f894 	bl	80010f2 <HD44780_PrintStr>
	HD44780_SetCursor(sizeof(FirstOptsub2),0);
 8001fca:	2100      	movs	r1, #0
 8001fcc:	200b      	movs	r0, #11
 8001fce:	f7ff f81f 	bl	8001010 <HD44780_SetCursor>
	HD44780_PrintStr("<-");
 8001fd2:	4803      	ldr	r0, [pc, #12]	; (8001fe0 <sub2MenuCursorPos1+0x28>)
 8001fd4:	f7ff f88d 	bl	80010f2 <HD44780_PrintStr>
}
 8001fd8:	bf00      	nop
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	08007330 	.word	0x08007330
 8001fe0:	08007334 	.word	0x08007334

08001fe4 <sub2MenuCursorPos2>:

void sub2MenuCursorPos2(){
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
	HD44780_SetCursor(sizeof(FirstOptsub2),0);
 8001fe8:	2100      	movs	r1, #0
 8001fea:	200b      	movs	r0, #11
 8001fec:	f7ff f810 	bl	8001010 <HD44780_SetCursor>
	HD44780_PrintStr("  ");
 8001ff0:	4805      	ldr	r0, [pc, #20]	; (8002008 <sub2MenuCursorPos2+0x24>)
 8001ff2:	f7ff f87e 	bl	80010f2 <HD44780_PrintStr>
	HD44780_SetCursor(sizeof(SecondOptsub2),1);
 8001ff6:	2101      	movs	r1, #1
 8001ff8:	2005      	movs	r0, #5
 8001ffa:	f7ff f809 	bl	8001010 <HD44780_SetCursor>
	HD44780_PrintStr("<-");
 8001ffe:	4803      	ldr	r0, [pc, #12]	; (800200c <sub2MenuCursorPos2+0x28>)
 8002000:	f7ff f877 	bl	80010f2 <HD44780_PrintStr>
}
 8002004:	bf00      	nop
 8002006:	bd80      	pop	{r7, pc}
 8002008:	08007330 	.word	0x08007330
 800200c:	08007334 	.word	0x08007334

08002010 <sub3MenuCursorPos1>:

void sub3MenuCursorPos1(){
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
	HD44780_SetCursor(sizeof(SecondOptsub3),1);
 8002014:	2101      	movs	r1, #1
 8002016:	2005      	movs	r0, #5
 8002018:	f7fe fffa 	bl	8001010 <HD44780_SetCursor>
	HD44780_PrintStr("  ");
 800201c:	4805      	ldr	r0, [pc, #20]	; (8002034 <sub3MenuCursorPos1+0x24>)
 800201e:	f7ff f868 	bl	80010f2 <HD44780_PrintStr>
	HD44780_SetCursor(sizeof(FirstOptsub3),0);
 8002022:	2100      	movs	r1, #0
 8002024:	2006      	movs	r0, #6
 8002026:	f7fe fff3 	bl	8001010 <HD44780_SetCursor>
	HD44780_PrintStr("<-");
 800202a:	4803      	ldr	r0, [pc, #12]	; (8002038 <sub3MenuCursorPos1+0x28>)
 800202c:	f7ff f861 	bl	80010f2 <HD44780_PrintStr>
}
 8002030:	bf00      	nop
 8002032:	bd80      	pop	{r7, pc}
 8002034:	08007330 	.word	0x08007330
 8002038:	08007334 	.word	0x08007334

0800203c <sub3MenuCursorPos2>:

void sub3MenuCursorPos2(){
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
	HD44780_SetCursor(sizeof(FirstOptsub3),0);
 8002040:	2100      	movs	r1, #0
 8002042:	2006      	movs	r0, #6
 8002044:	f7fe ffe4 	bl	8001010 <HD44780_SetCursor>
	HD44780_PrintStr("  ");
 8002048:	4805      	ldr	r0, [pc, #20]	; (8002060 <sub3MenuCursorPos2+0x24>)
 800204a:	f7ff f852 	bl	80010f2 <HD44780_PrintStr>
	HD44780_SetCursor(sizeof(SecondOptsub3),1);
 800204e:	2101      	movs	r1, #1
 8002050:	2005      	movs	r0, #5
 8002052:	f7fe ffdd 	bl	8001010 <HD44780_SetCursor>
	HD44780_PrintStr("<-");
 8002056:	4803      	ldr	r0, [pc, #12]	; (8002064 <sub3MenuCursorPos2+0x28>)
 8002058:	f7ff f84b 	bl	80010f2 <HD44780_PrintStr>
}
 800205c:	bf00      	nop
 800205e:	bd80      	pop	{r7, pc}
 8002060:	08007330 	.word	0x08007330
 8002064:	08007334 	.word	0x08007334

08002068 <drinkAddCounter1>:

void drinkAddCounter1(){
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
	drinkCounter1++;
 800206c:	4b05      	ldr	r3, [pc, #20]	; (8002084 <drinkAddCounter1+0x1c>)
 800206e:	881b      	ldrh	r3, [r3, #0]
 8002070:	3301      	adds	r3, #1
 8002072:	b29a      	uxth	r2, r3
 8002074:	4b03      	ldr	r3, [pc, #12]	; (8002084 <drinkAddCounter1+0x1c>)
 8002076:	801a      	strh	r2, [r3, #0]
}
 8002078:	bf00      	nop
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	2000051a 	.word	0x2000051a

08002088 <drinkAddCounter2>:

void drinkAddCounter2(){
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
	drinkCounter2++;
 800208c:	4b05      	ldr	r3, [pc, #20]	; (80020a4 <drinkAddCounter2+0x1c>)
 800208e:	881b      	ldrh	r3, [r3, #0]
 8002090:	3301      	adds	r3, #1
 8002092:	b29a      	uxth	r2, r3
 8002094:	4b03      	ldr	r3, [pc, #12]	; (80020a4 <drinkAddCounter2+0x1c>)
 8002096:	801a      	strh	r2, [r3, #0]
}
 8002098:	bf00      	nop
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	2000051c 	.word	0x2000051c

080020a8 <drinkAddCounter3>:

void drinkAddCounter3(){
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
	drinkCounter3++;
 80020ac:	4b05      	ldr	r3, [pc, #20]	; (80020c4 <drinkAddCounter3+0x1c>)
 80020ae:	881b      	ldrh	r3, [r3, #0]
 80020b0:	3301      	adds	r3, #1
 80020b2:	b29a      	uxth	r2, r3
 80020b4:	4b03      	ldr	r3, [pc, #12]	; (80020c4 <drinkAddCounter3+0x1c>)
 80020b6:	801a      	strh	r2, [r3, #0]
}
 80020b8:	bf00      	nop
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	2000051e 	.word	0x2000051e

080020c8 <drinkAddCounter4>:

void drinkAddCounter4(){
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
	drinkCounter4++;
 80020cc:	4b05      	ldr	r3, [pc, #20]	; (80020e4 <drinkAddCounter4+0x1c>)
 80020ce:	881b      	ldrh	r3, [r3, #0]
 80020d0:	3301      	adds	r3, #1
 80020d2:	b29a      	uxth	r2, r3
 80020d4:	4b03      	ldr	r3, [pc, #12]	; (80020e4 <drinkAddCounter4+0x1c>)
 80020d6:	801a      	strh	r2, [r3, #0]
}
 80020d8:	bf00      	nop
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	20000520 	.word	0x20000520

080020e8 <drinkCounterReset>:

void drinkCounterReset(){
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
	drinkCounter1 = 0;
 80020ec:	4b08      	ldr	r3, [pc, #32]	; (8002110 <drinkCounterReset+0x28>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	801a      	strh	r2, [r3, #0]
	drinkCounter2 = 0;
 80020f2:	4b08      	ldr	r3, [pc, #32]	; (8002114 <drinkCounterReset+0x2c>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	801a      	strh	r2, [r3, #0]
	drinkCounter3 = 0;
 80020f8:	4b07      	ldr	r3, [pc, #28]	; (8002118 <drinkCounterReset+0x30>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	801a      	strh	r2, [r3, #0]
	drinkCounter4 = 0;
 80020fe:	4b07      	ldr	r3, [pc, #28]	; (800211c <drinkCounterReset+0x34>)
 8002100:	2200      	movs	r2, #0
 8002102:	801a      	strh	r2, [r3, #0]
}
 8002104:	bf00      	nop
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	2000051a 	.word	0x2000051a
 8002114:	2000051c 	.word	0x2000051c
 8002118:	2000051e 	.word	0x2000051e
 800211c:	20000520 	.word	0x20000520

08002120 <leftReact1>:

void leftReact1(menu_t* self){
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
	self->menuChanged = 1;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2201      	movs	r2, #1
 800212c:	60da      	str	r2, [r3, #12]
	self->cursorPos--;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	1e5a      	subs	r2, r3, #1
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	609a      	str	r2, [r3, #8]
	if (self->cursorPos < 0){
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	2b00      	cmp	r3, #0
 800213e:	da02      	bge.n	8002146 <leftReact1+0x26>
		self->cursorPos = 2;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2202      	movs	r2, #2
 8002144:	609a      	str	r2, [r3, #8]
	}
}
 8002146:	bf00      	nop
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr

08002152 <rightReact1>:

void rightReact1(menu_t* self){
 8002152:	b480      	push	{r7}
 8002154:	b083      	sub	sp, #12
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
	self->menuChanged = 1;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2201      	movs	r2, #1
 800215e:	60da      	str	r2, [r3, #12]
	self->cursorPos++;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	1c5a      	adds	r2, r3, #1
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	609a      	str	r2, [r3, #8]
	if (self->cursorPos > 2){
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	2b02      	cmp	r3, #2
 8002170:	dd02      	ble.n	8002178 <rightReact1+0x26>
		self->cursorPos = 0;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	609a      	str	r2, [r3, #8]
	}
}
 8002178:	bf00      	nop
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <leftReact2>:

void leftReact2(menu_t* self){
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
	self->menuChanged = 1;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	60da      	str	r2, [r3, #12]
	switch(self->cursorPos){
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	2b02      	cmp	r3, #2
 8002198:	d00e      	beq.n	80021b8 <leftReact2+0x34>
 800219a:	2b02      	cmp	r3, #2
 800219c:	dc19      	bgt.n	80021d2 <leftReact2+0x4e>
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d002      	beq.n	80021a8 <leftReact2+0x24>
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d004      	beq.n	80021b0 <leftReact2+0x2c>
			}
			break;
		//default:
		//	menuError();
	}
}
 80021a6:	e014      	b.n	80021d2 <leftReact2+0x4e>
			self->cursorPos = 1;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2201      	movs	r2, #1
 80021ac:	609a      	str	r2, [r3, #8]
			break;
 80021ae:	e010      	b.n	80021d2 <leftReact2+0x4e>
			self->cursorPos = 0;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	609a      	str	r2, [r3, #8]
			break;
 80021b6:	e00c      	b.n	80021d2 <leftReact2+0x4e>
			self->mililiters = self->mililiters - 5;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	695b      	ldr	r3, [r3, #20]
 80021bc:	1f5a      	subs	r2, r3, #5
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	615a      	str	r2, [r3, #20]
			if(self->mililiters < 10){
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	695b      	ldr	r3, [r3, #20]
 80021c6:	2b09      	cmp	r3, #9
 80021c8:	dc02      	bgt.n	80021d0 <leftReact2+0x4c>
				self->mililiters = 10;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	220a      	movs	r2, #10
 80021ce:	615a      	str	r2, [r3, #20]
			break;
 80021d0:	bf00      	nop
}
 80021d2:	bf00      	nop
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr

080021de <rightReact2>:

void rightReact2(menu_t* self){
 80021de:	b480      	push	{r7}
 80021e0:	b083      	sub	sp, #12
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
	self->menuChanged = 1;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2201      	movs	r2, #1
 80021ea:	60da      	str	r2, [r3, #12]
	switch(self->cursorPos){
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d00e      	beq.n	8002212 <rightReact2+0x34>
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	dc19      	bgt.n	800222c <rightReact2+0x4e>
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d002      	beq.n	8002202 <rightReact2+0x24>
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d004      	beq.n	800220a <rightReact2+0x2c>
			}
			break;
		//default:
		//	menuError();
	}
}
 8002200:	e014      	b.n	800222c <rightReact2+0x4e>
			self->cursorPos = 1;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2201      	movs	r2, #1
 8002206:	609a      	str	r2, [r3, #8]
			break;
 8002208:	e010      	b.n	800222c <rightReact2+0x4e>
			self->cursorPos = 0;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	609a      	str	r2, [r3, #8]
			break;
 8002210:	e00c      	b.n	800222c <rightReact2+0x4e>
			self->mililiters = self->mililiters + 5;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	695b      	ldr	r3, [r3, #20]
 8002216:	1d5a      	adds	r2, r3, #5
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	615a      	str	r2, [r3, #20]
			if(self->mililiters > 95){
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	695b      	ldr	r3, [r3, #20]
 8002220:	2b5f      	cmp	r3, #95	; 0x5f
 8002222:	dd02      	ble.n	800222a <rightReact2+0x4c>
				self->mililiters = 95;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	225f      	movs	r2, #95	; 0x5f
 8002228:	615a      	str	r2, [r3, #20]
			break;
 800222a:	bf00      	nop
}
 800222c:	bf00      	nop
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <leftReact3>:

void leftReact3(menu_t* self){
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
	self->menuChanged = 1;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	60da      	str	r2, [r3, #12]
	self->cursorPos--;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	1e5a      	subs	r2, r3, #1
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	609a      	str	r2, [r3, #8]
	if (self->cursorPos < 0){
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	2b00      	cmp	r3, #0
 8002256:	da02      	bge.n	800225e <leftReact3+0x26>
		self->cursorPos = 1;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2201      	movs	r2, #1
 800225c:	609a      	str	r2, [r3, #8]
	}
}
 800225e:	bf00      	nop
 8002260:	370c      	adds	r7, #12
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr

0800226a <rightReact3>:

void rightReact3(menu_t* self){
 800226a:	b480      	push	{r7}
 800226c:	b083      	sub	sp, #12
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
	self->menuChanged = 1;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2201      	movs	r2, #1
 8002276:	60da      	str	r2, [r3, #12]
	self->cursorPos++;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	1c5a      	adds	r2, r3, #1
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	609a      	str	r2, [r3, #8]
	if (self->cursorPos > 1){
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	2b01      	cmp	r3, #1
 8002288:	dd02      	ble.n	8002290 <rightReact3+0x26>
		self->cursorPos = 0;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2200      	movs	r2, #0
 800228e:	609a      	str	r2, [r3, #8]
	}
}
 8002290:	bf00      	nop
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <clickedReact1>:

void clickedReact1(menu_t* self){
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
	self->menuChanged = 1;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2201      	movs	r2, #1
 80022a8:	60da      	str	r2, [r3, #12]
	switch(self->cursorPos){
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d00e      	beq.n	80022d0 <clickedReact1+0x34>
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	dc10      	bgt.n	80022d8 <clickedReact1+0x3c>
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d002      	beq.n	80022c0 <clickedReact1+0x24>
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d004      	beq.n	80022c8 <clickedReact1+0x2c>
 80022be:	e00b      	b.n	80022d8 <clickedReact1+0x3c>
		case 0:
			self->subMenuFlag = 2;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2202      	movs	r2, #2
 80022c4:	611a      	str	r2, [r3, #16]
			break;
 80022c6:	e007      	b.n	80022d8 <clickedReact1+0x3c>
		case 1:
			self->subMenuFlag = 3;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2203      	movs	r2, #3
 80022cc:	611a      	str	r2, [r3, #16]
			break;
 80022ce:	e003      	b.n	80022d8 <clickedReact1+0x3c>
		case 2:
			self->pourChanged = 1;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2201      	movs	r2, #1
 80022d4:	605a      	str	r2, [r3, #4]
			break;
 80022d6:	bf00      	nop
	}
	self->cursorPos = 0;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	609a      	str	r2, [r3, #8]
}
 80022de:	bf00      	nop
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr

080022ea <clickedReact3>:

void clickedReact3(menu_t* self){
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b082      	sub	sp, #8
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
	self->menuChanged = 1;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2201      	movs	r2, #1
 80022f6:	60da      	str	r2, [r3, #12]
	switch(self->cursorPos){
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d002      	beq.n	8002306 <clickedReact3+0x1c>
 8002300:	2b01      	cmp	r3, #1
 8002302:	d003      	beq.n	800230c <clickedReact3+0x22>
			self->cursorPos = 0;
			break;
		//default:
		//	menuError();
	}
}
 8002304:	e009      	b.n	800231a <clickedReact3+0x30>
			drinkCounterReset();
 8002306:	f7ff feef 	bl	80020e8 <drinkCounterReset>
			break;
 800230a:	e006      	b.n	800231a <clickedReact3+0x30>
			self->subMenuFlag = 1;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	611a      	str	r2, [r3, #16]
			self->cursorPos = 0;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	609a      	str	r2, [r3, #8]
			break;
 8002318:	bf00      	nop
}
 800231a:	bf00      	nop
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}

08002322 <clickedReact2>:

void clickedReact2(menu_t* self){
 8002322:	b480      	push	{r7}
 8002324:	b083      	sub	sp, #12
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
	self->menuChanged = 1;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2201      	movs	r2, #1
 800232e:	60da      	str	r2, [r3, #12]
	switch(self->cursorPos){
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	2b02      	cmp	r3, #2
 8002336:	d011      	beq.n	800235c <clickedReact2+0x3a>
 8002338:	2b02      	cmp	r3, #2
 800233a:	dc13      	bgt.n	8002364 <clickedReact2+0x42>
 800233c:	2b00      	cmp	r3, #0
 800233e:	d002      	beq.n	8002346 <clickedReact2+0x24>
 8002340:	2b01      	cmp	r3, #1
 8002342:	d004      	beq.n	800234e <clickedReact2+0x2c>
			break;
		case 2:
			self->cursorPos = 0;
			break;
	}
}
 8002344:	e00e      	b.n	8002364 <clickedReact2+0x42>
			self->cursorPos = 2;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2202      	movs	r2, #2
 800234a:	609a      	str	r2, [r3, #8]
			break;
 800234c:	e00a      	b.n	8002364 <clickedReact2+0x42>
			self->subMenuFlag = 1;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2201      	movs	r2, #1
 8002352:	611a      	str	r2, [r3, #16]
			self->cursorPos = 0;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	609a      	str	r2, [r3, #8]
			break;
 800235a:	e003      	b.n	8002364 <clickedReact2+0x42>
			self->cursorPos = 0;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	609a      	str	r2, [r3, #8]
			break;
 8002362:	bf00      	nop
}
 8002364:	bf00      	nop
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <handleLeft>:

void handleLeft(menu_t* self){
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
    self->currentMenu->leftReact(self);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	4798      	blx	r3
}
 8002382:	bf00      	nop
 8002384:	3708      	adds	r7, #8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}

0800238a <handleRight>:

void handleRight(menu_t* self){
 800238a:	b580      	push	{r7, lr}
 800238c:	b082      	sub	sp, #8
 800238e:	af00      	add	r7, sp, #0
 8002390:	6078      	str	r0, [r7, #4]
    self->currentMenu->rightReact(self);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	4798      	blx	r3
}
 800239c:	bf00      	nop
 800239e:	3708      	adds	r7, #8
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <handleClicked>:

void handleClicked(menu_t* self){
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
    self->currentMenu->clickedReact(self);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	4798      	blx	r3
}
 80023b6:	bf00      	nop
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
	...

080023c0 <degreeToRaw>:

 //For current clocks 90 is 0deg 451 is 180deg 270 is center
servo_t servo = {.rotation=0,.setRotation=setRotation,.initServo=initServo};


unsigned int degreeToRaw(double degrees){
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	ed87 0b00 	vstr	d0, [r7]
	return round(map_range(degrees, 0.0, 180.0, 90.0, 451.0));
 80023ca:	ed9f 4b11 	vldr	d4, [pc, #68]	; 8002410 <degreeToRaw+0x50>
 80023ce:	ed9f 3b12 	vldr	d3, [pc, #72]	; 8002418 <degreeToRaw+0x58>
 80023d2:	ed9f 2b13 	vldr	d2, [pc, #76]	; 8002420 <degreeToRaw+0x60>
 80023d6:	ed9f 1b14 	vldr	d1, [pc, #80]	; 8002428 <degreeToRaw+0x68>
 80023da:	ed97 0b00 	vldr	d0, [r7]
 80023de:	f000 f863 	bl	80024a8 <map_range>
 80023e2:	eeb0 7a40 	vmov.f32	s14, s0
 80023e6:	eef0 7a60 	vmov.f32	s15, s1
 80023ea:	eeb0 0a47 	vmov.f32	s0, s14
 80023ee:	eef0 0a67 	vmov.f32	s1, s15
 80023f2:	f004 febd 	bl	8007170 <round>
 80023f6:	ec53 2b10 	vmov	r2, r3, d0
 80023fa:	4610      	mov	r0, r2
 80023fc:	4619      	mov	r1, r3
 80023fe:	f7fe fb0d 	bl	8000a1c <__aeabi_d2uiz>
 8002402:	4603      	mov	r3, r0
//	return round(miny + ((maxy-miny)/(maxx-minx))*(degrees-minx));
}
 8002404:	4618      	mov	r0, r3
 8002406:	3708      	adds	r7, #8
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	f3af 8000 	nop.w
 8002410:	00000000 	.word	0x00000000
 8002414:	407c3000 	.word	0x407c3000
 8002418:	00000000 	.word	0x00000000
 800241c:	40568000 	.word	0x40568000
 8002420:	00000000 	.word	0x00000000
 8002424:	40668000 	.word	0x40668000
	...

08002430 <setRotation>:
void setRotation(int desiredDegrees){
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
	servo.rawPos = degreeToRaw(desiredDegrees);
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f7fe f873 	bl	8000524 <__aeabi_i2d>
 800243e:	4602      	mov	r2, r0
 8002440:	460b      	mov	r3, r1
 8002442:	ec43 2b10 	vmov	d0, r2, r3
 8002446:	f7ff ffbb 	bl	80023c0 <degreeToRaw>
 800244a:	4603      	mov	r3, r0
 800244c:	4a06      	ldr	r2, [pc, #24]	; (8002468 <setRotation+0x38>)
 800244e:	6013      	str	r3, [r2, #0]
	servo.rotation=desiredDegrees;
 8002450:	4a05      	ldr	r2, [pc, #20]	; (8002468 <setRotation+0x38>)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6053      	str	r3, [r2, #4]
	TIM9->CCR1 = servo.rawPos;
 8002456:	4a05      	ldr	r2, [pc, #20]	; (800246c <setRotation+0x3c>)
 8002458:	4b03      	ldr	r3, [pc, #12]	; (8002468 <setRotation+0x38>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	6353      	str	r3, [r2, #52]	; 0x34

}
 800245e:	bf00      	nop
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	200000c4 	.word	0x200000c4
 800246c:	40014000 	.word	0x40014000

08002470 <initServo>:

void initServo(){
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
	servo.rawPos=degreeToRaw(90);
 8002474:	ed9f 0b08 	vldr	d0, [pc, #32]	; 8002498 <initServo+0x28>
 8002478:	f7ff ffa2 	bl	80023c0 <degreeToRaw>
 800247c:	4603      	mov	r3, r0
 800247e:	4a08      	ldr	r2, [pc, #32]	; (80024a0 <initServo+0x30>)
 8002480:	6013      	str	r3, [r2, #0]
	servo.rotation=90;
 8002482:	4b07      	ldr	r3, [pc, #28]	; (80024a0 <initServo+0x30>)
 8002484:	225a      	movs	r2, #90	; 0x5a
 8002486:	605a      	str	r2, [r3, #4]
	TIM9->CCR1 = servo.rawPos;
 8002488:	4a06      	ldr	r2, [pc, #24]	; (80024a4 <initServo+0x34>)
 800248a:	4b05      	ldr	r3, [pc, #20]	; (80024a0 <initServo+0x30>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	6353      	str	r3, [r2, #52]	; 0x34
}
 8002490:	bf00      	nop
 8002492:	bd80      	pop	{r7, pc}
 8002494:	f3af 8000 	nop.w
 8002498:	00000000 	.word	0x00000000
 800249c:	40568000 	.word	0x40568000
 80024a0:	200000c4 	.word	0x200000c4
 80024a4:	40014000 	.word	0x40014000

080024a8 <map_range>:

double map_range(double value, double old_min, double old_max, double new_min, double new_max) {
 80024a8:	b5b0      	push	{r4, r5, r7, lr}
 80024aa:	b08a      	sub	sp, #40	; 0x28
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	ed87 0b08 	vstr	d0, [r7, #32]
 80024b2:	ed87 1b06 	vstr	d1, [r7, #24]
 80024b6:	ed87 2b04 	vstr	d2, [r7, #16]
 80024ba:	ed87 3b02 	vstr	d3, [r7, #8]
 80024be:	ed87 4b00 	vstr	d4, [r7]
    return ((value - old_min) / (old_max - old_min)) * (new_max - new_min) + new_min;
 80024c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024c6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80024ca:	f7fd fedd 	bl	8000288 <__aeabi_dsub>
 80024ce:	4602      	mov	r2, r0
 80024d0:	460b      	mov	r3, r1
 80024d2:	4614      	mov	r4, r2
 80024d4:	461d      	mov	r5, r3
 80024d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024da:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80024de:	f7fd fed3 	bl	8000288 <__aeabi_dsub>
 80024e2:	4602      	mov	r2, r0
 80024e4:	460b      	mov	r3, r1
 80024e6:	4620      	mov	r0, r4
 80024e8:	4629      	mov	r1, r5
 80024ea:	f7fe f9af 	bl	800084c <__aeabi_ddiv>
 80024ee:	4602      	mov	r2, r0
 80024f0:	460b      	mov	r3, r1
 80024f2:	4614      	mov	r4, r2
 80024f4:	461d      	mov	r5, r3
 80024f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80024fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80024fe:	f7fd fec3 	bl	8000288 <__aeabi_dsub>
 8002502:	4602      	mov	r2, r0
 8002504:	460b      	mov	r3, r1
 8002506:	4620      	mov	r0, r4
 8002508:	4629      	mov	r1, r5
 800250a:	f7fe f875 	bl	80005f8 <__aeabi_dmul>
 800250e:	4602      	mov	r2, r0
 8002510:	460b      	mov	r3, r1
 8002512:	4610      	mov	r0, r2
 8002514:	4619      	mov	r1, r3
 8002516:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800251a:	f7fd feb7 	bl	800028c <__adddf3>
 800251e:	4602      	mov	r2, r0
 8002520:	460b      	mov	r3, r1
 8002522:	ec43 2b17 	vmov	d7, r2, r3
}
 8002526:	eeb0 0a47 	vmov.f32	s0, s14
 800252a:	eef0 0a67 	vmov.f32	s1, s15
 800252e:	3728      	adds	r7, #40	; 0x28
 8002530:	46bd      	mov	sp, r7
 8002532:	bdb0      	pop	{r4, r5, r7, pc}

08002534 <drinkChange>:
#include "shotHolder.h"
#include <stdio.h>

void drinkChange(drinkpos_t* self, int position){
 8002534:	b480      	push	{r7}
 8002536:	b085      	sub	sp, #20
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
	switch(position){
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	3b01      	subs	r3, #1
 8002542:	2b2b      	cmp	r3, #43	; 0x2b
 8002544:	d87a      	bhi.n	800263c <drinkChange+0x108>
 8002546:	a201      	add	r2, pc, #4	; (adr r2, 800254c <drinkChange+0x18>)
 8002548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800254c:	080025fd 	.word	0x080025fd
 8002550:	0800260d 	.word	0x0800260d
 8002554:	0800261d 	.word	0x0800261d
 8002558:	0800262d 	.word	0x0800262d
 800255c:	0800263d 	.word	0x0800263d
 8002560:	0800263d 	.word	0x0800263d
 8002564:	0800263d 	.word	0x0800263d
 8002568:	0800263d 	.word	0x0800263d
 800256c:	0800263d 	.word	0x0800263d
 8002570:	0800263d 	.word	0x0800263d
 8002574:	08002605 	.word	0x08002605
 8002578:	0800263d 	.word	0x0800263d
 800257c:	0800263d 	.word	0x0800263d
 8002580:	0800263d 	.word	0x0800263d
 8002584:	0800263d 	.word	0x0800263d
 8002588:	0800263d 	.word	0x0800263d
 800258c:	0800263d 	.word	0x0800263d
 8002590:	0800263d 	.word	0x0800263d
 8002594:	0800263d 	.word	0x0800263d
 8002598:	0800263d 	.word	0x0800263d
 800259c:	0800263d 	.word	0x0800263d
 80025a0:	08002615 	.word	0x08002615
 80025a4:	0800263d 	.word	0x0800263d
 80025a8:	0800263d 	.word	0x0800263d
 80025ac:	0800263d 	.word	0x0800263d
 80025b0:	0800263d 	.word	0x0800263d
 80025b4:	0800263d 	.word	0x0800263d
 80025b8:	0800263d 	.word	0x0800263d
 80025bc:	0800263d 	.word	0x0800263d
 80025c0:	0800263d 	.word	0x0800263d
 80025c4:	0800263d 	.word	0x0800263d
 80025c8:	0800263d 	.word	0x0800263d
 80025cc:	08002625 	.word	0x08002625
 80025d0:	0800263d 	.word	0x0800263d
 80025d4:	0800263d 	.word	0x0800263d
 80025d8:	0800263d 	.word	0x0800263d
 80025dc:	0800263d 	.word	0x0800263d
 80025e0:	0800263d 	.word	0x0800263d
 80025e4:	0800263d 	.word	0x0800263d
 80025e8:	0800263d 	.word	0x0800263d
 80025ec:	0800263d 	.word	0x0800263d
 80025f0:	0800263d 	.word	0x0800263d
 80025f4:	0800263d 	.word	0x0800263d
 80025f8:	08002635 	.word	0x08002635
	case(1):
		self->postitionOfDrinks[0] = 1;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2201      	movs	r2, #1
 8002600:	601a      	str	r2, [r3, #0]
		break;
 8002602:	e02a      	b.n	800265a <drinkChange+0x126>
	case(11):
		self->postitionOfDrinks[0] = 0;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2200      	movs	r2, #0
 8002608:	601a      	str	r2, [r3, #0]
		break;
 800260a:	e026      	b.n	800265a <drinkChange+0x126>
	case(2):
		self->postitionOfDrinks[1] = 1;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	605a      	str	r2, [r3, #4]
		break;
 8002612:	e022      	b.n	800265a <drinkChange+0x126>
	case(22):
		self->postitionOfDrinks[1] = 0;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2200      	movs	r2, #0
 8002618:	605a      	str	r2, [r3, #4]
		break;
 800261a:	e01e      	b.n	800265a <drinkChange+0x126>
	case(3):
		self->postitionOfDrinks[2] = 1;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2201      	movs	r2, #1
 8002620:	609a      	str	r2, [r3, #8]
		break;
 8002622:	e01a      	b.n	800265a <drinkChange+0x126>
	case(33):
		self->postitionOfDrinks[2] = 0;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	609a      	str	r2, [r3, #8]
		break;
 800262a:	e016      	b.n	800265a <drinkChange+0x126>
	case(4):
		self->postitionOfDrinks[3] = 1;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2201      	movs	r2, #1
 8002630:	60da      	str	r2, [r3, #12]
		break;
 8002632:	e012      	b.n	800265a <drinkChange+0x126>
	case(44):
		self->postitionOfDrinks[3] = 0;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	60da      	str	r2, [r3, #12]
		break;
 800263a:	e00e      	b.n	800265a <drinkChange+0x126>
	default:
	    for (int i = 0; i < 4; ++i) {
 800263c:	2300      	movs	r3, #0
 800263e:	60fb      	str	r3, [r7, #12]
 8002640:	e007      	b.n	8002652 <drinkChange+0x11e>
	        self->postitionOfDrinks[i] = 0;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	68fa      	ldr	r2, [r7, #12]
 8002646:	2100      	movs	r1, #0
 8002648:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	    for (int i = 0; i < 4; ++i) {
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	3301      	adds	r3, #1
 8002650:	60fb      	str	r3, [r7, #12]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2b03      	cmp	r3, #3
 8002656:	ddf4      	ble.n	8002642 <drinkChange+0x10e>
	    }
	}
}
 8002658:	bf00      	nop
 800265a:	bf00      	nop
 800265c:	3714      	adds	r7, #20
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop

08002668 <drinkReset>:
void drinkReset(drinkpos_t* self){
 8002668:	b480      	push	{r7}
 800266a:	b085      	sub	sp, #20
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 4; ++i) {
 8002670:	2300      	movs	r3, #0
 8002672:	60fb      	str	r3, [r7, #12]
 8002674:	e007      	b.n	8002686 <drinkReset+0x1e>
        self->postitionOfDrinks[i] = 0;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	68fa      	ldr	r2, [r7, #12]
 800267a:	2100      	movs	r1, #0
 800267c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (int i = 0; i < 4; ++i) {
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	3301      	adds	r3, #1
 8002684:	60fb      	str	r3, [r7, #12]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2b03      	cmp	r3, #3
 800268a:	ddf4      	ble.n	8002676 <drinkReset+0xe>
    }
}
 800268c:	bf00      	nop
 800268e:	bf00      	nop
 8002690:	3714      	adds	r7, #20
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
	...

0800269c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026a2:	2300      	movs	r3, #0
 80026a4:	607b      	str	r3, [r7, #4]
 80026a6:	4b12      	ldr	r3, [pc, #72]	; (80026f0 <HAL_MspInit+0x54>)
 80026a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026aa:	4a11      	ldr	r2, [pc, #68]	; (80026f0 <HAL_MspInit+0x54>)
 80026ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026b0:	6453      	str	r3, [r2, #68]	; 0x44
 80026b2:	4b0f      	ldr	r3, [pc, #60]	; (80026f0 <HAL_MspInit+0x54>)
 80026b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026ba:	607b      	str	r3, [r7, #4]
 80026bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026be:	2300      	movs	r3, #0
 80026c0:	603b      	str	r3, [r7, #0]
 80026c2:	4b0b      	ldr	r3, [pc, #44]	; (80026f0 <HAL_MspInit+0x54>)
 80026c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c6:	4a0a      	ldr	r2, [pc, #40]	; (80026f0 <HAL_MspInit+0x54>)
 80026c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026cc:	6413      	str	r3, [r2, #64]	; 0x40
 80026ce:	4b08      	ldr	r3, [pc, #32]	; (80026f0 <HAL_MspInit+0x54>)
 80026d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026d6:	603b      	str	r3, [r7, #0]
 80026d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80026da:	2200      	movs	r2, #0
 80026dc:	210f      	movs	r1, #15
 80026de:	f06f 0001 	mvn.w	r0, #1
 80026e2:	f000 fadf 	bl	8002ca4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026e6:	bf00      	nop
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	40023800 	.word	0x40023800

080026f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b08a      	sub	sp, #40	; 0x28
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026fc:	f107 0314 	add.w	r3, r7, #20
 8002700:	2200      	movs	r2, #0
 8002702:	601a      	str	r2, [r3, #0]
 8002704:	605a      	str	r2, [r3, #4]
 8002706:	609a      	str	r2, [r3, #8]
 8002708:	60da      	str	r2, [r3, #12]
 800270a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a19      	ldr	r2, [pc, #100]	; (8002778 <HAL_I2C_MspInit+0x84>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d12c      	bne.n	8002770 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002716:	2300      	movs	r3, #0
 8002718:	613b      	str	r3, [r7, #16]
 800271a:	4b18      	ldr	r3, [pc, #96]	; (800277c <HAL_I2C_MspInit+0x88>)
 800271c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271e:	4a17      	ldr	r2, [pc, #92]	; (800277c <HAL_I2C_MspInit+0x88>)
 8002720:	f043 0302 	orr.w	r3, r3, #2
 8002724:	6313      	str	r3, [r2, #48]	; 0x30
 8002726:	4b15      	ldr	r3, [pc, #84]	; (800277c <HAL_I2C_MspInit+0x88>)
 8002728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272a:	f003 0302 	and.w	r3, r3, #2
 800272e:	613b      	str	r3, [r7, #16]
 8002730:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002732:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002736:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002738:	2312      	movs	r3, #18
 800273a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273c:	2300      	movs	r3, #0
 800273e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002740:	2303      	movs	r3, #3
 8002742:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002744:	2304      	movs	r3, #4
 8002746:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002748:	f107 0314 	add.w	r3, r7, #20
 800274c:	4619      	mov	r1, r3
 800274e:	480c      	ldr	r0, [pc, #48]	; (8002780 <HAL_I2C_MspInit+0x8c>)
 8002750:	f000 fad2 	bl	8002cf8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002754:	2300      	movs	r3, #0
 8002756:	60fb      	str	r3, [r7, #12]
 8002758:	4b08      	ldr	r3, [pc, #32]	; (800277c <HAL_I2C_MspInit+0x88>)
 800275a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275c:	4a07      	ldr	r2, [pc, #28]	; (800277c <HAL_I2C_MspInit+0x88>)
 800275e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002762:	6413      	str	r3, [r2, #64]	; 0x40
 8002764:	4b05      	ldr	r3, [pc, #20]	; (800277c <HAL_I2C_MspInit+0x88>)
 8002766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002768:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800276c:	60fb      	str	r3, [r7, #12]
 800276e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002770:	bf00      	nop
 8002772:	3728      	adds	r7, #40	; 0x28
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	40005400 	.word	0x40005400
 800277c:	40023800 	.word	0x40023800
 8002780:	40020400 	.word	0x40020400

08002784 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002794:	d115      	bne.n	80027c2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002796:	2300      	movs	r3, #0
 8002798:	60fb      	str	r3, [r7, #12]
 800279a:	4b0c      	ldr	r3, [pc, #48]	; (80027cc <HAL_TIM_Base_MspInit+0x48>)
 800279c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279e:	4a0b      	ldr	r2, [pc, #44]	; (80027cc <HAL_TIM_Base_MspInit+0x48>)
 80027a0:	f043 0301 	orr.w	r3, r3, #1
 80027a4:	6413      	str	r3, [r2, #64]	; 0x40
 80027a6:	4b09      	ldr	r3, [pc, #36]	; (80027cc <HAL_TIM_Base_MspInit+0x48>)
 80027a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	60fb      	str	r3, [r7, #12]
 80027b0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80027b2:	2200      	movs	r2, #0
 80027b4:	2105      	movs	r1, #5
 80027b6:	201c      	movs	r0, #28
 80027b8:	f000 fa74 	bl	8002ca4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80027bc:	201c      	movs	r0, #28
 80027be:	f000 fa8d 	bl	8002cdc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80027c2:	bf00      	nop
 80027c4:	3710      	adds	r7, #16
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	40023800 	.word	0x40023800

080027d0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b085      	sub	sp, #20
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM9)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a0b      	ldr	r2, [pc, #44]	; (800280c <HAL_TIM_PWM_MspInit+0x3c>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d10d      	bne.n	80027fe <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 80027e2:	2300      	movs	r3, #0
 80027e4:	60fb      	str	r3, [r7, #12]
 80027e6:	4b0a      	ldr	r3, [pc, #40]	; (8002810 <HAL_TIM_PWM_MspInit+0x40>)
 80027e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ea:	4a09      	ldr	r2, [pc, #36]	; (8002810 <HAL_TIM_PWM_MspInit+0x40>)
 80027ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027f0:	6453      	str	r3, [r2, #68]	; 0x44
 80027f2:	4b07      	ldr	r3, [pc, #28]	; (8002810 <HAL_TIM_PWM_MspInit+0x40>)
 80027f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027fa:	60fb      	str	r3, [r7, #12]
 80027fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 80027fe:	bf00      	nop
 8002800:	3714      	adds	r7, #20
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	40014000 	.word	0x40014000
 8002810:	40023800 	.word	0x40023800

08002814 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b088      	sub	sp, #32
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800281c:	f107 030c 	add.w	r3, r7, #12
 8002820:	2200      	movs	r2, #0
 8002822:	601a      	str	r2, [r3, #0]
 8002824:	605a      	str	r2, [r3, #4]
 8002826:	609a      	str	r2, [r3, #8]
 8002828:	60da      	str	r2, [r3, #12]
 800282a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM9)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a12      	ldr	r2, [pc, #72]	; (800287c <HAL_TIM_MspPostInit+0x68>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d11d      	bne.n	8002872 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM9_MspPostInit 0 */

  /* USER CODE END TIM9_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002836:	2300      	movs	r3, #0
 8002838:	60bb      	str	r3, [r7, #8]
 800283a:	4b11      	ldr	r3, [pc, #68]	; (8002880 <HAL_TIM_MspPostInit+0x6c>)
 800283c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283e:	4a10      	ldr	r2, [pc, #64]	; (8002880 <HAL_TIM_MspPostInit+0x6c>)
 8002840:	f043 0301 	orr.w	r3, r3, #1
 8002844:	6313      	str	r3, [r2, #48]	; 0x30
 8002846:	4b0e      	ldr	r3, [pc, #56]	; (8002880 <HAL_TIM_MspPostInit+0x6c>)
 8002848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	60bb      	str	r3, [r7, #8]
 8002850:	68bb      	ldr	r3, [r7, #8]
    /**TIM9 GPIO Configuration
    PA2     ------> TIM9_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002852:	2304      	movs	r3, #4
 8002854:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002856:	2302      	movs	r3, #2
 8002858:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285a:	2300      	movs	r3, #0
 800285c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800285e:	2300      	movs	r3, #0
 8002860:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8002862:	2303      	movs	r3, #3
 8002864:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002866:	f107 030c 	add.w	r3, r7, #12
 800286a:	4619      	mov	r1, r3
 800286c:	4805      	ldr	r0, [pc, #20]	; (8002884 <HAL_TIM_MspPostInit+0x70>)
 800286e:	f000 fa43 	bl	8002cf8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8002872:	bf00      	nop
 8002874:	3720      	adds	r7, #32
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	40014000 	.word	0x40014000
 8002880:	40023800 	.word	0x40023800
 8002884:	40020000 	.word	0x40020000

08002888 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b08c      	sub	sp, #48	; 0x30
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002890:	2300      	movs	r3, #0
 8002892:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002894:	2300      	movs	r3, #0
 8002896:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002898:	2300      	movs	r3, #0
 800289a:	60bb      	str	r3, [r7, #8]
 800289c:	4b2f      	ldr	r3, [pc, #188]	; (800295c <HAL_InitTick+0xd4>)
 800289e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a0:	4a2e      	ldr	r2, [pc, #184]	; (800295c <HAL_InitTick+0xd4>)
 80028a2:	f043 0301 	orr.w	r3, r3, #1
 80028a6:	6453      	str	r3, [r2, #68]	; 0x44
 80028a8:	4b2c      	ldr	r3, [pc, #176]	; (800295c <HAL_InitTick+0xd4>)
 80028aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ac:	f003 0301 	and.w	r3, r3, #1
 80028b0:	60bb      	str	r3, [r7, #8]
 80028b2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80028b4:	f107 020c 	add.w	r2, r7, #12
 80028b8:	f107 0310 	add.w	r3, r7, #16
 80028bc:	4611      	mov	r1, r2
 80028be:	4618      	mov	r0, r3
 80028c0:	f001 fd06 	bl	80042d0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80028c4:	f001 fcf0 	bl	80042a8 <HAL_RCC_GetPCLK2Freq>
 80028c8:	4603      	mov	r3, r0
 80028ca:	005b      	lsls	r3, r3, #1
 80028cc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80028ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d0:	4a23      	ldr	r2, [pc, #140]	; (8002960 <HAL_InitTick+0xd8>)
 80028d2:	fba2 2303 	umull	r2, r3, r2, r3
 80028d6:	0c9b      	lsrs	r3, r3, #18
 80028d8:	3b01      	subs	r3, #1
 80028da:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80028dc:	4b21      	ldr	r3, [pc, #132]	; (8002964 <HAL_InitTick+0xdc>)
 80028de:	4a22      	ldr	r2, [pc, #136]	; (8002968 <HAL_InitTick+0xe0>)
 80028e0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80028e2:	4b20      	ldr	r3, [pc, #128]	; (8002964 <HAL_InitTick+0xdc>)
 80028e4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80028e8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80028ea:	4a1e      	ldr	r2, [pc, #120]	; (8002964 <HAL_InitTick+0xdc>)
 80028ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ee:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80028f0:	4b1c      	ldr	r3, [pc, #112]	; (8002964 <HAL_InitTick+0xdc>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028f6:	4b1b      	ldr	r3, [pc, #108]	; (8002964 <HAL_InitTick+0xdc>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028fc:	4b19      	ldr	r3, [pc, #100]	; (8002964 <HAL_InitTick+0xdc>)
 80028fe:	2200      	movs	r2, #0
 8002900:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002902:	4818      	ldr	r0, [pc, #96]	; (8002964 <HAL_InitTick+0xdc>)
 8002904:	f001 fd16 	bl	8004334 <HAL_TIM_Base_Init>
 8002908:	4603      	mov	r3, r0
 800290a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800290e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002912:	2b00      	cmp	r3, #0
 8002914:	d11b      	bne.n	800294e <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002916:	4813      	ldr	r0, [pc, #76]	; (8002964 <HAL_InitTick+0xdc>)
 8002918:	f001 fd5c 	bl	80043d4 <HAL_TIM_Base_Start_IT>
 800291c:	4603      	mov	r3, r0
 800291e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8002922:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002926:	2b00      	cmp	r3, #0
 8002928:	d111      	bne.n	800294e <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800292a:	2019      	movs	r0, #25
 800292c:	f000 f9d6 	bl	8002cdc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2b0f      	cmp	r3, #15
 8002934:	d808      	bhi.n	8002948 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8002936:	2200      	movs	r2, #0
 8002938:	6879      	ldr	r1, [r7, #4]
 800293a:	2019      	movs	r0, #25
 800293c:	f000 f9b2 	bl	8002ca4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002940:	4a0a      	ldr	r2, [pc, #40]	; (800296c <HAL_InitTick+0xe4>)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6013      	str	r3, [r2, #0]
 8002946:	e002      	b.n	800294e <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800294e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002952:	4618      	mov	r0, r3
 8002954:	3730      	adds	r7, #48	; 0x30
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	40023800 	.word	0x40023800
 8002960:	431bde83 	.word	0x431bde83
 8002964:	20000524 	.word	0x20000524
 8002968:	40010000 	.word	0x40010000
 800296c:	200000d8 	.word	0x200000d8

08002970 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002970:	b480      	push	{r7}
 8002972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002974:	e7fe      	b.n	8002974 <NMI_Handler+0x4>

08002976 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002976:	b480      	push	{r7}
 8002978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800297a:	e7fe      	b.n	800297a <HardFault_Handler+0x4>

0800297c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002980:	e7fe      	b.n	8002980 <MemManage_Handler+0x4>

08002982 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002982:	b480      	push	{r7}
 8002984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002986:	e7fe      	b.n	8002986 <BusFault_Handler+0x4>

08002988 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800298c:	e7fe      	b.n	800298c <UsageFault_Handler+0x4>

0800298e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800298e:	b480      	push	{r7}
 8002990:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002992:	bf00      	nop
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80029a0:	4802      	ldr	r0, [pc, #8]	; (80029ac <TIM1_UP_TIM10_IRQHandler+0x10>)
 80029a2:	f001 fe79 	bl	8004698 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80029a6:	bf00      	nop
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	20000524 	.word	0x20000524

080029b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80029b4:	4803      	ldr	r0, [pc, #12]	; (80029c4 <TIM2_IRQHandler+0x14>)
 80029b6:	f001 fe6f 	bl	8004698 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  enc.ISR();
 80029ba:	4b03      	ldr	r3, [pc, #12]	; (80029c8 <TIM2_IRQHandler+0x18>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	4798      	blx	r3
  /* USER CODE END TIM2_IRQn 1 */
}
 80029c0:	bf00      	nop
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	20000464 	.word	0x20000464
 80029c8:	20000150 	.word	0x20000150

080029cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b086      	sub	sp, #24
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029d4:	4a14      	ldr	r2, [pc, #80]	; (8002a28 <_sbrk+0x5c>)
 80029d6:	4b15      	ldr	r3, [pc, #84]	; (8002a2c <_sbrk+0x60>)
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029e0:	4b13      	ldr	r3, [pc, #76]	; (8002a30 <_sbrk+0x64>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d102      	bne.n	80029ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029e8:	4b11      	ldr	r3, [pc, #68]	; (8002a30 <_sbrk+0x64>)
 80029ea:	4a12      	ldr	r2, [pc, #72]	; (8002a34 <_sbrk+0x68>)
 80029ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029ee:	4b10      	ldr	r3, [pc, #64]	; (8002a30 <_sbrk+0x64>)
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4413      	add	r3, r2
 80029f6:	693a      	ldr	r2, [r7, #16]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d207      	bcs.n	8002a0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029fc:	f003 ff3c 	bl	8006878 <__errno>
 8002a00:	4603      	mov	r3, r0
 8002a02:	220c      	movs	r2, #12
 8002a04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a06:	f04f 33ff 	mov.w	r3, #4294967295
 8002a0a:	e009      	b.n	8002a20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a0c:	4b08      	ldr	r3, [pc, #32]	; (8002a30 <_sbrk+0x64>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a12:	4b07      	ldr	r3, [pc, #28]	; (8002a30 <_sbrk+0x64>)
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4413      	add	r3, r2
 8002a1a:	4a05      	ldr	r2, [pc, #20]	; (8002a30 <_sbrk+0x64>)
 8002a1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3718      	adds	r7, #24
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	20020000 	.word	0x20020000
 8002a2c:	00000400 	.word	0x00000400
 8002a30:	2000056c 	.word	0x2000056c
 8002a34:	20004410 	.word	0x20004410

08002a38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a3c:	4b06      	ldr	r3, [pc, #24]	; (8002a58 <SystemInit+0x20>)
 8002a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a42:	4a05      	ldr	r2, [pc, #20]	; (8002a58 <SystemInit+0x20>)
 8002a44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a4c:	bf00      	nop
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	e000ed00 	.word	0xe000ed00

08002a5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002a5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a94 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002a60:	f7ff ffea 	bl	8002a38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a64:	480c      	ldr	r0, [pc, #48]	; (8002a98 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002a66:	490d      	ldr	r1, [pc, #52]	; (8002a9c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002a68:	4a0d      	ldr	r2, [pc, #52]	; (8002aa0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002a6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a6c:	e002      	b.n	8002a74 <LoopCopyDataInit>

08002a6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a72:	3304      	adds	r3, #4

08002a74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a78:	d3f9      	bcc.n	8002a6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a7a:	4a0a      	ldr	r2, [pc, #40]	; (8002aa4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002a7c:	4c0a      	ldr	r4, [pc, #40]	; (8002aa8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002a7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a80:	e001      	b.n	8002a86 <LoopFillZerobss>

08002a82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a84:	3204      	adds	r2, #4

08002a86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a88:	d3fb      	bcc.n	8002a82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a8a:	f003 fefb 	bl	8006884 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a8e:	f7fe fc1f 	bl	80012d0 <main>
  bx  lr    
 8002a92:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002a94:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002a98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a9c:	20000134 	.word	0x20000134
  ldr r2, =_sidata
 8002aa0:	0800739c 	.word	0x0800739c
  ldr r2, =_sbss
 8002aa4:	20000134 	.word	0x20000134
  ldr r4, =_ebss
 8002aa8:	20004410 	.word	0x20004410

08002aac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002aac:	e7fe      	b.n	8002aac <ADC_IRQHandler>
	...

08002ab0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ab4:	4b0e      	ldr	r3, [pc, #56]	; (8002af0 <HAL_Init+0x40>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a0d      	ldr	r2, [pc, #52]	; (8002af0 <HAL_Init+0x40>)
 8002aba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002abe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ac0:	4b0b      	ldr	r3, [pc, #44]	; (8002af0 <HAL_Init+0x40>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a0a      	ldr	r2, [pc, #40]	; (8002af0 <HAL_Init+0x40>)
 8002ac6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002aca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002acc:	4b08      	ldr	r3, [pc, #32]	; (8002af0 <HAL_Init+0x40>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a07      	ldr	r2, [pc, #28]	; (8002af0 <HAL_Init+0x40>)
 8002ad2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ad6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ad8:	2003      	movs	r0, #3
 8002ada:	f000 f8d8 	bl	8002c8e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ade:	200f      	movs	r0, #15
 8002ae0:	f7ff fed2 	bl	8002888 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ae4:	f7ff fdda 	bl	800269c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	40023c00 	.word	0x40023c00

08002af4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002af4:	b480      	push	{r7}
 8002af6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002af8:	4b06      	ldr	r3, [pc, #24]	; (8002b14 <HAL_IncTick+0x20>)
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	461a      	mov	r2, r3
 8002afe:	4b06      	ldr	r3, [pc, #24]	; (8002b18 <HAL_IncTick+0x24>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4413      	add	r3, r2
 8002b04:	4a04      	ldr	r2, [pc, #16]	; (8002b18 <HAL_IncTick+0x24>)
 8002b06:	6013      	str	r3, [r2, #0]
}
 8002b08:	bf00      	nop
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop
 8002b14:	200000dc 	.word	0x200000dc
 8002b18:	20000570 	.word	0x20000570

08002b1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
  return uwTick;
 8002b20:	4b03      	ldr	r3, [pc, #12]	; (8002b30 <HAL_GetTick+0x14>)
 8002b22:	681b      	ldr	r3, [r3, #0]
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	20000570 	.word	0x20000570

08002b34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b085      	sub	sp, #20
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f003 0307 	and.w	r3, r3, #7
 8002b42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b44:	4b0c      	ldr	r3, [pc, #48]	; (8002b78 <__NVIC_SetPriorityGrouping+0x44>)
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b4a:	68ba      	ldr	r2, [r7, #8]
 8002b4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b50:	4013      	ands	r3, r2
 8002b52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b66:	4a04      	ldr	r2, [pc, #16]	; (8002b78 <__NVIC_SetPriorityGrouping+0x44>)
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	60d3      	str	r3, [r2, #12]
}
 8002b6c:	bf00      	nop
 8002b6e:	3714      	adds	r7, #20
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr
 8002b78:	e000ed00 	.word	0xe000ed00

08002b7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b80:	4b04      	ldr	r3, [pc, #16]	; (8002b94 <__NVIC_GetPriorityGrouping+0x18>)
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	0a1b      	lsrs	r3, r3, #8
 8002b86:	f003 0307 	and.w	r3, r3, #7
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr
 8002b94:	e000ed00 	.word	0xe000ed00

08002b98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	db0b      	blt.n	8002bc2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002baa:	79fb      	ldrb	r3, [r7, #7]
 8002bac:	f003 021f 	and.w	r2, r3, #31
 8002bb0:	4907      	ldr	r1, [pc, #28]	; (8002bd0 <__NVIC_EnableIRQ+0x38>)
 8002bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb6:	095b      	lsrs	r3, r3, #5
 8002bb8:	2001      	movs	r0, #1
 8002bba:	fa00 f202 	lsl.w	r2, r0, r2
 8002bbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002bc2:	bf00      	nop
 8002bc4:	370c      	adds	r7, #12
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop
 8002bd0:	e000e100 	.word	0xe000e100

08002bd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	4603      	mov	r3, r0
 8002bdc:	6039      	str	r1, [r7, #0]
 8002bde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	db0a      	blt.n	8002bfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	b2da      	uxtb	r2, r3
 8002bec:	490c      	ldr	r1, [pc, #48]	; (8002c20 <__NVIC_SetPriority+0x4c>)
 8002bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bf2:	0112      	lsls	r2, r2, #4
 8002bf4:	b2d2      	uxtb	r2, r2
 8002bf6:	440b      	add	r3, r1
 8002bf8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bfc:	e00a      	b.n	8002c14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	b2da      	uxtb	r2, r3
 8002c02:	4908      	ldr	r1, [pc, #32]	; (8002c24 <__NVIC_SetPriority+0x50>)
 8002c04:	79fb      	ldrb	r3, [r7, #7]
 8002c06:	f003 030f 	and.w	r3, r3, #15
 8002c0a:	3b04      	subs	r3, #4
 8002c0c:	0112      	lsls	r2, r2, #4
 8002c0e:	b2d2      	uxtb	r2, r2
 8002c10:	440b      	add	r3, r1
 8002c12:	761a      	strb	r2, [r3, #24]
}
 8002c14:	bf00      	nop
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr
 8002c20:	e000e100 	.word	0xe000e100
 8002c24:	e000ed00 	.word	0xe000ed00

08002c28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b089      	sub	sp, #36	; 0x24
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f003 0307 	and.w	r3, r3, #7
 8002c3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	f1c3 0307 	rsb	r3, r3, #7
 8002c42:	2b04      	cmp	r3, #4
 8002c44:	bf28      	it	cs
 8002c46:	2304      	movcs	r3, #4
 8002c48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	3304      	adds	r3, #4
 8002c4e:	2b06      	cmp	r3, #6
 8002c50:	d902      	bls.n	8002c58 <NVIC_EncodePriority+0x30>
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	3b03      	subs	r3, #3
 8002c56:	e000      	b.n	8002c5a <NVIC_EncodePriority+0x32>
 8002c58:	2300      	movs	r3, #0
 8002c5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c5c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	fa02 f303 	lsl.w	r3, r2, r3
 8002c66:	43da      	mvns	r2, r3
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	401a      	ands	r2, r3
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c70:	f04f 31ff 	mov.w	r1, #4294967295
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	fa01 f303 	lsl.w	r3, r1, r3
 8002c7a:	43d9      	mvns	r1, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c80:	4313      	orrs	r3, r2
         );
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3724      	adds	r7, #36	; 0x24
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr

08002c8e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b082      	sub	sp, #8
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f7ff ff4c 	bl	8002b34 <__NVIC_SetPriorityGrouping>
}
 8002c9c:	bf00      	nop
 8002c9e:	3708      	adds	r7, #8
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b086      	sub	sp, #24
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	4603      	mov	r3, r0
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	607a      	str	r2, [r7, #4]
 8002cb0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cb6:	f7ff ff61 	bl	8002b7c <__NVIC_GetPriorityGrouping>
 8002cba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	68b9      	ldr	r1, [r7, #8]
 8002cc0:	6978      	ldr	r0, [r7, #20]
 8002cc2:	f7ff ffb1 	bl	8002c28 <NVIC_EncodePriority>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ccc:	4611      	mov	r1, r2
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f7ff ff80 	bl	8002bd4 <__NVIC_SetPriority>
}
 8002cd4:	bf00      	nop
 8002cd6:	3718      	adds	r7, #24
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cea:	4618      	mov	r0, r3
 8002cec:	f7ff ff54 	bl	8002b98 <__NVIC_EnableIRQ>
}
 8002cf0:	bf00      	nop
 8002cf2:	3708      	adds	r7, #8
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b089      	sub	sp, #36	; 0x24
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d02:	2300      	movs	r3, #0
 8002d04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d06:	2300      	movs	r3, #0
 8002d08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d0e:	2300      	movs	r3, #0
 8002d10:	61fb      	str	r3, [r7, #28]
 8002d12:	e159      	b.n	8002fc8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d14:	2201      	movs	r2, #1
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	697a      	ldr	r2, [r7, #20]
 8002d24:	4013      	ands	r3, r2
 8002d26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d28:	693a      	ldr	r2, [r7, #16]
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	f040 8148 	bne.w	8002fc2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f003 0303 	and.w	r3, r3, #3
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d005      	beq.n	8002d4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d130      	bne.n	8002dac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	005b      	lsls	r3, r3, #1
 8002d54:	2203      	movs	r2, #3
 8002d56:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5a:	43db      	mvns	r3, r3
 8002d5c:	69ba      	ldr	r2, [r7, #24]
 8002d5e:	4013      	ands	r3, r2
 8002d60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	68da      	ldr	r2, [r3, #12]
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	005b      	lsls	r3, r3, #1
 8002d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6e:	69ba      	ldr	r2, [r7, #24]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	69ba      	ldr	r2, [r7, #24]
 8002d78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d80:	2201      	movs	r2, #1
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	fa02 f303 	lsl.w	r3, r2, r3
 8002d88:	43db      	mvns	r3, r3
 8002d8a:	69ba      	ldr	r2, [r7, #24]
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	091b      	lsrs	r3, r3, #4
 8002d96:	f003 0201 	and.w	r2, r3, #1
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	69ba      	ldr	r2, [r7, #24]
 8002daa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f003 0303 	and.w	r3, r3, #3
 8002db4:	2b03      	cmp	r3, #3
 8002db6:	d017      	beq.n	8002de8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	005b      	lsls	r3, r3, #1
 8002dc2:	2203      	movs	r2, #3
 8002dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc8:	43db      	mvns	r3, r3
 8002dca:	69ba      	ldr	r2, [r7, #24]
 8002dcc:	4013      	ands	r3, r2
 8002dce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	689a      	ldr	r2, [r3, #8]
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	005b      	lsls	r3, r3, #1
 8002dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ddc:	69ba      	ldr	r2, [r7, #24]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	69ba      	ldr	r2, [r7, #24]
 8002de6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f003 0303 	and.w	r3, r3, #3
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d123      	bne.n	8002e3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	08da      	lsrs	r2, r3, #3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	3208      	adds	r2, #8
 8002dfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	f003 0307 	and.w	r3, r3, #7
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	220f      	movs	r2, #15
 8002e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e10:	43db      	mvns	r3, r3
 8002e12:	69ba      	ldr	r2, [r7, #24]
 8002e14:	4013      	ands	r3, r2
 8002e16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	691a      	ldr	r2, [r3, #16]
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	f003 0307 	and.w	r3, r3, #7
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	fa02 f303 	lsl.w	r3, r2, r3
 8002e28:	69ba      	ldr	r2, [r7, #24]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	08da      	lsrs	r2, r3, #3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	3208      	adds	r2, #8
 8002e36:	69b9      	ldr	r1, [r7, #24]
 8002e38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	005b      	lsls	r3, r3, #1
 8002e46:	2203      	movs	r2, #3
 8002e48:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4c:	43db      	mvns	r3, r3
 8002e4e:	69ba      	ldr	r2, [r7, #24]
 8002e50:	4013      	ands	r3, r2
 8002e52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f003 0203 	and.w	r2, r3, #3
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	005b      	lsls	r3, r3, #1
 8002e60:	fa02 f303 	lsl.w	r3, r2, r3
 8002e64:	69ba      	ldr	r2, [r7, #24]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	69ba      	ldr	r2, [r7, #24]
 8002e6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	f000 80a2 	beq.w	8002fc2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e7e:	2300      	movs	r3, #0
 8002e80:	60fb      	str	r3, [r7, #12]
 8002e82:	4b57      	ldr	r3, [pc, #348]	; (8002fe0 <HAL_GPIO_Init+0x2e8>)
 8002e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e86:	4a56      	ldr	r2, [pc, #344]	; (8002fe0 <HAL_GPIO_Init+0x2e8>)
 8002e88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e8c:	6453      	str	r3, [r2, #68]	; 0x44
 8002e8e:	4b54      	ldr	r3, [pc, #336]	; (8002fe0 <HAL_GPIO_Init+0x2e8>)
 8002e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e96:	60fb      	str	r3, [r7, #12]
 8002e98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e9a:	4a52      	ldr	r2, [pc, #328]	; (8002fe4 <HAL_GPIO_Init+0x2ec>)
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	089b      	lsrs	r3, r3, #2
 8002ea0:	3302      	adds	r3, #2
 8002ea2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	f003 0303 	and.w	r3, r3, #3
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	220f      	movs	r2, #15
 8002eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb6:	43db      	mvns	r3, r3
 8002eb8:	69ba      	ldr	r2, [r7, #24]
 8002eba:	4013      	ands	r3, r2
 8002ebc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a49      	ldr	r2, [pc, #292]	; (8002fe8 <HAL_GPIO_Init+0x2f0>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d019      	beq.n	8002efa <HAL_GPIO_Init+0x202>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a48      	ldr	r2, [pc, #288]	; (8002fec <HAL_GPIO_Init+0x2f4>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d013      	beq.n	8002ef6 <HAL_GPIO_Init+0x1fe>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a47      	ldr	r2, [pc, #284]	; (8002ff0 <HAL_GPIO_Init+0x2f8>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d00d      	beq.n	8002ef2 <HAL_GPIO_Init+0x1fa>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a46      	ldr	r2, [pc, #280]	; (8002ff4 <HAL_GPIO_Init+0x2fc>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d007      	beq.n	8002eee <HAL_GPIO_Init+0x1f6>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a45      	ldr	r2, [pc, #276]	; (8002ff8 <HAL_GPIO_Init+0x300>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d101      	bne.n	8002eea <HAL_GPIO_Init+0x1f2>
 8002ee6:	2304      	movs	r3, #4
 8002ee8:	e008      	b.n	8002efc <HAL_GPIO_Init+0x204>
 8002eea:	2307      	movs	r3, #7
 8002eec:	e006      	b.n	8002efc <HAL_GPIO_Init+0x204>
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e004      	b.n	8002efc <HAL_GPIO_Init+0x204>
 8002ef2:	2302      	movs	r3, #2
 8002ef4:	e002      	b.n	8002efc <HAL_GPIO_Init+0x204>
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e000      	b.n	8002efc <HAL_GPIO_Init+0x204>
 8002efa:	2300      	movs	r3, #0
 8002efc:	69fa      	ldr	r2, [r7, #28]
 8002efe:	f002 0203 	and.w	r2, r2, #3
 8002f02:	0092      	lsls	r2, r2, #2
 8002f04:	4093      	lsls	r3, r2
 8002f06:	69ba      	ldr	r2, [r7, #24]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f0c:	4935      	ldr	r1, [pc, #212]	; (8002fe4 <HAL_GPIO_Init+0x2ec>)
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	089b      	lsrs	r3, r3, #2
 8002f12:	3302      	adds	r3, #2
 8002f14:	69ba      	ldr	r2, [r7, #24]
 8002f16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f1a:	4b38      	ldr	r3, [pc, #224]	; (8002ffc <HAL_GPIO_Init+0x304>)
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	43db      	mvns	r3, r3
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	4013      	ands	r3, r2
 8002f28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d003      	beq.n	8002f3e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002f36:	69ba      	ldr	r2, [r7, #24]
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f3e:	4a2f      	ldr	r2, [pc, #188]	; (8002ffc <HAL_GPIO_Init+0x304>)
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f44:	4b2d      	ldr	r3, [pc, #180]	; (8002ffc <HAL_GPIO_Init+0x304>)
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	43db      	mvns	r3, r3
 8002f4e:	69ba      	ldr	r2, [r7, #24]
 8002f50:	4013      	ands	r3, r2
 8002f52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d003      	beq.n	8002f68 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f68:	4a24      	ldr	r2, [pc, #144]	; (8002ffc <HAL_GPIO_Init+0x304>)
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f6e:	4b23      	ldr	r3, [pc, #140]	; (8002ffc <HAL_GPIO_Init+0x304>)
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	43db      	mvns	r3, r3
 8002f78:	69ba      	ldr	r2, [r7, #24]
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d003      	beq.n	8002f92 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002f8a:	69ba      	ldr	r2, [r7, #24]
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f92:	4a1a      	ldr	r2, [pc, #104]	; (8002ffc <HAL_GPIO_Init+0x304>)
 8002f94:	69bb      	ldr	r3, [r7, #24]
 8002f96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f98:	4b18      	ldr	r3, [pc, #96]	; (8002ffc <HAL_GPIO_Init+0x304>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	43db      	mvns	r3, r3
 8002fa2:	69ba      	ldr	r2, [r7, #24]
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d003      	beq.n	8002fbc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002fb4:	69ba      	ldr	r2, [r7, #24]
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fbc:	4a0f      	ldr	r2, [pc, #60]	; (8002ffc <HAL_GPIO_Init+0x304>)
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	61fb      	str	r3, [r7, #28]
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	2b0f      	cmp	r3, #15
 8002fcc:	f67f aea2 	bls.w	8002d14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002fd0:	bf00      	nop
 8002fd2:	bf00      	nop
 8002fd4:	3724      	adds	r7, #36	; 0x24
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	40023800 	.word	0x40023800
 8002fe4:	40013800 	.word	0x40013800
 8002fe8:	40020000 	.word	0x40020000
 8002fec:	40020400 	.word	0x40020400
 8002ff0:	40020800 	.word	0x40020800
 8002ff4:	40020c00 	.word	0x40020c00
 8002ff8:	40021000 	.word	0x40021000
 8002ffc:	40013c00 	.word	0x40013c00

08003000 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003000:	b480      	push	{r7}
 8003002:	b085      	sub	sp, #20
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	460b      	mov	r3, r1
 800300a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	691a      	ldr	r2, [r3, #16]
 8003010:	887b      	ldrh	r3, [r7, #2]
 8003012:	4013      	ands	r3, r2
 8003014:	2b00      	cmp	r3, #0
 8003016:	d002      	beq.n	800301e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003018:	2301      	movs	r3, #1
 800301a:	73fb      	strb	r3, [r7, #15]
 800301c:	e001      	b.n	8003022 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800301e:	2300      	movs	r3, #0
 8003020:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003022:	7bfb      	ldrb	r3, [r7, #15]
}
 8003024:	4618      	mov	r0, r3
 8003026:	3714      	adds	r7, #20
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr

08003030 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	460b      	mov	r3, r1
 800303a:	807b      	strh	r3, [r7, #2]
 800303c:	4613      	mov	r3, r2
 800303e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003040:	787b      	ldrb	r3, [r7, #1]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d003      	beq.n	800304e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003046:	887a      	ldrh	r2, [r7, #2]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800304c:	e003      	b.n	8003056 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800304e:	887b      	ldrh	r3, [r7, #2]
 8003050:	041a      	lsls	r2, r3, #16
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	619a      	str	r2, [r3, #24]
}
 8003056:	bf00      	nop
 8003058:	370c      	adds	r7, #12
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
	...

08003064 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d101      	bne.n	8003076 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e12b      	b.n	80032ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800307c:	b2db      	uxtb	r3, r3
 800307e:	2b00      	cmp	r3, #0
 8003080:	d106      	bne.n	8003090 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f7ff fb32 	bl	80026f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2224      	movs	r2, #36	; 0x24
 8003094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f022 0201 	bic.w	r2, r2, #1
 80030a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80030c8:	f001 f8da 	bl	8004280 <HAL_RCC_GetPCLK1Freq>
 80030cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	4a81      	ldr	r2, [pc, #516]	; (80032d8 <HAL_I2C_Init+0x274>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d807      	bhi.n	80030e8 <HAL_I2C_Init+0x84>
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	4a80      	ldr	r2, [pc, #512]	; (80032dc <HAL_I2C_Init+0x278>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	bf94      	ite	ls
 80030e0:	2301      	movls	r3, #1
 80030e2:	2300      	movhi	r3, #0
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	e006      	b.n	80030f6 <HAL_I2C_Init+0x92>
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	4a7d      	ldr	r2, [pc, #500]	; (80032e0 <HAL_I2C_Init+0x27c>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	bf94      	ite	ls
 80030f0:	2301      	movls	r3, #1
 80030f2:	2300      	movhi	r3, #0
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d001      	beq.n	80030fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e0e7      	b.n	80032ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	4a78      	ldr	r2, [pc, #480]	; (80032e4 <HAL_I2C_Init+0x280>)
 8003102:	fba2 2303 	umull	r2, r3, r2, r3
 8003106:	0c9b      	lsrs	r3, r3, #18
 8003108:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68ba      	ldr	r2, [r7, #8]
 800311a:	430a      	orrs	r2, r1
 800311c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	6a1b      	ldr	r3, [r3, #32]
 8003124:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	4a6a      	ldr	r2, [pc, #424]	; (80032d8 <HAL_I2C_Init+0x274>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d802      	bhi.n	8003138 <HAL_I2C_Init+0xd4>
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	3301      	adds	r3, #1
 8003136:	e009      	b.n	800314c <HAL_I2C_Init+0xe8>
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800313e:	fb02 f303 	mul.w	r3, r2, r3
 8003142:	4a69      	ldr	r2, [pc, #420]	; (80032e8 <HAL_I2C_Init+0x284>)
 8003144:	fba2 2303 	umull	r2, r3, r2, r3
 8003148:	099b      	lsrs	r3, r3, #6
 800314a:	3301      	adds	r3, #1
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	6812      	ldr	r2, [r2, #0]
 8003150:	430b      	orrs	r3, r1
 8003152:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	69db      	ldr	r3, [r3, #28]
 800315a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800315e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	495c      	ldr	r1, [pc, #368]	; (80032d8 <HAL_I2C_Init+0x274>)
 8003168:	428b      	cmp	r3, r1
 800316a:	d819      	bhi.n	80031a0 <HAL_I2C_Init+0x13c>
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	1e59      	subs	r1, r3, #1
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	005b      	lsls	r3, r3, #1
 8003176:	fbb1 f3f3 	udiv	r3, r1, r3
 800317a:	1c59      	adds	r1, r3, #1
 800317c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003180:	400b      	ands	r3, r1
 8003182:	2b00      	cmp	r3, #0
 8003184:	d00a      	beq.n	800319c <HAL_I2C_Init+0x138>
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	1e59      	subs	r1, r3, #1
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	005b      	lsls	r3, r3, #1
 8003190:	fbb1 f3f3 	udiv	r3, r1, r3
 8003194:	3301      	adds	r3, #1
 8003196:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800319a:	e051      	b.n	8003240 <HAL_I2C_Init+0x1dc>
 800319c:	2304      	movs	r3, #4
 800319e:	e04f      	b.n	8003240 <HAL_I2C_Init+0x1dc>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d111      	bne.n	80031cc <HAL_I2C_Init+0x168>
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	1e58      	subs	r0, r3, #1
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6859      	ldr	r1, [r3, #4]
 80031b0:	460b      	mov	r3, r1
 80031b2:	005b      	lsls	r3, r3, #1
 80031b4:	440b      	add	r3, r1
 80031b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80031ba:	3301      	adds	r3, #1
 80031bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	bf0c      	ite	eq
 80031c4:	2301      	moveq	r3, #1
 80031c6:	2300      	movne	r3, #0
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	e012      	b.n	80031f2 <HAL_I2C_Init+0x18e>
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	1e58      	subs	r0, r3, #1
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6859      	ldr	r1, [r3, #4]
 80031d4:	460b      	mov	r3, r1
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	440b      	add	r3, r1
 80031da:	0099      	lsls	r1, r3, #2
 80031dc:	440b      	add	r3, r1
 80031de:	fbb0 f3f3 	udiv	r3, r0, r3
 80031e2:	3301      	adds	r3, #1
 80031e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	bf0c      	ite	eq
 80031ec:	2301      	moveq	r3, #1
 80031ee:	2300      	movne	r3, #0
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d001      	beq.n	80031fa <HAL_I2C_Init+0x196>
 80031f6:	2301      	movs	r3, #1
 80031f8:	e022      	b.n	8003240 <HAL_I2C_Init+0x1dc>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d10e      	bne.n	8003220 <HAL_I2C_Init+0x1bc>
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	1e58      	subs	r0, r3, #1
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6859      	ldr	r1, [r3, #4]
 800320a:	460b      	mov	r3, r1
 800320c:	005b      	lsls	r3, r3, #1
 800320e:	440b      	add	r3, r1
 8003210:	fbb0 f3f3 	udiv	r3, r0, r3
 8003214:	3301      	adds	r3, #1
 8003216:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800321a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800321e:	e00f      	b.n	8003240 <HAL_I2C_Init+0x1dc>
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	1e58      	subs	r0, r3, #1
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6859      	ldr	r1, [r3, #4]
 8003228:	460b      	mov	r3, r1
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	440b      	add	r3, r1
 800322e:	0099      	lsls	r1, r3, #2
 8003230:	440b      	add	r3, r1
 8003232:	fbb0 f3f3 	udiv	r3, r0, r3
 8003236:	3301      	adds	r3, #1
 8003238:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800323c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003240:	6879      	ldr	r1, [r7, #4]
 8003242:	6809      	ldr	r1, [r1, #0]
 8003244:	4313      	orrs	r3, r2
 8003246:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	69da      	ldr	r2, [r3, #28]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a1b      	ldr	r3, [r3, #32]
 800325a:	431a      	orrs	r2, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	430a      	orrs	r2, r1
 8003262:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800326e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	6911      	ldr	r1, [r2, #16]
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	68d2      	ldr	r2, [r2, #12]
 800327a:	4311      	orrs	r1, r2
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	6812      	ldr	r2, [r2, #0]
 8003280:	430b      	orrs	r3, r1
 8003282:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	695a      	ldr	r2, [r3, #20]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	699b      	ldr	r3, [r3, #24]
 8003296:	431a      	orrs	r2, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	430a      	orrs	r2, r1
 800329e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f042 0201 	orr.w	r2, r2, #1
 80032ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2220      	movs	r2, #32
 80032ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3710      	adds	r7, #16
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	000186a0 	.word	0x000186a0
 80032dc:	001e847f 	.word	0x001e847f
 80032e0:	003d08ff 	.word	0x003d08ff
 80032e4:	431bde83 	.word	0x431bde83
 80032e8:	10624dd3 	.word	0x10624dd3

080032ec <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b088      	sub	sp, #32
 80032f0:	af02      	add	r7, sp, #8
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	607a      	str	r2, [r7, #4]
 80032f6:	461a      	mov	r2, r3
 80032f8:	460b      	mov	r3, r1
 80032fa:	817b      	strh	r3, [r7, #10]
 80032fc:	4613      	mov	r3, r2
 80032fe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003300:	f7ff fc0c 	bl	8002b1c <HAL_GetTick>
 8003304:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800330c:	b2db      	uxtb	r3, r3
 800330e:	2b20      	cmp	r3, #32
 8003310:	f040 80e0 	bne.w	80034d4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	9300      	str	r3, [sp, #0]
 8003318:	2319      	movs	r3, #25
 800331a:	2201      	movs	r2, #1
 800331c:	4970      	ldr	r1, [pc, #448]	; (80034e0 <HAL_I2C_Master_Transmit+0x1f4>)
 800331e:	68f8      	ldr	r0, [r7, #12]
 8003320:	f000 f964 	bl	80035ec <I2C_WaitOnFlagUntilTimeout>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d001      	beq.n	800332e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800332a:	2302      	movs	r3, #2
 800332c:	e0d3      	b.n	80034d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003334:	2b01      	cmp	r3, #1
 8003336:	d101      	bne.n	800333c <HAL_I2C_Master_Transmit+0x50>
 8003338:	2302      	movs	r3, #2
 800333a:	e0cc      	b.n	80034d6 <HAL_I2C_Master_Transmit+0x1ea>
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0301 	and.w	r3, r3, #1
 800334e:	2b01      	cmp	r3, #1
 8003350:	d007      	beq.n	8003362 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f042 0201 	orr.w	r2, r2, #1
 8003360:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003370:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2221      	movs	r2, #33	; 0x21
 8003376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2210      	movs	r2, #16
 800337e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2200      	movs	r2, #0
 8003386:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	893a      	ldrh	r2, [r7, #8]
 8003392:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003398:	b29a      	uxth	r2, r3
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	4a50      	ldr	r2, [pc, #320]	; (80034e4 <HAL_I2C_Master_Transmit+0x1f8>)
 80033a2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80033a4:	8979      	ldrh	r1, [r7, #10]
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	6a3a      	ldr	r2, [r7, #32]
 80033aa:	68f8      	ldr	r0, [r7, #12]
 80033ac:	f000 f89c 	bl	80034e8 <I2C_MasterRequestWrite>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d001      	beq.n	80033ba <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e08d      	b.n	80034d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033ba:	2300      	movs	r3, #0
 80033bc:	613b      	str	r3, [r7, #16]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	695b      	ldr	r3, [r3, #20]
 80033c4:	613b      	str	r3, [r7, #16]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	699b      	ldr	r3, [r3, #24]
 80033cc:	613b      	str	r3, [r7, #16]
 80033ce:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80033d0:	e066      	b.n	80034a0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033d2:	697a      	ldr	r2, [r7, #20]
 80033d4:	6a39      	ldr	r1, [r7, #32]
 80033d6:	68f8      	ldr	r0, [r7, #12]
 80033d8:	f000 fa22 	bl	8003820 <I2C_WaitOnTXEFlagUntilTimeout>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00d      	beq.n	80033fe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e6:	2b04      	cmp	r3, #4
 80033e8:	d107      	bne.n	80033fa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e06b      	b.n	80034d6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003402:	781a      	ldrb	r2, [r3, #0]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340e:	1c5a      	adds	r2, r3, #1
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003418:	b29b      	uxth	r3, r3
 800341a:	3b01      	subs	r3, #1
 800341c:	b29a      	uxth	r2, r3
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003426:	3b01      	subs	r3, #1
 8003428:	b29a      	uxth	r2, r3
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	695b      	ldr	r3, [r3, #20]
 8003434:	f003 0304 	and.w	r3, r3, #4
 8003438:	2b04      	cmp	r3, #4
 800343a:	d11b      	bne.n	8003474 <HAL_I2C_Master_Transmit+0x188>
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003440:	2b00      	cmp	r3, #0
 8003442:	d017      	beq.n	8003474 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003448:	781a      	ldrb	r2, [r3, #0]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003454:	1c5a      	adds	r2, r3, #1
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800345e:	b29b      	uxth	r3, r3
 8003460:	3b01      	subs	r3, #1
 8003462:	b29a      	uxth	r2, r3
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800346c:	3b01      	subs	r3, #1
 800346e:	b29a      	uxth	r2, r3
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003474:	697a      	ldr	r2, [r7, #20]
 8003476:	6a39      	ldr	r1, [r7, #32]
 8003478:	68f8      	ldr	r0, [r7, #12]
 800347a:	f000 fa19 	bl	80038b0 <I2C_WaitOnBTFFlagUntilTimeout>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d00d      	beq.n	80034a0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003488:	2b04      	cmp	r3, #4
 800348a:	d107      	bne.n	800349c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800349a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e01a      	b.n	80034d6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d194      	bne.n	80033d2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2220      	movs	r2, #32
 80034bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80034d0:	2300      	movs	r3, #0
 80034d2:	e000      	b.n	80034d6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80034d4:	2302      	movs	r3, #2
  }
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3718      	adds	r7, #24
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	00100002 	.word	0x00100002
 80034e4:	ffff0000 	.word	0xffff0000

080034e8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b088      	sub	sp, #32
 80034ec:	af02      	add	r7, sp, #8
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	607a      	str	r2, [r7, #4]
 80034f2:	603b      	str	r3, [r7, #0]
 80034f4:	460b      	mov	r3, r1
 80034f6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034fc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	2b08      	cmp	r3, #8
 8003502:	d006      	beq.n	8003512 <I2C_MasterRequestWrite+0x2a>
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	2b01      	cmp	r3, #1
 8003508:	d003      	beq.n	8003512 <I2C_MasterRequestWrite+0x2a>
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003510:	d108      	bne.n	8003524 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003520:	601a      	str	r2, [r3, #0]
 8003522:	e00b      	b.n	800353c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003528:	2b12      	cmp	r3, #18
 800352a:	d107      	bne.n	800353c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800353a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	9300      	str	r3, [sp, #0]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003548:	68f8      	ldr	r0, [r7, #12]
 800354a:	f000 f84f 	bl	80035ec <I2C_WaitOnFlagUntilTimeout>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d00d      	beq.n	8003570 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800355e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003562:	d103      	bne.n	800356c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f44f 7200 	mov.w	r2, #512	; 0x200
 800356a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800356c:	2303      	movs	r3, #3
 800356e:	e035      	b.n	80035dc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	691b      	ldr	r3, [r3, #16]
 8003574:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003578:	d108      	bne.n	800358c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800357a:	897b      	ldrh	r3, [r7, #10]
 800357c:	b2db      	uxtb	r3, r3
 800357e:	461a      	mov	r2, r3
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003588:	611a      	str	r2, [r3, #16]
 800358a:	e01b      	b.n	80035c4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800358c:	897b      	ldrh	r3, [r7, #10]
 800358e:	11db      	asrs	r3, r3, #7
 8003590:	b2db      	uxtb	r3, r3
 8003592:	f003 0306 	and.w	r3, r3, #6
 8003596:	b2db      	uxtb	r3, r3
 8003598:	f063 030f 	orn	r3, r3, #15
 800359c:	b2da      	uxtb	r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	490e      	ldr	r1, [pc, #56]	; (80035e4 <I2C_MasterRequestWrite+0xfc>)
 80035aa:	68f8      	ldr	r0, [r7, #12]
 80035ac:	f000 f898 	bl	80036e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d001      	beq.n	80035ba <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e010      	b.n	80035dc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80035ba:	897b      	ldrh	r3, [r7, #10]
 80035bc:	b2da      	uxtb	r2, r3
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	4907      	ldr	r1, [pc, #28]	; (80035e8 <I2C_MasterRequestWrite+0x100>)
 80035ca:	68f8      	ldr	r0, [r7, #12]
 80035cc:	f000 f888 	bl	80036e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d001      	beq.n	80035da <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e000      	b.n	80035dc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80035da:	2300      	movs	r3, #0
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3718      	adds	r7, #24
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	00010008 	.word	0x00010008
 80035e8:	00010002 	.word	0x00010002

080035ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	60b9      	str	r1, [r7, #8]
 80035f6:	603b      	str	r3, [r7, #0]
 80035f8:	4613      	mov	r3, r2
 80035fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035fc:	e048      	b.n	8003690 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003604:	d044      	beq.n	8003690 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003606:	f7ff fa89 	bl	8002b1c <HAL_GetTick>
 800360a:	4602      	mov	r2, r0
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	683a      	ldr	r2, [r7, #0]
 8003612:	429a      	cmp	r2, r3
 8003614:	d302      	bcc.n	800361c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d139      	bne.n	8003690 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	0c1b      	lsrs	r3, r3, #16
 8003620:	b2db      	uxtb	r3, r3
 8003622:	2b01      	cmp	r3, #1
 8003624:	d10d      	bne.n	8003642 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	695b      	ldr	r3, [r3, #20]
 800362c:	43da      	mvns	r2, r3
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	4013      	ands	r3, r2
 8003632:	b29b      	uxth	r3, r3
 8003634:	2b00      	cmp	r3, #0
 8003636:	bf0c      	ite	eq
 8003638:	2301      	moveq	r3, #1
 800363a:	2300      	movne	r3, #0
 800363c:	b2db      	uxtb	r3, r3
 800363e:	461a      	mov	r2, r3
 8003640:	e00c      	b.n	800365c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	699b      	ldr	r3, [r3, #24]
 8003648:	43da      	mvns	r2, r3
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	4013      	ands	r3, r2
 800364e:	b29b      	uxth	r3, r3
 8003650:	2b00      	cmp	r3, #0
 8003652:	bf0c      	ite	eq
 8003654:	2301      	moveq	r3, #1
 8003656:	2300      	movne	r3, #0
 8003658:	b2db      	uxtb	r3, r3
 800365a:	461a      	mov	r2, r3
 800365c:	79fb      	ldrb	r3, [r7, #7]
 800365e:	429a      	cmp	r2, r3
 8003660:	d116      	bne.n	8003690 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2200      	movs	r2, #0
 8003666:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2220      	movs	r2, #32
 800366c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2200      	movs	r2, #0
 8003674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367c:	f043 0220 	orr.w	r2, r3, #32
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e023      	b.n	80036d8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	0c1b      	lsrs	r3, r3, #16
 8003694:	b2db      	uxtb	r3, r3
 8003696:	2b01      	cmp	r3, #1
 8003698:	d10d      	bne.n	80036b6 <I2C_WaitOnFlagUntilTimeout+0xca>
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	695b      	ldr	r3, [r3, #20]
 80036a0:	43da      	mvns	r2, r3
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	4013      	ands	r3, r2
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	bf0c      	ite	eq
 80036ac:	2301      	moveq	r3, #1
 80036ae:	2300      	movne	r3, #0
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	461a      	mov	r2, r3
 80036b4:	e00c      	b.n	80036d0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	699b      	ldr	r3, [r3, #24]
 80036bc:	43da      	mvns	r2, r3
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	4013      	ands	r3, r2
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	bf0c      	ite	eq
 80036c8:	2301      	moveq	r3, #1
 80036ca:	2300      	movne	r3, #0
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	461a      	mov	r2, r3
 80036d0:	79fb      	ldrb	r3, [r7, #7]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d093      	beq.n	80035fe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3710      	adds	r7, #16
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	607a      	str	r2, [r7, #4]
 80036ec:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80036ee:	e071      	b.n	80037d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	695b      	ldr	r3, [r3, #20]
 80036f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036fe:	d123      	bne.n	8003748 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800370e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003718:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2200      	movs	r2, #0
 800371e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2220      	movs	r2, #32
 8003724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2200      	movs	r2, #0
 800372c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003734:	f043 0204 	orr.w	r2, r3, #4
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e067      	b.n	8003818 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800374e:	d041      	beq.n	80037d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003750:	f7ff f9e4 	bl	8002b1c <HAL_GetTick>
 8003754:	4602      	mov	r2, r0
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	429a      	cmp	r2, r3
 800375e:	d302      	bcc.n	8003766 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d136      	bne.n	80037d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	0c1b      	lsrs	r3, r3, #16
 800376a:	b2db      	uxtb	r3, r3
 800376c:	2b01      	cmp	r3, #1
 800376e:	d10c      	bne.n	800378a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	695b      	ldr	r3, [r3, #20]
 8003776:	43da      	mvns	r2, r3
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	4013      	ands	r3, r2
 800377c:	b29b      	uxth	r3, r3
 800377e:	2b00      	cmp	r3, #0
 8003780:	bf14      	ite	ne
 8003782:	2301      	movne	r3, #1
 8003784:	2300      	moveq	r3, #0
 8003786:	b2db      	uxtb	r3, r3
 8003788:	e00b      	b.n	80037a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	699b      	ldr	r3, [r3, #24]
 8003790:	43da      	mvns	r2, r3
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	4013      	ands	r3, r2
 8003796:	b29b      	uxth	r3, r3
 8003798:	2b00      	cmp	r3, #0
 800379a:	bf14      	ite	ne
 800379c:	2301      	movne	r3, #1
 800379e:	2300      	moveq	r3, #0
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d016      	beq.n	80037d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2200      	movs	r2, #0
 80037aa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2220      	movs	r2, #32
 80037b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c0:	f043 0220 	orr.w	r2, r3, #32
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2200      	movs	r2, #0
 80037cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e021      	b.n	8003818 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	0c1b      	lsrs	r3, r3, #16
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d10c      	bne.n	80037f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	695b      	ldr	r3, [r3, #20]
 80037e4:	43da      	mvns	r2, r3
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	4013      	ands	r3, r2
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	bf14      	ite	ne
 80037f0:	2301      	movne	r3, #1
 80037f2:	2300      	moveq	r3, #0
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	e00b      	b.n	8003810 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	43da      	mvns	r2, r3
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	4013      	ands	r3, r2
 8003804:	b29b      	uxth	r3, r3
 8003806:	2b00      	cmp	r3, #0
 8003808:	bf14      	ite	ne
 800380a:	2301      	movne	r3, #1
 800380c:	2300      	moveq	r3, #0
 800380e:	b2db      	uxtb	r3, r3
 8003810:	2b00      	cmp	r3, #0
 8003812:	f47f af6d 	bne.w	80036f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003816:	2300      	movs	r3, #0
}
 8003818:	4618      	mov	r0, r3
 800381a:	3710      	adds	r7, #16
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}

08003820 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	60f8      	str	r0, [r7, #12]
 8003828:	60b9      	str	r1, [r7, #8]
 800382a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800382c:	e034      	b.n	8003898 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800382e:	68f8      	ldr	r0, [r7, #12]
 8003830:	f000 f886 	bl	8003940 <I2C_IsAcknowledgeFailed>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d001      	beq.n	800383e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e034      	b.n	80038a8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003844:	d028      	beq.n	8003898 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003846:	f7ff f969 	bl	8002b1c <HAL_GetTick>
 800384a:	4602      	mov	r2, r0
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	68ba      	ldr	r2, [r7, #8]
 8003852:	429a      	cmp	r2, r3
 8003854:	d302      	bcc.n	800385c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d11d      	bne.n	8003898 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	695b      	ldr	r3, [r3, #20]
 8003862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003866:	2b80      	cmp	r3, #128	; 0x80
 8003868:	d016      	beq.n	8003898 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2220      	movs	r2, #32
 8003874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003884:	f043 0220 	orr.w	r2, r3, #32
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2200      	movs	r2, #0
 8003890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e007      	b.n	80038a8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	695b      	ldr	r3, [r3, #20]
 800389e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038a2:	2b80      	cmp	r3, #128	; 0x80
 80038a4:	d1c3      	bne.n	800382e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80038a6:	2300      	movs	r3, #0
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3710      	adds	r7, #16
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	60b9      	str	r1, [r7, #8]
 80038ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80038bc:	e034      	b.n	8003928 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038be:	68f8      	ldr	r0, [r7, #12]
 80038c0:	f000 f83e 	bl	8003940 <I2C_IsAcknowledgeFailed>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d001      	beq.n	80038ce <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e034      	b.n	8003938 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038d4:	d028      	beq.n	8003928 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038d6:	f7ff f921 	bl	8002b1c <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	68ba      	ldr	r2, [r7, #8]
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d302      	bcc.n	80038ec <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d11d      	bne.n	8003928 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	695b      	ldr	r3, [r3, #20]
 80038f2:	f003 0304 	and.w	r3, r3, #4
 80038f6:	2b04      	cmp	r3, #4
 80038f8:	d016      	beq.n	8003928 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2200      	movs	r2, #0
 80038fe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2220      	movs	r2, #32
 8003904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2200      	movs	r2, #0
 800390c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003914:	f043 0220 	orr.w	r2, r3, #32
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2200      	movs	r2, #0
 8003920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e007      	b.n	8003938 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	695b      	ldr	r3, [r3, #20]
 800392e:	f003 0304 	and.w	r3, r3, #4
 8003932:	2b04      	cmp	r3, #4
 8003934:	d1c3      	bne.n	80038be <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	3710      	adds	r7, #16
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	695b      	ldr	r3, [r3, #20]
 800394e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003952:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003956:	d11b      	bne.n	8003990 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003960:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2220      	movs	r2, #32
 800396c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397c:	f043 0204 	orr.w	r2, r3, #4
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e000      	b.n	8003992 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	370c      	adds	r7, #12
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr
	...

080039a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b086      	sub	sp, #24
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d101      	bne.n	80039b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e267      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0301 	and.w	r3, r3, #1
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d075      	beq.n	8003aaa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039be:	4b88      	ldr	r3, [pc, #544]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f003 030c 	and.w	r3, r3, #12
 80039c6:	2b04      	cmp	r3, #4
 80039c8:	d00c      	beq.n	80039e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039ca:	4b85      	ldr	r3, [pc, #532]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039d2:	2b08      	cmp	r3, #8
 80039d4:	d112      	bne.n	80039fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039d6:	4b82      	ldr	r3, [pc, #520]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039e2:	d10b      	bne.n	80039fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039e4:	4b7e      	ldr	r3, [pc, #504]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d05b      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x108>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d157      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e242      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a04:	d106      	bne.n	8003a14 <HAL_RCC_OscConfig+0x74>
 8003a06:	4b76      	ldr	r3, [pc, #472]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a75      	ldr	r2, [pc, #468]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003a0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a10:	6013      	str	r3, [r2, #0]
 8003a12:	e01d      	b.n	8003a50 <HAL_RCC_OscConfig+0xb0>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a1c:	d10c      	bne.n	8003a38 <HAL_RCC_OscConfig+0x98>
 8003a1e:	4b70      	ldr	r3, [pc, #448]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a6f      	ldr	r2, [pc, #444]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003a24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a28:	6013      	str	r3, [r2, #0]
 8003a2a:	4b6d      	ldr	r3, [pc, #436]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a6c      	ldr	r2, [pc, #432]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003a30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a34:	6013      	str	r3, [r2, #0]
 8003a36:	e00b      	b.n	8003a50 <HAL_RCC_OscConfig+0xb0>
 8003a38:	4b69      	ldr	r3, [pc, #420]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a68      	ldr	r2, [pc, #416]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003a3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a42:	6013      	str	r3, [r2, #0]
 8003a44:	4b66      	ldr	r3, [pc, #408]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a65      	ldr	r2, [pc, #404]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003a4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d013      	beq.n	8003a80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a58:	f7ff f860 	bl	8002b1c <HAL_GetTick>
 8003a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a5e:	e008      	b.n	8003a72 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a60:	f7ff f85c 	bl	8002b1c <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	2b64      	cmp	r3, #100	; 0x64
 8003a6c:	d901      	bls.n	8003a72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e207      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a72:	4b5b      	ldr	r3, [pc, #364]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d0f0      	beq.n	8003a60 <HAL_RCC_OscConfig+0xc0>
 8003a7e:	e014      	b.n	8003aaa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a80:	f7ff f84c 	bl	8002b1c <HAL_GetTick>
 8003a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a86:	e008      	b.n	8003a9a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a88:	f7ff f848 	bl	8002b1c <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	2b64      	cmp	r3, #100	; 0x64
 8003a94:	d901      	bls.n	8003a9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e1f3      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a9a:	4b51      	ldr	r3, [pc, #324]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d1f0      	bne.n	8003a88 <HAL_RCC_OscConfig+0xe8>
 8003aa6:	e000      	b.n	8003aaa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aa8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0302 	and.w	r3, r3, #2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d063      	beq.n	8003b7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ab6:	4b4a      	ldr	r3, [pc, #296]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f003 030c 	and.w	r3, r3, #12
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d00b      	beq.n	8003ada <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ac2:	4b47      	ldr	r3, [pc, #284]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003aca:	2b08      	cmp	r3, #8
 8003acc:	d11c      	bne.n	8003b08 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ace:	4b44      	ldr	r3, [pc, #272]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d116      	bne.n	8003b08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ada:	4b41      	ldr	r3, [pc, #260]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0302 	and.w	r3, r3, #2
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d005      	beq.n	8003af2 <HAL_RCC_OscConfig+0x152>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d001      	beq.n	8003af2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e1c7      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003af2:	4b3b      	ldr	r3, [pc, #236]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	00db      	lsls	r3, r3, #3
 8003b00:	4937      	ldr	r1, [pc, #220]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b06:	e03a      	b.n	8003b7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d020      	beq.n	8003b52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b10:	4b34      	ldr	r3, [pc, #208]	; (8003be4 <HAL_RCC_OscConfig+0x244>)
 8003b12:	2201      	movs	r2, #1
 8003b14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b16:	f7ff f801 	bl	8002b1c <HAL_GetTick>
 8003b1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b1c:	e008      	b.n	8003b30 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b1e:	f7fe fffd 	bl	8002b1c <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d901      	bls.n	8003b30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e1a8      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b30:	4b2b      	ldr	r3, [pc, #172]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0302 	and.w	r3, r3, #2
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d0f0      	beq.n	8003b1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b3c:	4b28      	ldr	r3, [pc, #160]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	691b      	ldr	r3, [r3, #16]
 8003b48:	00db      	lsls	r3, r3, #3
 8003b4a:	4925      	ldr	r1, [pc, #148]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	600b      	str	r3, [r1, #0]
 8003b50:	e015      	b.n	8003b7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b52:	4b24      	ldr	r3, [pc, #144]	; (8003be4 <HAL_RCC_OscConfig+0x244>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b58:	f7fe ffe0 	bl	8002b1c <HAL_GetTick>
 8003b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b5e:	e008      	b.n	8003b72 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b60:	f7fe ffdc 	bl	8002b1c <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e187      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b72:	4b1b      	ldr	r3, [pc, #108]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d1f0      	bne.n	8003b60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0308 	and.w	r3, r3, #8
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d036      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	695b      	ldr	r3, [r3, #20]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d016      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b92:	4b15      	ldr	r3, [pc, #84]	; (8003be8 <HAL_RCC_OscConfig+0x248>)
 8003b94:	2201      	movs	r2, #1
 8003b96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b98:	f7fe ffc0 	bl	8002b1c <HAL_GetTick>
 8003b9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b9e:	e008      	b.n	8003bb2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ba0:	f7fe ffbc 	bl	8002b1c <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d901      	bls.n	8003bb2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e167      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bb2:	4b0b      	ldr	r3, [pc, #44]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003bb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bb6:	f003 0302 	and.w	r3, r3, #2
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d0f0      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x200>
 8003bbe:	e01b      	b.n	8003bf8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bc0:	4b09      	ldr	r3, [pc, #36]	; (8003be8 <HAL_RCC_OscConfig+0x248>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bc6:	f7fe ffa9 	bl	8002b1c <HAL_GetTick>
 8003bca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bcc:	e00e      	b.n	8003bec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bce:	f7fe ffa5 	bl	8002b1c <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d907      	bls.n	8003bec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e150      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
 8003be0:	40023800 	.word	0x40023800
 8003be4:	42470000 	.word	0x42470000
 8003be8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bec:	4b88      	ldr	r3, [pc, #544]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003bee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bf0:	f003 0302 	and.w	r3, r3, #2
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d1ea      	bne.n	8003bce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0304 	and.w	r3, r3, #4
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	f000 8097 	beq.w	8003d34 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c06:	2300      	movs	r3, #0
 8003c08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c0a:	4b81      	ldr	r3, [pc, #516]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d10f      	bne.n	8003c36 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c16:	2300      	movs	r3, #0
 8003c18:	60bb      	str	r3, [r7, #8]
 8003c1a:	4b7d      	ldr	r3, [pc, #500]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1e:	4a7c      	ldr	r2, [pc, #496]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003c20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c24:	6413      	str	r3, [r2, #64]	; 0x40
 8003c26:	4b7a      	ldr	r3, [pc, #488]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c2e:	60bb      	str	r3, [r7, #8]
 8003c30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c32:	2301      	movs	r3, #1
 8003c34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c36:	4b77      	ldr	r3, [pc, #476]	; (8003e14 <HAL_RCC_OscConfig+0x474>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d118      	bne.n	8003c74 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c42:	4b74      	ldr	r3, [pc, #464]	; (8003e14 <HAL_RCC_OscConfig+0x474>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a73      	ldr	r2, [pc, #460]	; (8003e14 <HAL_RCC_OscConfig+0x474>)
 8003c48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c4e:	f7fe ff65 	bl	8002b1c <HAL_GetTick>
 8003c52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c54:	e008      	b.n	8003c68 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c56:	f7fe ff61 	bl	8002b1c <HAL_GetTick>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d901      	bls.n	8003c68 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e10c      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c68:	4b6a      	ldr	r3, [pc, #424]	; (8003e14 <HAL_RCC_OscConfig+0x474>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d0f0      	beq.n	8003c56 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d106      	bne.n	8003c8a <HAL_RCC_OscConfig+0x2ea>
 8003c7c:	4b64      	ldr	r3, [pc, #400]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c80:	4a63      	ldr	r2, [pc, #396]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003c82:	f043 0301 	orr.w	r3, r3, #1
 8003c86:	6713      	str	r3, [r2, #112]	; 0x70
 8003c88:	e01c      	b.n	8003cc4 <HAL_RCC_OscConfig+0x324>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	2b05      	cmp	r3, #5
 8003c90:	d10c      	bne.n	8003cac <HAL_RCC_OscConfig+0x30c>
 8003c92:	4b5f      	ldr	r3, [pc, #380]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c96:	4a5e      	ldr	r2, [pc, #376]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003c98:	f043 0304 	orr.w	r3, r3, #4
 8003c9c:	6713      	str	r3, [r2, #112]	; 0x70
 8003c9e:	4b5c      	ldr	r3, [pc, #368]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ca2:	4a5b      	ldr	r2, [pc, #364]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003ca4:	f043 0301 	orr.w	r3, r3, #1
 8003ca8:	6713      	str	r3, [r2, #112]	; 0x70
 8003caa:	e00b      	b.n	8003cc4 <HAL_RCC_OscConfig+0x324>
 8003cac:	4b58      	ldr	r3, [pc, #352]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cb0:	4a57      	ldr	r2, [pc, #348]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003cb2:	f023 0301 	bic.w	r3, r3, #1
 8003cb6:	6713      	str	r3, [r2, #112]	; 0x70
 8003cb8:	4b55      	ldr	r3, [pc, #340]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cbc:	4a54      	ldr	r2, [pc, #336]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003cbe:	f023 0304 	bic.w	r3, r3, #4
 8003cc2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d015      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ccc:	f7fe ff26 	bl	8002b1c <HAL_GetTick>
 8003cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cd2:	e00a      	b.n	8003cea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cd4:	f7fe ff22 	bl	8002b1c <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d901      	bls.n	8003cea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e0cb      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cea:	4b49      	ldr	r3, [pc, #292]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d0ee      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x334>
 8003cf6:	e014      	b.n	8003d22 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cf8:	f7fe ff10 	bl	8002b1c <HAL_GetTick>
 8003cfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cfe:	e00a      	b.n	8003d16 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d00:	f7fe ff0c 	bl	8002b1c <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d901      	bls.n	8003d16 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e0b5      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d16:	4b3e      	ldr	r3, [pc, #248]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d1a:	f003 0302 	and.w	r3, r3, #2
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d1ee      	bne.n	8003d00 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d22:	7dfb      	ldrb	r3, [r7, #23]
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d105      	bne.n	8003d34 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d28:	4b39      	ldr	r3, [pc, #228]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2c:	4a38      	ldr	r2, [pc, #224]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003d2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d32:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	699b      	ldr	r3, [r3, #24]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	f000 80a1 	beq.w	8003e80 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d3e:	4b34      	ldr	r3, [pc, #208]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	f003 030c 	and.w	r3, r3, #12
 8003d46:	2b08      	cmp	r3, #8
 8003d48:	d05c      	beq.n	8003e04 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	699b      	ldr	r3, [r3, #24]
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d141      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d52:	4b31      	ldr	r3, [pc, #196]	; (8003e18 <HAL_RCC_OscConfig+0x478>)
 8003d54:	2200      	movs	r2, #0
 8003d56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d58:	f7fe fee0 	bl	8002b1c <HAL_GetTick>
 8003d5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d5e:	e008      	b.n	8003d72 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d60:	f7fe fedc 	bl	8002b1c <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d901      	bls.n	8003d72 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	e087      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d72:	4b27      	ldr	r3, [pc, #156]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d1f0      	bne.n	8003d60 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	69da      	ldr	r2, [r3, #28]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a1b      	ldr	r3, [r3, #32]
 8003d86:	431a      	orrs	r2, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8c:	019b      	lsls	r3, r3, #6
 8003d8e:	431a      	orrs	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d94:	085b      	lsrs	r3, r3, #1
 8003d96:	3b01      	subs	r3, #1
 8003d98:	041b      	lsls	r3, r3, #16
 8003d9a:	431a      	orrs	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da0:	061b      	lsls	r3, r3, #24
 8003da2:	491b      	ldr	r1, [pc, #108]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003da4:	4313      	orrs	r3, r2
 8003da6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003da8:	4b1b      	ldr	r3, [pc, #108]	; (8003e18 <HAL_RCC_OscConfig+0x478>)
 8003daa:	2201      	movs	r2, #1
 8003dac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dae:	f7fe feb5 	bl	8002b1c <HAL_GetTick>
 8003db2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003db4:	e008      	b.n	8003dc8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003db6:	f7fe feb1 	bl	8002b1c <HAL_GetTick>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d901      	bls.n	8003dc8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e05c      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dc8:	4b11      	ldr	r3, [pc, #68]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d0f0      	beq.n	8003db6 <HAL_RCC_OscConfig+0x416>
 8003dd4:	e054      	b.n	8003e80 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dd6:	4b10      	ldr	r3, [pc, #64]	; (8003e18 <HAL_RCC_OscConfig+0x478>)
 8003dd8:	2200      	movs	r2, #0
 8003dda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ddc:	f7fe fe9e 	bl	8002b1c <HAL_GetTick>
 8003de0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003de2:	e008      	b.n	8003df6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003de4:	f7fe fe9a 	bl	8002b1c <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	d901      	bls.n	8003df6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e045      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003df6:	4b06      	ldr	r3, [pc, #24]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d1f0      	bne.n	8003de4 <HAL_RCC_OscConfig+0x444>
 8003e02:	e03d      	b.n	8003e80 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	699b      	ldr	r3, [r3, #24]
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d107      	bne.n	8003e1c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e038      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
 8003e10:	40023800 	.word	0x40023800
 8003e14:	40007000 	.word	0x40007000
 8003e18:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e1c:	4b1b      	ldr	r3, [pc, #108]	; (8003e8c <HAL_RCC_OscConfig+0x4ec>)
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	699b      	ldr	r3, [r3, #24]
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d028      	beq.n	8003e7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d121      	bne.n	8003e7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d11a      	bne.n	8003e7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e52:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d111      	bne.n	8003e7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e62:	085b      	lsrs	r3, r3, #1
 8003e64:	3b01      	subs	r3, #1
 8003e66:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d107      	bne.n	8003e7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e76:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d001      	beq.n	8003e80 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e000      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3718      	adds	r7, #24
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	40023800 	.word	0x40023800

08003e90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d101      	bne.n	8003ea4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e0cc      	b.n	800403e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ea4:	4b68      	ldr	r3, [pc, #416]	; (8004048 <HAL_RCC_ClockConfig+0x1b8>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0307 	and.w	r3, r3, #7
 8003eac:	683a      	ldr	r2, [r7, #0]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d90c      	bls.n	8003ecc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eb2:	4b65      	ldr	r3, [pc, #404]	; (8004048 <HAL_RCC_ClockConfig+0x1b8>)
 8003eb4:	683a      	ldr	r2, [r7, #0]
 8003eb6:	b2d2      	uxtb	r2, r2
 8003eb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eba:	4b63      	ldr	r3, [pc, #396]	; (8004048 <HAL_RCC_ClockConfig+0x1b8>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0307 	and.w	r3, r3, #7
 8003ec2:	683a      	ldr	r2, [r7, #0]
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d001      	beq.n	8003ecc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e0b8      	b.n	800403e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0302 	and.w	r3, r3, #2
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d020      	beq.n	8003f1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0304 	and.w	r3, r3, #4
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d005      	beq.n	8003ef0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ee4:	4b59      	ldr	r3, [pc, #356]	; (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	4a58      	ldr	r2, [pc, #352]	; (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003eea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003eee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0308 	and.w	r3, r3, #8
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d005      	beq.n	8003f08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003efc:	4b53      	ldr	r3, [pc, #332]	; (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	4a52      	ldr	r2, [pc, #328]	; (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003f02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f08:	4b50      	ldr	r3, [pc, #320]	; (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	494d      	ldr	r1, [pc, #308]	; (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0301 	and.w	r3, r3, #1
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d044      	beq.n	8003fb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d107      	bne.n	8003f3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f2e:	4b47      	ldr	r3, [pc, #284]	; (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d119      	bne.n	8003f6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e07f      	b.n	800403e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d003      	beq.n	8003f4e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f4a:	2b03      	cmp	r3, #3
 8003f4c:	d107      	bne.n	8003f5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f4e:	4b3f      	ldr	r3, [pc, #252]	; (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d109      	bne.n	8003f6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e06f      	b.n	800403e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f5e:	4b3b      	ldr	r3, [pc, #236]	; (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0302 	and.w	r3, r3, #2
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d101      	bne.n	8003f6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e067      	b.n	800403e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f6e:	4b37      	ldr	r3, [pc, #220]	; (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f023 0203 	bic.w	r2, r3, #3
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	4934      	ldr	r1, [pc, #208]	; (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f80:	f7fe fdcc 	bl	8002b1c <HAL_GetTick>
 8003f84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f86:	e00a      	b.n	8003f9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f88:	f7fe fdc8 	bl	8002b1c <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d901      	bls.n	8003f9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e04f      	b.n	800403e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f9e:	4b2b      	ldr	r3, [pc, #172]	; (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f003 020c 	and.w	r2, r3, #12
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d1eb      	bne.n	8003f88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fb0:	4b25      	ldr	r3, [pc, #148]	; (8004048 <HAL_RCC_ClockConfig+0x1b8>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0307 	and.w	r3, r3, #7
 8003fb8:	683a      	ldr	r2, [r7, #0]
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d20c      	bcs.n	8003fd8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fbe:	4b22      	ldr	r3, [pc, #136]	; (8004048 <HAL_RCC_ClockConfig+0x1b8>)
 8003fc0:	683a      	ldr	r2, [r7, #0]
 8003fc2:	b2d2      	uxtb	r2, r2
 8003fc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fc6:	4b20      	ldr	r3, [pc, #128]	; (8004048 <HAL_RCC_ClockConfig+0x1b8>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0307 	and.w	r3, r3, #7
 8003fce:	683a      	ldr	r2, [r7, #0]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d001      	beq.n	8003fd8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e032      	b.n	800403e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0304 	and.w	r3, r3, #4
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d008      	beq.n	8003ff6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fe4:	4b19      	ldr	r3, [pc, #100]	; (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	4916      	ldr	r1, [pc, #88]	; (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0308 	and.w	r3, r3, #8
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d009      	beq.n	8004016 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004002:	4b12      	ldr	r3, [pc, #72]	; (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	00db      	lsls	r3, r3, #3
 8004010:	490e      	ldr	r1, [pc, #56]	; (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8004012:	4313      	orrs	r3, r2
 8004014:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004016:	f000 f821 	bl	800405c <HAL_RCC_GetSysClockFreq>
 800401a:	4602      	mov	r2, r0
 800401c:	4b0b      	ldr	r3, [pc, #44]	; (800404c <HAL_RCC_ClockConfig+0x1bc>)
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	091b      	lsrs	r3, r3, #4
 8004022:	f003 030f 	and.w	r3, r3, #15
 8004026:	490a      	ldr	r1, [pc, #40]	; (8004050 <HAL_RCC_ClockConfig+0x1c0>)
 8004028:	5ccb      	ldrb	r3, [r1, r3]
 800402a:	fa22 f303 	lsr.w	r3, r2, r3
 800402e:	4a09      	ldr	r2, [pc, #36]	; (8004054 <HAL_RCC_ClockConfig+0x1c4>)
 8004030:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004032:	4b09      	ldr	r3, [pc, #36]	; (8004058 <HAL_RCC_ClockConfig+0x1c8>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4618      	mov	r0, r3
 8004038:	f7fe fc26 	bl	8002888 <HAL_InitTick>

  return HAL_OK;
 800403c:	2300      	movs	r3, #0
}
 800403e:	4618      	mov	r0, r3
 8004040:	3710      	adds	r7, #16
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	40023c00 	.word	0x40023c00
 800404c:	40023800 	.word	0x40023800
 8004050:	08007340 	.word	0x08007340
 8004054:	200000d4 	.word	0x200000d4
 8004058:	200000d8 	.word	0x200000d8

0800405c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800405c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004060:	b094      	sub	sp, #80	; 0x50
 8004062:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004064:	2300      	movs	r3, #0
 8004066:	647b      	str	r3, [r7, #68]	; 0x44
 8004068:	2300      	movs	r3, #0
 800406a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800406c:	2300      	movs	r3, #0
 800406e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004070:	2300      	movs	r3, #0
 8004072:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004074:	4b79      	ldr	r3, [pc, #484]	; (800425c <HAL_RCC_GetSysClockFreq+0x200>)
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	f003 030c 	and.w	r3, r3, #12
 800407c:	2b08      	cmp	r3, #8
 800407e:	d00d      	beq.n	800409c <HAL_RCC_GetSysClockFreq+0x40>
 8004080:	2b08      	cmp	r3, #8
 8004082:	f200 80e1 	bhi.w	8004248 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004086:	2b00      	cmp	r3, #0
 8004088:	d002      	beq.n	8004090 <HAL_RCC_GetSysClockFreq+0x34>
 800408a:	2b04      	cmp	r3, #4
 800408c:	d003      	beq.n	8004096 <HAL_RCC_GetSysClockFreq+0x3a>
 800408e:	e0db      	b.n	8004248 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004090:	4b73      	ldr	r3, [pc, #460]	; (8004260 <HAL_RCC_GetSysClockFreq+0x204>)
 8004092:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004094:	e0db      	b.n	800424e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004096:	4b73      	ldr	r3, [pc, #460]	; (8004264 <HAL_RCC_GetSysClockFreq+0x208>)
 8004098:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800409a:	e0d8      	b.n	800424e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800409c:	4b6f      	ldr	r3, [pc, #444]	; (800425c <HAL_RCC_GetSysClockFreq+0x200>)
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040a4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040a6:	4b6d      	ldr	r3, [pc, #436]	; (800425c <HAL_RCC_GetSysClockFreq+0x200>)
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d063      	beq.n	800417a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040b2:	4b6a      	ldr	r3, [pc, #424]	; (800425c <HAL_RCC_GetSysClockFreq+0x200>)
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	099b      	lsrs	r3, r3, #6
 80040b8:	2200      	movs	r2, #0
 80040ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80040bc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80040be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040c4:	633b      	str	r3, [r7, #48]	; 0x30
 80040c6:	2300      	movs	r3, #0
 80040c8:	637b      	str	r3, [r7, #52]	; 0x34
 80040ca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80040ce:	4622      	mov	r2, r4
 80040d0:	462b      	mov	r3, r5
 80040d2:	f04f 0000 	mov.w	r0, #0
 80040d6:	f04f 0100 	mov.w	r1, #0
 80040da:	0159      	lsls	r1, r3, #5
 80040dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040e0:	0150      	lsls	r0, r2, #5
 80040e2:	4602      	mov	r2, r0
 80040e4:	460b      	mov	r3, r1
 80040e6:	4621      	mov	r1, r4
 80040e8:	1a51      	subs	r1, r2, r1
 80040ea:	6139      	str	r1, [r7, #16]
 80040ec:	4629      	mov	r1, r5
 80040ee:	eb63 0301 	sbc.w	r3, r3, r1
 80040f2:	617b      	str	r3, [r7, #20]
 80040f4:	f04f 0200 	mov.w	r2, #0
 80040f8:	f04f 0300 	mov.w	r3, #0
 80040fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004100:	4659      	mov	r1, fp
 8004102:	018b      	lsls	r3, r1, #6
 8004104:	4651      	mov	r1, sl
 8004106:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800410a:	4651      	mov	r1, sl
 800410c:	018a      	lsls	r2, r1, #6
 800410e:	4651      	mov	r1, sl
 8004110:	ebb2 0801 	subs.w	r8, r2, r1
 8004114:	4659      	mov	r1, fp
 8004116:	eb63 0901 	sbc.w	r9, r3, r1
 800411a:	f04f 0200 	mov.w	r2, #0
 800411e:	f04f 0300 	mov.w	r3, #0
 8004122:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004126:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800412a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800412e:	4690      	mov	r8, r2
 8004130:	4699      	mov	r9, r3
 8004132:	4623      	mov	r3, r4
 8004134:	eb18 0303 	adds.w	r3, r8, r3
 8004138:	60bb      	str	r3, [r7, #8]
 800413a:	462b      	mov	r3, r5
 800413c:	eb49 0303 	adc.w	r3, r9, r3
 8004140:	60fb      	str	r3, [r7, #12]
 8004142:	f04f 0200 	mov.w	r2, #0
 8004146:	f04f 0300 	mov.w	r3, #0
 800414a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800414e:	4629      	mov	r1, r5
 8004150:	024b      	lsls	r3, r1, #9
 8004152:	4621      	mov	r1, r4
 8004154:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004158:	4621      	mov	r1, r4
 800415a:	024a      	lsls	r2, r1, #9
 800415c:	4610      	mov	r0, r2
 800415e:	4619      	mov	r1, r3
 8004160:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004162:	2200      	movs	r2, #0
 8004164:	62bb      	str	r3, [r7, #40]	; 0x28
 8004166:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004168:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800416c:	f7fc fc76 	bl	8000a5c <__aeabi_uldivmod>
 8004170:	4602      	mov	r2, r0
 8004172:	460b      	mov	r3, r1
 8004174:	4613      	mov	r3, r2
 8004176:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004178:	e058      	b.n	800422c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800417a:	4b38      	ldr	r3, [pc, #224]	; (800425c <HAL_RCC_GetSysClockFreq+0x200>)
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	099b      	lsrs	r3, r3, #6
 8004180:	2200      	movs	r2, #0
 8004182:	4618      	mov	r0, r3
 8004184:	4611      	mov	r1, r2
 8004186:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800418a:	623b      	str	r3, [r7, #32]
 800418c:	2300      	movs	r3, #0
 800418e:	627b      	str	r3, [r7, #36]	; 0x24
 8004190:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004194:	4642      	mov	r2, r8
 8004196:	464b      	mov	r3, r9
 8004198:	f04f 0000 	mov.w	r0, #0
 800419c:	f04f 0100 	mov.w	r1, #0
 80041a0:	0159      	lsls	r1, r3, #5
 80041a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041a6:	0150      	lsls	r0, r2, #5
 80041a8:	4602      	mov	r2, r0
 80041aa:	460b      	mov	r3, r1
 80041ac:	4641      	mov	r1, r8
 80041ae:	ebb2 0a01 	subs.w	sl, r2, r1
 80041b2:	4649      	mov	r1, r9
 80041b4:	eb63 0b01 	sbc.w	fp, r3, r1
 80041b8:	f04f 0200 	mov.w	r2, #0
 80041bc:	f04f 0300 	mov.w	r3, #0
 80041c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80041c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80041c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80041cc:	ebb2 040a 	subs.w	r4, r2, sl
 80041d0:	eb63 050b 	sbc.w	r5, r3, fp
 80041d4:	f04f 0200 	mov.w	r2, #0
 80041d8:	f04f 0300 	mov.w	r3, #0
 80041dc:	00eb      	lsls	r3, r5, #3
 80041de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041e2:	00e2      	lsls	r2, r4, #3
 80041e4:	4614      	mov	r4, r2
 80041e6:	461d      	mov	r5, r3
 80041e8:	4643      	mov	r3, r8
 80041ea:	18e3      	adds	r3, r4, r3
 80041ec:	603b      	str	r3, [r7, #0]
 80041ee:	464b      	mov	r3, r9
 80041f0:	eb45 0303 	adc.w	r3, r5, r3
 80041f4:	607b      	str	r3, [r7, #4]
 80041f6:	f04f 0200 	mov.w	r2, #0
 80041fa:	f04f 0300 	mov.w	r3, #0
 80041fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004202:	4629      	mov	r1, r5
 8004204:	028b      	lsls	r3, r1, #10
 8004206:	4621      	mov	r1, r4
 8004208:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800420c:	4621      	mov	r1, r4
 800420e:	028a      	lsls	r2, r1, #10
 8004210:	4610      	mov	r0, r2
 8004212:	4619      	mov	r1, r3
 8004214:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004216:	2200      	movs	r2, #0
 8004218:	61bb      	str	r3, [r7, #24]
 800421a:	61fa      	str	r2, [r7, #28]
 800421c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004220:	f7fc fc1c 	bl	8000a5c <__aeabi_uldivmod>
 8004224:	4602      	mov	r2, r0
 8004226:	460b      	mov	r3, r1
 8004228:	4613      	mov	r3, r2
 800422a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800422c:	4b0b      	ldr	r3, [pc, #44]	; (800425c <HAL_RCC_GetSysClockFreq+0x200>)
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	0c1b      	lsrs	r3, r3, #16
 8004232:	f003 0303 	and.w	r3, r3, #3
 8004236:	3301      	adds	r3, #1
 8004238:	005b      	lsls	r3, r3, #1
 800423a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800423c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800423e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004240:	fbb2 f3f3 	udiv	r3, r2, r3
 8004244:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004246:	e002      	b.n	800424e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004248:	4b05      	ldr	r3, [pc, #20]	; (8004260 <HAL_RCC_GetSysClockFreq+0x204>)
 800424a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800424c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800424e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004250:	4618      	mov	r0, r3
 8004252:	3750      	adds	r7, #80	; 0x50
 8004254:	46bd      	mov	sp, r7
 8004256:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800425a:	bf00      	nop
 800425c:	40023800 	.word	0x40023800
 8004260:	00f42400 	.word	0x00f42400
 8004264:	007a1200 	.word	0x007a1200

08004268 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004268:	b480      	push	{r7}
 800426a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800426c:	4b03      	ldr	r3, [pc, #12]	; (800427c <HAL_RCC_GetHCLKFreq+0x14>)
 800426e:	681b      	ldr	r3, [r3, #0]
}
 8004270:	4618      	mov	r0, r3
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop
 800427c:	200000d4 	.word	0x200000d4

08004280 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004284:	f7ff fff0 	bl	8004268 <HAL_RCC_GetHCLKFreq>
 8004288:	4602      	mov	r2, r0
 800428a:	4b05      	ldr	r3, [pc, #20]	; (80042a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	0a9b      	lsrs	r3, r3, #10
 8004290:	f003 0307 	and.w	r3, r3, #7
 8004294:	4903      	ldr	r1, [pc, #12]	; (80042a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004296:	5ccb      	ldrb	r3, [r1, r3]
 8004298:	fa22 f303 	lsr.w	r3, r2, r3
}
 800429c:	4618      	mov	r0, r3
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	40023800 	.word	0x40023800
 80042a4:	08007350 	.word	0x08007350

080042a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80042ac:	f7ff ffdc 	bl	8004268 <HAL_RCC_GetHCLKFreq>
 80042b0:	4602      	mov	r2, r0
 80042b2:	4b05      	ldr	r3, [pc, #20]	; (80042c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	0b5b      	lsrs	r3, r3, #13
 80042b8:	f003 0307 	and.w	r3, r3, #7
 80042bc:	4903      	ldr	r1, [pc, #12]	; (80042cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80042be:	5ccb      	ldrb	r3, [r1, r3]
 80042c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	40023800 	.word	0x40023800
 80042cc:	08007350 	.word	0x08007350

080042d0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b083      	sub	sp, #12
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	220f      	movs	r2, #15
 80042de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80042e0:	4b12      	ldr	r3, [pc, #72]	; (800432c <HAL_RCC_GetClockConfig+0x5c>)
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	f003 0203 	and.w	r2, r3, #3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80042ec:	4b0f      	ldr	r3, [pc, #60]	; (800432c <HAL_RCC_GetClockConfig+0x5c>)
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80042f8:	4b0c      	ldr	r3, [pc, #48]	; (800432c <HAL_RCC_GetClockConfig+0x5c>)
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004304:	4b09      	ldr	r3, [pc, #36]	; (800432c <HAL_RCC_GetClockConfig+0x5c>)
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	08db      	lsrs	r3, r3, #3
 800430a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004312:	4b07      	ldr	r3, [pc, #28]	; (8004330 <HAL_RCC_GetClockConfig+0x60>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0207 	and.w	r2, r3, #7
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	601a      	str	r2, [r3, #0]
}
 800431e:	bf00      	nop
 8004320:	370c      	adds	r7, #12
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr
 800432a:	bf00      	nop
 800432c:	40023800 	.word	0x40023800
 8004330:	40023c00 	.word	0x40023c00

08004334 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b082      	sub	sp, #8
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d101      	bne.n	8004346 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e041      	b.n	80043ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800434c:	b2db      	uxtb	r3, r3
 800434e:	2b00      	cmp	r3, #0
 8004350:	d106      	bne.n	8004360 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f7fe fa12 	bl	8002784 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2202      	movs	r2, #2
 8004364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	3304      	adds	r3, #4
 8004370:	4619      	mov	r1, r3
 8004372:	4610      	mov	r0, r2
 8004374:	f000 fc32 	bl	8004bdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043c8:	2300      	movs	r3, #0
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3708      	adds	r7, #8
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
	...

080043d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b085      	sub	sp, #20
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d001      	beq.n	80043ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e044      	b.n	8004476 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2202      	movs	r2, #2
 80043f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	68da      	ldr	r2, [r3, #12]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f042 0201 	orr.w	r2, r2, #1
 8004402:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a1e      	ldr	r2, [pc, #120]	; (8004484 <HAL_TIM_Base_Start_IT+0xb0>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d018      	beq.n	8004440 <HAL_TIM_Base_Start_IT+0x6c>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004416:	d013      	beq.n	8004440 <HAL_TIM_Base_Start_IT+0x6c>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a1a      	ldr	r2, [pc, #104]	; (8004488 <HAL_TIM_Base_Start_IT+0xb4>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d00e      	beq.n	8004440 <HAL_TIM_Base_Start_IT+0x6c>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a19      	ldr	r2, [pc, #100]	; (800448c <HAL_TIM_Base_Start_IT+0xb8>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d009      	beq.n	8004440 <HAL_TIM_Base_Start_IT+0x6c>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a17      	ldr	r2, [pc, #92]	; (8004490 <HAL_TIM_Base_Start_IT+0xbc>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d004      	beq.n	8004440 <HAL_TIM_Base_Start_IT+0x6c>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a16      	ldr	r2, [pc, #88]	; (8004494 <HAL_TIM_Base_Start_IT+0xc0>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d111      	bne.n	8004464 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	f003 0307 	and.w	r3, r3, #7
 800444a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2b06      	cmp	r3, #6
 8004450:	d010      	beq.n	8004474 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f042 0201 	orr.w	r2, r2, #1
 8004460:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004462:	e007      	b.n	8004474 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f042 0201 	orr.w	r2, r2, #1
 8004472:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004474:	2300      	movs	r3, #0
}
 8004476:	4618      	mov	r0, r3
 8004478:	3714      	adds	r7, #20
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	40010000 	.word	0x40010000
 8004488:	40000400 	.word	0x40000400
 800448c:	40000800 	.word	0x40000800
 8004490:	40000c00 	.word	0x40000c00
 8004494:	40014000 	.word	0x40014000

08004498 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b082      	sub	sp, #8
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d101      	bne.n	80044aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e041      	b.n	800452e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d106      	bne.n	80044c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f7fe f986 	bl	80027d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2202      	movs	r2, #2
 80044c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	3304      	adds	r3, #4
 80044d4:	4619      	mov	r1, r3
 80044d6:	4610      	mov	r0, r2
 80044d8:	f000 fb80 	bl	8004bdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800452c:	2300      	movs	r3, #0
}
 800452e:	4618      	mov	r0, r3
 8004530:	3708      	adds	r7, #8
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
	...

08004538 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d109      	bne.n	800455c <HAL_TIM_PWM_Start+0x24>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800454e:	b2db      	uxtb	r3, r3
 8004550:	2b01      	cmp	r3, #1
 8004552:	bf14      	ite	ne
 8004554:	2301      	movne	r3, #1
 8004556:	2300      	moveq	r3, #0
 8004558:	b2db      	uxtb	r3, r3
 800455a:	e022      	b.n	80045a2 <HAL_TIM_PWM_Start+0x6a>
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	2b04      	cmp	r3, #4
 8004560:	d109      	bne.n	8004576 <HAL_TIM_PWM_Start+0x3e>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004568:	b2db      	uxtb	r3, r3
 800456a:	2b01      	cmp	r3, #1
 800456c:	bf14      	ite	ne
 800456e:	2301      	movne	r3, #1
 8004570:	2300      	moveq	r3, #0
 8004572:	b2db      	uxtb	r3, r3
 8004574:	e015      	b.n	80045a2 <HAL_TIM_PWM_Start+0x6a>
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	2b08      	cmp	r3, #8
 800457a:	d109      	bne.n	8004590 <HAL_TIM_PWM_Start+0x58>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004582:	b2db      	uxtb	r3, r3
 8004584:	2b01      	cmp	r3, #1
 8004586:	bf14      	ite	ne
 8004588:	2301      	movne	r3, #1
 800458a:	2300      	moveq	r3, #0
 800458c:	b2db      	uxtb	r3, r3
 800458e:	e008      	b.n	80045a2 <HAL_TIM_PWM_Start+0x6a>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004596:	b2db      	uxtb	r3, r3
 8004598:	2b01      	cmp	r3, #1
 800459a:	bf14      	ite	ne
 800459c:	2301      	movne	r3, #1
 800459e:	2300      	moveq	r3, #0
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d001      	beq.n	80045aa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e068      	b.n	800467c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d104      	bne.n	80045ba <HAL_TIM_PWM_Start+0x82>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2202      	movs	r2, #2
 80045b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045b8:	e013      	b.n	80045e2 <HAL_TIM_PWM_Start+0xaa>
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	2b04      	cmp	r3, #4
 80045be:	d104      	bne.n	80045ca <HAL_TIM_PWM_Start+0x92>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2202      	movs	r2, #2
 80045c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045c8:	e00b      	b.n	80045e2 <HAL_TIM_PWM_Start+0xaa>
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	2b08      	cmp	r3, #8
 80045ce:	d104      	bne.n	80045da <HAL_TIM_PWM_Start+0xa2>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2202      	movs	r2, #2
 80045d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045d8:	e003      	b.n	80045e2 <HAL_TIM_PWM_Start+0xaa>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2202      	movs	r2, #2
 80045de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	2201      	movs	r2, #1
 80045e8:	6839      	ldr	r1, [r7, #0]
 80045ea:	4618      	mov	r0, r3
 80045ec:	f000 fda8 	bl	8005140 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a23      	ldr	r2, [pc, #140]	; (8004684 <HAL_TIM_PWM_Start+0x14c>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d107      	bne.n	800460a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004608:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a1d      	ldr	r2, [pc, #116]	; (8004684 <HAL_TIM_PWM_Start+0x14c>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d018      	beq.n	8004646 <HAL_TIM_PWM_Start+0x10e>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800461c:	d013      	beq.n	8004646 <HAL_TIM_PWM_Start+0x10e>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a19      	ldr	r2, [pc, #100]	; (8004688 <HAL_TIM_PWM_Start+0x150>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d00e      	beq.n	8004646 <HAL_TIM_PWM_Start+0x10e>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a17      	ldr	r2, [pc, #92]	; (800468c <HAL_TIM_PWM_Start+0x154>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d009      	beq.n	8004646 <HAL_TIM_PWM_Start+0x10e>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a16      	ldr	r2, [pc, #88]	; (8004690 <HAL_TIM_PWM_Start+0x158>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d004      	beq.n	8004646 <HAL_TIM_PWM_Start+0x10e>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a14      	ldr	r2, [pc, #80]	; (8004694 <HAL_TIM_PWM_Start+0x15c>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d111      	bne.n	800466a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	f003 0307 	and.w	r3, r3, #7
 8004650:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2b06      	cmp	r3, #6
 8004656:	d010      	beq.n	800467a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f042 0201 	orr.w	r2, r2, #1
 8004666:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004668:	e007      	b.n	800467a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f042 0201 	orr.w	r2, r2, #1
 8004678:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800467a:	2300      	movs	r3, #0
}
 800467c:	4618      	mov	r0, r3
 800467e:	3710      	adds	r7, #16
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}
 8004684:	40010000 	.word	0x40010000
 8004688:	40000400 	.word	0x40000400
 800468c:	40000800 	.word	0x40000800
 8004690:	40000c00 	.word	0x40000c00
 8004694:	40014000 	.word	0x40014000

08004698 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b084      	sub	sp, #16
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	f003 0302 	and.w	r3, r3, #2
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d020      	beq.n	80046fc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f003 0302 	and.w	r3, r3, #2
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d01b      	beq.n	80046fc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f06f 0202 	mvn.w	r2, #2
 80046cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2201      	movs	r2, #1
 80046d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	699b      	ldr	r3, [r3, #24]
 80046da:	f003 0303 	and.w	r3, r3, #3
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d003      	beq.n	80046ea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f000 fa5b 	bl	8004b9e <HAL_TIM_IC_CaptureCallback>
 80046e8:	e005      	b.n	80046f6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 fa4d 	bl	8004b8a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f000 fa5e 	bl	8004bb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	f003 0304 	and.w	r3, r3, #4
 8004702:	2b00      	cmp	r3, #0
 8004704:	d020      	beq.n	8004748 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f003 0304 	and.w	r3, r3, #4
 800470c:	2b00      	cmp	r3, #0
 800470e:	d01b      	beq.n	8004748 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f06f 0204 	mvn.w	r2, #4
 8004718:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2202      	movs	r2, #2
 800471e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	699b      	ldr	r3, [r3, #24]
 8004726:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800472a:	2b00      	cmp	r3, #0
 800472c:	d003      	beq.n	8004736 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f000 fa35 	bl	8004b9e <HAL_TIM_IC_CaptureCallback>
 8004734:	e005      	b.n	8004742 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 fa27 	bl	8004b8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f000 fa38 	bl	8004bb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	f003 0308 	and.w	r3, r3, #8
 800474e:	2b00      	cmp	r3, #0
 8004750:	d020      	beq.n	8004794 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f003 0308 	and.w	r3, r3, #8
 8004758:	2b00      	cmp	r3, #0
 800475a:	d01b      	beq.n	8004794 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f06f 0208 	mvn.w	r2, #8
 8004764:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2204      	movs	r2, #4
 800476a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	69db      	ldr	r3, [r3, #28]
 8004772:	f003 0303 	and.w	r3, r3, #3
 8004776:	2b00      	cmp	r3, #0
 8004778:	d003      	beq.n	8004782 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f000 fa0f 	bl	8004b9e <HAL_TIM_IC_CaptureCallback>
 8004780:	e005      	b.n	800478e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f000 fa01 	bl	8004b8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f000 fa12 	bl	8004bb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	f003 0310 	and.w	r3, r3, #16
 800479a:	2b00      	cmp	r3, #0
 800479c:	d020      	beq.n	80047e0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f003 0310 	and.w	r3, r3, #16
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d01b      	beq.n	80047e0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f06f 0210 	mvn.w	r2, #16
 80047b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2208      	movs	r2, #8
 80047b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	69db      	ldr	r3, [r3, #28]
 80047be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d003      	beq.n	80047ce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f000 f9e9 	bl	8004b9e <HAL_TIM_IC_CaptureCallback>
 80047cc:	e005      	b.n	80047da <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f000 f9db 	bl	8004b8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f000 f9ec 	bl	8004bb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	f003 0301 	and.w	r3, r3, #1
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d00c      	beq.n	8004804 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f003 0301 	and.w	r3, r3, #1
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d007      	beq.n	8004804 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f06f 0201 	mvn.w	r2, #1
 80047fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f7fd fa88 	bl	8001d14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800480a:	2b00      	cmp	r3, #0
 800480c:	d00c      	beq.n	8004828 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004814:	2b00      	cmp	r3, #0
 8004816:	d007      	beq.n	8004828 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004820:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 fd2a 	bl	800527c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800482e:	2b00      	cmp	r3, #0
 8004830:	d00c      	beq.n	800484c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004838:	2b00      	cmp	r3, #0
 800483a:	d007      	beq.n	800484c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004844:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 f9bd 	bl	8004bc6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	f003 0320 	and.w	r3, r3, #32
 8004852:	2b00      	cmp	r3, #0
 8004854:	d00c      	beq.n	8004870 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f003 0320 	and.w	r3, r3, #32
 800485c:	2b00      	cmp	r3, #0
 800485e:	d007      	beq.n	8004870 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f06f 0220 	mvn.w	r2, #32
 8004868:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f000 fcfc 	bl	8005268 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004870:	bf00      	nop
 8004872:	3710      	adds	r7, #16
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}

08004878 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b086      	sub	sp, #24
 800487c:	af00      	add	r7, sp, #0
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004884:	2300      	movs	r3, #0
 8004886:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800488e:	2b01      	cmp	r3, #1
 8004890:	d101      	bne.n	8004896 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004892:	2302      	movs	r3, #2
 8004894:	e0ae      	b.n	80049f4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2201      	movs	r2, #1
 800489a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2b0c      	cmp	r3, #12
 80048a2:	f200 809f 	bhi.w	80049e4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80048a6:	a201      	add	r2, pc, #4	; (adr r2, 80048ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80048a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ac:	080048e1 	.word	0x080048e1
 80048b0:	080049e5 	.word	0x080049e5
 80048b4:	080049e5 	.word	0x080049e5
 80048b8:	080049e5 	.word	0x080049e5
 80048bc:	08004921 	.word	0x08004921
 80048c0:	080049e5 	.word	0x080049e5
 80048c4:	080049e5 	.word	0x080049e5
 80048c8:	080049e5 	.word	0x080049e5
 80048cc:	08004963 	.word	0x08004963
 80048d0:	080049e5 	.word	0x080049e5
 80048d4:	080049e5 	.word	0x080049e5
 80048d8:	080049e5 	.word	0x080049e5
 80048dc:	080049a3 	.word	0x080049a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	68b9      	ldr	r1, [r7, #8]
 80048e6:	4618      	mov	r0, r3
 80048e8:	f000 fa04 	bl	8004cf4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	699a      	ldr	r2, [r3, #24]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f042 0208 	orr.w	r2, r2, #8
 80048fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	699a      	ldr	r2, [r3, #24]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f022 0204 	bic.w	r2, r2, #4
 800490a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	6999      	ldr	r1, [r3, #24]
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	691a      	ldr	r2, [r3, #16]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	430a      	orrs	r2, r1
 800491c:	619a      	str	r2, [r3, #24]
      break;
 800491e:	e064      	b.n	80049ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	68b9      	ldr	r1, [r7, #8]
 8004926:	4618      	mov	r0, r3
 8004928:	f000 fa4a 	bl	8004dc0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	699a      	ldr	r2, [r3, #24]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800493a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	699a      	ldr	r2, [r3, #24]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800494a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	6999      	ldr	r1, [r3, #24]
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	691b      	ldr	r3, [r3, #16]
 8004956:	021a      	lsls	r2, r3, #8
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	430a      	orrs	r2, r1
 800495e:	619a      	str	r2, [r3, #24]
      break;
 8004960:	e043      	b.n	80049ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	68b9      	ldr	r1, [r7, #8]
 8004968:	4618      	mov	r0, r3
 800496a:	f000 fa95 	bl	8004e98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	69da      	ldr	r2, [r3, #28]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f042 0208 	orr.w	r2, r2, #8
 800497c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	69da      	ldr	r2, [r3, #28]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f022 0204 	bic.w	r2, r2, #4
 800498c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	69d9      	ldr	r1, [r3, #28]
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	691a      	ldr	r2, [r3, #16]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	430a      	orrs	r2, r1
 800499e:	61da      	str	r2, [r3, #28]
      break;
 80049a0:	e023      	b.n	80049ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68b9      	ldr	r1, [r7, #8]
 80049a8:	4618      	mov	r0, r3
 80049aa:	f000 fadf 	bl	8004f6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	69da      	ldr	r2, [r3, #28]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	69da      	ldr	r2, [r3, #28]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	69d9      	ldr	r1, [r3, #28]
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	691b      	ldr	r3, [r3, #16]
 80049d8:	021a      	lsls	r2, r3, #8
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	430a      	orrs	r2, r1
 80049e0:	61da      	str	r2, [r3, #28]
      break;
 80049e2:	e002      	b.n	80049ea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	75fb      	strb	r3, [r7, #23]
      break;
 80049e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2200      	movs	r2, #0
 80049ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80049f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3718      	adds	r7, #24
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}

080049fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b084      	sub	sp, #16
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a06:	2300      	movs	r3, #0
 8004a08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d101      	bne.n	8004a18 <HAL_TIM_ConfigClockSource+0x1c>
 8004a14:	2302      	movs	r3, #2
 8004a16:	e0b4      	b.n	8004b82 <HAL_TIM_ConfigClockSource+0x186>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2202      	movs	r2, #2
 8004a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004a36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	68ba      	ldr	r2, [r7, #8]
 8004a46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a50:	d03e      	beq.n	8004ad0 <HAL_TIM_ConfigClockSource+0xd4>
 8004a52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a56:	f200 8087 	bhi.w	8004b68 <HAL_TIM_ConfigClockSource+0x16c>
 8004a5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a5e:	f000 8086 	beq.w	8004b6e <HAL_TIM_ConfigClockSource+0x172>
 8004a62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a66:	d87f      	bhi.n	8004b68 <HAL_TIM_ConfigClockSource+0x16c>
 8004a68:	2b70      	cmp	r3, #112	; 0x70
 8004a6a:	d01a      	beq.n	8004aa2 <HAL_TIM_ConfigClockSource+0xa6>
 8004a6c:	2b70      	cmp	r3, #112	; 0x70
 8004a6e:	d87b      	bhi.n	8004b68 <HAL_TIM_ConfigClockSource+0x16c>
 8004a70:	2b60      	cmp	r3, #96	; 0x60
 8004a72:	d050      	beq.n	8004b16 <HAL_TIM_ConfigClockSource+0x11a>
 8004a74:	2b60      	cmp	r3, #96	; 0x60
 8004a76:	d877      	bhi.n	8004b68 <HAL_TIM_ConfigClockSource+0x16c>
 8004a78:	2b50      	cmp	r3, #80	; 0x50
 8004a7a:	d03c      	beq.n	8004af6 <HAL_TIM_ConfigClockSource+0xfa>
 8004a7c:	2b50      	cmp	r3, #80	; 0x50
 8004a7e:	d873      	bhi.n	8004b68 <HAL_TIM_ConfigClockSource+0x16c>
 8004a80:	2b40      	cmp	r3, #64	; 0x40
 8004a82:	d058      	beq.n	8004b36 <HAL_TIM_ConfigClockSource+0x13a>
 8004a84:	2b40      	cmp	r3, #64	; 0x40
 8004a86:	d86f      	bhi.n	8004b68 <HAL_TIM_ConfigClockSource+0x16c>
 8004a88:	2b30      	cmp	r3, #48	; 0x30
 8004a8a:	d064      	beq.n	8004b56 <HAL_TIM_ConfigClockSource+0x15a>
 8004a8c:	2b30      	cmp	r3, #48	; 0x30
 8004a8e:	d86b      	bhi.n	8004b68 <HAL_TIM_ConfigClockSource+0x16c>
 8004a90:	2b20      	cmp	r3, #32
 8004a92:	d060      	beq.n	8004b56 <HAL_TIM_ConfigClockSource+0x15a>
 8004a94:	2b20      	cmp	r3, #32
 8004a96:	d867      	bhi.n	8004b68 <HAL_TIM_ConfigClockSource+0x16c>
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d05c      	beq.n	8004b56 <HAL_TIM_ConfigClockSource+0x15a>
 8004a9c:	2b10      	cmp	r3, #16
 8004a9e:	d05a      	beq.n	8004b56 <HAL_TIM_ConfigClockSource+0x15a>
 8004aa0:	e062      	b.n	8004b68 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ab2:	f000 fb25 	bl	8005100 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ac4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	68ba      	ldr	r2, [r7, #8]
 8004acc:	609a      	str	r2, [r3, #8]
      break;
 8004ace:	e04f      	b.n	8004b70 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ae0:	f000 fb0e 	bl	8005100 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	689a      	ldr	r2, [r3, #8]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004af2:	609a      	str	r2, [r3, #8]
      break;
 8004af4:	e03c      	b.n	8004b70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b02:	461a      	mov	r2, r3
 8004b04:	f000 fa82 	bl	800500c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2150      	movs	r1, #80	; 0x50
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f000 fadb 	bl	80050ca <TIM_ITRx_SetConfig>
      break;
 8004b14:	e02c      	b.n	8004b70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b22:	461a      	mov	r2, r3
 8004b24:	f000 faa1 	bl	800506a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	2160      	movs	r1, #96	; 0x60
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f000 facb 	bl	80050ca <TIM_ITRx_SetConfig>
      break;
 8004b34:	e01c      	b.n	8004b70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b42:	461a      	mov	r2, r3
 8004b44:	f000 fa62 	bl	800500c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	2140      	movs	r1, #64	; 0x40
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f000 fabb 	bl	80050ca <TIM_ITRx_SetConfig>
      break;
 8004b54:	e00c      	b.n	8004b70 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4619      	mov	r1, r3
 8004b60:	4610      	mov	r0, r2
 8004b62:	f000 fab2 	bl	80050ca <TIM_ITRx_SetConfig>
      break;
 8004b66:	e003      	b.n	8004b70 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	73fb      	strb	r3, [r7, #15]
      break;
 8004b6c:	e000      	b.n	8004b70 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004b6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3710      	adds	r7, #16
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}

08004b8a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b8a:	b480      	push	{r7}
 8004b8c:	b083      	sub	sp, #12
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b92:	bf00      	nop
 8004b94:	370c      	adds	r7, #12
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr

08004b9e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b9e:	b480      	push	{r7}
 8004ba0:	b083      	sub	sp, #12
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ba6:	bf00      	nop
 8004ba8:	370c      	adds	r7, #12
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr

08004bb2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004bb2:	b480      	push	{r7}
 8004bb4:	b083      	sub	sp, #12
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004bba:	bf00      	nop
 8004bbc:	370c      	adds	r7, #12
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr

08004bc6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004bc6:	b480      	push	{r7}
 8004bc8:	b083      	sub	sp, #12
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004bce:	bf00      	nop
 8004bd0:	370c      	adds	r7, #12
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr
	...

08004bdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b085      	sub	sp, #20
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	4a3a      	ldr	r2, [pc, #232]	; (8004cd8 <TIM_Base_SetConfig+0xfc>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d00f      	beq.n	8004c14 <TIM_Base_SetConfig+0x38>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bfa:	d00b      	beq.n	8004c14 <TIM_Base_SetConfig+0x38>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4a37      	ldr	r2, [pc, #220]	; (8004cdc <TIM_Base_SetConfig+0x100>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d007      	beq.n	8004c14 <TIM_Base_SetConfig+0x38>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	4a36      	ldr	r2, [pc, #216]	; (8004ce0 <TIM_Base_SetConfig+0x104>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d003      	beq.n	8004c14 <TIM_Base_SetConfig+0x38>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	4a35      	ldr	r2, [pc, #212]	; (8004ce4 <TIM_Base_SetConfig+0x108>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d108      	bne.n	8004c26 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	68fa      	ldr	r2, [r7, #12]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4a2b      	ldr	r2, [pc, #172]	; (8004cd8 <TIM_Base_SetConfig+0xfc>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d01b      	beq.n	8004c66 <TIM_Base_SetConfig+0x8a>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c34:	d017      	beq.n	8004c66 <TIM_Base_SetConfig+0x8a>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a28      	ldr	r2, [pc, #160]	; (8004cdc <TIM_Base_SetConfig+0x100>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d013      	beq.n	8004c66 <TIM_Base_SetConfig+0x8a>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a27      	ldr	r2, [pc, #156]	; (8004ce0 <TIM_Base_SetConfig+0x104>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d00f      	beq.n	8004c66 <TIM_Base_SetConfig+0x8a>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4a26      	ldr	r2, [pc, #152]	; (8004ce4 <TIM_Base_SetConfig+0x108>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d00b      	beq.n	8004c66 <TIM_Base_SetConfig+0x8a>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a25      	ldr	r2, [pc, #148]	; (8004ce8 <TIM_Base_SetConfig+0x10c>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d007      	beq.n	8004c66 <TIM_Base_SetConfig+0x8a>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4a24      	ldr	r2, [pc, #144]	; (8004cec <TIM_Base_SetConfig+0x110>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d003      	beq.n	8004c66 <TIM_Base_SetConfig+0x8a>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4a23      	ldr	r2, [pc, #140]	; (8004cf0 <TIM_Base_SetConfig+0x114>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d108      	bne.n	8004c78 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	68db      	ldr	r3, [r3, #12]
 8004c72:	68fa      	ldr	r2, [r7, #12]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	695b      	ldr	r3, [r3, #20]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	68fa      	ldr	r2, [r7, #12]
 8004c8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	689a      	ldr	r2, [r3, #8]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	4a0e      	ldr	r2, [pc, #56]	; (8004cd8 <TIM_Base_SetConfig+0xfc>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d103      	bne.n	8004cac <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	691a      	ldr	r2, [r3, #16]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	f003 0301 	and.w	r3, r3, #1
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d105      	bne.n	8004cca <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	f023 0201 	bic.w	r2, r3, #1
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	611a      	str	r2, [r3, #16]
  }
}
 8004cca:	bf00      	nop
 8004ccc:	3714      	adds	r7, #20
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr
 8004cd6:	bf00      	nop
 8004cd8:	40010000 	.word	0x40010000
 8004cdc:	40000400 	.word	0x40000400
 8004ce0:	40000800 	.word	0x40000800
 8004ce4:	40000c00 	.word	0x40000c00
 8004ce8:	40014000 	.word	0x40014000
 8004cec:	40014400 	.word	0x40014400
 8004cf0:	40014800 	.word	0x40014800

08004cf4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b087      	sub	sp, #28
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a1b      	ldr	r3, [r3, #32]
 8004d02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6a1b      	ldr	r3, [r3, #32]
 8004d08:	f023 0201 	bic.w	r2, r3, #1
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	699b      	ldr	r3, [r3, #24]
 8004d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f023 0303 	bic.w	r3, r3, #3
 8004d2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	68fa      	ldr	r2, [r7, #12]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	f023 0302 	bic.w	r3, r3, #2
 8004d3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	697a      	ldr	r2, [r7, #20]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4a1c      	ldr	r2, [pc, #112]	; (8004dbc <TIM_OC1_SetConfig+0xc8>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d10c      	bne.n	8004d6a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	f023 0308 	bic.w	r3, r3, #8
 8004d56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	697a      	ldr	r2, [r7, #20]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	f023 0304 	bic.w	r3, r3, #4
 8004d68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a13      	ldr	r2, [pc, #76]	; (8004dbc <TIM_OC1_SetConfig+0xc8>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d111      	bne.n	8004d96 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	695b      	ldr	r3, [r3, #20]
 8004d86:	693a      	ldr	r2, [r7, #16]
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	699b      	ldr	r3, [r3, #24]
 8004d90:	693a      	ldr	r2, [r7, #16]
 8004d92:	4313      	orrs	r3, r2
 8004d94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	693a      	ldr	r2, [r7, #16]
 8004d9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	68fa      	ldr	r2, [r7, #12]
 8004da0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	685a      	ldr	r2, [r3, #4]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	697a      	ldr	r2, [r7, #20]
 8004dae:	621a      	str	r2, [r3, #32]
}
 8004db0:	bf00      	nop
 8004db2:	371c      	adds	r7, #28
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr
 8004dbc:	40010000 	.word	0x40010000

08004dc0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b087      	sub	sp, #28
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a1b      	ldr	r3, [r3, #32]
 8004dce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6a1b      	ldr	r3, [r3, #32]
 8004dd4:	f023 0210 	bic.w	r2, r3, #16
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	699b      	ldr	r3, [r3, #24]
 8004de6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004df6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	021b      	lsls	r3, r3, #8
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	f023 0320 	bic.w	r3, r3, #32
 8004e0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	011b      	lsls	r3, r3, #4
 8004e12:	697a      	ldr	r2, [r7, #20]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4a1e      	ldr	r2, [pc, #120]	; (8004e94 <TIM_OC2_SetConfig+0xd4>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d10d      	bne.n	8004e3c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	011b      	lsls	r3, r3, #4
 8004e2e:	697a      	ldr	r2, [r7, #20]
 8004e30:	4313      	orrs	r3, r2
 8004e32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e3a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	4a15      	ldr	r2, [pc, #84]	; (8004e94 <TIM_OC2_SetConfig+0xd4>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d113      	bne.n	8004e6c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	695b      	ldr	r3, [r3, #20]
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	693a      	ldr	r2, [r7, #16]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	699b      	ldr	r3, [r3, #24]
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	693a      	ldr	r2, [r7, #16]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	693a      	ldr	r2, [r7, #16]
 8004e70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	68fa      	ldr	r2, [r7, #12]
 8004e76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	685a      	ldr	r2, [r3, #4]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	697a      	ldr	r2, [r7, #20]
 8004e84:	621a      	str	r2, [r3, #32]
}
 8004e86:	bf00      	nop
 8004e88:	371c      	adds	r7, #28
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr
 8004e92:	bf00      	nop
 8004e94:	40010000 	.word	0x40010000

08004e98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b087      	sub	sp, #28
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a1b      	ldr	r3, [r3, #32]
 8004ea6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6a1b      	ldr	r3, [r3, #32]
 8004eac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	69db      	ldr	r3, [r3, #28]
 8004ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ec6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f023 0303 	bic.w	r3, r3, #3
 8004ece:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	68fa      	ldr	r2, [r7, #12]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ee0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	021b      	lsls	r3, r3, #8
 8004ee8:	697a      	ldr	r2, [r7, #20]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4a1d      	ldr	r2, [pc, #116]	; (8004f68 <TIM_OC3_SetConfig+0xd0>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d10d      	bne.n	8004f12 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004efc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	021b      	lsls	r3, r3, #8
 8004f04:	697a      	ldr	r2, [r7, #20]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4a14      	ldr	r2, [pc, #80]	; (8004f68 <TIM_OC3_SetConfig+0xd0>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d113      	bne.n	8004f42 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	695b      	ldr	r3, [r3, #20]
 8004f2e:	011b      	lsls	r3, r3, #4
 8004f30:	693a      	ldr	r2, [r7, #16]
 8004f32:	4313      	orrs	r3, r2
 8004f34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	699b      	ldr	r3, [r3, #24]
 8004f3a:	011b      	lsls	r3, r3, #4
 8004f3c:	693a      	ldr	r2, [r7, #16]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	693a      	ldr	r2, [r7, #16]
 8004f46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	68fa      	ldr	r2, [r7, #12]
 8004f4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	685a      	ldr	r2, [r3, #4]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	697a      	ldr	r2, [r7, #20]
 8004f5a:	621a      	str	r2, [r3, #32]
}
 8004f5c:	bf00      	nop
 8004f5e:	371c      	adds	r7, #28
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr
 8004f68:	40010000 	.word	0x40010000

08004f6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b087      	sub	sp, #28
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a1b      	ldr	r3, [r3, #32]
 8004f7a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6a1b      	ldr	r3, [r3, #32]
 8004f80:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	69db      	ldr	r3, [r3, #28]
 8004f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fa2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	021b      	lsls	r3, r3, #8
 8004faa:	68fa      	ldr	r2, [r7, #12]
 8004fac:	4313      	orrs	r3, r2
 8004fae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004fb6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	031b      	lsls	r3, r3, #12
 8004fbe:	693a      	ldr	r2, [r7, #16]
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	4a10      	ldr	r2, [pc, #64]	; (8005008 <TIM_OC4_SetConfig+0x9c>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d109      	bne.n	8004fe0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fd2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	695b      	ldr	r3, [r3, #20]
 8004fd8:	019b      	lsls	r3, r3, #6
 8004fda:	697a      	ldr	r2, [r7, #20]
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	697a      	ldr	r2, [r7, #20]
 8004fe4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	68fa      	ldr	r2, [r7, #12]
 8004fea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	685a      	ldr	r2, [r3, #4]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	693a      	ldr	r2, [r7, #16]
 8004ff8:	621a      	str	r2, [r3, #32]
}
 8004ffa:	bf00      	nop
 8004ffc:	371c      	adds	r7, #28
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr
 8005006:	bf00      	nop
 8005008:	40010000 	.word	0x40010000

0800500c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800500c:	b480      	push	{r7}
 800500e:	b087      	sub	sp, #28
 8005010:	af00      	add	r7, sp, #0
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	60b9      	str	r1, [r7, #8]
 8005016:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6a1b      	ldr	r3, [r3, #32]
 800501c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	6a1b      	ldr	r3, [r3, #32]
 8005022:	f023 0201 	bic.w	r2, r3, #1
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	699b      	ldr	r3, [r3, #24]
 800502e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005036:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	011b      	lsls	r3, r3, #4
 800503c:	693a      	ldr	r2, [r7, #16]
 800503e:	4313      	orrs	r3, r2
 8005040:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	f023 030a 	bic.w	r3, r3, #10
 8005048:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800504a:	697a      	ldr	r2, [r7, #20]
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	4313      	orrs	r3, r2
 8005050:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	693a      	ldr	r2, [r7, #16]
 8005056:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	697a      	ldr	r2, [r7, #20]
 800505c:	621a      	str	r2, [r3, #32]
}
 800505e:	bf00      	nop
 8005060:	371c      	adds	r7, #28
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr

0800506a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800506a:	b480      	push	{r7}
 800506c:	b087      	sub	sp, #28
 800506e:	af00      	add	r7, sp, #0
 8005070:	60f8      	str	r0, [r7, #12]
 8005072:	60b9      	str	r1, [r7, #8]
 8005074:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	6a1b      	ldr	r3, [r3, #32]
 800507a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	6a1b      	ldr	r3, [r3, #32]
 8005080:	f023 0210 	bic.w	r2, r3, #16
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	699b      	ldr	r3, [r3, #24]
 800508c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005094:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	031b      	lsls	r3, r3, #12
 800509a:	693a      	ldr	r2, [r7, #16]
 800509c:	4313      	orrs	r3, r2
 800509e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80050a6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	011b      	lsls	r3, r3, #4
 80050ac:	697a      	ldr	r2, [r7, #20]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	693a      	ldr	r2, [r7, #16]
 80050b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	697a      	ldr	r2, [r7, #20]
 80050bc:	621a      	str	r2, [r3, #32]
}
 80050be:	bf00      	nop
 80050c0:	371c      	adds	r7, #28
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr

080050ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80050ca:	b480      	push	{r7}
 80050cc:	b085      	sub	sp, #20
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	6078      	str	r0, [r7, #4]
 80050d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80050e2:	683a      	ldr	r2, [r7, #0]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	4313      	orrs	r3, r2
 80050e8:	f043 0307 	orr.w	r3, r3, #7
 80050ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	68fa      	ldr	r2, [r7, #12]
 80050f2:	609a      	str	r2, [r3, #8]
}
 80050f4:	bf00      	nop
 80050f6:	3714      	adds	r7, #20
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr

08005100 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005100:	b480      	push	{r7}
 8005102:	b087      	sub	sp, #28
 8005104:	af00      	add	r7, sp, #0
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	60b9      	str	r1, [r7, #8]
 800510a:	607a      	str	r2, [r7, #4]
 800510c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800511a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	021a      	lsls	r2, r3, #8
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	431a      	orrs	r2, r3
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	4313      	orrs	r3, r2
 8005128:	697a      	ldr	r2, [r7, #20]
 800512a:	4313      	orrs	r3, r2
 800512c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	697a      	ldr	r2, [r7, #20]
 8005132:	609a      	str	r2, [r3, #8]
}
 8005134:	bf00      	nop
 8005136:	371c      	adds	r7, #28
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr

08005140 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005140:	b480      	push	{r7}
 8005142:	b087      	sub	sp, #28
 8005144:	af00      	add	r7, sp, #0
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	60b9      	str	r1, [r7, #8]
 800514a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	f003 031f 	and.w	r3, r3, #31
 8005152:	2201      	movs	r2, #1
 8005154:	fa02 f303 	lsl.w	r3, r2, r3
 8005158:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	6a1a      	ldr	r2, [r3, #32]
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	43db      	mvns	r3, r3
 8005162:	401a      	ands	r2, r3
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	6a1a      	ldr	r2, [r3, #32]
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	f003 031f 	and.w	r3, r3, #31
 8005172:	6879      	ldr	r1, [r7, #4]
 8005174:	fa01 f303 	lsl.w	r3, r1, r3
 8005178:	431a      	orrs	r2, r3
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	621a      	str	r2, [r3, #32]
}
 800517e:	bf00      	nop
 8005180:	371c      	adds	r7, #28
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr
	...

0800518c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800518c:	b480      	push	{r7}
 800518e:	b085      	sub	sp, #20
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800519c:	2b01      	cmp	r3, #1
 800519e:	d101      	bne.n	80051a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051a0:	2302      	movs	r3, #2
 80051a2:	e050      	b.n	8005246 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2202      	movs	r2, #2
 80051b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	68fa      	ldr	r2, [r7, #12]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	68fa      	ldr	r2, [r7, #12]
 80051dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a1c      	ldr	r2, [pc, #112]	; (8005254 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d018      	beq.n	800521a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051f0:	d013      	beq.n	800521a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a18      	ldr	r2, [pc, #96]	; (8005258 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d00e      	beq.n	800521a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a16      	ldr	r2, [pc, #88]	; (800525c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d009      	beq.n	800521a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a15      	ldr	r2, [pc, #84]	; (8005260 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d004      	beq.n	800521a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a13      	ldr	r2, [pc, #76]	; (8005264 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d10c      	bne.n	8005234 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005220:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	68ba      	ldr	r2, [r7, #8]
 8005228:	4313      	orrs	r3, r2
 800522a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68ba      	ldr	r2, [r7, #8]
 8005232:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005244:	2300      	movs	r3, #0
}
 8005246:	4618      	mov	r0, r3
 8005248:	3714      	adds	r7, #20
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr
 8005252:	bf00      	nop
 8005254:	40010000 	.word	0x40010000
 8005258:	40000400 	.word	0x40000400
 800525c:	40000800 	.word	0x40000800
 8005260:	40000c00 	.word	0x40000c00
 8005264:	40014000 	.word	0x40014000

08005268 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005268:	b480      	push	{r7}
 800526a:	b083      	sub	sp, #12
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005270:	bf00      	nop
 8005272:	370c      	adds	r7, #12
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr

0800527c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005284:	bf00      	nop
 8005286:	370c      	adds	r7, #12
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr

08005290 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005290:	b480      	push	{r7}
 8005292:	b085      	sub	sp, #20
 8005294:	af00      	add	r7, sp, #0
 8005296:	4603      	mov	r3, r0
 8005298:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800529a:	2300      	movs	r3, #0
 800529c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800529e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052a2:	2b84      	cmp	r3, #132	; 0x84
 80052a4:	d005      	beq.n	80052b2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80052a6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	4413      	add	r3, r2
 80052ae:	3303      	adds	r3, #3
 80052b0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80052b2:	68fb      	ldr	r3, [r7, #12]
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3714      	adds	r7, #20
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr

080052c0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80052c4:	f000 faf6 	bl	80058b4 <vTaskStartScheduler>
  
  return osOK;
 80052c8:	2300      	movs	r3, #0
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	bd80      	pop	{r7, pc}

080052ce <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80052ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052d0:	b089      	sub	sp, #36	; 0x24
 80052d2:	af04      	add	r7, sp, #16
 80052d4:	6078      	str	r0, [r7, #4]
 80052d6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	695b      	ldr	r3, [r3, #20]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d020      	beq.n	8005322 <osThreadCreate+0x54>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	699b      	ldr	r3, [r3, #24]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d01c      	beq.n	8005322 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	685c      	ldr	r4, [r3, #4]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	691e      	ldr	r6, [r3, #16]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80052fa:	4618      	mov	r0, r3
 80052fc:	f7ff ffc8 	bl	8005290 <makeFreeRtosPriority>
 8005300:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	695b      	ldr	r3, [r3, #20]
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800530a:	9202      	str	r2, [sp, #8]
 800530c:	9301      	str	r3, [sp, #4]
 800530e:	9100      	str	r1, [sp, #0]
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	4632      	mov	r2, r6
 8005314:	4629      	mov	r1, r5
 8005316:	4620      	mov	r0, r4
 8005318:	f000 f8ed 	bl	80054f6 <xTaskCreateStatic>
 800531c:	4603      	mov	r3, r0
 800531e:	60fb      	str	r3, [r7, #12]
 8005320:	e01c      	b.n	800535c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	685c      	ldr	r4, [r3, #4]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800532e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005336:	4618      	mov	r0, r3
 8005338:	f7ff ffaa 	bl	8005290 <makeFreeRtosPriority>
 800533c:	4602      	mov	r2, r0
 800533e:	f107 030c 	add.w	r3, r7, #12
 8005342:	9301      	str	r3, [sp, #4]
 8005344:	9200      	str	r2, [sp, #0]
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	4632      	mov	r2, r6
 800534a:	4629      	mov	r1, r5
 800534c:	4620      	mov	r0, r4
 800534e:	f000 f92f 	bl	80055b0 <xTaskCreate>
 8005352:	4603      	mov	r3, r0
 8005354:	2b01      	cmp	r3, #1
 8005356:	d001      	beq.n	800535c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005358:	2300      	movs	r3, #0
 800535a:	e000      	b.n	800535e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800535c:	68fb      	ldr	r3, [r7, #12]
}
 800535e:	4618      	mov	r0, r3
 8005360:	3714      	adds	r7, #20
 8005362:	46bd      	mov	sp, r7
 8005364:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005366 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005366:	b580      	push	{r7, lr}
 8005368:	b084      	sub	sp, #16
 800536a:	af00      	add	r7, sp, #0
 800536c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d001      	beq.n	800537c <osDelay+0x16>
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	e000      	b.n	800537e <osDelay+0x18>
 800537c:	2301      	movs	r3, #1
 800537e:	4618      	mov	r0, r3
 8005380:	f000 fa64 	bl	800584c <vTaskDelay>
  
  return osOK;
 8005384:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005386:	4618      	mov	r0, r3
 8005388:	3710      	adds	r7, #16
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}

0800538e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800538e:	b480      	push	{r7}
 8005390:	b083      	sub	sp, #12
 8005392:	af00      	add	r7, sp, #0
 8005394:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f103 0208 	add.w	r2, r3, #8
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f04f 32ff 	mov.w	r2, #4294967295
 80053a6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f103 0208 	add.w	r2, r3, #8
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f103 0208 	add.w	r2, r3, #8
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80053c2:	bf00      	nop
 80053c4:	370c      	adds	r7, #12
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr

080053ce <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80053ce:	b480      	push	{r7}
 80053d0:	b083      	sub	sp, #12
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2200      	movs	r2, #0
 80053da:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80053dc:	bf00      	nop
 80053de:	370c      	adds	r7, #12
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80053e8:	b480      	push	{r7}
 80053ea:	b085      	sub	sp, #20
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	68fa      	ldr	r2, [r7, #12]
 80053fc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	689a      	ldr	r2, [r3, #8]
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	683a      	ldr	r2, [r7, #0]
 800540c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	683a      	ldr	r2, [r7, #0]
 8005412:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	1c5a      	adds	r2, r3, #1
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	601a      	str	r2, [r3, #0]
}
 8005424:	bf00      	nop
 8005426:	3714      	adds	r7, #20
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005430:	b480      	push	{r7}
 8005432:	b085      	sub	sp, #20
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005446:	d103      	bne.n	8005450 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	691b      	ldr	r3, [r3, #16]
 800544c:	60fb      	str	r3, [r7, #12]
 800544e:	e00c      	b.n	800546a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	3308      	adds	r3, #8
 8005454:	60fb      	str	r3, [r7, #12]
 8005456:	e002      	b.n	800545e <vListInsert+0x2e>
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	60fb      	str	r3, [r7, #12]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	68ba      	ldr	r2, [r7, #8]
 8005466:	429a      	cmp	r2, r3
 8005468:	d2f6      	bcs.n	8005458 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	685a      	ldr	r2, [r3, #4]
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	683a      	ldr	r2, [r7, #0]
 8005478:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	68fa      	ldr	r2, [r7, #12]
 800547e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	683a      	ldr	r2, [r7, #0]
 8005484:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	1c5a      	adds	r2, r3, #1
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	601a      	str	r2, [r3, #0]
}
 8005496:	bf00      	nop
 8005498:	3714      	adds	r7, #20
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr

080054a2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80054a2:	b480      	push	{r7}
 80054a4:	b085      	sub	sp, #20
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	6892      	ldr	r2, [r2, #8]
 80054b8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	687a      	ldr	r2, [r7, #4]
 80054c0:	6852      	ldr	r2, [r2, #4]
 80054c2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d103      	bne.n	80054d6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	689a      	ldr	r2, [r3, #8]
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	1e5a      	subs	r2, r3, #1
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3714      	adds	r7, #20
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr

080054f6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80054f6:	b580      	push	{r7, lr}
 80054f8:	b08e      	sub	sp, #56	; 0x38
 80054fa:	af04      	add	r7, sp, #16
 80054fc:	60f8      	str	r0, [r7, #12]
 80054fe:	60b9      	str	r1, [r7, #8]
 8005500:	607a      	str	r2, [r7, #4]
 8005502:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005506:	2b00      	cmp	r3, #0
 8005508:	d10a      	bne.n	8005520 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800550a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800550e:	f383 8811 	msr	BASEPRI, r3
 8005512:	f3bf 8f6f 	isb	sy
 8005516:	f3bf 8f4f 	dsb	sy
 800551a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800551c:	bf00      	nop
 800551e:	e7fe      	b.n	800551e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005522:	2b00      	cmp	r3, #0
 8005524:	d10a      	bne.n	800553c <xTaskCreateStatic+0x46>
	__asm volatile
 8005526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800552a:	f383 8811 	msr	BASEPRI, r3
 800552e:	f3bf 8f6f 	isb	sy
 8005532:	f3bf 8f4f 	dsb	sy
 8005536:	61fb      	str	r3, [r7, #28]
}
 8005538:	bf00      	nop
 800553a:	e7fe      	b.n	800553a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800553c:	23a0      	movs	r3, #160	; 0xa0
 800553e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	2ba0      	cmp	r3, #160	; 0xa0
 8005544:	d00a      	beq.n	800555c <xTaskCreateStatic+0x66>
	__asm volatile
 8005546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800554a:	f383 8811 	msr	BASEPRI, r3
 800554e:	f3bf 8f6f 	isb	sy
 8005552:	f3bf 8f4f 	dsb	sy
 8005556:	61bb      	str	r3, [r7, #24]
}
 8005558:	bf00      	nop
 800555a:	e7fe      	b.n	800555a <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800555c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800555e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005560:	2b00      	cmp	r3, #0
 8005562:	d01e      	beq.n	80055a2 <xTaskCreateStatic+0xac>
 8005564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005566:	2b00      	cmp	r3, #0
 8005568:	d01b      	beq.n	80055a2 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800556a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800556c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800556e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005570:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005572:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005576:	2202      	movs	r2, #2
 8005578:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800557c:	2300      	movs	r3, #0
 800557e:	9303      	str	r3, [sp, #12]
 8005580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005582:	9302      	str	r3, [sp, #8]
 8005584:	f107 0314 	add.w	r3, r7, #20
 8005588:	9301      	str	r3, [sp, #4]
 800558a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800558c:	9300      	str	r3, [sp, #0]
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	687a      	ldr	r2, [r7, #4]
 8005592:	68b9      	ldr	r1, [r7, #8]
 8005594:	68f8      	ldr	r0, [r7, #12]
 8005596:	f000 f851 	bl	800563c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800559a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800559c:	f000 f8ec 	bl	8005778 <prvAddNewTaskToReadyList>
 80055a0:	e001      	b.n	80055a6 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80055a2:	2300      	movs	r3, #0
 80055a4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80055a6:	697b      	ldr	r3, [r7, #20]
	}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3728      	adds	r7, #40	; 0x28
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}

080055b0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b08c      	sub	sp, #48	; 0x30
 80055b4:	af04      	add	r7, sp, #16
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	60b9      	str	r1, [r7, #8]
 80055ba:	603b      	str	r3, [r7, #0]
 80055bc:	4613      	mov	r3, r2
 80055be:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80055c0:	88fb      	ldrh	r3, [r7, #6]
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	4618      	mov	r0, r3
 80055c6:	f000 feef 	bl	80063a8 <pvPortMalloc>
 80055ca:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d00e      	beq.n	80055f0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80055d2:	20a0      	movs	r0, #160	; 0xa0
 80055d4:	f000 fee8 	bl	80063a8 <pvPortMalloc>
 80055d8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80055da:	69fb      	ldr	r3, [r7, #28]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d003      	beq.n	80055e8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80055e0:	69fb      	ldr	r3, [r7, #28]
 80055e2:	697a      	ldr	r2, [r7, #20]
 80055e4:	631a      	str	r2, [r3, #48]	; 0x30
 80055e6:	e005      	b.n	80055f4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80055e8:	6978      	ldr	r0, [r7, #20]
 80055ea:	f000 ffa9 	bl	8006540 <vPortFree>
 80055ee:	e001      	b.n	80055f4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80055f0:	2300      	movs	r3, #0
 80055f2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d017      	beq.n	800562a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80055fa:	69fb      	ldr	r3, [r7, #28]
 80055fc:	2200      	movs	r2, #0
 80055fe:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005602:	88fa      	ldrh	r2, [r7, #6]
 8005604:	2300      	movs	r3, #0
 8005606:	9303      	str	r3, [sp, #12]
 8005608:	69fb      	ldr	r3, [r7, #28]
 800560a:	9302      	str	r3, [sp, #8]
 800560c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800560e:	9301      	str	r3, [sp, #4]
 8005610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005612:	9300      	str	r3, [sp, #0]
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	68b9      	ldr	r1, [r7, #8]
 8005618:	68f8      	ldr	r0, [r7, #12]
 800561a:	f000 f80f 	bl	800563c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800561e:	69f8      	ldr	r0, [r7, #28]
 8005620:	f000 f8aa 	bl	8005778 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005624:	2301      	movs	r3, #1
 8005626:	61bb      	str	r3, [r7, #24]
 8005628:	e002      	b.n	8005630 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800562a:	f04f 33ff 	mov.w	r3, #4294967295
 800562e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005630:	69bb      	ldr	r3, [r7, #24]
	}
 8005632:	4618      	mov	r0, r3
 8005634:	3720      	adds	r7, #32
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
	...

0800563c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b088      	sub	sp, #32
 8005640:	af00      	add	r7, sp, #0
 8005642:	60f8      	str	r0, [r7, #12]
 8005644:	60b9      	str	r1, [r7, #8]
 8005646:	607a      	str	r2, [r7, #4]
 8005648:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800564a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800564c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005654:	3b01      	subs	r3, #1
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	4413      	add	r3, r2
 800565a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800565c:	69bb      	ldr	r3, [r7, #24]
 800565e:	f023 0307 	bic.w	r3, r3, #7
 8005662:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005664:	69bb      	ldr	r3, [r7, #24]
 8005666:	f003 0307 	and.w	r3, r3, #7
 800566a:	2b00      	cmp	r3, #0
 800566c:	d00a      	beq.n	8005684 <prvInitialiseNewTask+0x48>
	__asm volatile
 800566e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005672:	f383 8811 	msr	BASEPRI, r3
 8005676:	f3bf 8f6f 	isb	sy
 800567a:	f3bf 8f4f 	dsb	sy
 800567e:	617b      	str	r3, [r7, #20]
}
 8005680:	bf00      	nop
 8005682:	e7fe      	b.n	8005682 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d01f      	beq.n	80056ca <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800568a:	2300      	movs	r3, #0
 800568c:	61fb      	str	r3, [r7, #28]
 800568e:	e012      	b.n	80056b6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005690:	68ba      	ldr	r2, [r7, #8]
 8005692:	69fb      	ldr	r3, [r7, #28]
 8005694:	4413      	add	r3, r2
 8005696:	7819      	ldrb	r1, [r3, #0]
 8005698:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800569a:	69fb      	ldr	r3, [r7, #28]
 800569c:	4413      	add	r3, r2
 800569e:	3334      	adds	r3, #52	; 0x34
 80056a0:	460a      	mov	r2, r1
 80056a2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80056a4:	68ba      	ldr	r2, [r7, #8]
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	4413      	add	r3, r2
 80056aa:	781b      	ldrb	r3, [r3, #0]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d006      	beq.n	80056be <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80056b0:	69fb      	ldr	r3, [r7, #28]
 80056b2:	3301      	adds	r3, #1
 80056b4:	61fb      	str	r3, [r7, #28]
 80056b6:	69fb      	ldr	r3, [r7, #28]
 80056b8:	2b0f      	cmp	r3, #15
 80056ba:	d9e9      	bls.n	8005690 <prvInitialiseNewTask+0x54>
 80056bc:	e000      	b.n	80056c0 <prvInitialiseNewTask+0x84>
			{
				break;
 80056be:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80056c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c2:	2200      	movs	r2, #0
 80056c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80056c8:	e003      	b.n	80056d2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80056ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056cc:	2200      	movs	r2, #0
 80056ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80056d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056d4:	2b06      	cmp	r3, #6
 80056d6:	d901      	bls.n	80056dc <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80056d8:	2306      	movs	r3, #6
 80056da:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80056dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056e0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80056e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056e6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80056e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ea:	2200      	movs	r2, #0
 80056ec:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80056ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f0:	3304      	adds	r3, #4
 80056f2:	4618      	mov	r0, r3
 80056f4:	f7ff fe6b 	bl	80053ce <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80056f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056fa:	3318      	adds	r3, #24
 80056fc:	4618      	mov	r0, r3
 80056fe:	f7ff fe66 	bl	80053ce <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005704:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005706:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800570a:	f1c3 0207 	rsb	r2, r3, #7
 800570e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005710:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005714:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005716:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800571a:	2200      	movs	r2, #0
 800571c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005722:	2200      	movs	r2, #0
 8005724:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800572a:	334c      	adds	r3, #76	; 0x4c
 800572c:	224c      	movs	r2, #76	; 0x4c
 800572e:	2100      	movs	r1, #0
 8005730:	4618      	mov	r0, r3
 8005732:	f001 f843 	bl	80067bc <memset>
 8005736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005738:	4a0c      	ldr	r2, [pc, #48]	; (800576c <prvInitialiseNewTask+0x130>)
 800573a:	651a      	str	r2, [r3, #80]	; 0x50
 800573c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800573e:	4a0c      	ldr	r2, [pc, #48]	; (8005770 <prvInitialiseNewTask+0x134>)
 8005740:	655a      	str	r2, [r3, #84]	; 0x54
 8005742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005744:	4a0b      	ldr	r2, [pc, #44]	; (8005774 <prvInitialiseNewTask+0x138>)
 8005746:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005748:	683a      	ldr	r2, [r7, #0]
 800574a:	68f9      	ldr	r1, [r7, #12]
 800574c:	69b8      	ldr	r0, [r7, #24]
 800574e:	f000 fc1f 	bl	8005f90 <pxPortInitialiseStack>
 8005752:	4602      	mov	r2, r0
 8005754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005756:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800575a:	2b00      	cmp	r3, #0
 800575c:	d002      	beq.n	8005764 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800575e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005760:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005762:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005764:	bf00      	nop
 8005766:	3720      	adds	r7, #32
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}
 800576c:	200042c8 	.word	0x200042c8
 8005770:	20004330 	.word	0x20004330
 8005774:	20004398 	.word	0x20004398

08005778 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b082      	sub	sp, #8
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005780:	f000 fd30 	bl	80061e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005784:	4b2a      	ldr	r3, [pc, #168]	; (8005830 <prvAddNewTaskToReadyList+0xb8>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	3301      	adds	r3, #1
 800578a:	4a29      	ldr	r2, [pc, #164]	; (8005830 <prvAddNewTaskToReadyList+0xb8>)
 800578c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800578e:	4b29      	ldr	r3, [pc, #164]	; (8005834 <prvAddNewTaskToReadyList+0xbc>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d109      	bne.n	80057aa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005796:	4a27      	ldr	r2, [pc, #156]	; (8005834 <prvAddNewTaskToReadyList+0xbc>)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800579c:	4b24      	ldr	r3, [pc, #144]	; (8005830 <prvAddNewTaskToReadyList+0xb8>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d110      	bne.n	80057c6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80057a4:	f000 facc 	bl	8005d40 <prvInitialiseTaskLists>
 80057a8:	e00d      	b.n	80057c6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80057aa:	4b23      	ldr	r3, [pc, #140]	; (8005838 <prvAddNewTaskToReadyList+0xc0>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d109      	bne.n	80057c6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80057b2:	4b20      	ldr	r3, [pc, #128]	; (8005834 <prvAddNewTaskToReadyList+0xbc>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057bc:	429a      	cmp	r2, r3
 80057be:	d802      	bhi.n	80057c6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80057c0:	4a1c      	ldr	r2, [pc, #112]	; (8005834 <prvAddNewTaskToReadyList+0xbc>)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80057c6:	4b1d      	ldr	r3, [pc, #116]	; (800583c <prvAddNewTaskToReadyList+0xc4>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	3301      	adds	r3, #1
 80057cc:	4a1b      	ldr	r2, [pc, #108]	; (800583c <prvAddNewTaskToReadyList+0xc4>)
 80057ce:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d4:	2201      	movs	r2, #1
 80057d6:	409a      	lsls	r2, r3
 80057d8:	4b19      	ldr	r3, [pc, #100]	; (8005840 <prvAddNewTaskToReadyList+0xc8>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4313      	orrs	r3, r2
 80057de:	4a18      	ldr	r2, [pc, #96]	; (8005840 <prvAddNewTaskToReadyList+0xc8>)
 80057e0:	6013      	str	r3, [r2, #0]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057e6:	4613      	mov	r3, r2
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	4413      	add	r3, r2
 80057ec:	009b      	lsls	r3, r3, #2
 80057ee:	4a15      	ldr	r2, [pc, #84]	; (8005844 <prvAddNewTaskToReadyList+0xcc>)
 80057f0:	441a      	add	r2, r3
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	3304      	adds	r3, #4
 80057f6:	4619      	mov	r1, r3
 80057f8:	4610      	mov	r0, r2
 80057fa:	f7ff fdf5 	bl	80053e8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80057fe:	f000 fd21 	bl	8006244 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005802:	4b0d      	ldr	r3, [pc, #52]	; (8005838 <prvAddNewTaskToReadyList+0xc0>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d00e      	beq.n	8005828 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800580a:	4b0a      	ldr	r3, [pc, #40]	; (8005834 <prvAddNewTaskToReadyList+0xbc>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005814:	429a      	cmp	r2, r3
 8005816:	d207      	bcs.n	8005828 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005818:	4b0b      	ldr	r3, [pc, #44]	; (8005848 <prvAddNewTaskToReadyList+0xd0>)
 800581a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800581e:	601a      	str	r2, [r3, #0]
 8005820:	f3bf 8f4f 	dsb	sy
 8005824:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005828:	bf00      	nop
 800582a:	3708      	adds	r7, #8
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}
 8005830:	20000674 	.word	0x20000674
 8005834:	20000574 	.word	0x20000574
 8005838:	20000680 	.word	0x20000680
 800583c:	20000690 	.word	0x20000690
 8005840:	2000067c 	.word	0x2000067c
 8005844:	20000578 	.word	0x20000578
 8005848:	e000ed04 	.word	0xe000ed04

0800584c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800584c:	b580      	push	{r7, lr}
 800584e:	b084      	sub	sp, #16
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005854:	2300      	movs	r3, #0
 8005856:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d017      	beq.n	800588e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800585e:	4b13      	ldr	r3, [pc, #76]	; (80058ac <vTaskDelay+0x60>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d00a      	beq.n	800587c <vTaskDelay+0x30>
	__asm volatile
 8005866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800586a:	f383 8811 	msr	BASEPRI, r3
 800586e:	f3bf 8f6f 	isb	sy
 8005872:	f3bf 8f4f 	dsb	sy
 8005876:	60bb      	str	r3, [r7, #8]
}
 8005878:	bf00      	nop
 800587a:	e7fe      	b.n	800587a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800587c:	f000 f884 	bl	8005988 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005880:	2100      	movs	r1, #0
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f000 fb1e 	bl	8005ec4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005888:	f000 f88c 	bl	80059a4 <xTaskResumeAll>
 800588c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d107      	bne.n	80058a4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005894:	4b06      	ldr	r3, [pc, #24]	; (80058b0 <vTaskDelay+0x64>)
 8005896:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800589a:	601a      	str	r2, [r3, #0]
 800589c:	f3bf 8f4f 	dsb	sy
 80058a0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80058a4:	bf00      	nop
 80058a6:	3710      	adds	r7, #16
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}
 80058ac:	2000069c 	.word	0x2000069c
 80058b0:	e000ed04 	.word	0xe000ed04

080058b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b08a      	sub	sp, #40	; 0x28
 80058b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80058ba:	2300      	movs	r3, #0
 80058bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80058be:	2300      	movs	r3, #0
 80058c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80058c2:	463a      	mov	r2, r7
 80058c4:	1d39      	adds	r1, r7, #4
 80058c6:	f107 0308 	add.w	r3, r7, #8
 80058ca:	4618      	mov	r0, r3
 80058cc:	f7fb faec 	bl	8000ea8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80058d0:	6839      	ldr	r1, [r7, #0]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	68ba      	ldr	r2, [r7, #8]
 80058d6:	9202      	str	r2, [sp, #8]
 80058d8:	9301      	str	r3, [sp, #4]
 80058da:	2300      	movs	r3, #0
 80058dc:	9300      	str	r3, [sp, #0]
 80058de:	2300      	movs	r3, #0
 80058e0:	460a      	mov	r2, r1
 80058e2:	4921      	ldr	r1, [pc, #132]	; (8005968 <vTaskStartScheduler+0xb4>)
 80058e4:	4821      	ldr	r0, [pc, #132]	; (800596c <vTaskStartScheduler+0xb8>)
 80058e6:	f7ff fe06 	bl	80054f6 <xTaskCreateStatic>
 80058ea:	4603      	mov	r3, r0
 80058ec:	4a20      	ldr	r2, [pc, #128]	; (8005970 <vTaskStartScheduler+0xbc>)
 80058ee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80058f0:	4b1f      	ldr	r3, [pc, #124]	; (8005970 <vTaskStartScheduler+0xbc>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d002      	beq.n	80058fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80058f8:	2301      	movs	r3, #1
 80058fa:	617b      	str	r3, [r7, #20]
 80058fc:	e001      	b.n	8005902 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80058fe:	2300      	movs	r3, #0
 8005900:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	2b01      	cmp	r3, #1
 8005906:	d11b      	bne.n	8005940 <vTaskStartScheduler+0x8c>
	__asm volatile
 8005908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800590c:	f383 8811 	msr	BASEPRI, r3
 8005910:	f3bf 8f6f 	isb	sy
 8005914:	f3bf 8f4f 	dsb	sy
 8005918:	613b      	str	r3, [r7, #16]
}
 800591a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800591c:	4b15      	ldr	r3, [pc, #84]	; (8005974 <vTaskStartScheduler+0xc0>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	334c      	adds	r3, #76	; 0x4c
 8005922:	4a15      	ldr	r2, [pc, #84]	; (8005978 <vTaskStartScheduler+0xc4>)
 8005924:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005926:	4b15      	ldr	r3, [pc, #84]	; (800597c <vTaskStartScheduler+0xc8>)
 8005928:	f04f 32ff 	mov.w	r2, #4294967295
 800592c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800592e:	4b14      	ldr	r3, [pc, #80]	; (8005980 <vTaskStartScheduler+0xcc>)
 8005930:	2201      	movs	r2, #1
 8005932:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005934:	4b13      	ldr	r3, [pc, #76]	; (8005984 <vTaskStartScheduler+0xd0>)
 8005936:	2200      	movs	r2, #0
 8005938:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800593a:	f000 fbb1 	bl	80060a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800593e:	e00e      	b.n	800595e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005946:	d10a      	bne.n	800595e <vTaskStartScheduler+0xaa>
	__asm volatile
 8005948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800594c:	f383 8811 	msr	BASEPRI, r3
 8005950:	f3bf 8f6f 	isb	sy
 8005954:	f3bf 8f4f 	dsb	sy
 8005958:	60fb      	str	r3, [r7, #12]
}
 800595a:	bf00      	nop
 800595c:	e7fe      	b.n	800595c <vTaskStartScheduler+0xa8>
}
 800595e:	bf00      	nop
 8005960:	3718      	adds	r7, #24
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
 8005966:	bf00      	nop
 8005968:	08007338 	.word	0x08007338
 800596c:	08005d11 	.word	0x08005d11
 8005970:	20000698 	.word	0x20000698
 8005974:	20000574 	.word	0x20000574
 8005978:	20000130 	.word	0x20000130
 800597c:	20000694 	.word	0x20000694
 8005980:	20000680 	.word	0x20000680
 8005984:	20000678 	.word	0x20000678

08005988 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005988:	b480      	push	{r7}
 800598a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800598c:	4b04      	ldr	r3, [pc, #16]	; (80059a0 <vTaskSuspendAll+0x18>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	3301      	adds	r3, #1
 8005992:	4a03      	ldr	r2, [pc, #12]	; (80059a0 <vTaskSuspendAll+0x18>)
 8005994:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005996:	bf00      	nop
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr
 80059a0:	2000069c 	.word	0x2000069c

080059a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b084      	sub	sp, #16
 80059a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80059aa:	2300      	movs	r3, #0
 80059ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80059ae:	2300      	movs	r3, #0
 80059b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80059b2:	4b41      	ldr	r3, [pc, #260]	; (8005ab8 <xTaskResumeAll+0x114>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d10a      	bne.n	80059d0 <xTaskResumeAll+0x2c>
	__asm volatile
 80059ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059be:	f383 8811 	msr	BASEPRI, r3
 80059c2:	f3bf 8f6f 	isb	sy
 80059c6:	f3bf 8f4f 	dsb	sy
 80059ca:	603b      	str	r3, [r7, #0]
}
 80059cc:	bf00      	nop
 80059ce:	e7fe      	b.n	80059ce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80059d0:	f000 fc08 	bl	80061e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80059d4:	4b38      	ldr	r3, [pc, #224]	; (8005ab8 <xTaskResumeAll+0x114>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	3b01      	subs	r3, #1
 80059da:	4a37      	ldr	r2, [pc, #220]	; (8005ab8 <xTaskResumeAll+0x114>)
 80059dc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059de:	4b36      	ldr	r3, [pc, #216]	; (8005ab8 <xTaskResumeAll+0x114>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d161      	bne.n	8005aaa <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80059e6:	4b35      	ldr	r3, [pc, #212]	; (8005abc <xTaskResumeAll+0x118>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d05d      	beq.n	8005aaa <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80059ee:	e02e      	b.n	8005a4e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059f0:	4b33      	ldr	r3, [pc, #204]	; (8005ac0 <xTaskResumeAll+0x11c>)
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	68db      	ldr	r3, [r3, #12]
 80059f6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	3318      	adds	r3, #24
 80059fc:	4618      	mov	r0, r3
 80059fe:	f7ff fd50 	bl	80054a2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	3304      	adds	r3, #4
 8005a06:	4618      	mov	r0, r3
 8005a08:	f7ff fd4b 	bl	80054a2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a10:	2201      	movs	r2, #1
 8005a12:	409a      	lsls	r2, r3
 8005a14:	4b2b      	ldr	r3, [pc, #172]	; (8005ac4 <xTaskResumeAll+0x120>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	4a2a      	ldr	r2, [pc, #168]	; (8005ac4 <xTaskResumeAll+0x120>)
 8005a1c:	6013      	str	r3, [r2, #0]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a22:	4613      	mov	r3, r2
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	4413      	add	r3, r2
 8005a28:	009b      	lsls	r3, r3, #2
 8005a2a:	4a27      	ldr	r2, [pc, #156]	; (8005ac8 <xTaskResumeAll+0x124>)
 8005a2c:	441a      	add	r2, r3
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	3304      	adds	r3, #4
 8005a32:	4619      	mov	r1, r3
 8005a34:	4610      	mov	r0, r2
 8005a36:	f7ff fcd7 	bl	80053e8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a3e:	4b23      	ldr	r3, [pc, #140]	; (8005acc <xTaskResumeAll+0x128>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d302      	bcc.n	8005a4e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005a48:	4b21      	ldr	r3, [pc, #132]	; (8005ad0 <xTaskResumeAll+0x12c>)
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005a4e:	4b1c      	ldr	r3, [pc, #112]	; (8005ac0 <xTaskResumeAll+0x11c>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d1cc      	bne.n	80059f0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d001      	beq.n	8005a60 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005a5c:	f000 fa12 	bl	8005e84 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005a60:	4b1c      	ldr	r3, [pc, #112]	; (8005ad4 <xTaskResumeAll+0x130>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d010      	beq.n	8005a8e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005a6c:	f000 f836 	bl	8005adc <xTaskIncrementTick>
 8005a70:	4603      	mov	r3, r0
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d002      	beq.n	8005a7c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005a76:	4b16      	ldr	r3, [pc, #88]	; (8005ad0 <xTaskResumeAll+0x12c>)
 8005a78:	2201      	movs	r2, #1
 8005a7a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	3b01      	subs	r3, #1
 8005a80:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d1f1      	bne.n	8005a6c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8005a88:	4b12      	ldr	r3, [pc, #72]	; (8005ad4 <xTaskResumeAll+0x130>)
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005a8e:	4b10      	ldr	r3, [pc, #64]	; (8005ad0 <xTaskResumeAll+0x12c>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d009      	beq.n	8005aaa <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005a96:	2301      	movs	r3, #1
 8005a98:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005a9a:	4b0f      	ldr	r3, [pc, #60]	; (8005ad8 <xTaskResumeAll+0x134>)
 8005a9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005aa0:	601a      	str	r2, [r3, #0]
 8005aa2:	f3bf 8f4f 	dsb	sy
 8005aa6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005aaa:	f000 fbcb 	bl	8006244 <vPortExitCritical>

	return xAlreadyYielded;
 8005aae:	68bb      	ldr	r3, [r7, #8]
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3710      	adds	r7, #16
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}
 8005ab8:	2000069c 	.word	0x2000069c
 8005abc:	20000674 	.word	0x20000674
 8005ac0:	20000634 	.word	0x20000634
 8005ac4:	2000067c 	.word	0x2000067c
 8005ac8:	20000578 	.word	0x20000578
 8005acc:	20000574 	.word	0x20000574
 8005ad0:	20000688 	.word	0x20000688
 8005ad4:	20000684 	.word	0x20000684
 8005ad8:	e000ed04 	.word	0xe000ed04

08005adc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b086      	sub	sp, #24
 8005ae0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ae6:	4b4e      	ldr	r3, [pc, #312]	; (8005c20 <xTaskIncrementTick+0x144>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	f040 808e 	bne.w	8005c0c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005af0:	4b4c      	ldr	r3, [pc, #304]	; (8005c24 <xTaskIncrementTick+0x148>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	3301      	adds	r3, #1
 8005af6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005af8:	4a4a      	ldr	r2, [pc, #296]	; (8005c24 <xTaskIncrementTick+0x148>)
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d120      	bne.n	8005b46 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005b04:	4b48      	ldr	r3, [pc, #288]	; (8005c28 <xTaskIncrementTick+0x14c>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d00a      	beq.n	8005b24 <xTaskIncrementTick+0x48>
	__asm volatile
 8005b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b12:	f383 8811 	msr	BASEPRI, r3
 8005b16:	f3bf 8f6f 	isb	sy
 8005b1a:	f3bf 8f4f 	dsb	sy
 8005b1e:	603b      	str	r3, [r7, #0]
}
 8005b20:	bf00      	nop
 8005b22:	e7fe      	b.n	8005b22 <xTaskIncrementTick+0x46>
 8005b24:	4b40      	ldr	r3, [pc, #256]	; (8005c28 <xTaskIncrementTick+0x14c>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	60fb      	str	r3, [r7, #12]
 8005b2a:	4b40      	ldr	r3, [pc, #256]	; (8005c2c <xTaskIncrementTick+0x150>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a3e      	ldr	r2, [pc, #248]	; (8005c28 <xTaskIncrementTick+0x14c>)
 8005b30:	6013      	str	r3, [r2, #0]
 8005b32:	4a3e      	ldr	r2, [pc, #248]	; (8005c2c <xTaskIncrementTick+0x150>)
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	6013      	str	r3, [r2, #0]
 8005b38:	4b3d      	ldr	r3, [pc, #244]	; (8005c30 <xTaskIncrementTick+0x154>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	3301      	adds	r3, #1
 8005b3e:	4a3c      	ldr	r2, [pc, #240]	; (8005c30 <xTaskIncrementTick+0x154>)
 8005b40:	6013      	str	r3, [r2, #0]
 8005b42:	f000 f99f 	bl	8005e84 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005b46:	4b3b      	ldr	r3, [pc, #236]	; (8005c34 <xTaskIncrementTick+0x158>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	693a      	ldr	r2, [r7, #16]
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d348      	bcc.n	8005be2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b50:	4b35      	ldr	r3, [pc, #212]	; (8005c28 <xTaskIncrementTick+0x14c>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d104      	bne.n	8005b64 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b5a:	4b36      	ldr	r3, [pc, #216]	; (8005c34 <xTaskIncrementTick+0x158>)
 8005b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8005b60:	601a      	str	r2, [r3, #0]
					break;
 8005b62:	e03e      	b.n	8005be2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b64:	4b30      	ldr	r3, [pc, #192]	; (8005c28 <xTaskIncrementTick+0x14c>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	68db      	ldr	r3, [r3, #12]
 8005b6a:	68db      	ldr	r3, [r3, #12]
 8005b6c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005b74:	693a      	ldr	r2, [r7, #16]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d203      	bcs.n	8005b84 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005b7c:	4a2d      	ldr	r2, [pc, #180]	; (8005c34 <xTaskIncrementTick+0x158>)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005b82:	e02e      	b.n	8005be2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	3304      	adds	r3, #4
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f7ff fc8a 	bl	80054a2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d004      	beq.n	8005ba0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	3318      	adds	r3, #24
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f7ff fc81 	bl	80054a2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	409a      	lsls	r2, r3
 8005ba8:	4b23      	ldr	r3, [pc, #140]	; (8005c38 <xTaskIncrementTick+0x15c>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4313      	orrs	r3, r2
 8005bae:	4a22      	ldr	r2, [pc, #136]	; (8005c38 <xTaskIncrementTick+0x15c>)
 8005bb0:	6013      	str	r3, [r2, #0]
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bb6:	4613      	mov	r3, r2
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	4413      	add	r3, r2
 8005bbc:	009b      	lsls	r3, r3, #2
 8005bbe:	4a1f      	ldr	r2, [pc, #124]	; (8005c3c <xTaskIncrementTick+0x160>)
 8005bc0:	441a      	add	r2, r3
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	3304      	adds	r3, #4
 8005bc6:	4619      	mov	r1, r3
 8005bc8:	4610      	mov	r0, r2
 8005bca:	f7ff fc0d 	bl	80053e8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bd2:	4b1b      	ldr	r3, [pc, #108]	; (8005c40 <xTaskIncrementTick+0x164>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d3b9      	bcc.n	8005b50 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005be0:	e7b6      	b.n	8005b50 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005be2:	4b17      	ldr	r3, [pc, #92]	; (8005c40 <xTaskIncrementTick+0x164>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005be8:	4914      	ldr	r1, [pc, #80]	; (8005c3c <xTaskIncrementTick+0x160>)
 8005bea:	4613      	mov	r3, r2
 8005bec:	009b      	lsls	r3, r3, #2
 8005bee:	4413      	add	r3, r2
 8005bf0:	009b      	lsls	r3, r3, #2
 8005bf2:	440b      	add	r3, r1
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	d901      	bls.n	8005bfe <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005bfe:	4b11      	ldr	r3, [pc, #68]	; (8005c44 <xTaskIncrementTick+0x168>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d007      	beq.n	8005c16 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005c06:	2301      	movs	r3, #1
 8005c08:	617b      	str	r3, [r7, #20]
 8005c0a:	e004      	b.n	8005c16 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005c0c:	4b0e      	ldr	r3, [pc, #56]	; (8005c48 <xTaskIncrementTick+0x16c>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	3301      	adds	r3, #1
 8005c12:	4a0d      	ldr	r2, [pc, #52]	; (8005c48 <xTaskIncrementTick+0x16c>)
 8005c14:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005c16:	697b      	ldr	r3, [r7, #20]
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3718      	adds	r7, #24
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}
 8005c20:	2000069c 	.word	0x2000069c
 8005c24:	20000678 	.word	0x20000678
 8005c28:	2000062c 	.word	0x2000062c
 8005c2c:	20000630 	.word	0x20000630
 8005c30:	2000068c 	.word	0x2000068c
 8005c34:	20000694 	.word	0x20000694
 8005c38:	2000067c 	.word	0x2000067c
 8005c3c:	20000578 	.word	0x20000578
 8005c40:	20000574 	.word	0x20000574
 8005c44:	20000688 	.word	0x20000688
 8005c48:	20000684 	.word	0x20000684

08005c4c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b087      	sub	sp, #28
 8005c50:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005c52:	4b29      	ldr	r3, [pc, #164]	; (8005cf8 <vTaskSwitchContext+0xac>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d003      	beq.n	8005c62 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005c5a:	4b28      	ldr	r3, [pc, #160]	; (8005cfc <vTaskSwitchContext+0xb0>)
 8005c5c:	2201      	movs	r2, #1
 8005c5e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005c60:	e044      	b.n	8005cec <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8005c62:	4b26      	ldr	r3, [pc, #152]	; (8005cfc <vTaskSwitchContext+0xb0>)
 8005c64:	2200      	movs	r2, #0
 8005c66:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c68:	4b25      	ldr	r3, [pc, #148]	; (8005d00 <vTaskSwitchContext+0xb4>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	fab3 f383 	clz	r3, r3
 8005c74:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005c76:	7afb      	ldrb	r3, [r7, #11]
 8005c78:	f1c3 031f 	rsb	r3, r3, #31
 8005c7c:	617b      	str	r3, [r7, #20]
 8005c7e:	4921      	ldr	r1, [pc, #132]	; (8005d04 <vTaskSwitchContext+0xb8>)
 8005c80:	697a      	ldr	r2, [r7, #20]
 8005c82:	4613      	mov	r3, r2
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	4413      	add	r3, r2
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	440b      	add	r3, r1
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d10a      	bne.n	8005ca8 <vTaskSwitchContext+0x5c>
	__asm volatile
 8005c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c96:	f383 8811 	msr	BASEPRI, r3
 8005c9a:	f3bf 8f6f 	isb	sy
 8005c9e:	f3bf 8f4f 	dsb	sy
 8005ca2:	607b      	str	r3, [r7, #4]
}
 8005ca4:	bf00      	nop
 8005ca6:	e7fe      	b.n	8005ca6 <vTaskSwitchContext+0x5a>
 8005ca8:	697a      	ldr	r2, [r7, #20]
 8005caa:	4613      	mov	r3, r2
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	4413      	add	r3, r2
 8005cb0:	009b      	lsls	r3, r3, #2
 8005cb2:	4a14      	ldr	r2, [pc, #80]	; (8005d04 <vTaskSwitchContext+0xb8>)
 8005cb4:	4413      	add	r3, r2
 8005cb6:	613b      	str	r3, [r7, #16]
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	685a      	ldr	r2, [r3, #4]
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	605a      	str	r2, [r3, #4]
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	685a      	ldr	r2, [r3, #4]
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	3308      	adds	r3, #8
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d104      	bne.n	8005cd8 <vTaskSwitchContext+0x8c>
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	685a      	ldr	r2, [r3, #4]
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	605a      	str	r2, [r3, #4]
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	68db      	ldr	r3, [r3, #12]
 8005cde:	4a0a      	ldr	r2, [pc, #40]	; (8005d08 <vTaskSwitchContext+0xbc>)
 8005ce0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005ce2:	4b09      	ldr	r3, [pc, #36]	; (8005d08 <vTaskSwitchContext+0xbc>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	334c      	adds	r3, #76	; 0x4c
 8005ce8:	4a08      	ldr	r2, [pc, #32]	; (8005d0c <vTaskSwitchContext+0xc0>)
 8005cea:	6013      	str	r3, [r2, #0]
}
 8005cec:	bf00      	nop
 8005cee:	371c      	adds	r7, #28
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr
 8005cf8:	2000069c 	.word	0x2000069c
 8005cfc:	20000688 	.word	0x20000688
 8005d00:	2000067c 	.word	0x2000067c
 8005d04:	20000578 	.word	0x20000578
 8005d08:	20000574 	.word	0x20000574
 8005d0c:	20000130 	.word	0x20000130

08005d10 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b082      	sub	sp, #8
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005d18:	f000 f852 	bl	8005dc0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005d1c:	4b06      	ldr	r3, [pc, #24]	; (8005d38 <prvIdleTask+0x28>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d9f9      	bls.n	8005d18 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005d24:	4b05      	ldr	r3, [pc, #20]	; (8005d3c <prvIdleTask+0x2c>)
 8005d26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d2a:	601a      	str	r2, [r3, #0]
 8005d2c:	f3bf 8f4f 	dsb	sy
 8005d30:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005d34:	e7f0      	b.n	8005d18 <prvIdleTask+0x8>
 8005d36:	bf00      	nop
 8005d38:	20000578 	.word	0x20000578
 8005d3c:	e000ed04 	.word	0xe000ed04

08005d40 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b082      	sub	sp, #8
 8005d44:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d46:	2300      	movs	r3, #0
 8005d48:	607b      	str	r3, [r7, #4]
 8005d4a:	e00c      	b.n	8005d66 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005d4c:	687a      	ldr	r2, [r7, #4]
 8005d4e:	4613      	mov	r3, r2
 8005d50:	009b      	lsls	r3, r3, #2
 8005d52:	4413      	add	r3, r2
 8005d54:	009b      	lsls	r3, r3, #2
 8005d56:	4a12      	ldr	r2, [pc, #72]	; (8005da0 <prvInitialiseTaskLists+0x60>)
 8005d58:	4413      	add	r3, r2
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f7ff fb17 	bl	800538e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	3301      	adds	r3, #1
 8005d64:	607b      	str	r3, [r7, #4]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2b06      	cmp	r3, #6
 8005d6a:	d9ef      	bls.n	8005d4c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005d6c:	480d      	ldr	r0, [pc, #52]	; (8005da4 <prvInitialiseTaskLists+0x64>)
 8005d6e:	f7ff fb0e 	bl	800538e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005d72:	480d      	ldr	r0, [pc, #52]	; (8005da8 <prvInitialiseTaskLists+0x68>)
 8005d74:	f7ff fb0b 	bl	800538e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005d78:	480c      	ldr	r0, [pc, #48]	; (8005dac <prvInitialiseTaskLists+0x6c>)
 8005d7a:	f7ff fb08 	bl	800538e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005d7e:	480c      	ldr	r0, [pc, #48]	; (8005db0 <prvInitialiseTaskLists+0x70>)
 8005d80:	f7ff fb05 	bl	800538e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005d84:	480b      	ldr	r0, [pc, #44]	; (8005db4 <prvInitialiseTaskLists+0x74>)
 8005d86:	f7ff fb02 	bl	800538e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005d8a:	4b0b      	ldr	r3, [pc, #44]	; (8005db8 <prvInitialiseTaskLists+0x78>)
 8005d8c:	4a05      	ldr	r2, [pc, #20]	; (8005da4 <prvInitialiseTaskLists+0x64>)
 8005d8e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005d90:	4b0a      	ldr	r3, [pc, #40]	; (8005dbc <prvInitialiseTaskLists+0x7c>)
 8005d92:	4a05      	ldr	r2, [pc, #20]	; (8005da8 <prvInitialiseTaskLists+0x68>)
 8005d94:	601a      	str	r2, [r3, #0]
}
 8005d96:	bf00      	nop
 8005d98:	3708      	adds	r7, #8
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
 8005d9e:	bf00      	nop
 8005da0:	20000578 	.word	0x20000578
 8005da4:	20000604 	.word	0x20000604
 8005da8:	20000618 	.word	0x20000618
 8005dac:	20000634 	.word	0x20000634
 8005db0:	20000648 	.word	0x20000648
 8005db4:	20000660 	.word	0x20000660
 8005db8:	2000062c 	.word	0x2000062c
 8005dbc:	20000630 	.word	0x20000630

08005dc0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b082      	sub	sp, #8
 8005dc4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005dc6:	e019      	b.n	8005dfc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005dc8:	f000 fa0c 	bl	80061e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005dcc:	4b10      	ldr	r3, [pc, #64]	; (8005e10 <prvCheckTasksWaitingTermination+0x50>)
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	68db      	ldr	r3, [r3, #12]
 8005dd2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	3304      	adds	r3, #4
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f7ff fb62 	bl	80054a2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005dde:	4b0d      	ldr	r3, [pc, #52]	; (8005e14 <prvCheckTasksWaitingTermination+0x54>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	3b01      	subs	r3, #1
 8005de4:	4a0b      	ldr	r2, [pc, #44]	; (8005e14 <prvCheckTasksWaitingTermination+0x54>)
 8005de6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005de8:	4b0b      	ldr	r3, [pc, #44]	; (8005e18 <prvCheckTasksWaitingTermination+0x58>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	3b01      	subs	r3, #1
 8005dee:	4a0a      	ldr	r2, [pc, #40]	; (8005e18 <prvCheckTasksWaitingTermination+0x58>)
 8005df0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005df2:	f000 fa27 	bl	8006244 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f000 f810 	bl	8005e1c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005dfc:	4b06      	ldr	r3, [pc, #24]	; (8005e18 <prvCheckTasksWaitingTermination+0x58>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d1e1      	bne.n	8005dc8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005e04:	bf00      	nop
 8005e06:	bf00      	nop
 8005e08:	3708      	adds	r7, #8
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	bf00      	nop
 8005e10:	20000648 	.word	0x20000648
 8005e14:	20000674 	.word	0x20000674
 8005e18:	2000065c 	.word	0x2000065c

08005e1c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b084      	sub	sp, #16
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	334c      	adds	r3, #76	; 0x4c
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f000 fccf 	bl	80067cc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d108      	bne.n	8005e4a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f000 fb7f 	bl	8006540 <vPortFree>
				vPortFree( pxTCB );
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f000 fb7c 	bl	8006540 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005e48:	e018      	b.n	8005e7c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d103      	bne.n	8005e5c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f000 fb73 	bl	8006540 <vPortFree>
	}
 8005e5a:	e00f      	b.n	8005e7c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005e62:	2b02      	cmp	r3, #2
 8005e64:	d00a      	beq.n	8005e7c <prvDeleteTCB+0x60>
	__asm volatile
 8005e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e6a:	f383 8811 	msr	BASEPRI, r3
 8005e6e:	f3bf 8f6f 	isb	sy
 8005e72:	f3bf 8f4f 	dsb	sy
 8005e76:	60fb      	str	r3, [r7, #12]
}
 8005e78:	bf00      	nop
 8005e7a:	e7fe      	b.n	8005e7a <prvDeleteTCB+0x5e>
	}
 8005e7c:	bf00      	nop
 8005e7e:	3710      	adds	r7, #16
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}

08005e84 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005e84:	b480      	push	{r7}
 8005e86:	b083      	sub	sp, #12
 8005e88:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e8a:	4b0c      	ldr	r3, [pc, #48]	; (8005ebc <prvResetNextTaskUnblockTime+0x38>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d104      	bne.n	8005e9e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005e94:	4b0a      	ldr	r3, [pc, #40]	; (8005ec0 <prvResetNextTaskUnblockTime+0x3c>)
 8005e96:	f04f 32ff 	mov.w	r2, #4294967295
 8005e9a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005e9c:	e008      	b.n	8005eb0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e9e:	4b07      	ldr	r3, [pc, #28]	; (8005ebc <prvResetNextTaskUnblockTime+0x38>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	68db      	ldr	r3, [r3, #12]
 8005ea6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	4a04      	ldr	r2, [pc, #16]	; (8005ec0 <prvResetNextTaskUnblockTime+0x3c>)
 8005eae:	6013      	str	r3, [r2, #0]
}
 8005eb0:	bf00      	nop
 8005eb2:	370c      	adds	r7, #12
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr
 8005ebc:	2000062c 	.word	0x2000062c
 8005ec0:	20000694 	.word	0x20000694

08005ec4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b084      	sub	sp, #16
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005ece:	4b29      	ldr	r3, [pc, #164]	; (8005f74 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ed4:	4b28      	ldr	r3, [pc, #160]	; (8005f78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	3304      	adds	r3, #4
 8005eda:	4618      	mov	r0, r3
 8005edc:	f7ff fae1 	bl	80054a2 <uxListRemove>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d10b      	bne.n	8005efe <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005ee6:	4b24      	ldr	r3, [pc, #144]	; (8005f78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eec:	2201      	movs	r2, #1
 8005eee:	fa02 f303 	lsl.w	r3, r2, r3
 8005ef2:	43da      	mvns	r2, r3
 8005ef4:	4b21      	ldr	r3, [pc, #132]	; (8005f7c <prvAddCurrentTaskToDelayedList+0xb8>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4013      	ands	r3, r2
 8005efa:	4a20      	ldr	r2, [pc, #128]	; (8005f7c <prvAddCurrentTaskToDelayedList+0xb8>)
 8005efc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f04:	d10a      	bne.n	8005f1c <prvAddCurrentTaskToDelayedList+0x58>
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d007      	beq.n	8005f1c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f0c:	4b1a      	ldr	r3, [pc, #104]	; (8005f78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	3304      	adds	r3, #4
 8005f12:	4619      	mov	r1, r3
 8005f14:	481a      	ldr	r0, [pc, #104]	; (8005f80 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005f16:	f7ff fa67 	bl	80053e8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005f1a:	e026      	b.n	8005f6a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005f1c:	68fa      	ldr	r2, [r7, #12]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4413      	add	r3, r2
 8005f22:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005f24:	4b14      	ldr	r3, [pc, #80]	; (8005f78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	68ba      	ldr	r2, [r7, #8]
 8005f2a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005f2c:	68ba      	ldr	r2, [r7, #8]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d209      	bcs.n	8005f48 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f34:	4b13      	ldr	r3, [pc, #76]	; (8005f84 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	4b0f      	ldr	r3, [pc, #60]	; (8005f78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	3304      	adds	r3, #4
 8005f3e:	4619      	mov	r1, r3
 8005f40:	4610      	mov	r0, r2
 8005f42:	f7ff fa75 	bl	8005430 <vListInsert>
}
 8005f46:	e010      	b.n	8005f6a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f48:	4b0f      	ldr	r3, [pc, #60]	; (8005f88 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	4b0a      	ldr	r3, [pc, #40]	; (8005f78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	3304      	adds	r3, #4
 8005f52:	4619      	mov	r1, r3
 8005f54:	4610      	mov	r0, r2
 8005f56:	f7ff fa6b 	bl	8005430 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005f5a:	4b0c      	ldr	r3, [pc, #48]	; (8005f8c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	68ba      	ldr	r2, [r7, #8]
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d202      	bcs.n	8005f6a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005f64:	4a09      	ldr	r2, [pc, #36]	; (8005f8c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	6013      	str	r3, [r2, #0]
}
 8005f6a:	bf00      	nop
 8005f6c:	3710      	adds	r7, #16
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
 8005f72:	bf00      	nop
 8005f74:	20000678 	.word	0x20000678
 8005f78:	20000574 	.word	0x20000574
 8005f7c:	2000067c 	.word	0x2000067c
 8005f80:	20000660 	.word	0x20000660
 8005f84:	20000630 	.word	0x20000630
 8005f88:	2000062c 	.word	0x2000062c
 8005f8c:	20000694 	.word	0x20000694

08005f90 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005f90:	b480      	push	{r7}
 8005f92:	b085      	sub	sp, #20
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	60f8      	str	r0, [r7, #12]
 8005f98:	60b9      	str	r1, [r7, #8]
 8005f9a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	3b04      	subs	r3, #4
 8005fa0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005fa8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	3b04      	subs	r3, #4
 8005fae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	f023 0201 	bic.w	r2, r3, #1
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	3b04      	subs	r3, #4
 8005fbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005fc0:	4a0c      	ldr	r2, [pc, #48]	; (8005ff4 <pxPortInitialiseStack+0x64>)
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	3b14      	subs	r3, #20
 8005fca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005fcc:	687a      	ldr	r2, [r7, #4]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	3b04      	subs	r3, #4
 8005fd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f06f 0202 	mvn.w	r2, #2
 8005fde:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	3b20      	subs	r3, #32
 8005fe4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3714      	adds	r7, #20
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr
 8005ff4:	08005ff9 	.word	0x08005ff9

08005ff8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b085      	sub	sp, #20
 8005ffc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005ffe:	2300      	movs	r3, #0
 8006000:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006002:	4b12      	ldr	r3, [pc, #72]	; (800604c <prvTaskExitError+0x54>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800600a:	d00a      	beq.n	8006022 <prvTaskExitError+0x2a>
	__asm volatile
 800600c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006010:	f383 8811 	msr	BASEPRI, r3
 8006014:	f3bf 8f6f 	isb	sy
 8006018:	f3bf 8f4f 	dsb	sy
 800601c:	60fb      	str	r3, [r7, #12]
}
 800601e:	bf00      	nop
 8006020:	e7fe      	b.n	8006020 <prvTaskExitError+0x28>
	__asm volatile
 8006022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006026:	f383 8811 	msr	BASEPRI, r3
 800602a:	f3bf 8f6f 	isb	sy
 800602e:	f3bf 8f4f 	dsb	sy
 8006032:	60bb      	str	r3, [r7, #8]
}
 8006034:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006036:	bf00      	nop
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d0fc      	beq.n	8006038 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800603e:	bf00      	nop
 8006040:	bf00      	nop
 8006042:	3714      	adds	r7, #20
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr
 800604c:	200000e0 	.word	0x200000e0

08006050 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006050:	4b07      	ldr	r3, [pc, #28]	; (8006070 <pxCurrentTCBConst2>)
 8006052:	6819      	ldr	r1, [r3, #0]
 8006054:	6808      	ldr	r0, [r1, #0]
 8006056:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800605a:	f380 8809 	msr	PSP, r0
 800605e:	f3bf 8f6f 	isb	sy
 8006062:	f04f 0000 	mov.w	r0, #0
 8006066:	f380 8811 	msr	BASEPRI, r0
 800606a:	4770      	bx	lr
 800606c:	f3af 8000 	nop.w

08006070 <pxCurrentTCBConst2>:
 8006070:	20000574 	.word	0x20000574
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006074:	bf00      	nop
 8006076:	bf00      	nop

08006078 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006078:	4808      	ldr	r0, [pc, #32]	; (800609c <prvPortStartFirstTask+0x24>)
 800607a:	6800      	ldr	r0, [r0, #0]
 800607c:	6800      	ldr	r0, [r0, #0]
 800607e:	f380 8808 	msr	MSP, r0
 8006082:	f04f 0000 	mov.w	r0, #0
 8006086:	f380 8814 	msr	CONTROL, r0
 800608a:	b662      	cpsie	i
 800608c:	b661      	cpsie	f
 800608e:	f3bf 8f4f 	dsb	sy
 8006092:	f3bf 8f6f 	isb	sy
 8006096:	df00      	svc	0
 8006098:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800609a:	bf00      	nop
 800609c:	e000ed08 	.word	0xe000ed08

080060a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b086      	sub	sp, #24
 80060a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80060a6:	4b46      	ldr	r3, [pc, #280]	; (80061c0 <xPortStartScheduler+0x120>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a46      	ldr	r2, [pc, #280]	; (80061c4 <xPortStartScheduler+0x124>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d10a      	bne.n	80060c6 <xPortStartScheduler+0x26>
	__asm volatile
 80060b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b4:	f383 8811 	msr	BASEPRI, r3
 80060b8:	f3bf 8f6f 	isb	sy
 80060bc:	f3bf 8f4f 	dsb	sy
 80060c0:	613b      	str	r3, [r7, #16]
}
 80060c2:	bf00      	nop
 80060c4:	e7fe      	b.n	80060c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80060c6:	4b3e      	ldr	r3, [pc, #248]	; (80061c0 <xPortStartScheduler+0x120>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a3f      	ldr	r2, [pc, #252]	; (80061c8 <xPortStartScheduler+0x128>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d10a      	bne.n	80060e6 <xPortStartScheduler+0x46>
	__asm volatile
 80060d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d4:	f383 8811 	msr	BASEPRI, r3
 80060d8:	f3bf 8f6f 	isb	sy
 80060dc:	f3bf 8f4f 	dsb	sy
 80060e0:	60fb      	str	r3, [r7, #12]
}
 80060e2:	bf00      	nop
 80060e4:	e7fe      	b.n	80060e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80060e6:	4b39      	ldr	r3, [pc, #228]	; (80061cc <xPortStartScheduler+0x12c>)
 80060e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	781b      	ldrb	r3, [r3, #0]
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	22ff      	movs	r2, #255	; 0xff
 80060f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	b2db      	uxtb	r3, r3
 80060fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006100:	78fb      	ldrb	r3, [r7, #3]
 8006102:	b2db      	uxtb	r3, r3
 8006104:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006108:	b2da      	uxtb	r2, r3
 800610a:	4b31      	ldr	r3, [pc, #196]	; (80061d0 <xPortStartScheduler+0x130>)
 800610c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800610e:	4b31      	ldr	r3, [pc, #196]	; (80061d4 <xPortStartScheduler+0x134>)
 8006110:	2207      	movs	r2, #7
 8006112:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006114:	e009      	b.n	800612a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006116:	4b2f      	ldr	r3, [pc, #188]	; (80061d4 <xPortStartScheduler+0x134>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	3b01      	subs	r3, #1
 800611c:	4a2d      	ldr	r2, [pc, #180]	; (80061d4 <xPortStartScheduler+0x134>)
 800611e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006120:	78fb      	ldrb	r3, [r7, #3]
 8006122:	b2db      	uxtb	r3, r3
 8006124:	005b      	lsls	r3, r3, #1
 8006126:	b2db      	uxtb	r3, r3
 8006128:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800612a:	78fb      	ldrb	r3, [r7, #3]
 800612c:	b2db      	uxtb	r3, r3
 800612e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006132:	2b80      	cmp	r3, #128	; 0x80
 8006134:	d0ef      	beq.n	8006116 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006136:	4b27      	ldr	r3, [pc, #156]	; (80061d4 <xPortStartScheduler+0x134>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f1c3 0307 	rsb	r3, r3, #7
 800613e:	2b04      	cmp	r3, #4
 8006140:	d00a      	beq.n	8006158 <xPortStartScheduler+0xb8>
	__asm volatile
 8006142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006146:	f383 8811 	msr	BASEPRI, r3
 800614a:	f3bf 8f6f 	isb	sy
 800614e:	f3bf 8f4f 	dsb	sy
 8006152:	60bb      	str	r3, [r7, #8]
}
 8006154:	bf00      	nop
 8006156:	e7fe      	b.n	8006156 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006158:	4b1e      	ldr	r3, [pc, #120]	; (80061d4 <xPortStartScheduler+0x134>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	021b      	lsls	r3, r3, #8
 800615e:	4a1d      	ldr	r2, [pc, #116]	; (80061d4 <xPortStartScheduler+0x134>)
 8006160:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006162:	4b1c      	ldr	r3, [pc, #112]	; (80061d4 <xPortStartScheduler+0x134>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800616a:	4a1a      	ldr	r2, [pc, #104]	; (80061d4 <xPortStartScheduler+0x134>)
 800616c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	b2da      	uxtb	r2, r3
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006176:	4b18      	ldr	r3, [pc, #96]	; (80061d8 <xPortStartScheduler+0x138>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a17      	ldr	r2, [pc, #92]	; (80061d8 <xPortStartScheduler+0x138>)
 800617c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006180:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006182:	4b15      	ldr	r3, [pc, #84]	; (80061d8 <xPortStartScheduler+0x138>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a14      	ldr	r2, [pc, #80]	; (80061d8 <xPortStartScheduler+0x138>)
 8006188:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800618c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800618e:	f000 f8dd 	bl	800634c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006192:	4b12      	ldr	r3, [pc, #72]	; (80061dc <xPortStartScheduler+0x13c>)
 8006194:	2200      	movs	r2, #0
 8006196:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006198:	f000 f8fc 	bl	8006394 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800619c:	4b10      	ldr	r3, [pc, #64]	; (80061e0 <xPortStartScheduler+0x140>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a0f      	ldr	r2, [pc, #60]	; (80061e0 <xPortStartScheduler+0x140>)
 80061a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80061a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80061a8:	f7ff ff66 	bl	8006078 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80061ac:	f7ff fd4e 	bl	8005c4c <vTaskSwitchContext>
	prvTaskExitError();
 80061b0:	f7ff ff22 	bl	8005ff8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80061b4:	2300      	movs	r3, #0
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3718      	adds	r7, #24
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}
 80061be:	bf00      	nop
 80061c0:	e000ed00 	.word	0xe000ed00
 80061c4:	410fc271 	.word	0x410fc271
 80061c8:	410fc270 	.word	0x410fc270
 80061cc:	e000e400 	.word	0xe000e400
 80061d0:	200006a0 	.word	0x200006a0
 80061d4:	200006a4 	.word	0x200006a4
 80061d8:	e000ed20 	.word	0xe000ed20
 80061dc:	200000e0 	.word	0x200000e0
 80061e0:	e000ef34 	.word	0xe000ef34

080061e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80061e4:	b480      	push	{r7}
 80061e6:	b083      	sub	sp, #12
 80061e8:	af00      	add	r7, sp, #0
	__asm volatile
 80061ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ee:	f383 8811 	msr	BASEPRI, r3
 80061f2:	f3bf 8f6f 	isb	sy
 80061f6:	f3bf 8f4f 	dsb	sy
 80061fa:	607b      	str	r3, [r7, #4]
}
 80061fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80061fe:	4b0f      	ldr	r3, [pc, #60]	; (800623c <vPortEnterCritical+0x58>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	3301      	adds	r3, #1
 8006204:	4a0d      	ldr	r2, [pc, #52]	; (800623c <vPortEnterCritical+0x58>)
 8006206:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006208:	4b0c      	ldr	r3, [pc, #48]	; (800623c <vPortEnterCritical+0x58>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	2b01      	cmp	r3, #1
 800620e:	d10f      	bne.n	8006230 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006210:	4b0b      	ldr	r3, [pc, #44]	; (8006240 <vPortEnterCritical+0x5c>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	b2db      	uxtb	r3, r3
 8006216:	2b00      	cmp	r3, #0
 8006218:	d00a      	beq.n	8006230 <vPortEnterCritical+0x4c>
	__asm volatile
 800621a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800621e:	f383 8811 	msr	BASEPRI, r3
 8006222:	f3bf 8f6f 	isb	sy
 8006226:	f3bf 8f4f 	dsb	sy
 800622a:	603b      	str	r3, [r7, #0]
}
 800622c:	bf00      	nop
 800622e:	e7fe      	b.n	800622e <vPortEnterCritical+0x4a>
	}
}
 8006230:	bf00      	nop
 8006232:	370c      	adds	r7, #12
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr
 800623c:	200000e0 	.word	0x200000e0
 8006240:	e000ed04 	.word	0xe000ed04

08006244 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006244:	b480      	push	{r7}
 8006246:	b083      	sub	sp, #12
 8006248:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800624a:	4b12      	ldr	r3, [pc, #72]	; (8006294 <vPortExitCritical+0x50>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d10a      	bne.n	8006268 <vPortExitCritical+0x24>
	__asm volatile
 8006252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006256:	f383 8811 	msr	BASEPRI, r3
 800625a:	f3bf 8f6f 	isb	sy
 800625e:	f3bf 8f4f 	dsb	sy
 8006262:	607b      	str	r3, [r7, #4]
}
 8006264:	bf00      	nop
 8006266:	e7fe      	b.n	8006266 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006268:	4b0a      	ldr	r3, [pc, #40]	; (8006294 <vPortExitCritical+0x50>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	3b01      	subs	r3, #1
 800626e:	4a09      	ldr	r2, [pc, #36]	; (8006294 <vPortExitCritical+0x50>)
 8006270:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006272:	4b08      	ldr	r3, [pc, #32]	; (8006294 <vPortExitCritical+0x50>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d105      	bne.n	8006286 <vPortExitCritical+0x42>
 800627a:	2300      	movs	r3, #0
 800627c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006284:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006286:	bf00      	nop
 8006288:	370c      	adds	r7, #12
 800628a:	46bd      	mov	sp, r7
 800628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006290:	4770      	bx	lr
 8006292:	bf00      	nop
 8006294:	200000e0 	.word	0x200000e0
	...

080062a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80062a0:	f3ef 8009 	mrs	r0, PSP
 80062a4:	f3bf 8f6f 	isb	sy
 80062a8:	4b15      	ldr	r3, [pc, #84]	; (8006300 <pxCurrentTCBConst>)
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	f01e 0f10 	tst.w	lr, #16
 80062b0:	bf08      	it	eq
 80062b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80062b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062ba:	6010      	str	r0, [r2, #0]
 80062bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80062c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80062c4:	f380 8811 	msr	BASEPRI, r0
 80062c8:	f3bf 8f4f 	dsb	sy
 80062cc:	f3bf 8f6f 	isb	sy
 80062d0:	f7ff fcbc 	bl	8005c4c <vTaskSwitchContext>
 80062d4:	f04f 0000 	mov.w	r0, #0
 80062d8:	f380 8811 	msr	BASEPRI, r0
 80062dc:	bc09      	pop	{r0, r3}
 80062de:	6819      	ldr	r1, [r3, #0]
 80062e0:	6808      	ldr	r0, [r1, #0]
 80062e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062e6:	f01e 0f10 	tst.w	lr, #16
 80062ea:	bf08      	it	eq
 80062ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80062f0:	f380 8809 	msr	PSP, r0
 80062f4:	f3bf 8f6f 	isb	sy
 80062f8:	4770      	bx	lr
 80062fa:	bf00      	nop
 80062fc:	f3af 8000 	nop.w

08006300 <pxCurrentTCBConst>:
 8006300:	20000574 	.word	0x20000574
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006304:	bf00      	nop
 8006306:	bf00      	nop

08006308 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b082      	sub	sp, #8
 800630c:	af00      	add	r7, sp, #0
	__asm volatile
 800630e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006312:	f383 8811 	msr	BASEPRI, r3
 8006316:	f3bf 8f6f 	isb	sy
 800631a:	f3bf 8f4f 	dsb	sy
 800631e:	607b      	str	r3, [r7, #4]
}
 8006320:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006322:	f7ff fbdb 	bl	8005adc <xTaskIncrementTick>
 8006326:	4603      	mov	r3, r0
 8006328:	2b00      	cmp	r3, #0
 800632a:	d003      	beq.n	8006334 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800632c:	4b06      	ldr	r3, [pc, #24]	; (8006348 <SysTick_Handler+0x40>)
 800632e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006332:	601a      	str	r2, [r3, #0]
 8006334:	2300      	movs	r3, #0
 8006336:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	f383 8811 	msr	BASEPRI, r3
}
 800633e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006340:	bf00      	nop
 8006342:	3708      	adds	r7, #8
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}
 8006348:	e000ed04 	.word	0xe000ed04

0800634c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800634c:	b480      	push	{r7}
 800634e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006350:	4b0b      	ldr	r3, [pc, #44]	; (8006380 <vPortSetupTimerInterrupt+0x34>)
 8006352:	2200      	movs	r2, #0
 8006354:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006356:	4b0b      	ldr	r3, [pc, #44]	; (8006384 <vPortSetupTimerInterrupt+0x38>)
 8006358:	2200      	movs	r2, #0
 800635a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800635c:	4b0a      	ldr	r3, [pc, #40]	; (8006388 <vPortSetupTimerInterrupt+0x3c>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a0a      	ldr	r2, [pc, #40]	; (800638c <vPortSetupTimerInterrupt+0x40>)
 8006362:	fba2 2303 	umull	r2, r3, r2, r3
 8006366:	099b      	lsrs	r3, r3, #6
 8006368:	4a09      	ldr	r2, [pc, #36]	; (8006390 <vPortSetupTimerInterrupt+0x44>)
 800636a:	3b01      	subs	r3, #1
 800636c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800636e:	4b04      	ldr	r3, [pc, #16]	; (8006380 <vPortSetupTimerInterrupt+0x34>)
 8006370:	2207      	movs	r2, #7
 8006372:	601a      	str	r2, [r3, #0]
}
 8006374:	bf00      	nop
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr
 800637e:	bf00      	nop
 8006380:	e000e010 	.word	0xe000e010
 8006384:	e000e018 	.word	0xe000e018
 8006388:	200000d4 	.word	0x200000d4
 800638c:	10624dd3 	.word	0x10624dd3
 8006390:	e000e014 	.word	0xe000e014

08006394 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006394:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80063a4 <vPortEnableVFP+0x10>
 8006398:	6801      	ldr	r1, [r0, #0]
 800639a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800639e:	6001      	str	r1, [r0, #0]
 80063a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80063a2:	bf00      	nop
 80063a4:	e000ed88 	.word	0xe000ed88

080063a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b08a      	sub	sp, #40	; 0x28
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80063b0:	2300      	movs	r3, #0
 80063b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80063b4:	f7ff fae8 	bl	8005988 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80063b8:	4b5b      	ldr	r3, [pc, #364]	; (8006528 <pvPortMalloc+0x180>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d101      	bne.n	80063c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80063c0:	f000 f920 	bl	8006604 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80063c4:	4b59      	ldr	r3, [pc, #356]	; (800652c <pvPortMalloc+0x184>)
 80063c6:	681a      	ldr	r2, [r3, #0]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	4013      	ands	r3, r2
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	f040 8093 	bne.w	80064f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d01d      	beq.n	8006414 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80063d8:	2208      	movs	r2, #8
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	4413      	add	r3, r2
 80063de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f003 0307 	and.w	r3, r3, #7
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d014      	beq.n	8006414 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f023 0307 	bic.w	r3, r3, #7
 80063f0:	3308      	adds	r3, #8
 80063f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f003 0307 	and.w	r3, r3, #7
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d00a      	beq.n	8006414 <pvPortMalloc+0x6c>
	__asm volatile
 80063fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006402:	f383 8811 	msr	BASEPRI, r3
 8006406:	f3bf 8f6f 	isb	sy
 800640a:	f3bf 8f4f 	dsb	sy
 800640e:	617b      	str	r3, [r7, #20]
}
 8006410:	bf00      	nop
 8006412:	e7fe      	b.n	8006412 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d06e      	beq.n	80064f8 <pvPortMalloc+0x150>
 800641a:	4b45      	ldr	r3, [pc, #276]	; (8006530 <pvPortMalloc+0x188>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	687a      	ldr	r2, [r7, #4]
 8006420:	429a      	cmp	r2, r3
 8006422:	d869      	bhi.n	80064f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006424:	4b43      	ldr	r3, [pc, #268]	; (8006534 <pvPortMalloc+0x18c>)
 8006426:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006428:	4b42      	ldr	r3, [pc, #264]	; (8006534 <pvPortMalloc+0x18c>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800642e:	e004      	b.n	800643a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006432:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800643a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	429a      	cmp	r2, r3
 8006442:	d903      	bls.n	800644c <pvPortMalloc+0xa4>
 8006444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d1f1      	bne.n	8006430 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800644c:	4b36      	ldr	r3, [pc, #216]	; (8006528 <pvPortMalloc+0x180>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006452:	429a      	cmp	r2, r3
 8006454:	d050      	beq.n	80064f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006456:	6a3b      	ldr	r3, [r7, #32]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	2208      	movs	r2, #8
 800645c:	4413      	add	r3, r2
 800645e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	6a3b      	ldr	r3, [r7, #32]
 8006466:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646a:	685a      	ldr	r2, [r3, #4]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	1ad2      	subs	r2, r2, r3
 8006470:	2308      	movs	r3, #8
 8006472:	005b      	lsls	r3, r3, #1
 8006474:	429a      	cmp	r2, r3
 8006476:	d91f      	bls.n	80064b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006478:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	4413      	add	r3, r2
 800647e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006480:	69bb      	ldr	r3, [r7, #24]
 8006482:	f003 0307 	and.w	r3, r3, #7
 8006486:	2b00      	cmp	r3, #0
 8006488:	d00a      	beq.n	80064a0 <pvPortMalloc+0xf8>
	__asm volatile
 800648a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800648e:	f383 8811 	msr	BASEPRI, r3
 8006492:	f3bf 8f6f 	isb	sy
 8006496:	f3bf 8f4f 	dsb	sy
 800649a:	613b      	str	r3, [r7, #16]
}
 800649c:	bf00      	nop
 800649e:	e7fe      	b.n	800649e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80064a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a2:	685a      	ldr	r2, [r3, #4]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	1ad2      	subs	r2, r2, r3
 80064a8:	69bb      	ldr	r3, [r7, #24]
 80064aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80064ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ae:	687a      	ldr	r2, [r7, #4]
 80064b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80064b2:	69b8      	ldr	r0, [r7, #24]
 80064b4:	f000 f908 	bl	80066c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80064b8:	4b1d      	ldr	r3, [pc, #116]	; (8006530 <pvPortMalloc+0x188>)
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	1ad3      	subs	r3, r2, r3
 80064c2:	4a1b      	ldr	r2, [pc, #108]	; (8006530 <pvPortMalloc+0x188>)
 80064c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80064c6:	4b1a      	ldr	r3, [pc, #104]	; (8006530 <pvPortMalloc+0x188>)
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	4b1b      	ldr	r3, [pc, #108]	; (8006538 <pvPortMalloc+0x190>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	429a      	cmp	r2, r3
 80064d0:	d203      	bcs.n	80064da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80064d2:	4b17      	ldr	r3, [pc, #92]	; (8006530 <pvPortMalloc+0x188>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a18      	ldr	r2, [pc, #96]	; (8006538 <pvPortMalloc+0x190>)
 80064d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80064da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064dc:	685a      	ldr	r2, [r3, #4]
 80064de:	4b13      	ldr	r3, [pc, #76]	; (800652c <pvPortMalloc+0x184>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	431a      	orrs	r2, r3
 80064e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80064e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ea:	2200      	movs	r2, #0
 80064ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80064ee:	4b13      	ldr	r3, [pc, #76]	; (800653c <pvPortMalloc+0x194>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	3301      	adds	r3, #1
 80064f4:	4a11      	ldr	r2, [pc, #68]	; (800653c <pvPortMalloc+0x194>)
 80064f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80064f8:	f7ff fa54 	bl	80059a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80064fc:	69fb      	ldr	r3, [r7, #28]
 80064fe:	f003 0307 	and.w	r3, r3, #7
 8006502:	2b00      	cmp	r3, #0
 8006504:	d00a      	beq.n	800651c <pvPortMalloc+0x174>
	__asm volatile
 8006506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800650a:	f383 8811 	msr	BASEPRI, r3
 800650e:	f3bf 8f6f 	isb	sy
 8006512:	f3bf 8f4f 	dsb	sy
 8006516:	60fb      	str	r3, [r7, #12]
}
 8006518:	bf00      	nop
 800651a:	e7fe      	b.n	800651a <pvPortMalloc+0x172>
	return pvReturn;
 800651c:	69fb      	ldr	r3, [r7, #28]
}
 800651e:	4618      	mov	r0, r3
 8006520:	3728      	adds	r7, #40	; 0x28
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}
 8006526:	bf00      	nop
 8006528:	200042b0 	.word	0x200042b0
 800652c:	200042c4 	.word	0x200042c4
 8006530:	200042b4 	.word	0x200042b4
 8006534:	200042a8 	.word	0x200042a8
 8006538:	200042b8 	.word	0x200042b8
 800653c:	200042bc 	.word	0x200042bc

08006540 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b086      	sub	sp, #24
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d04d      	beq.n	80065ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006552:	2308      	movs	r3, #8
 8006554:	425b      	negs	r3, r3
 8006556:	697a      	ldr	r2, [r7, #20]
 8006558:	4413      	add	r3, r2
 800655a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	685a      	ldr	r2, [r3, #4]
 8006564:	4b24      	ldr	r3, [pc, #144]	; (80065f8 <vPortFree+0xb8>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4013      	ands	r3, r2
 800656a:	2b00      	cmp	r3, #0
 800656c:	d10a      	bne.n	8006584 <vPortFree+0x44>
	__asm volatile
 800656e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006572:	f383 8811 	msr	BASEPRI, r3
 8006576:	f3bf 8f6f 	isb	sy
 800657a:	f3bf 8f4f 	dsb	sy
 800657e:	60fb      	str	r3, [r7, #12]
}
 8006580:	bf00      	nop
 8006582:	e7fe      	b.n	8006582 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d00a      	beq.n	80065a2 <vPortFree+0x62>
	__asm volatile
 800658c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006590:	f383 8811 	msr	BASEPRI, r3
 8006594:	f3bf 8f6f 	isb	sy
 8006598:	f3bf 8f4f 	dsb	sy
 800659c:	60bb      	str	r3, [r7, #8]
}
 800659e:	bf00      	nop
 80065a0:	e7fe      	b.n	80065a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	685a      	ldr	r2, [r3, #4]
 80065a6:	4b14      	ldr	r3, [pc, #80]	; (80065f8 <vPortFree+0xb8>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4013      	ands	r3, r2
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d01e      	beq.n	80065ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d11a      	bne.n	80065ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	685a      	ldr	r2, [r3, #4]
 80065bc:	4b0e      	ldr	r3, [pc, #56]	; (80065f8 <vPortFree+0xb8>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	43db      	mvns	r3, r3
 80065c2:	401a      	ands	r2, r3
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80065c8:	f7ff f9de 	bl	8005988 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	685a      	ldr	r2, [r3, #4]
 80065d0:	4b0a      	ldr	r3, [pc, #40]	; (80065fc <vPortFree+0xbc>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4413      	add	r3, r2
 80065d6:	4a09      	ldr	r2, [pc, #36]	; (80065fc <vPortFree+0xbc>)
 80065d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80065da:	6938      	ldr	r0, [r7, #16]
 80065dc:	f000 f874 	bl	80066c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80065e0:	4b07      	ldr	r3, [pc, #28]	; (8006600 <vPortFree+0xc0>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	3301      	adds	r3, #1
 80065e6:	4a06      	ldr	r2, [pc, #24]	; (8006600 <vPortFree+0xc0>)
 80065e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80065ea:	f7ff f9db 	bl	80059a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80065ee:	bf00      	nop
 80065f0:	3718      	adds	r7, #24
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	bf00      	nop
 80065f8:	200042c4 	.word	0x200042c4
 80065fc:	200042b4 	.word	0x200042b4
 8006600:	200042c0 	.word	0x200042c0

08006604 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006604:	b480      	push	{r7}
 8006606:	b085      	sub	sp, #20
 8006608:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800660a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800660e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006610:	4b27      	ldr	r3, [pc, #156]	; (80066b0 <prvHeapInit+0xac>)
 8006612:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f003 0307 	and.w	r3, r3, #7
 800661a:	2b00      	cmp	r3, #0
 800661c:	d00c      	beq.n	8006638 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	3307      	adds	r3, #7
 8006622:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f023 0307 	bic.w	r3, r3, #7
 800662a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800662c:	68ba      	ldr	r2, [r7, #8]
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	1ad3      	subs	r3, r2, r3
 8006632:	4a1f      	ldr	r2, [pc, #124]	; (80066b0 <prvHeapInit+0xac>)
 8006634:	4413      	add	r3, r2
 8006636:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800663c:	4a1d      	ldr	r2, [pc, #116]	; (80066b4 <prvHeapInit+0xb0>)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006642:	4b1c      	ldr	r3, [pc, #112]	; (80066b4 <prvHeapInit+0xb0>)
 8006644:	2200      	movs	r2, #0
 8006646:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	68ba      	ldr	r2, [r7, #8]
 800664c:	4413      	add	r3, r2
 800664e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006650:	2208      	movs	r2, #8
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	1a9b      	subs	r3, r3, r2
 8006656:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f023 0307 	bic.w	r3, r3, #7
 800665e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	4a15      	ldr	r2, [pc, #84]	; (80066b8 <prvHeapInit+0xb4>)
 8006664:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006666:	4b14      	ldr	r3, [pc, #80]	; (80066b8 <prvHeapInit+0xb4>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	2200      	movs	r2, #0
 800666c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800666e:	4b12      	ldr	r3, [pc, #72]	; (80066b8 <prvHeapInit+0xb4>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	2200      	movs	r2, #0
 8006674:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	68fa      	ldr	r2, [r7, #12]
 800667e:	1ad2      	subs	r2, r2, r3
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006684:	4b0c      	ldr	r3, [pc, #48]	; (80066b8 <prvHeapInit+0xb4>)
 8006686:	681a      	ldr	r2, [r3, #0]
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	4a0a      	ldr	r2, [pc, #40]	; (80066bc <prvHeapInit+0xb8>)
 8006692:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	4a09      	ldr	r2, [pc, #36]	; (80066c0 <prvHeapInit+0xbc>)
 800669a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800669c:	4b09      	ldr	r3, [pc, #36]	; (80066c4 <prvHeapInit+0xc0>)
 800669e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80066a2:	601a      	str	r2, [r3, #0]
}
 80066a4:	bf00      	nop
 80066a6:	3714      	adds	r7, #20
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr
 80066b0:	200006a8 	.word	0x200006a8
 80066b4:	200042a8 	.word	0x200042a8
 80066b8:	200042b0 	.word	0x200042b0
 80066bc:	200042b8 	.word	0x200042b8
 80066c0:	200042b4 	.word	0x200042b4
 80066c4:	200042c4 	.word	0x200042c4

080066c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80066c8:	b480      	push	{r7}
 80066ca:	b085      	sub	sp, #20
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80066d0:	4b28      	ldr	r3, [pc, #160]	; (8006774 <prvInsertBlockIntoFreeList+0xac>)
 80066d2:	60fb      	str	r3, [r7, #12]
 80066d4:	e002      	b.n	80066dc <prvInsertBlockIntoFreeList+0x14>
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	60fb      	str	r3, [r7, #12]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d8f7      	bhi.n	80066d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	68ba      	ldr	r2, [r7, #8]
 80066f0:	4413      	add	r3, r2
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d108      	bne.n	800670a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	685a      	ldr	r2, [r3, #4]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	441a      	add	r2, r3
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	68ba      	ldr	r2, [r7, #8]
 8006714:	441a      	add	r2, r3
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	429a      	cmp	r2, r3
 800671c:	d118      	bne.n	8006750 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681a      	ldr	r2, [r3, #0]
 8006722:	4b15      	ldr	r3, [pc, #84]	; (8006778 <prvInsertBlockIntoFreeList+0xb0>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	429a      	cmp	r2, r3
 8006728:	d00d      	beq.n	8006746 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	685a      	ldr	r2, [r3, #4]
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	441a      	add	r2, r3
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	681a      	ldr	r2, [r3, #0]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	601a      	str	r2, [r3, #0]
 8006744:	e008      	b.n	8006758 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006746:	4b0c      	ldr	r3, [pc, #48]	; (8006778 <prvInsertBlockIntoFreeList+0xb0>)
 8006748:	681a      	ldr	r2, [r3, #0]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	601a      	str	r2, [r3, #0]
 800674e:	e003      	b.n	8006758 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006758:	68fa      	ldr	r2, [r7, #12]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	429a      	cmp	r2, r3
 800675e:	d002      	beq.n	8006766 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006766:	bf00      	nop
 8006768:	3714      	adds	r7, #20
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr
 8006772:	bf00      	nop
 8006774:	200042a8 	.word	0x200042a8
 8006778:	200042b0 	.word	0x200042b0

0800677c <siprintf>:
 800677c:	b40e      	push	{r1, r2, r3}
 800677e:	b500      	push	{lr}
 8006780:	b09c      	sub	sp, #112	; 0x70
 8006782:	ab1d      	add	r3, sp, #116	; 0x74
 8006784:	9002      	str	r0, [sp, #8]
 8006786:	9006      	str	r0, [sp, #24]
 8006788:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800678c:	4809      	ldr	r0, [pc, #36]	; (80067b4 <siprintf+0x38>)
 800678e:	9107      	str	r1, [sp, #28]
 8006790:	9104      	str	r1, [sp, #16]
 8006792:	4909      	ldr	r1, [pc, #36]	; (80067b8 <siprintf+0x3c>)
 8006794:	f853 2b04 	ldr.w	r2, [r3], #4
 8006798:	9105      	str	r1, [sp, #20]
 800679a:	6800      	ldr	r0, [r0, #0]
 800679c:	9301      	str	r3, [sp, #4]
 800679e:	a902      	add	r1, sp, #8
 80067a0:	f000 f9f6 	bl	8006b90 <_svfiprintf_r>
 80067a4:	9b02      	ldr	r3, [sp, #8]
 80067a6:	2200      	movs	r2, #0
 80067a8:	701a      	strb	r2, [r3, #0]
 80067aa:	b01c      	add	sp, #112	; 0x70
 80067ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80067b0:	b003      	add	sp, #12
 80067b2:	4770      	bx	lr
 80067b4:	20000130 	.word	0x20000130
 80067b8:	ffff0208 	.word	0xffff0208

080067bc <memset>:
 80067bc:	4402      	add	r2, r0
 80067be:	4603      	mov	r3, r0
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d100      	bne.n	80067c6 <memset+0xa>
 80067c4:	4770      	bx	lr
 80067c6:	f803 1b01 	strb.w	r1, [r3], #1
 80067ca:	e7f9      	b.n	80067c0 <memset+0x4>

080067cc <_reclaim_reent>:
 80067cc:	4b29      	ldr	r3, [pc, #164]	; (8006874 <_reclaim_reent+0xa8>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4283      	cmp	r3, r0
 80067d2:	b570      	push	{r4, r5, r6, lr}
 80067d4:	4604      	mov	r4, r0
 80067d6:	d04b      	beq.n	8006870 <_reclaim_reent+0xa4>
 80067d8:	69c3      	ldr	r3, [r0, #28]
 80067da:	b143      	cbz	r3, 80067ee <_reclaim_reent+0x22>
 80067dc:	68db      	ldr	r3, [r3, #12]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d144      	bne.n	800686c <_reclaim_reent+0xa0>
 80067e2:	69e3      	ldr	r3, [r4, #28]
 80067e4:	6819      	ldr	r1, [r3, #0]
 80067e6:	b111      	cbz	r1, 80067ee <_reclaim_reent+0x22>
 80067e8:	4620      	mov	r0, r4
 80067ea:	f000 f87f 	bl	80068ec <_free_r>
 80067ee:	6961      	ldr	r1, [r4, #20]
 80067f0:	b111      	cbz	r1, 80067f8 <_reclaim_reent+0x2c>
 80067f2:	4620      	mov	r0, r4
 80067f4:	f000 f87a 	bl	80068ec <_free_r>
 80067f8:	69e1      	ldr	r1, [r4, #28]
 80067fa:	b111      	cbz	r1, 8006802 <_reclaim_reent+0x36>
 80067fc:	4620      	mov	r0, r4
 80067fe:	f000 f875 	bl	80068ec <_free_r>
 8006802:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006804:	b111      	cbz	r1, 800680c <_reclaim_reent+0x40>
 8006806:	4620      	mov	r0, r4
 8006808:	f000 f870 	bl	80068ec <_free_r>
 800680c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800680e:	b111      	cbz	r1, 8006816 <_reclaim_reent+0x4a>
 8006810:	4620      	mov	r0, r4
 8006812:	f000 f86b 	bl	80068ec <_free_r>
 8006816:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006818:	b111      	cbz	r1, 8006820 <_reclaim_reent+0x54>
 800681a:	4620      	mov	r0, r4
 800681c:	f000 f866 	bl	80068ec <_free_r>
 8006820:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006822:	b111      	cbz	r1, 800682a <_reclaim_reent+0x5e>
 8006824:	4620      	mov	r0, r4
 8006826:	f000 f861 	bl	80068ec <_free_r>
 800682a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800682c:	b111      	cbz	r1, 8006834 <_reclaim_reent+0x68>
 800682e:	4620      	mov	r0, r4
 8006830:	f000 f85c 	bl	80068ec <_free_r>
 8006834:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006836:	b111      	cbz	r1, 800683e <_reclaim_reent+0x72>
 8006838:	4620      	mov	r0, r4
 800683a:	f000 f857 	bl	80068ec <_free_r>
 800683e:	6a23      	ldr	r3, [r4, #32]
 8006840:	b1b3      	cbz	r3, 8006870 <_reclaim_reent+0xa4>
 8006842:	4620      	mov	r0, r4
 8006844:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006848:	4718      	bx	r3
 800684a:	5949      	ldr	r1, [r1, r5]
 800684c:	b941      	cbnz	r1, 8006860 <_reclaim_reent+0x94>
 800684e:	3504      	adds	r5, #4
 8006850:	69e3      	ldr	r3, [r4, #28]
 8006852:	2d80      	cmp	r5, #128	; 0x80
 8006854:	68d9      	ldr	r1, [r3, #12]
 8006856:	d1f8      	bne.n	800684a <_reclaim_reent+0x7e>
 8006858:	4620      	mov	r0, r4
 800685a:	f000 f847 	bl	80068ec <_free_r>
 800685e:	e7c0      	b.n	80067e2 <_reclaim_reent+0x16>
 8006860:	680e      	ldr	r6, [r1, #0]
 8006862:	4620      	mov	r0, r4
 8006864:	f000 f842 	bl	80068ec <_free_r>
 8006868:	4631      	mov	r1, r6
 800686a:	e7ef      	b.n	800684c <_reclaim_reent+0x80>
 800686c:	2500      	movs	r5, #0
 800686e:	e7ef      	b.n	8006850 <_reclaim_reent+0x84>
 8006870:	bd70      	pop	{r4, r5, r6, pc}
 8006872:	bf00      	nop
 8006874:	20000130 	.word	0x20000130

08006878 <__errno>:
 8006878:	4b01      	ldr	r3, [pc, #4]	; (8006880 <__errno+0x8>)
 800687a:	6818      	ldr	r0, [r3, #0]
 800687c:	4770      	bx	lr
 800687e:	bf00      	nop
 8006880:	20000130 	.word	0x20000130

08006884 <__libc_init_array>:
 8006884:	b570      	push	{r4, r5, r6, lr}
 8006886:	4d0d      	ldr	r5, [pc, #52]	; (80068bc <__libc_init_array+0x38>)
 8006888:	4c0d      	ldr	r4, [pc, #52]	; (80068c0 <__libc_init_array+0x3c>)
 800688a:	1b64      	subs	r4, r4, r5
 800688c:	10a4      	asrs	r4, r4, #2
 800688e:	2600      	movs	r6, #0
 8006890:	42a6      	cmp	r6, r4
 8006892:	d109      	bne.n	80068a8 <__libc_init_array+0x24>
 8006894:	4d0b      	ldr	r5, [pc, #44]	; (80068c4 <__libc_init_array+0x40>)
 8006896:	4c0c      	ldr	r4, [pc, #48]	; (80068c8 <__libc_init_array+0x44>)
 8006898:	f000 fcb2 	bl	8007200 <_init>
 800689c:	1b64      	subs	r4, r4, r5
 800689e:	10a4      	asrs	r4, r4, #2
 80068a0:	2600      	movs	r6, #0
 80068a2:	42a6      	cmp	r6, r4
 80068a4:	d105      	bne.n	80068b2 <__libc_init_array+0x2e>
 80068a6:	bd70      	pop	{r4, r5, r6, pc}
 80068a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80068ac:	4798      	blx	r3
 80068ae:	3601      	adds	r6, #1
 80068b0:	e7ee      	b.n	8006890 <__libc_init_array+0xc>
 80068b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80068b6:	4798      	blx	r3
 80068b8:	3601      	adds	r6, #1
 80068ba:	e7f2      	b.n	80068a2 <__libc_init_array+0x1e>
 80068bc:	08007394 	.word	0x08007394
 80068c0:	08007394 	.word	0x08007394
 80068c4:	08007394 	.word	0x08007394
 80068c8:	08007398 	.word	0x08007398

080068cc <__retarget_lock_acquire_recursive>:
 80068cc:	4770      	bx	lr

080068ce <__retarget_lock_release_recursive>:
 80068ce:	4770      	bx	lr

080068d0 <memcpy>:
 80068d0:	440a      	add	r2, r1
 80068d2:	4291      	cmp	r1, r2
 80068d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80068d8:	d100      	bne.n	80068dc <memcpy+0xc>
 80068da:	4770      	bx	lr
 80068dc:	b510      	push	{r4, lr}
 80068de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80068e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80068e6:	4291      	cmp	r1, r2
 80068e8:	d1f9      	bne.n	80068de <memcpy+0xe>
 80068ea:	bd10      	pop	{r4, pc}

080068ec <_free_r>:
 80068ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80068ee:	2900      	cmp	r1, #0
 80068f0:	d044      	beq.n	800697c <_free_r+0x90>
 80068f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068f6:	9001      	str	r0, [sp, #4]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	f1a1 0404 	sub.w	r4, r1, #4
 80068fe:	bfb8      	it	lt
 8006900:	18e4      	addlt	r4, r4, r3
 8006902:	f000 f8df 	bl	8006ac4 <__malloc_lock>
 8006906:	4a1e      	ldr	r2, [pc, #120]	; (8006980 <_free_r+0x94>)
 8006908:	9801      	ldr	r0, [sp, #4]
 800690a:	6813      	ldr	r3, [r2, #0]
 800690c:	b933      	cbnz	r3, 800691c <_free_r+0x30>
 800690e:	6063      	str	r3, [r4, #4]
 8006910:	6014      	str	r4, [r2, #0]
 8006912:	b003      	add	sp, #12
 8006914:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006918:	f000 b8da 	b.w	8006ad0 <__malloc_unlock>
 800691c:	42a3      	cmp	r3, r4
 800691e:	d908      	bls.n	8006932 <_free_r+0x46>
 8006920:	6825      	ldr	r5, [r4, #0]
 8006922:	1961      	adds	r1, r4, r5
 8006924:	428b      	cmp	r3, r1
 8006926:	bf01      	itttt	eq
 8006928:	6819      	ldreq	r1, [r3, #0]
 800692a:	685b      	ldreq	r3, [r3, #4]
 800692c:	1949      	addeq	r1, r1, r5
 800692e:	6021      	streq	r1, [r4, #0]
 8006930:	e7ed      	b.n	800690e <_free_r+0x22>
 8006932:	461a      	mov	r2, r3
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	b10b      	cbz	r3, 800693c <_free_r+0x50>
 8006938:	42a3      	cmp	r3, r4
 800693a:	d9fa      	bls.n	8006932 <_free_r+0x46>
 800693c:	6811      	ldr	r1, [r2, #0]
 800693e:	1855      	adds	r5, r2, r1
 8006940:	42a5      	cmp	r5, r4
 8006942:	d10b      	bne.n	800695c <_free_r+0x70>
 8006944:	6824      	ldr	r4, [r4, #0]
 8006946:	4421      	add	r1, r4
 8006948:	1854      	adds	r4, r2, r1
 800694a:	42a3      	cmp	r3, r4
 800694c:	6011      	str	r1, [r2, #0]
 800694e:	d1e0      	bne.n	8006912 <_free_r+0x26>
 8006950:	681c      	ldr	r4, [r3, #0]
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	6053      	str	r3, [r2, #4]
 8006956:	440c      	add	r4, r1
 8006958:	6014      	str	r4, [r2, #0]
 800695a:	e7da      	b.n	8006912 <_free_r+0x26>
 800695c:	d902      	bls.n	8006964 <_free_r+0x78>
 800695e:	230c      	movs	r3, #12
 8006960:	6003      	str	r3, [r0, #0]
 8006962:	e7d6      	b.n	8006912 <_free_r+0x26>
 8006964:	6825      	ldr	r5, [r4, #0]
 8006966:	1961      	adds	r1, r4, r5
 8006968:	428b      	cmp	r3, r1
 800696a:	bf04      	itt	eq
 800696c:	6819      	ldreq	r1, [r3, #0]
 800696e:	685b      	ldreq	r3, [r3, #4]
 8006970:	6063      	str	r3, [r4, #4]
 8006972:	bf04      	itt	eq
 8006974:	1949      	addeq	r1, r1, r5
 8006976:	6021      	streq	r1, [r4, #0]
 8006978:	6054      	str	r4, [r2, #4]
 800697a:	e7ca      	b.n	8006912 <_free_r+0x26>
 800697c:	b003      	add	sp, #12
 800697e:	bd30      	pop	{r4, r5, pc}
 8006980:	20004408 	.word	0x20004408

08006984 <sbrk_aligned>:
 8006984:	b570      	push	{r4, r5, r6, lr}
 8006986:	4e0e      	ldr	r6, [pc, #56]	; (80069c0 <sbrk_aligned+0x3c>)
 8006988:	460c      	mov	r4, r1
 800698a:	6831      	ldr	r1, [r6, #0]
 800698c:	4605      	mov	r5, r0
 800698e:	b911      	cbnz	r1, 8006996 <sbrk_aligned+0x12>
 8006990:	f000 fba6 	bl	80070e0 <_sbrk_r>
 8006994:	6030      	str	r0, [r6, #0]
 8006996:	4621      	mov	r1, r4
 8006998:	4628      	mov	r0, r5
 800699a:	f000 fba1 	bl	80070e0 <_sbrk_r>
 800699e:	1c43      	adds	r3, r0, #1
 80069a0:	d00a      	beq.n	80069b8 <sbrk_aligned+0x34>
 80069a2:	1cc4      	adds	r4, r0, #3
 80069a4:	f024 0403 	bic.w	r4, r4, #3
 80069a8:	42a0      	cmp	r0, r4
 80069aa:	d007      	beq.n	80069bc <sbrk_aligned+0x38>
 80069ac:	1a21      	subs	r1, r4, r0
 80069ae:	4628      	mov	r0, r5
 80069b0:	f000 fb96 	bl	80070e0 <_sbrk_r>
 80069b4:	3001      	adds	r0, #1
 80069b6:	d101      	bne.n	80069bc <sbrk_aligned+0x38>
 80069b8:	f04f 34ff 	mov.w	r4, #4294967295
 80069bc:	4620      	mov	r0, r4
 80069be:	bd70      	pop	{r4, r5, r6, pc}
 80069c0:	2000440c 	.word	0x2000440c

080069c4 <_malloc_r>:
 80069c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069c8:	1ccd      	adds	r5, r1, #3
 80069ca:	f025 0503 	bic.w	r5, r5, #3
 80069ce:	3508      	adds	r5, #8
 80069d0:	2d0c      	cmp	r5, #12
 80069d2:	bf38      	it	cc
 80069d4:	250c      	movcc	r5, #12
 80069d6:	2d00      	cmp	r5, #0
 80069d8:	4607      	mov	r7, r0
 80069da:	db01      	blt.n	80069e0 <_malloc_r+0x1c>
 80069dc:	42a9      	cmp	r1, r5
 80069de:	d905      	bls.n	80069ec <_malloc_r+0x28>
 80069e0:	230c      	movs	r3, #12
 80069e2:	603b      	str	r3, [r7, #0]
 80069e4:	2600      	movs	r6, #0
 80069e6:	4630      	mov	r0, r6
 80069e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069ec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006ac0 <_malloc_r+0xfc>
 80069f0:	f000 f868 	bl	8006ac4 <__malloc_lock>
 80069f4:	f8d8 3000 	ldr.w	r3, [r8]
 80069f8:	461c      	mov	r4, r3
 80069fa:	bb5c      	cbnz	r4, 8006a54 <_malloc_r+0x90>
 80069fc:	4629      	mov	r1, r5
 80069fe:	4638      	mov	r0, r7
 8006a00:	f7ff ffc0 	bl	8006984 <sbrk_aligned>
 8006a04:	1c43      	adds	r3, r0, #1
 8006a06:	4604      	mov	r4, r0
 8006a08:	d155      	bne.n	8006ab6 <_malloc_r+0xf2>
 8006a0a:	f8d8 4000 	ldr.w	r4, [r8]
 8006a0e:	4626      	mov	r6, r4
 8006a10:	2e00      	cmp	r6, #0
 8006a12:	d145      	bne.n	8006aa0 <_malloc_r+0xdc>
 8006a14:	2c00      	cmp	r4, #0
 8006a16:	d048      	beq.n	8006aaa <_malloc_r+0xe6>
 8006a18:	6823      	ldr	r3, [r4, #0]
 8006a1a:	4631      	mov	r1, r6
 8006a1c:	4638      	mov	r0, r7
 8006a1e:	eb04 0903 	add.w	r9, r4, r3
 8006a22:	f000 fb5d 	bl	80070e0 <_sbrk_r>
 8006a26:	4581      	cmp	r9, r0
 8006a28:	d13f      	bne.n	8006aaa <_malloc_r+0xe6>
 8006a2a:	6821      	ldr	r1, [r4, #0]
 8006a2c:	1a6d      	subs	r5, r5, r1
 8006a2e:	4629      	mov	r1, r5
 8006a30:	4638      	mov	r0, r7
 8006a32:	f7ff ffa7 	bl	8006984 <sbrk_aligned>
 8006a36:	3001      	adds	r0, #1
 8006a38:	d037      	beq.n	8006aaa <_malloc_r+0xe6>
 8006a3a:	6823      	ldr	r3, [r4, #0]
 8006a3c:	442b      	add	r3, r5
 8006a3e:	6023      	str	r3, [r4, #0]
 8006a40:	f8d8 3000 	ldr.w	r3, [r8]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d038      	beq.n	8006aba <_malloc_r+0xf6>
 8006a48:	685a      	ldr	r2, [r3, #4]
 8006a4a:	42a2      	cmp	r2, r4
 8006a4c:	d12b      	bne.n	8006aa6 <_malloc_r+0xe2>
 8006a4e:	2200      	movs	r2, #0
 8006a50:	605a      	str	r2, [r3, #4]
 8006a52:	e00f      	b.n	8006a74 <_malloc_r+0xb0>
 8006a54:	6822      	ldr	r2, [r4, #0]
 8006a56:	1b52      	subs	r2, r2, r5
 8006a58:	d41f      	bmi.n	8006a9a <_malloc_r+0xd6>
 8006a5a:	2a0b      	cmp	r2, #11
 8006a5c:	d917      	bls.n	8006a8e <_malloc_r+0xca>
 8006a5e:	1961      	adds	r1, r4, r5
 8006a60:	42a3      	cmp	r3, r4
 8006a62:	6025      	str	r5, [r4, #0]
 8006a64:	bf18      	it	ne
 8006a66:	6059      	strne	r1, [r3, #4]
 8006a68:	6863      	ldr	r3, [r4, #4]
 8006a6a:	bf08      	it	eq
 8006a6c:	f8c8 1000 	streq.w	r1, [r8]
 8006a70:	5162      	str	r2, [r4, r5]
 8006a72:	604b      	str	r3, [r1, #4]
 8006a74:	4638      	mov	r0, r7
 8006a76:	f104 060b 	add.w	r6, r4, #11
 8006a7a:	f000 f829 	bl	8006ad0 <__malloc_unlock>
 8006a7e:	f026 0607 	bic.w	r6, r6, #7
 8006a82:	1d23      	adds	r3, r4, #4
 8006a84:	1af2      	subs	r2, r6, r3
 8006a86:	d0ae      	beq.n	80069e6 <_malloc_r+0x22>
 8006a88:	1b9b      	subs	r3, r3, r6
 8006a8a:	50a3      	str	r3, [r4, r2]
 8006a8c:	e7ab      	b.n	80069e6 <_malloc_r+0x22>
 8006a8e:	42a3      	cmp	r3, r4
 8006a90:	6862      	ldr	r2, [r4, #4]
 8006a92:	d1dd      	bne.n	8006a50 <_malloc_r+0x8c>
 8006a94:	f8c8 2000 	str.w	r2, [r8]
 8006a98:	e7ec      	b.n	8006a74 <_malloc_r+0xb0>
 8006a9a:	4623      	mov	r3, r4
 8006a9c:	6864      	ldr	r4, [r4, #4]
 8006a9e:	e7ac      	b.n	80069fa <_malloc_r+0x36>
 8006aa0:	4634      	mov	r4, r6
 8006aa2:	6876      	ldr	r6, [r6, #4]
 8006aa4:	e7b4      	b.n	8006a10 <_malloc_r+0x4c>
 8006aa6:	4613      	mov	r3, r2
 8006aa8:	e7cc      	b.n	8006a44 <_malloc_r+0x80>
 8006aaa:	230c      	movs	r3, #12
 8006aac:	603b      	str	r3, [r7, #0]
 8006aae:	4638      	mov	r0, r7
 8006ab0:	f000 f80e 	bl	8006ad0 <__malloc_unlock>
 8006ab4:	e797      	b.n	80069e6 <_malloc_r+0x22>
 8006ab6:	6025      	str	r5, [r4, #0]
 8006ab8:	e7dc      	b.n	8006a74 <_malloc_r+0xb0>
 8006aba:	605b      	str	r3, [r3, #4]
 8006abc:	deff      	udf	#255	; 0xff
 8006abe:	bf00      	nop
 8006ac0:	20004408 	.word	0x20004408

08006ac4 <__malloc_lock>:
 8006ac4:	4801      	ldr	r0, [pc, #4]	; (8006acc <__malloc_lock+0x8>)
 8006ac6:	f7ff bf01 	b.w	80068cc <__retarget_lock_acquire_recursive>
 8006aca:	bf00      	nop
 8006acc:	20004404 	.word	0x20004404

08006ad0 <__malloc_unlock>:
 8006ad0:	4801      	ldr	r0, [pc, #4]	; (8006ad8 <__malloc_unlock+0x8>)
 8006ad2:	f7ff befc 	b.w	80068ce <__retarget_lock_release_recursive>
 8006ad6:	bf00      	nop
 8006ad8:	20004404 	.word	0x20004404

08006adc <__ssputs_r>:
 8006adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ae0:	688e      	ldr	r6, [r1, #8]
 8006ae2:	461f      	mov	r7, r3
 8006ae4:	42be      	cmp	r6, r7
 8006ae6:	680b      	ldr	r3, [r1, #0]
 8006ae8:	4682      	mov	sl, r0
 8006aea:	460c      	mov	r4, r1
 8006aec:	4690      	mov	r8, r2
 8006aee:	d82c      	bhi.n	8006b4a <__ssputs_r+0x6e>
 8006af0:	898a      	ldrh	r2, [r1, #12]
 8006af2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006af6:	d026      	beq.n	8006b46 <__ssputs_r+0x6a>
 8006af8:	6965      	ldr	r5, [r4, #20]
 8006afa:	6909      	ldr	r1, [r1, #16]
 8006afc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006b00:	eba3 0901 	sub.w	r9, r3, r1
 8006b04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006b08:	1c7b      	adds	r3, r7, #1
 8006b0a:	444b      	add	r3, r9
 8006b0c:	106d      	asrs	r5, r5, #1
 8006b0e:	429d      	cmp	r5, r3
 8006b10:	bf38      	it	cc
 8006b12:	461d      	movcc	r5, r3
 8006b14:	0553      	lsls	r3, r2, #21
 8006b16:	d527      	bpl.n	8006b68 <__ssputs_r+0x8c>
 8006b18:	4629      	mov	r1, r5
 8006b1a:	f7ff ff53 	bl	80069c4 <_malloc_r>
 8006b1e:	4606      	mov	r6, r0
 8006b20:	b360      	cbz	r0, 8006b7c <__ssputs_r+0xa0>
 8006b22:	6921      	ldr	r1, [r4, #16]
 8006b24:	464a      	mov	r2, r9
 8006b26:	f7ff fed3 	bl	80068d0 <memcpy>
 8006b2a:	89a3      	ldrh	r3, [r4, #12]
 8006b2c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006b30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b34:	81a3      	strh	r3, [r4, #12]
 8006b36:	6126      	str	r6, [r4, #16]
 8006b38:	6165      	str	r5, [r4, #20]
 8006b3a:	444e      	add	r6, r9
 8006b3c:	eba5 0509 	sub.w	r5, r5, r9
 8006b40:	6026      	str	r6, [r4, #0]
 8006b42:	60a5      	str	r5, [r4, #8]
 8006b44:	463e      	mov	r6, r7
 8006b46:	42be      	cmp	r6, r7
 8006b48:	d900      	bls.n	8006b4c <__ssputs_r+0x70>
 8006b4a:	463e      	mov	r6, r7
 8006b4c:	6820      	ldr	r0, [r4, #0]
 8006b4e:	4632      	mov	r2, r6
 8006b50:	4641      	mov	r1, r8
 8006b52:	f000 faab 	bl	80070ac <memmove>
 8006b56:	68a3      	ldr	r3, [r4, #8]
 8006b58:	1b9b      	subs	r3, r3, r6
 8006b5a:	60a3      	str	r3, [r4, #8]
 8006b5c:	6823      	ldr	r3, [r4, #0]
 8006b5e:	4433      	add	r3, r6
 8006b60:	6023      	str	r3, [r4, #0]
 8006b62:	2000      	movs	r0, #0
 8006b64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b68:	462a      	mov	r2, r5
 8006b6a:	f000 fac9 	bl	8007100 <_realloc_r>
 8006b6e:	4606      	mov	r6, r0
 8006b70:	2800      	cmp	r0, #0
 8006b72:	d1e0      	bne.n	8006b36 <__ssputs_r+0x5a>
 8006b74:	6921      	ldr	r1, [r4, #16]
 8006b76:	4650      	mov	r0, sl
 8006b78:	f7ff feb8 	bl	80068ec <_free_r>
 8006b7c:	230c      	movs	r3, #12
 8006b7e:	f8ca 3000 	str.w	r3, [sl]
 8006b82:	89a3      	ldrh	r3, [r4, #12]
 8006b84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b88:	81a3      	strh	r3, [r4, #12]
 8006b8a:	f04f 30ff 	mov.w	r0, #4294967295
 8006b8e:	e7e9      	b.n	8006b64 <__ssputs_r+0x88>

08006b90 <_svfiprintf_r>:
 8006b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b94:	4698      	mov	r8, r3
 8006b96:	898b      	ldrh	r3, [r1, #12]
 8006b98:	061b      	lsls	r3, r3, #24
 8006b9a:	b09d      	sub	sp, #116	; 0x74
 8006b9c:	4607      	mov	r7, r0
 8006b9e:	460d      	mov	r5, r1
 8006ba0:	4614      	mov	r4, r2
 8006ba2:	d50e      	bpl.n	8006bc2 <_svfiprintf_r+0x32>
 8006ba4:	690b      	ldr	r3, [r1, #16]
 8006ba6:	b963      	cbnz	r3, 8006bc2 <_svfiprintf_r+0x32>
 8006ba8:	2140      	movs	r1, #64	; 0x40
 8006baa:	f7ff ff0b 	bl	80069c4 <_malloc_r>
 8006bae:	6028      	str	r0, [r5, #0]
 8006bb0:	6128      	str	r0, [r5, #16]
 8006bb2:	b920      	cbnz	r0, 8006bbe <_svfiprintf_r+0x2e>
 8006bb4:	230c      	movs	r3, #12
 8006bb6:	603b      	str	r3, [r7, #0]
 8006bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8006bbc:	e0d0      	b.n	8006d60 <_svfiprintf_r+0x1d0>
 8006bbe:	2340      	movs	r3, #64	; 0x40
 8006bc0:	616b      	str	r3, [r5, #20]
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	9309      	str	r3, [sp, #36]	; 0x24
 8006bc6:	2320      	movs	r3, #32
 8006bc8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006bcc:	f8cd 800c 	str.w	r8, [sp, #12]
 8006bd0:	2330      	movs	r3, #48	; 0x30
 8006bd2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006d78 <_svfiprintf_r+0x1e8>
 8006bd6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006bda:	f04f 0901 	mov.w	r9, #1
 8006bde:	4623      	mov	r3, r4
 8006be0:	469a      	mov	sl, r3
 8006be2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006be6:	b10a      	cbz	r2, 8006bec <_svfiprintf_r+0x5c>
 8006be8:	2a25      	cmp	r2, #37	; 0x25
 8006bea:	d1f9      	bne.n	8006be0 <_svfiprintf_r+0x50>
 8006bec:	ebba 0b04 	subs.w	fp, sl, r4
 8006bf0:	d00b      	beq.n	8006c0a <_svfiprintf_r+0x7a>
 8006bf2:	465b      	mov	r3, fp
 8006bf4:	4622      	mov	r2, r4
 8006bf6:	4629      	mov	r1, r5
 8006bf8:	4638      	mov	r0, r7
 8006bfa:	f7ff ff6f 	bl	8006adc <__ssputs_r>
 8006bfe:	3001      	adds	r0, #1
 8006c00:	f000 80a9 	beq.w	8006d56 <_svfiprintf_r+0x1c6>
 8006c04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c06:	445a      	add	r2, fp
 8006c08:	9209      	str	r2, [sp, #36]	; 0x24
 8006c0a:	f89a 3000 	ldrb.w	r3, [sl]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	f000 80a1 	beq.w	8006d56 <_svfiprintf_r+0x1c6>
 8006c14:	2300      	movs	r3, #0
 8006c16:	f04f 32ff 	mov.w	r2, #4294967295
 8006c1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c1e:	f10a 0a01 	add.w	sl, sl, #1
 8006c22:	9304      	str	r3, [sp, #16]
 8006c24:	9307      	str	r3, [sp, #28]
 8006c26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006c2a:	931a      	str	r3, [sp, #104]	; 0x68
 8006c2c:	4654      	mov	r4, sl
 8006c2e:	2205      	movs	r2, #5
 8006c30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c34:	4850      	ldr	r0, [pc, #320]	; (8006d78 <_svfiprintf_r+0x1e8>)
 8006c36:	f7f9 fad3 	bl	80001e0 <memchr>
 8006c3a:	9a04      	ldr	r2, [sp, #16]
 8006c3c:	b9d8      	cbnz	r0, 8006c76 <_svfiprintf_r+0xe6>
 8006c3e:	06d0      	lsls	r0, r2, #27
 8006c40:	bf44      	itt	mi
 8006c42:	2320      	movmi	r3, #32
 8006c44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c48:	0711      	lsls	r1, r2, #28
 8006c4a:	bf44      	itt	mi
 8006c4c:	232b      	movmi	r3, #43	; 0x2b
 8006c4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c52:	f89a 3000 	ldrb.w	r3, [sl]
 8006c56:	2b2a      	cmp	r3, #42	; 0x2a
 8006c58:	d015      	beq.n	8006c86 <_svfiprintf_r+0xf6>
 8006c5a:	9a07      	ldr	r2, [sp, #28]
 8006c5c:	4654      	mov	r4, sl
 8006c5e:	2000      	movs	r0, #0
 8006c60:	f04f 0c0a 	mov.w	ip, #10
 8006c64:	4621      	mov	r1, r4
 8006c66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c6a:	3b30      	subs	r3, #48	; 0x30
 8006c6c:	2b09      	cmp	r3, #9
 8006c6e:	d94d      	bls.n	8006d0c <_svfiprintf_r+0x17c>
 8006c70:	b1b0      	cbz	r0, 8006ca0 <_svfiprintf_r+0x110>
 8006c72:	9207      	str	r2, [sp, #28]
 8006c74:	e014      	b.n	8006ca0 <_svfiprintf_r+0x110>
 8006c76:	eba0 0308 	sub.w	r3, r0, r8
 8006c7a:	fa09 f303 	lsl.w	r3, r9, r3
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	9304      	str	r3, [sp, #16]
 8006c82:	46a2      	mov	sl, r4
 8006c84:	e7d2      	b.n	8006c2c <_svfiprintf_r+0x9c>
 8006c86:	9b03      	ldr	r3, [sp, #12]
 8006c88:	1d19      	adds	r1, r3, #4
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	9103      	str	r1, [sp, #12]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	bfbb      	ittet	lt
 8006c92:	425b      	neglt	r3, r3
 8006c94:	f042 0202 	orrlt.w	r2, r2, #2
 8006c98:	9307      	strge	r3, [sp, #28]
 8006c9a:	9307      	strlt	r3, [sp, #28]
 8006c9c:	bfb8      	it	lt
 8006c9e:	9204      	strlt	r2, [sp, #16]
 8006ca0:	7823      	ldrb	r3, [r4, #0]
 8006ca2:	2b2e      	cmp	r3, #46	; 0x2e
 8006ca4:	d10c      	bne.n	8006cc0 <_svfiprintf_r+0x130>
 8006ca6:	7863      	ldrb	r3, [r4, #1]
 8006ca8:	2b2a      	cmp	r3, #42	; 0x2a
 8006caa:	d134      	bne.n	8006d16 <_svfiprintf_r+0x186>
 8006cac:	9b03      	ldr	r3, [sp, #12]
 8006cae:	1d1a      	adds	r2, r3, #4
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	9203      	str	r2, [sp, #12]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	bfb8      	it	lt
 8006cb8:	f04f 33ff 	movlt.w	r3, #4294967295
 8006cbc:	3402      	adds	r4, #2
 8006cbe:	9305      	str	r3, [sp, #20]
 8006cc0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006d88 <_svfiprintf_r+0x1f8>
 8006cc4:	7821      	ldrb	r1, [r4, #0]
 8006cc6:	2203      	movs	r2, #3
 8006cc8:	4650      	mov	r0, sl
 8006cca:	f7f9 fa89 	bl	80001e0 <memchr>
 8006cce:	b138      	cbz	r0, 8006ce0 <_svfiprintf_r+0x150>
 8006cd0:	9b04      	ldr	r3, [sp, #16]
 8006cd2:	eba0 000a 	sub.w	r0, r0, sl
 8006cd6:	2240      	movs	r2, #64	; 0x40
 8006cd8:	4082      	lsls	r2, r0
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	3401      	adds	r4, #1
 8006cde:	9304      	str	r3, [sp, #16]
 8006ce0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ce4:	4825      	ldr	r0, [pc, #148]	; (8006d7c <_svfiprintf_r+0x1ec>)
 8006ce6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006cea:	2206      	movs	r2, #6
 8006cec:	f7f9 fa78 	bl	80001e0 <memchr>
 8006cf0:	2800      	cmp	r0, #0
 8006cf2:	d038      	beq.n	8006d66 <_svfiprintf_r+0x1d6>
 8006cf4:	4b22      	ldr	r3, [pc, #136]	; (8006d80 <_svfiprintf_r+0x1f0>)
 8006cf6:	bb1b      	cbnz	r3, 8006d40 <_svfiprintf_r+0x1b0>
 8006cf8:	9b03      	ldr	r3, [sp, #12]
 8006cfa:	3307      	adds	r3, #7
 8006cfc:	f023 0307 	bic.w	r3, r3, #7
 8006d00:	3308      	adds	r3, #8
 8006d02:	9303      	str	r3, [sp, #12]
 8006d04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d06:	4433      	add	r3, r6
 8006d08:	9309      	str	r3, [sp, #36]	; 0x24
 8006d0a:	e768      	b.n	8006bde <_svfiprintf_r+0x4e>
 8006d0c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d10:	460c      	mov	r4, r1
 8006d12:	2001      	movs	r0, #1
 8006d14:	e7a6      	b.n	8006c64 <_svfiprintf_r+0xd4>
 8006d16:	2300      	movs	r3, #0
 8006d18:	3401      	adds	r4, #1
 8006d1a:	9305      	str	r3, [sp, #20]
 8006d1c:	4619      	mov	r1, r3
 8006d1e:	f04f 0c0a 	mov.w	ip, #10
 8006d22:	4620      	mov	r0, r4
 8006d24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d28:	3a30      	subs	r2, #48	; 0x30
 8006d2a:	2a09      	cmp	r2, #9
 8006d2c:	d903      	bls.n	8006d36 <_svfiprintf_r+0x1a6>
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d0c6      	beq.n	8006cc0 <_svfiprintf_r+0x130>
 8006d32:	9105      	str	r1, [sp, #20]
 8006d34:	e7c4      	b.n	8006cc0 <_svfiprintf_r+0x130>
 8006d36:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d3a:	4604      	mov	r4, r0
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	e7f0      	b.n	8006d22 <_svfiprintf_r+0x192>
 8006d40:	ab03      	add	r3, sp, #12
 8006d42:	9300      	str	r3, [sp, #0]
 8006d44:	462a      	mov	r2, r5
 8006d46:	4b0f      	ldr	r3, [pc, #60]	; (8006d84 <_svfiprintf_r+0x1f4>)
 8006d48:	a904      	add	r1, sp, #16
 8006d4a:	4638      	mov	r0, r7
 8006d4c:	f3af 8000 	nop.w
 8006d50:	1c42      	adds	r2, r0, #1
 8006d52:	4606      	mov	r6, r0
 8006d54:	d1d6      	bne.n	8006d04 <_svfiprintf_r+0x174>
 8006d56:	89ab      	ldrh	r3, [r5, #12]
 8006d58:	065b      	lsls	r3, r3, #25
 8006d5a:	f53f af2d 	bmi.w	8006bb8 <_svfiprintf_r+0x28>
 8006d5e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006d60:	b01d      	add	sp, #116	; 0x74
 8006d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d66:	ab03      	add	r3, sp, #12
 8006d68:	9300      	str	r3, [sp, #0]
 8006d6a:	462a      	mov	r2, r5
 8006d6c:	4b05      	ldr	r3, [pc, #20]	; (8006d84 <_svfiprintf_r+0x1f4>)
 8006d6e:	a904      	add	r1, sp, #16
 8006d70:	4638      	mov	r0, r7
 8006d72:	f000 f879 	bl	8006e68 <_printf_i>
 8006d76:	e7eb      	b.n	8006d50 <_svfiprintf_r+0x1c0>
 8006d78:	08007358 	.word	0x08007358
 8006d7c:	08007362 	.word	0x08007362
 8006d80:	00000000 	.word	0x00000000
 8006d84:	08006add 	.word	0x08006add
 8006d88:	0800735e 	.word	0x0800735e

08006d8c <_printf_common>:
 8006d8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d90:	4616      	mov	r6, r2
 8006d92:	4699      	mov	r9, r3
 8006d94:	688a      	ldr	r2, [r1, #8]
 8006d96:	690b      	ldr	r3, [r1, #16]
 8006d98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	bfb8      	it	lt
 8006da0:	4613      	movlt	r3, r2
 8006da2:	6033      	str	r3, [r6, #0]
 8006da4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006da8:	4607      	mov	r7, r0
 8006daa:	460c      	mov	r4, r1
 8006dac:	b10a      	cbz	r2, 8006db2 <_printf_common+0x26>
 8006dae:	3301      	adds	r3, #1
 8006db0:	6033      	str	r3, [r6, #0]
 8006db2:	6823      	ldr	r3, [r4, #0]
 8006db4:	0699      	lsls	r1, r3, #26
 8006db6:	bf42      	ittt	mi
 8006db8:	6833      	ldrmi	r3, [r6, #0]
 8006dba:	3302      	addmi	r3, #2
 8006dbc:	6033      	strmi	r3, [r6, #0]
 8006dbe:	6825      	ldr	r5, [r4, #0]
 8006dc0:	f015 0506 	ands.w	r5, r5, #6
 8006dc4:	d106      	bne.n	8006dd4 <_printf_common+0x48>
 8006dc6:	f104 0a19 	add.w	sl, r4, #25
 8006dca:	68e3      	ldr	r3, [r4, #12]
 8006dcc:	6832      	ldr	r2, [r6, #0]
 8006dce:	1a9b      	subs	r3, r3, r2
 8006dd0:	42ab      	cmp	r3, r5
 8006dd2:	dc26      	bgt.n	8006e22 <_printf_common+0x96>
 8006dd4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006dd8:	1e13      	subs	r3, r2, #0
 8006dda:	6822      	ldr	r2, [r4, #0]
 8006ddc:	bf18      	it	ne
 8006dde:	2301      	movne	r3, #1
 8006de0:	0692      	lsls	r2, r2, #26
 8006de2:	d42b      	bmi.n	8006e3c <_printf_common+0xb0>
 8006de4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006de8:	4649      	mov	r1, r9
 8006dea:	4638      	mov	r0, r7
 8006dec:	47c0      	blx	r8
 8006dee:	3001      	adds	r0, #1
 8006df0:	d01e      	beq.n	8006e30 <_printf_common+0xa4>
 8006df2:	6823      	ldr	r3, [r4, #0]
 8006df4:	6922      	ldr	r2, [r4, #16]
 8006df6:	f003 0306 	and.w	r3, r3, #6
 8006dfa:	2b04      	cmp	r3, #4
 8006dfc:	bf02      	ittt	eq
 8006dfe:	68e5      	ldreq	r5, [r4, #12]
 8006e00:	6833      	ldreq	r3, [r6, #0]
 8006e02:	1aed      	subeq	r5, r5, r3
 8006e04:	68a3      	ldr	r3, [r4, #8]
 8006e06:	bf0c      	ite	eq
 8006e08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e0c:	2500      	movne	r5, #0
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	bfc4      	itt	gt
 8006e12:	1a9b      	subgt	r3, r3, r2
 8006e14:	18ed      	addgt	r5, r5, r3
 8006e16:	2600      	movs	r6, #0
 8006e18:	341a      	adds	r4, #26
 8006e1a:	42b5      	cmp	r5, r6
 8006e1c:	d11a      	bne.n	8006e54 <_printf_common+0xc8>
 8006e1e:	2000      	movs	r0, #0
 8006e20:	e008      	b.n	8006e34 <_printf_common+0xa8>
 8006e22:	2301      	movs	r3, #1
 8006e24:	4652      	mov	r2, sl
 8006e26:	4649      	mov	r1, r9
 8006e28:	4638      	mov	r0, r7
 8006e2a:	47c0      	blx	r8
 8006e2c:	3001      	adds	r0, #1
 8006e2e:	d103      	bne.n	8006e38 <_printf_common+0xac>
 8006e30:	f04f 30ff 	mov.w	r0, #4294967295
 8006e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e38:	3501      	adds	r5, #1
 8006e3a:	e7c6      	b.n	8006dca <_printf_common+0x3e>
 8006e3c:	18e1      	adds	r1, r4, r3
 8006e3e:	1c5a      	adds	r2, r3, #1
 8006e40:	2030      	movs	r0, #48	; 0x30
 8006e42:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006e46:	4422      	add	r2, r4
 8006e48:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006e4c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006e50:	3302      	adds	r3, #2
 8006e52:	e7c7      	b.n	8006de4 <_printf_common+0x58>
 8006e54:	2301      	movs	r3, #1
 8006e56:	4622      	mov	r2, r4
 8006e58:	4649      	mov	r1, r9
 8006e5a:	4638      	mov	r0, r7
 8006e5c:	47c0      	blx	r8
 8006e5e:	3001      	adds	r0, #1
 8006e60:	d0e6      	beq.n	8006e30 <_printf_common+0xa4>
 8006e62:	3601      	adds	r6, #1
 8006e64:	e7d9      	b.n	8006e1a <_printf_common+0x8e>
	...

08006e68 <_printf_i>:
 8006e68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e6c:	7e0f      	ldrb	r7, [r1, #24]
 8006e6e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006e70:	2f78      	cmp	r7, #120	; 0x78
 8006e72:	4691      	mov	r9, r2
 8006e74:	4680      	mov	r8, r0
 8006e76:	460c      	mov	r4, r1
 8006e78:	469a      	mov	sl, r3
 8006e7a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006e7e:	d807      	bhi.n	8006e90 <_printf_i+0x28>
 8006e80:	2f62      	cmp	r7, #98	; 0x62
 8006e82:	d80a      	bhi.n	8006e9a <_printf_i+0x32>
 8006e84:	2f00      	cmp	r7, #0
 8006e86:	f000 80d4 	beq.w	8007032 <_printf_i+0x1ca>
 8006e8a:	2f58      	cmp	r7, #88	; 0x58
 8006e8c:	f000 80c0 	beq.w	8007010 <_printf_i+0x1a8>
 8006e90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006e98:	e03a      	b.n	8006f10 <_printf_i+0xa8>
 8006e9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006e9e:	2b15      	cmp	r3, #21
 8006ea0:	d8f6      	bhi.n	8006e90 <_printf_i+0x28>
 8006ea2:	a101      	add	r1, pc, #4	; (adr r1, 8006ea8 <_printf_i+0x40>)
 8006ea4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006ea8:	08006f01 	.word	0x08006f01
 8006eac:	08006f15 	.word	0x08006f15
 8006eb0:	08006e91 	.word	0x08006e91
 8006eb4:	08006e91 	.word	0x08006e91
 8006eb8:	08006e91 	.word	0x08006e91
 8006ebc:	08006e91 	.word	0x08006e91
 8006ec0:	08006f15 	.word	0x08006f15
 8006ec4:	08006e91 	.word	0x08006e91
 8006ec8:	08006e91 	.word	0x08006e91
 8006ecc:	08006e91 	.word	0x08006e91
 8006ed0:	08006e91 	.word	0x08006e91
 8006ed4:	08007019 	.word	0x08007019
 8006ed8:	08006f41 	.word	0x08006f41
 8006edc:	08006fd3 	.word	0x08006fd3
 8006ee0:	08006e91 	.word	0x08006e91
 8006ee4:	08006e91 	.word	0x08006e91
 8006ee8:	0800703b 	.word	0x0800703b
 8006eec:	08006e91 	.word	0x08006e91
 8006ef0:	08006f41 	.word	0x08006f41
 8006ef4:	08006e91 	.word	0x08006e91
 8006ef8:	08006e91 	.word	0x08006e91
 8006efc:	08006fdb 	.word	0x08006fdb
 8006f00:	682b      	ldr	r3, [r5, #0]
 8006f02:	1d1a      	adds	r2, r3, #4
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	602a      	str	r2, [r5, #0]
 8006f08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006f10:	2301      	movs	r3, #1
 8006f12:	e09f      	b.n	8007054 <_printf_i+0x1ec>
 8006f14:	6820      	ldr	r0, [r4, #0]
 8006f16:	682b      	ldr	r3, [r5, #0]
 8006f18:	0607      	lsls	r7, r0, #24
 8006f1a:	f103 0104 	add.w	r1, r3, #4
 8006f1e:	6029      	str	r1, [r5, #0]
 8006f20:	d501      	bpl.n	8006f26 <_printf_i+0xbe>
 8006f22:	681e      	ldr	r6, [r3, #0]
 8006f24:	e003      	b.n	8006f2e <_printf_i+0xc6>
 8006f26:	0646      	lsls	r6, r0, #25
 8006f28:	d5fb      	bpl.n	8006f22 <_printf_i+0xba>
 8006f2a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006f2e:	2e00      	cmp	r6, #0
 8006f30:	da03      	bge.n	8006f3a <_printf_i+0xd2>
 8006f32:	232d      	movs	r3, #45	; 0x2d
 8006f34:	4276      	negs	r6, r6
 8006f36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f3a:	485a      	ldr	r0, [pc, #360]	; (80070a4 <_printf_i+0x23c>)
 8006f3c:	230a      	movs	r3, #10
 8006f3e:	e012      	b.n	8006f66 <_printf_i+0xfe>
 8006f40:	682b      	ldr	r3, [r5, #0]
 8006f42:	6820      	ldr	r0, [r4, #0]
 8006f44:	1d19      	adds	r1, r3, #4
 8006f46:	6029      	str	r1, [r5, #0]
 8006f48:	0605      	lsls	r5, r0, #24
 8006f4a:	d501      	bpl.n	8006f50 <_printf_i+0xe8>
 8006f4c:	681e      	ldr	r6, [r3, #0]
 8006f4e:	e002      	b.n	8006f56 <_printf_i+0xee>
 8006f50:	0641      	lsls	r1, r0, #25
 8006f52:	d5fb      	bpl.n	8006f4c <_printf_i+0xe4>
 8006f54:	881e      	ldrh	r6, [r3, #0]
 8006f56:	4853      	ldr	r0, [pc, #332]	; (80070a4 <_printf_i+0x23c>)
 8006f58:	2f6f      	cmp	r7, #111	; 0x6f
 8006f5a:	bf0c      	ite	eq
 8006f5c:	2308      	moveq	r3, #8
 8006f5e:	230a      	movne	r3, #10
 8006f60:	2100      	movs	r1, #0
 8006f62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006f66:	6865      	ldr	r5, [r4, #4]
 8006f68:	60a5      	str	r5, [r4, #8]
 8006f6a:	2d00      	cmp	r5, #0
 8006f6c:	bfa2      	ittt	ge
 8006f6e:	6821      	ldrge	r1, [r4, #0]
 8006f70:	f021 0104 	bicge.w	r1, r1, #4
 8006f74:	6021      	strge	r1, [r4, #0]
 8006f76:	b90e      	cbnz	r6, 8006f7c <_printf_i+0x114>
 8006f78:	2d00      	cmp	r5, #0
 8006f7a:	d04b      	beq.n	8007014 <_printf_i+0x1ac>
 8006f7c:	4615      	mov	r5, r2
 8006f7e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006f82:	fb03 6711 	mls	r7, r3, r1, r6
 8006f86:	5dc7      	ldrb	r7, [r0, r7]
 8006f88:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006f8c:	4637      	mov	r7, r6
 8006f8e:	42bb      	cmp	r3, r7
 8006f90:	460e      	mov	r6, r1
 8006f92:	d9f4      	bls.n	8006f7e <_printf_i+0x116>
 8006f94:	2b08      	cmp	r3, #8
 8006f96:	d10b      	bne.n	8006fb0 <_printf_i+0x148>
 8006f98:	6823      	ldr	r3, [r4, #0]
 8006f9a:	07de      	lsls	r6, r3, #31
 8006f9c:	d508      	bpl.n	8006fb0 <_printf_i+0x148>
 8006f9e:	6923      	ldr	r3, [r4, #16]
 8006fa0:	6861      	ldr	r1, [r4, #4]
 8006fa2:	4299      	cmp	r1, r3
 8006fa4:	bfde      	ittt	le
 8006fa6:	2330      	movle	r3, #48	; 0x30
 8006fa8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006fac:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006fb0:	1b52      	subs	r2, r2, r5
 8006fb2:	6122      	str	r2, [r4, #16]
 8006fb4:	f8cd a000 	str.w	sl, [sp]
 8006fb8:	464b      	mov	r3, r9
 8006fba:	aa03      	add	r2, sp, #12
 8006fbc:	4621      	mov	r1, r4
 8006fbe:	4640      	mov	r0, r8
 8006fc0:	f7ff fee4 	bl	8006d8c <_printf_common>
 8006fc4:	3001      	adds	r0, #1
 8006fc6:	d14a      	bne.n	800705e <_printf_i+0x1f6>
 8006fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8006fcc:	b004      	add	sp, #16
 8006fce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fd2:	6823      	ldr	r3, [r4, #0]
 8006fd4:	f043 0320 	orr.w	r3, r3, #32
 8006fd8:	6023      	str	r3, [r4, #0]
 8006fda:	4833      	ldr	r0, [pc, #204]	; (80070a8 <_printf_i+0x240>)
 8006fdc:	2778      	movs	r7, #120	; 0x78
 8006fde:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006fe2:	6823      	ldr	r3, [r4, #0]
 8006fe4:	6829      	ldr	r1, [r5, #0]
 8006fe6:	061f      	lsls	r7, r3, #24
 8006fe8:	f851 6b04 	ldr.w	r6, [r1], #4
 8006fec:	d402      	bmi.n	8006ff4 <_printf_i+0x18c>
 8006fee:	065f      	lsls	r7, r3, #25
 8006ff0:	bf48      	it	mi
 8006ff2:	b2b6      	uxthmi	r6, r6
 8006ff4:	07df      	lsls	r7, r3, #31
 8006ff6:	bf48      	it	mi
 8006ff8:	f043 0320 	orrmi.w	r3, r3, #32
 8006ffc:	6029      	str	r1, [r5, #0]
 8006ffe:	bf48      	it	mi
 8007000:	6023      	strmi	r3, [r4, #0]
 8007002:	b91e      	cbnz	r6, 800700c <_printf_i+0x1a4>
 8007004:	6823      	ldr	r3, [r4, #0]
 8007006:	f023 0320 	bic.w	r3, r3, #32
 800700a:	6023      	str	r3, [r4, #0]
 800700c:	2310      	movs	r3, #16
 800700e:	e7a7      	b.n	8006f60 <_printf_i+0xf8>
 8007010:	4824      	ldr	r0, [pc, #144]	; (80070a4 <_printf_i+0x23c>)
 8007012:	e7e4      	b.n	8006fde <_printf_i+0x176>
 8007014:	4615      	mov	r5, r2
 8007016:	e7bd      	b.n	8006f94 <_printf_i+0x12c>
 8007018:	682b      	ldr	r3, [r5, #0]
 800701a:	6826      	ldr	r6, [r4, #0]
 800701c:	6961      	ldr	r1, [r4, #20]
 800701e:	1d18      	adds	r0, r3, #4
 8007020:	6028      	str	r0, [r5, #0]
 8007022:	0635      	lsls	r5, r6, #24
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	d501      	bpl.n	800702c <_printf_i+0x1c4>
 8007028:	6019      	str	r1, [r3, #0]
 800702a:	e002      	b.n	8007032 <_printf_i+0x1ca>
 800702c:	0670      	lsls	r0, r6, #25
 800702e:	d5fb      	bpl.n	8007028 <_printf_i+0x1c0>
 8007030:	8019      	strh	r1, [r3, #0]
 8007032:	2300      	movs	r3, #0
 8007034:	6123      	str	r3, [r4, #16]
 8007036:	4615      	mov	r5, r2
 8007038:	e7bc      	b.n	8006fb4 <_printf_i+0x14c>
 800703a:	682b      	ldr	r3, [r5, #0]
 800703c:	1d1a      	adds	r2, r3, #4
 800703e:	602a      	str	r2, [r5, #0]
 8007040:	681d      	ldr	r5, [r3, #0]
 8007042:	6862      	ldr	r2, [r4, #4]
 8007044:	2100      	movs	r1, #0
 8007046:	4628      	mov	r0, r5
 8007048:	f7f9 f8ca 	bl	80001e0 <memchr>
 800704c:	b108      	cbz	r0, 8007052 <_printf_i+0x1ea>
 800704e:	1b40      	subs	r0, r0, r5
 8007050:	6060      	str	r0, [r4, #4]
 8007052:	6863      	ldr	r3, [r4, #4]
 8007054:	6123      	str	r3, [r4, #16]
 8007056:	2300      	movs	r3, #0
 8007058:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800705c:	e7aa      	b.n	8006fb4 <_printf_i+0x14c>
 800705e:	6923      	ldr	r3, [r4, #16]
 8007060:	462a      	mov	r2, r5
 8007062:	4649      	mov	r1, r9
 8007064:	4640      	mov	r0, r8
 8007066:	47d0      	blx	sl
 8007068:	3001      	adds	r0, #1
 800706a:	d0ad      	beq.n	8006fc8 <_printf_i+0x160>
 800706c:	6823      	ldr	r3, [r4, #0]
 800706e:	079b      	lsls	r3, r3, #30
 8007070:	d413      	bmi.n	800709a <_printf_i+0x232>
 8007072:	68e0      	ldr	r0, [r4, #12]
 8007074:	9b03      	ldr	r3, [sp, #12]
 8007076:	4298      	cmp	r0, r3
 8007078:	bfb8      	it	lt
 800707a:	4618      	movlt	r0, r3
 800707c:	e7a6      	b.n	8006fcc <_printf_i+0x164>
 800707e:	2301      	movs	r3, #1
 8007080:	4632      	mov	r2, r6
 8007082:	4649      	mov	r1, r9
 8007084:	4640      	mov	r0, r8
 8007086:	47d0      	blx	sl
 8007088:	3001      	adds	r0, #1
 800708a:	d09d      	beq.n	8006fc8 <_printf_i+0x160>
 800708c:	3501      	adds	r5, #1
 800708e:	68e3      	ldr	r3, [r4, #12]
 8007090:	9903      	ldr	r1, [sp, #12]
 8007092:	1a5b      	subs	r3, r3, r1
 8007094:	42ab      	cmp	r3, r5
 8007096:	dcf2      	bgt.n	800707e <_printf_i+0x216>
 8007098:	e7eb      	b.n	8007072 <_printf_i+0x20a>
 800709a:	2500      	movs	r5, #0
 800709c:	f104 0619 	add.w	r6, r4, #25
 80070a0:	e7f5      	b.n	800708e <_printf_i+0x226>
 80070a2:	bf00      	nop
 80070a4:	08007369 	.word	0x08007369
 80070a8:	0800737a 	.word	0x0800737a

080070ac <memmove>:
 80070ac:	4288      	cmp	r0, r1
 80070ae:	b510      	push	{r4, lr}
 80070b0:	eb01 0402 	add.w	r4, r1, r2
 80070b4:	d902      	bls.n	80070bc <memmove+0x10>
 80070b6:	4284      	cmp	r4, r0
 80070b8:	4623      	mov	r3, r4
 80070ba:	d807      	bhi.n	80070cc <memmove+0x20>
 80070bc:	1e43      	subs	r3, r0, #1
 80070be:	42a1      	cmp	r1, r4
 80070c0:	d008      	beq.n	80070d4 <memmove+0x28>
 80070c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80070c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80070ca:	e7f8      	b.n	80070be <memmove+0x12>
 80070cc:	4402      	add	r2, r0
 80070ce:	4601      	mov	r1, r0
 80070d0:	428a      	cmp	r2, r1
 80070d2:	d100      	bne.n	80070d6 <memmove+0x2a>
 80070d4:	bd10      	pop	{r4, pc}
 80070d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80070da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80070de:	e7f7      	b.n	80070d0 <memmove+0x24>

080070e0 <_sbrk_r>:
 80070e0:	b538      	push	{r3, r4, r5, lr}
 80070e2:	4d06      	ldr	r5, [pc, #24]	; (80070fc <_sbrk_r+0x1c>)
 80070e4:	2300      	movs	r3, #0
 80070e6:	4604      	mov	r4, r0
 80070e8:	4608      	mov	r0, r1
 80070ea:	602b      	str	r3, [r5, #0]
 80070ec:	f7fb fc6e 	bl	80029cc <_sbrk>
 80070f0:	1c43      	adds	r3, r0, #1
 80070f2:	d102      	bne.n	80070fa <_sbrk_r+0x1a>
 80070f4:	682b      	ldr	r3, [r5, #0]
 80070f6:	b103      	cbz	r3, 80070fa <_sbrk_r+0x1a>
 80070f8:	6023      	str	r3, [r4, #0]
 80070fa:	bd38      	pop	{r3, r4, r5, pc}
 80070fc:	20004400 	.word	0x20004400

08007100 <_realloc_r>:
 8007100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007104:	4680      	mov	r8, r0
 8007106:	4614      	mov	r4, r2
 8007108:	460e      	mov	r6, r1
 800710a:	b921      	cbnz	r1, 8007116 <_realloc_r+0x16>
 800710c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007110:	4611      	mov	r1, r2
 8007112:	f7ff bc57 	b.w	80069c4 <_malloc_r>
 8007116:	b92a      	cbnz	r2, 8007124 <_realloc_r+0x24>
 8007118:	f7ff fbe8 	bl	80068ec <_free_r>
 800711c:	4625      	mov	r5, r4
 800711e:	4628      	mov	r0, r5
 8007120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007124:	f000 f81b 	bl	800715e <_malloc_usable_size_r>
 8007128:	4284      	cmp	r4, r0
 800712a:	4607      	mov	r7, r0
 800712c:	d802      	bhi.n	8007134 <_realloc_r+0x34>
 800712e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007132:	d812      	bhi.n	800715a <_realloc_r+0x5a>
 8007134:	4621      	mov	r1, r4
 8007136:	4640      	mov	r0, r8
 8007138:	f7ff fc44 	bl	80069c4 <_malloc_r>
 800713c:	4605      	mov	r5, r0
 800713e:	2800      	cmp	r0, #0
 8007140:	d0ed      	beq.n	800711e <_realloc_r+0x1e>
 8007142:	42bc      	cmp	r4, r7
 8007144:	4622      	mov	r2, r4
 8007146:	4631      	mov	r1, r6
 8007148:	bf28      	it	cs
 800714a:	463a      	movcs	r2, r7
 800714c:	f7ff fbc0 	bl	80068d0 <memcpy>
 8007150:	4631      	mov	r1, r6
 8007152:	4640      	mov	r0, r8
 8007154:	f7ff fbca 	bl	80068ec <_free_r>
 8007158:	e7e1      	b.n	800711e <_realloc_r+0x1e>
 800715a:	4635      	mov	r5, r6
 800715c:	e7df      	b.n	800711e <_realloc_r+0x1e>

0800715e <_malloc_usable_size_r>:
 800715e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007162:	1f18      	subs	r0, r3, #4
 8007164:	2b00      	cmp	r3, #0
 8007166:	bfbc      	itt	lt
 8007168:	580b      	ldrlt	r3, [r1, r0]
 800716a:	18c0      	addlt	r0, r0, r3
 800716c:	4770      	bx	lr
	...

08007170 <round>:
 8007170:	ec53 2b10 	vmov	r2, r3, d0
 8007174:	b570      	push	{r4, r5, r6, lr}
 8007176:	f3c3 540a 	ubfx	r4, r3, #20, #11
 800717a:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 800717e:	2813      	cmp	r0, #19
 8007180:	ee10 5a10 	vmov	r5, s0
 8007184:	4619      	mov	r1, r3
 8007186:	dc18      	bgt.n	80071ba <round+0x4a>
 8007188:	2800      	cmp	r0, #0
 800718a:	da09      	bge.n	80071a0 <round+0x30>
 800718c:	3001      	adds	r0, #1
 800718e:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 8007192:	d103      	bne.n	800719c <round+0x2c>
 8007194:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8007198:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800719c:	2300      	movs	r3, #0
 800719e:	e02a      	b.n	80071f6 <round+0x86>
 80071a0:	4c16      	ldr	r4, [pc, #88]	; (80071fc <round+0x8c>)
 80071a2:	4104      	asrs	r4, r0
 80071a4:	ea03 0604 	and.w	r6, r3, r4
 80071a8:	4316      	orrs	r6, r2
 80071aa:	d011      	beq.n	80071d0 <round+0x60>
 80071ac:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80071b0:	4103      	asrs	r3, r0
 80071b2:	440b      	add	r3, r1
 80071b4:	ea23 0104 	bic.w	r1, r3, r4
 80071b8:	e7f0      	b.n	800719c <round+0x2c>
 80071ba:	2833      	cmp	r0, #51	; 0x33
 80071bc:	dd0b      	ble.n	80071d6 <round+0x66>
 80071be:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80071c2:	d105      	bne.n	80071d0 <round+0x60>
 80071c4:	ee10 0a10 	vmov	r0, s0
 80071c8:	f7f9 f860 	bl	800028c <__adddf3>
 80071cc:	4602      	mov	r2, r0
 80071ce:	460b      	mov	r3, r1
 80071d0:	ec43 2b10 	vmov	d0, r2, r3
 80071d4:	bd70      	pop	{r4, r5, r6, pc}
 80071d6:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 80071da:	f04f 34ff 	mov.w	r4, #4294967295
 80071de:	40f4      	lsrs	r4, r6
 80071e0:	4214      	tst	r4, r2
 80071e2:	d0f5      	beq.n	80071d0 <round+0x60>
 80071e4:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 80071e8:	2301      	movs	r3, #1
 80071ea:	4083      	lsls	r3, r0
 80071ec:	195b      	adds	r3, r3, r5
 80071ee:	bf28      	it	cs
 80071f0:	3101      	addcs	r1, #1
 80071f2:	ea23 0304 	bic.w	r3, r3, r4
 80071f6:	461a      	mov	r2, r3
 80071f8:	460b      	mov	r3, r1
 80071fa:	e7e9      	b.n	80071d0 <round+0x60>
 80071fc:	000fffff 	.word	0x000fffff

08007200 <_init>:
 8007200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007202:	bf00      	nop
 8007204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007206:	bc08      	pop	{r3}
 8007208:	469e      	mov	lr, r3
 800720a:	4770      	bx	lr

0800720c <_fini>:
 800720c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800720e:	bf00      	nop
 8007210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007212:	bc08      	pop	{r3}
 8007214:	469e      	mov	lr, r3
 8007216:	4770      	bx	lr
